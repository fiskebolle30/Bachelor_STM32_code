
SPI_reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a30  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006ce0  08006ce0  00016ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006d74  08006d74  00016d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006d7c  08006d7c  00016d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006d80  08006d80  00016d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08006d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000028c  24000060  08006de4  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002ec  08006de4  000202ec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00010c42  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001fe0  00000000  00000000  00030d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000c20  00000000  00000000  00032cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000953  00000000  00000000  00033918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00030b82  00000000  00000000  0003426b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001143a  00000000  00000000  00064ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013c7e0  00000000  00000000  00076227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000376c  00000000  00000000  001b2a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007d  00000000  00000000  001b6174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000060 	.word	0x24000060
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08006cc8 	.word	0x08006cc8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000064 	.word	0x24000064
 80002ec:	08006cc8 	.word	0x08006cc8

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 fe63 	bl	800135c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f84f 	bl	8000738 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800069a:	f000 f8c5 	bl	8000828 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f000 f97f 	bl	80009a0 <MX_GPIO_Init>
  MX_SPI2_Init();
 80006a2:	f000 f8df 	bl	8000864 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80006a6:	f000 f92f 	bl	8000908 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if( HAL_SPI_Receive(&hspi2, &data, 1, 1000) != HAL_OK ) {
 80006aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ae:	2201      	movs	r2, #1
 80006b0:	491a      	ldr	r1, [pc, #104]	; (800071c <main+0x90>)
 80006b2:	481b      	ldr	r0, [pc, #108]	; (8000720 <main+0x94>)
 80006b4:	f004 f8c8 	bl	8004848 <HAL_SPI_Receive>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d018      	beq.n	80006f0 <main+0x64>
		  HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 80006be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c2:	4818      	ldr	r0, [pc, #96]	; (8000724 <main+0x98>)
 80006c4:	f001 f989 	bl	80019da <HAL_GPIO_TogglePin>
		  char error_message[20] = "\r\nbalabanis";
 80006c8:	4a17      	ldr	r2, [pc, #92]	; (8000728 <main+0x9c>)
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80006d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80006d4:	f107 0318 	add.w	r3, r7, #24
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
		  HAL_UART_Transmit(&huart1, &error_message, 11, 1000);
 80006de:	f107 010c 	add.w	r1, r7, #12
 80006e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e6:	220b      	movs	r2, #11
 80006e8:	4810      	ldr	r0, [pc, #64]	; (800072c <main+0xa0>)
 80006ea:	f004 fc2a 	bl	8004f42 <HAL_UART_Transmit>
 80006ee:	e7dc      	b.n	80006aa <main+0x1e>
	  }
	  else {
		  char uart_send_data[10] = "          ";
 80006f0:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <main+0xa4>)
 80006f2:	463b      	mov	r3, r7
 80006f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80006f6:	c303      	stmia	r3!, {r0, r1}
 80006f8:	801a      	strh	r2, [r3, #0]
		  sprintf(uart_send_data, "%#X ", data);
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <main+0x90>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	461a      	mov	r2, r3
 8000700:	463b      	mov	r3, r7
 8000702:	490c      	ldr	r1, [pc, #48]	; (8000734 <main+0xa8>)
 8000704:	4618      	mov	r0, r3
 8000706:	f005 fe3b 	bl	8006380 <siprintf>
		  HAL_UART_Transmit(&huart1, &uart_send_data, 7, 1000);
 800070a:	4639      	mov	r1, r7
 800070c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000710:	2207      	movs	r2, #7
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <main+0xa0>)
 8000714:	f004 fc15 	bl	8004f42 <HAL_UART_Transmit>
	  if( HAL_SPI_Receive(&hspi2, &data, 1, 1000) != HAL_OK ) {
 8000718:	e7c7      	b.n	80006aa <main+0x1e>
 800071a:	bf00      	nop
 800071c:	24000198 	.word	0x24000198
 8000720:	2400007c 	.word	0x2400007c
 8000724:	58021800 	.word	0x58021800
 8000728:	08006ce8 	.word	0x08006ce8
 800072c:	24000104 	.word	0x24000104
 8000730:	08006cfc 	.word	0x08006cfc
 8000734:	08006ce0 	.word	0x08006ce0

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b09c      	sub	sp, #112	; 0x70
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000742:	224c      	movs	r2, #76	; 0x4c
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f005 fe3a 	bl	80063c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2220      	movs	r2, #32
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f005 fe34 	bl	80063c0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000758:	4b31      	ldr	r3, [pc, #196]	; (8000820 <SystemClock_Config+0xe8>)
 800075a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800075e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000762:	2004      	movs	r0, #4
 8000764:	f001 f954 	bl	8001a10 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000768:	2300      	movs	r3, #0
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <SystemClock_Config+0xec>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a2c      	ldr	r2, [pc, #176]	; (8000824 <SystemClock_Config+0xec>)
 8000772:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b2a      	ldr	r3, [pc, #168]	; (8000824 <SystemClock_Config+0xec>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000784:	bf00      	nop
 8000786:	4b27      	ldr	r3, [pc, #156]	; (8000824 <SystemClock_Config+0xec>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800078e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000792:	d1f8      	bne.n	8000786 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000794:	2303      	movs	r3, #3
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800079e:	2301      	movs	r3, #1
 80007a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80007a2:	2340      	movs	r3, #64	; 0x40
 80007a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80007ae:	230c      	movs	r3, #12
 80007b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 200;
 80007b2:	23c8      	movs	r3, #200	; 0xc8
 80007b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007ba:	2303      	movs	r3, #3
 80007bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80007be:	2304      	movs	r3, #4
 80007c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80007c2:	2304      	movs	r3, #4
 80007c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 f976 	bl	8001ac4 <HAL_RCC_OscConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007de:	f000 fba1 	bl	8000f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e2:	233f      	movs	r3, #63	; 0x3f
 80007e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e6:	2303      	movs	r3, #3
 80007e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007f2:	2340      	movs	r3, #64	; 0x40
 80007f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007f6:	2340      	movs	r3, #64	; 0x40
 80007f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000800:	2340      	movs	r3, #64	; 0x40
 8000802:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2104      	movs	r1, #4
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fd8d 	bl	8002328 <HAL_RCC_ClockConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000814:	f000 fb86 	bl	8000f24 <Error_Handler>
  }
}
 8000818:	bf00      	nop
 800081a:	3770      	adds	r7, #112	; 0x70
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	58024400 	.word	0x58024400
 8000824:	58024800 	.word	0x58024800

08000828 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b0b0      	sub	sp, #192	; 0xc0
 800082c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800082e:	463b      	mov	r3, r7
 8000830:	22c0      	movs	r2, #192	; 0xc0
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f005 fdc3 	bl	80063c0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800083a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000846:	2300      	movs	r3, #0
 8000848:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	4618      	mov	r0, r3
 800084e:	f002 f8f7 	bl	8002a40 <HAL_RCCEx_PeriphCLKConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000858:	f000 fb64 	bl	8000f24 <Error_Handler>
  }
}
 800085c:	bf00      	nop
 800085e:	37c0      	adds	r7, #192	; 0xc0
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000868:	4b25      	ldr	r3, [pc, #148]	; (8000900 <MX_SPI2_Init+0x9c>)
 800086a:	4a26      	ldr	r2, [pc, #152]	; (8000904 <MX_SPI2_Init+0xa0>)
 800086c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800086e:	4b24      	ldr	r3, [pc, #144]	; (8000900 <MX_SPI2_Init+0x9c>)
 8000870:	2200      	movs	r2, #0
 8000872:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <MX_SPI2_Init+0x9c>)
 8000876:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800087a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800087c:	4b20      	ldr	r3, [pc, #128]	; (8000900 <MX_SPI2_Init+0x9c>)
 800087e:	2207      	movs	r2, #7
 8000880:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_SPI2_Init+0x9c>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <MX_SPI2_Init+0x9c>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_SPI2_Init+0x9c>)
 8000890:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000894:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_SPI2_Init+0x9c>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_SPI2_Init+0x9c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_SPI2_Init+0x9c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_SPI2_Init+0x9c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_SPI2_Init+0x9c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_SPI2_Init+0x9c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_SPI2_Init+0x9c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_SPI2_Init+0x9c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_SPI2_Init+0x9c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_SPI2_Init+0x9c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_SPI2_Init+0x9c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_SPI2_Init+0x9c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_SPI2_Init+0x9c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_SPI2_Init+0x9c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_SPI2_Init+0x9c>)
 80008ec:	f003 fe88 	bl	8004600 <HAL_SPI_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_SPI2_Init+0x96>
  {
    Error_Handler();
 80008f6:	f000 fb15 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2400007c 	.word	0x2400007c
 8000904:	40003800 	.word	0x40003800

08000908 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <MX_USART1_UART_Init+0x90>)
 800090e:	4a23      	ldr	r2, [pc, #140]	; (800099c <MX_USART1_UART_Init+0x94>)
 8000910:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_USART1_UART_Init+0x90>)
 8000914:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000918:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_USART1_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_USART1_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_USART1_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_USART1_UART_Init+0x90>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_USART1_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_USART1_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_USART1_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_USART1_UART_Init+0x90>)
 8000946:	2200      	movs	r2, #0
 8000948:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_USART1_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000950:	4811      	ldr	r0, [pc, #68]	; (8000998 <MX_USART1_UART_Init+0x90>)
 8000952:	f004 faa6 	bl	8004ea2 <HAL_UART_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800095c:	f000 fae2 	bl	8000f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000960:	2100      	movs	r1, #0
 8000962:	480d      	ldr	r0, [pc, #52]	; (8000998 <MX_USART1_UART_Init+0x90>)
 8000964:	f005 fc41 	bl	80061ea <HAL_UARTEx_SetTxFifoThreshold>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800096e:	f000 fad9 	bl	8000f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000972:	2100      	movs	r1, #0
 8000974:	4808      	ldr	r0, [pc, #32]	; (8000998 <MX_USART1_UART_Init+0x90>)
 8000976:	f005 fc76 	bl	8006266 <HAL_UARTEx_SetRxFifoThreshold>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000980:	f000 fad0 	bl	8000f24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_USART1_UART_Init+0x90>)
 8000986:	f005 fbf7 	bl	8006178 <HAL_UARTEx_DisableFifoMode>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000990:	f000 fac8 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	24000104 	.word	0x24000104
 800099c:	40011000 	.word	0x40011000

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b090      	sub	sp, #64	; 0x40
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009b6:	4bbf      	ldr	r3, [pc, #764]	; (8000cb4 <MX_GPIO_Init+0x314>)
 80009b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009bc:	4abd      	ldr	r2, [pc, #756]	; (8000cb4 <MX_GPIO_Init+0x314>)
 80009be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009c6:	4bbb      	ldr	r3, [pc, #748]	; (8000cb4 <MX_GPIO_Init+0x314>)
 80009c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80009d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d4:	4bb7      	ldr	r3, [pc, #732]	; (8000cb4 <MX_GPIO_Init+0x314>)
 80009d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009da:	4ab6      	ldr	r2, [pc, #728]	; (8000cb4 <MX_GPIO_Init+0x314>)
 80009dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009e4:	4bb3      	ldr	r3, [pc, #716]	; (8000cb4 <MX_GPIO_Init+0x314>)
 80009e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
 80009f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80009f2:	4bb0      	ldr	r3, [pc, #704]	; (8000cb4 <MX_GPIO_Init+0x314>)
 80009f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009f8:	4aae      	ldr	r2, [pc, #696]	; (8000cb4 <MX_GPIO_Init+0x314>)
 80009fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a02:	4bac      	ldr	r3, [pc, #688]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000a04:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a0c:	623b      	str	r3, [r7, #32]
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a10:	4ba8      	ldr	r3, [pc, #672]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000a12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a16:	4aa7      	ldr	r2, [pc, #668]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a20:	4ba4      	ldr	r3, [pc, #656]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000a22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	61fb      	str	r3, [r7, #28]
 8000a2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4ba1      	ldr	r3, [pc, #644]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000a30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a34:	4a9f      	ldr	r2, [pc, #636]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a3e:	4b9d      	ldr	r3, [pc, #628]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000a40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	61bb      	str	r3, [r7, #24]
 8000a4a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a4c:	4b99      	ldr	r3, [pc, #612]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000a4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a52:	4a98      	ldr	r2, [pc, #608]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000a54:	f043 0310 	orr.w	r3, r3, #16
 8000a58:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a5c:	4b95      	ldr	r3, [pc, #596]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000a5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b92      	ldr	r3, [pc, #584]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000a6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a70:	4a90      	ldr	r2, [pc, #576]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000a72:	f043 0302 	orr.w	r3, r3, #2
 8000a76:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a7a:	4b8e      	ldr	r3, [pc, #568]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000a7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a80:	f003 0302 	and.w	r3, r3, #2
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a88:	4b8a      	ldr	r3, [pc, #552]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000a8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a8e:	4a89      	ldr	r2, [pc, #548]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000a90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a94:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a98:	4b86      	ldr	r3, [pc, #536]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000a9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b83      	ldr	r3, [pc, #524]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000aa8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aac:	4a81      	ldr	r2, [pc, #516]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ab6:	4b7f      	ldr	r3, [pc, #508]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000ab8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ac4:	4b7b      	ldr	r3, [pc, #492]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000ac6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aca:	4a7a      	ldr	r2, [pc, #488]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000acc:	f043 0320 	orr.w	r3, r3, #32
 8000ad0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ad4:	4b77      	ldr	r3, [pc, #476]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000ad6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ada:	f003 0320 	and.w	r3, r3, #32
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae2:	4b74      	ldr	r3, [pc, #464]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000ae4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae8:	4a72      	ldr	r2, [pc, #456]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000af2:	4b70      	ldr	r3, [pc, #448]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000af4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	210e      	movs	r1, #14
 8000b04:	486c      	ldr	r0, [pc, #432]	; (8000cb8 <MX_GPIO_Init+0x318>)
 8000b06:	f000 ff4f 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f640 0104 	movw	r1, #2052	; 0x804
 8000b10:	486a      	ldr	r0, [pc, #424]	; (8000cbc <MX_GPIO_Init+0x31c>)
 8000b12:	f000 ff49 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b1c:	4868      	ldr	r0, [pc, #416]	; (8000cc0 <MX_GPIO_Init+0x320>)
 8000b1e:	f000 ff43 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2108      	movs	r1, #8
 8000b26:	4865      	ldr	r0, [pc, #404]	; (8000cbc <MX_GPIO_Init+0x31c>)
 8000b28:	f000 ff3e 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2106      	movs	r1, #6
 8000b30:	4863      	ldr	r0, [pc, #396]	; (8000cc0 <MX_GPIO_Init+0x320>)
 8000b32:	f000 ff39 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_GPIO_Pin WIFI_DATRDY_Pin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 8000b36:	2330      	movs	r3, #48	; 0x30
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b48:	4619      	mov	r1, r3
 8000b4a:	485b      	ldr	r0, [pc, #364]	; (8000cb8 <MX_GPIO_Init+0x318>)
 8000b4c:	f000 fd7c 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNCAS_Pin SDCLK_Pin A15_Pin A14_Pin
                           A11_Pin A10_Pin */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000b50:	f248 1333 	movw	r3, #33075	; 0x8133
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b62:	230c      	movs	r3, #12
 8000b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4853      	ldr	r0, [pc, #332]	; (8000cbc <MX_GPIO_Init+0x31c>)
 8000b6e:	f000 fd6b 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B6_Pin LCD_B7_Pin LCD_B4_Pin LCD_B5_Pin
                           LCD_DE_Pin LCD_G7_Pin LCD_G6_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 8000b72:	23ff      	movs	r3, #255	; 0xff
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b82:	230e      	movs	r3, #14
 8000b84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	484d      	ldr	r0, [pc, #308]	; (8000cc4 <MX_GPIO_Init+0x324>)
 8000b8e:	f000 fd5b 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S6_SDO_Pin I2S6_SDI_Pin I2S6_CK_Pin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 8000b92:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000ba4:	2305      	movs	r3, #5
 8000ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ba8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bac:	4619      	mov	r1, r3
 8000bae:	4843      	ldr	r0, [pc, #268]	; (8000cbc <MX_GPIO_Init+0x31c>)
 8000bb0:	f000 fd4a 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO6_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8000bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000bc6:	2309      	movs	r3, #9
 8000bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bce:	4619      	mov	r1, r3
 8000bd0:	483a      	ldr	r0, [pc, #232]	; (8000cbc <MX_GPIO_Init+0x31c>)
 8000bd2:	f000 fd39 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO7_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000be6:	230a      	movs	r3, #10
 8000be8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4835      	ldr	r0, [pc, #212]	; (8000cc8 <MX_GPIO_Init+0x328>)
 8000bf2:	f000 fd29 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D2_Pin D0_Pin D1_Pin
                           D13_Pin D15_Pin D14_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8000bf6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c08:	230c      	movs	r3, #12
 8000c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c10:	4619      	mov	r1, r3
 8000c12:	482d      	ldr	r0, [pc, #180]	; (8000cc8 <MX_GPIO_Init+0x328>)
 8000c14:	f000 fd18 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_CK_Pin SDIO1_D3_Pin SDIO1_D1_Pin
                           SDIO1_D0_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D1_Pin
 8000c18:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c2a:	230c      	movs	r3, #12
 8000c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c32:	4619      	mov	r1, r3
 8000c34:	4825      	ldr	r0, [pc, #148]	; (8000ccc <MX_GPIO_Init+0x32c>)
 8000c36:	f000 fd07 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_BOOT_Pin WIFI_WKUP_Pin WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8000c3a:	230e      	movs	r3, #14
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4819      	ldr	r0, [pc, #100]	; (8000cb8 <MX_GPIO_Init+0x318>)
 8000c52:	f000 fcf9 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL0_Pin FMC_NBL1_Pin D9_Pin D4_Pin
                           D10_Pin D11_Pin D7_Pin D6_Pin
                           D12_Pin D5_Pin D8_Pin */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000c56:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c68:	230c      	movs	r3, #12
 8000c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c70:	4619      	mov	r1, r3
 8000c72:	4817      	ldr	r0, [pc, #92]	; (8000cd0 <MX_GPIO_Init+0x330>)
 8000c74:	f000 fce8 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED1_Pin AUDIO_NRST_Pin USER_LED2_Pin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8000c78:	f640 030c 	movw	r3, #2060	; 0x80c
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480a      	ldr	r0, [pc, #40]	; (8000cbc <MX_GPIO_Init+0x31c>)
 8000c92:	f000 fcd9 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B3_Pin LCD_B2_Pin LCD_B1_Pin LCD_B0_Pin
                           LCD_G4_Pin LCD_G3_Pin LCD_G2_Pin LCD_G1_Pin
                           LCD_R7_Pin LCD_G0_Pin LCD_R1_Pin LCD_R6_Pin
                           LCD_R2_Pin LCD_R5_Pin LCD_R3_Pin LCD_R4_Pin */
  GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 8000c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ca8:	230e      	movs	r3, #14
 8000caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000cac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb0:	e010      	b.n	8000cd4 <MX_GPIO_Init+0x334>
 8000cb2:	bf00      	nop
 8000cb4:	58024400 	.word	0x58024400
 8000cb8:	58022000 	.word	0x58022000
 8000cbc:	58021800 	.word	0x58021800
 8000cc0:	58020000 	.word	0x58020000
 8000cc4:	58022800 	.word	0x58022800
 8000cc8:	58020c00 	.word	0x58020c00
 8000ccc:	58020800 	.word	0x58020800
 8000cd0:	58021000 	.word	0x58021000
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	488a      	ldr	r0, [pc, #552]	; (8000f00 <MX_GPIO_Init+0x560>)
 8000cd8:	f000 fcb6 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000cdc:	2304      	movs	r3, #4
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000cec:	230c      	movs	r3, #12
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4883      	ldr	r0, [pc, #524]	; (8000f04 <MX_GPIO_Init+0x564>)
 8000cf8:	f000 fca6 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d10:	4619      	mov	r1, r3
 8000d12:	487d      	ldr	r0, [pc, #500]	; (8000f08 <MX_GPIO_Init+0x568>)
 8000d14:	f000 fc98 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LCD_BL_CTRL_Pin LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 8000d18:	f640 0306 	movw	r3, #2054	; 0x806
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4876      	ldr	r0, [pc, #472]	; (8000f0c <MX_GPIO_Init+0x56c>)
 8000d32:	f000 fc89 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKEUP_Pin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8000d36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4870      	ldr	r0, [pc, #448]	; (8000f10 <MX_GPIO_Init+0x570>)
 8000d4e:	f000 fc7b 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin A0_Pin A2_Pin A4_Pin
                           A3_Pin A5_Pin A7_Pin SDNRAS_Pin
                           A9_Pin A8_Pin A6_Pin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000d52:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d64:	230c      	movs	r3, #12
 8000d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4869      	ldr	r0, [pc, #420]	; (8000f14 <MX_GPIO_Init+0x574>)
 8000d70:	f000 fc6a 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000d86:	2300      	movs	r3, #0
 8000d88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	485e      	ldr	r0, [pc, #376]	; (8000f0c <MX_GPIO_Init+0x56c>)
 8000d92:	f000 fc59 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8000d96:	2340      	movs	r3, #64	; 0x40
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000da6:	230a      	movs	r3, #10
 8000da8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dae:	4619      	mov	r1, r3
 8000db0:	4859      	ldr	r0, [pc, #356]	; (8000f18 <MX_GPIO_Init+0x578>)
 8000db2:	f000 fc49 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_CLK_Pin LCD_VSYNC_Pin LCD_R0_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 8000db6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dc8:	230e      	movs	r3, #14
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	484d      	ldr	r0, [pc, #308]	; (8000f08 <MX_GPIO_Init+0x568>)
 8000dd4:	f000 fc38 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO3_Pin OCSPI1_IO2_Pin OCSPI1_IO1_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO3_Pin|OCSPI1_IO2_Pin|OCSPI1_IO1_Pin;
 8000dd8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000dea:	230a      	movs	r3, #10
 8000dec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df2:	4619      	mov	r1, r3
 8000df4:	4847      	ldr	r0, [pc, #284]	; (8000f14 <MX_GPIO_Init+0x574>)
 8000df6:	f000 fc27 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C4_SDA_Pin I2C4_SCL_Pin */
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8000dfa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e00:	2312      	movs	r3, #18
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e14:	4619      	mov	r1, r3
 8000e16:	483b      	ldr	r0, [pc, #236]	; (8000f04 <MX_GPIO_Init+0x564>)
 8000e18:	f000 fc16 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO0_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO0_Pin;
 8000e1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000e2e:	2309      	movs	r3, #9
 8000e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO0_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e36:	4619      	mov	r1, r3
 8000e38:	4832      	ldr	r0, [pc, #200]	; (8000f04 <MX_GPIO_Init+0x564>)
 8000e3a:	f000 fc05 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO4_Pin OCSPI1_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 8000e3e:	2322      	movs	r3, #34	; 0x22
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000e4e:	230a      	movs	r3, #10
 8000e50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e56:	4619      	mov	r1, r3
 8000e58:	482d      	ldr	r0, [pc, #180]	; (8000f10 <MX_GPIO_Init+0x570>)
 8000e5a:	f000 fbf5 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e5e:	2304      	movs	r3, #4
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e70:	4619      	mov	r1, r3
 8000e72:	482a      	ldr	r0, [pc, #168]	; (8000f1c <MX_GPIO_Init+0x57c>)
 8000e74:	f000 fbe8 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNE1_Pin SDNWE_Pin SDCKE1_Pin */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000e78:	23e0      	movs	r3, #224	; 0xe0
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e88:	230c      	movs	r3, #12
 8000e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e90:	4619      	mov	r1, r3
 8000e92:	4822      	ldr	r0, [pc, #136]	; (8000f1c <MX_GPIO_Init+0x57c>)
 8000e94:	f000 fbd8 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO5_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 8000e98:	2308      	movs	r3, #8
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000ea8:	2309      	movs	r3, #9
 8000eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	481a      	ldr	r0, [pc, #104]	; (8000f1c <MX_GPIO_Init+0x57c>)
 8000eb4:	f000 fbc8 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S6_WS_Pin I2S6_MCK_Pin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 8000eb8:	2309      	movs	r3, #9
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000ec8:	2305      	movs	r3, #5
 8000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480e      	ldr	r0, [pc, #56]	; (8000f0c <MX_GPIO_Init+0x56c>)
 8000ed4:	f000 fbb8 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_CLK_Pin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8000ed8:	2304      	movs	r3, #4
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000ee8:	2309      	movs	r3, #9
 8000eea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480b      	ldr	r0, [pc, #44]	; (8000f20 <MX_GPIO_Init+0x580>)
 8000ef4:	f000 fba8 	bl	8001648 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ef8:	bf00      	nop
 8000efa:	3740      	adds	r7, #64	; 0x40
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	58022400 	.word	0x58022400
 8000f04:	58020c00 	.word	0x58020c00
 8000f08:	58022000 	.word	0x58022000
 8000f0c:	58020000 	.word	0x58020000
 8000f10:	58020800 	.word	0x58020800
 8000f14:	58021400 	.word	0x58021400
 8000f18:	58021800 	.word	0x58021800
 8000f1c:	58021c00 	.word	0x58021c00
 8000f20:	58020400 	.word	0x58020400

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <Error_Handler+0x8>
	...

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_MspInit+0x30>)
 8000f38:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f3c:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <HAL_MspInit+0x30>)
 8000f3e:	f043 0302 	orr.w	r3, r3, #2
 8000f42:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_MspInit+0x30>)
 8000f48:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	58024400 	.word	0x58024400

08000f64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b0bc      	sub	sp, #240	; 0xf0
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f7c:	f107 0318 	add.w	r3, r7, #24
 8000f80:	22c0      	movs	r2, #192	; 0xc0
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f005 fa1b 	bl	80063c0 <memset>
  if(hspi->Instance==SPI2)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a39      	ldr	r2, [pc, #228]	; (8001074 <HAL_SPI_MspInit+0x110>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d16b      	bne.n	800106c <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000f94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8000fa0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fa4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa6:	f107 0318 	add.w	r3, r7, #24
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 fd48 	bl	8002a40 <HAL_RCCEx_PeriphCLKConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000fb6:	f7ff ffb5 	bl	8000f24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fba:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <HAL_SPI_MspInit+0x114>)
 8000fbc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fc0:	4a2d      	ldr	r2, [pc, #180]	; (8001078 <HAL_SPI_MspInit+0x114>)
 8000fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000fca:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <HAL_SPI_MspInit+0x114>)
 8000fcc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd8:	4b27      	ldr	r3, [pc, #156]	; (8001078 <HAL_SPI_MspInit+0x114>)
 8000fda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fde:	4a26      	ldr	r2, [pc, #152]	; (8001078 <HAL_SPI_MspInit+0x114>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fe8:	4b23      	ldr	r3, [pc, #140]	; (8001078 <HAL_SPI_MspInit+0x114>)
 8000fea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	4b20      	ldr	r3, [pc, #128]	; (8001078 <HAL_SPI_MspInit+0x114>)
 8000ff8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ffc:	4a1e      	ldr	r2, [pc, #120]	; (8001078 <HAL_SPI_MspInit+0x114>)
 8000ffe:	f043 0302 	orr.w	r3, r3, #2
 8001002:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <HAL_SPI_MspInit+0x114>)
 8001008:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA12     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8001014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001018:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800102e:	2305      	movs	r3, #5
 8001030:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001038:	4619      	mov	r1, r3
 800103a:	4810      	ldr	r0, [pc, #64]	; (800107c <HAL_SPI_MspInit+0x118>)
 800103c:	f000 fb04 	bl	8001648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8001040:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001044:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800105a:	2305      	movs	r3, #5
 800105c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001060:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <HAL_SPI_MspInit+0x11c>)
 8001068:	f000 faee 	bl	8001648 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	37f0      	adds	r7, #240	; 0xf0
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40003800 	.word	0x40003800
 8001078:	58024400 	.word	0x58024400
 800107c:	58020000 	.word	0x58020000
 8001080:	58020400 	.word	0x58020400

08001084 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b0ba      	sub	sp, #232	; 0xe8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	22c0      	movs	r2, #192	; 0xc0
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f005 f98b 	bl	80063c0 <memset>
  if(huart->Instance==USART1)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a27      	ldr	r2, [pc, #156]	; (800114c <HAL_UART_MspInit+0xc8>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d146      	bne.n	8001142 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010b4:	f04f 0201 	mov.w	r2, #1
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fcb8 	bl	8002a40 <HAL_RCCEx_PeriphCLKConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010d6:	f7ff ff25 	bl	8000f24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_UART_MspInit+0xcc>)
 80010dc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80010e0:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <HAL_UART_MspInit+0xcc>)
 80010e2:	f043 0310 	orr.w	r3, r3, #16
 80010e6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_UART_MspInit+0xcc>)
 80010ec:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_UART_MspInit+0xcc>)
 80010fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010fe:	4a14      	ldr	r2, [pc, #80]	; (8001150 <HAL_UART_MspInit+0xcc>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_UART_MspInit+0xcc>)
 800110a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001116:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800111a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001130:	2307      	movs	r3, #7
 8001132:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <HAL_UART_MspInit+0xd0>)
 800113e:	f000 fa83 	bl	8001648 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001142:	bf00      	nop
 8001144:	37e8      	adds	r7, #232	; 0xe8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40011000 	.word	0x40011000
 8001150:	58024400 	.word	0x58024400
 8001154:	58020000 	.word	0x58020000

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 f94c 	bl	8001440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b4:	4a14      	ldr	r2, [pc, #80]	; (8001208 <_sbrk+0x5c>)
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <_sbrk+0x60>)
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d102      	bne.n	80011ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <_sbrk+0x64>)
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <_sbrk+0x68>)
 80011cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d207      	bcs.n	80011ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011dc:	f005 f8f8 	bl	80063d0 <__errno>
 80011e0:	4603      	mov	r3, r0
 80011e2:	220c      	movs	r2, #12
 80011e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ea:	e009      	b.n	8001200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <_sbrk+0x64>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <_sbrk+0x64>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <_sbrk+0x64>)
 80011fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	24100000 	.word	0x24100000
 800120c:	00000400 	.word	0x00000400
 8001210:	2400019c 	.word	0x2400019c
 8001214:	240002f0 	.word	0x240002f0

08001218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800121c:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <SystemInit+0xd0>)
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001222:	4a31      	ldr	r2, [pc, #196]	; (80012e8 <SystemInit+0xd0>)
 8001224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800122c:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <SystemInit+0xd4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 030f 	and.w	r3, r3, #15
 8001234:	2b02      	cmp	r3, #2
 8001236:	d807      	bhi.n	8001248 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001238:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <SystemInit+0xd4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f023 030f 	bic.w	r3, r3, #15
 8001240:	4a2a      	ldr	r2, [pc, #168]	; (80012ec <SystemInit+0xd4>)
 8001242:	f043 0303 	orr.w	r3, r3, #3
 8001246:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001248:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <SystemInit+0xd8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a28      	ldr	r2, [pc, #160]	; (80012f0 <SystemInit+0xd8>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001254:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <SystemInit+0xd8>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800125a:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <SystemInit+0xd8>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4924      	ldr	r1, [pc, #144]	; (80012f0 <SystemInit+0xd8>)
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <SystemInit+0xdc>)
 8001262:	4013      	ands	r3, r2
 8001264:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001266:	4b21      	ldr	r3, [pc, #132]	; (80012ec <SystemInit+0xd4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b00      	cmp	r3, #0
 8001270:	d007      	beq.n	8001282 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <SystemInit+0xd4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 030f 	bic.w	r3, r3, #15
 800127a:	4a1c      	ldr	r2, [pc, #112]	; (80012ec <SystemInit+0xd4>)
 800127c:	f043 0303 	orr.w	r3, r3, #3
 8001280:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <SystemInit+0xd8>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <SystemInit+0xd8>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <SystemInit+0xd8>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <SystemInit+0xd8>)
 8001296:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <SystemInit+0xe0>)
 8001298:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <SystemInit+0xd8>)
 800129c:	4a17      	ldr	r2, [pc, #92]	; (80012fc <SystemInit+0xe4>)
 800129e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <SystemInit+0xd8>)
 80012a2:	4a17      	ldr	r2, [pc, #92]	; (8001300 <SystemInit+0xe8>)
 80012a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <SystemInit+0xd8>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <SystemInit+0xd8>)
 80012ae:	4a14      	ldr	r2, [pc, #80]	; (8001300 <SystemInit+0xe8>)
 80012b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <SystemInit+0xd8>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <SystemInit+0xd8>)
 80012ba:	4a11      	ldr	r2, [pc, #68]	; (8001300 <SystemInit+0xe8>)
 80012bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <SystemInit+0xd8>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <SystemInit+0xd8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a09      	ldr	r2, [pc, #36]	; (80012f0 <SystemInit+0xd8>)
 80012ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <SystemInit+0xd8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <SystemInit+0xec>)
 80012d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80012dc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00
 80012ec:	52002000 	.word	0x52002000
 80012f0:	58024400 	.word	0x58024400
 80012f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80012f8:	02020200 	.word	0x02020200
 80012fc:	01ff0000 	.word	0x01ff0000
 8001300:	01010280 	.word	0x01010280
 8001304:	52004000 	.word	0x52004000

08001308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001340 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800130c:	f7ff ff84 	bl	8001218 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001312:	490d      	ldr	r1, [pc, #52]	; (8001348 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001328:	4c0a      	ldr	r4, [pc, #40]	; (8001354 <LoopFillZerobss+0x22>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001336:	f005 f851 	bl	80063dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133a:	f7ff f9a7 	bl	800068c <main>
  bx  lr
 800133e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001340:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001344:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001348:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 800134c:	08006d84 	.word	0x08006d84
  ldr r2, =_sbss
 8001350:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001354:	240002ec 	.word	0x240002ec

08001358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC_IRQHandler>
	...

0800135c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001362:	2003      	movs	r0, #3
 8001364:	f000 f93e 	bl	80015e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001368:	f001 f994 	bl	8002694 <HAL_RCC_GetSysClockFreq>
 800136c:	4602      	mov	r2, r0
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_Init+0x68>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	f003 030f 	and.w	r3, r3, #15
 8001378:	4913      	ldr	r1, [pc, #76]	; (80013c8 <HAL_Init+0x6c>)
 800137a:	5ccb      	ldrb	r3, [r1, r3]
 800137c:	f003 031f 	and.w	r3, r3, #31
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_Init+0x68>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_Init+0x6c>)
 8001390:	5cd3      	ldrb	r3, [r2, r3]
 8001392:	f003 031f 	and.w	r3, r3, #31
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	fa22 f303 	lsr.w	r3, r2, r3
 800139c:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <HAL_Init+0x70>)
 800139e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013a0:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <HAL_Init+0x74>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013a6:	2000      	movs	r0, #0
 80013a8:	f000 f814 	bl	80013d4 <HAL_InitTick>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e002      	b.n	80013bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013b6:	f7ff fdbb 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	58024400 	.word	0x58024400
 80013c8:	08006d08 	.word	0x08006d08
 80013cc:	24000004 	.word	0x24000004
 80013d0:	24000000 	.word	0x24000000

080013d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <HAL_InitTick+0x60>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e021      	b.n	800142c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <HAL_InitTick+0x64>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_InitTick+0x60>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 f915 	bl	800162e <HAL_SYSTICK_Config>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e00e      	b.n	800142c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b0f      	cmp	r3, #15
 8001412:	d80a      	bhi.n	800142a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001414:	2200      	movs	r2, #0
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800141c:	f000 f8ed 	bl	80015fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <HAL_InitTick+0x68>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	e000      	b.n	800142c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2400000c 	.word	0x2400000c
 8001438:	24000000 	.word	0x24000000
 800143c:	24000008 	.word	0x24000008

08001440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x20>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_IncTick+0x24>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_IncTick+0x24>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	2400000c 	.word	0x2400000c
 8001464:	240001a0 	.word	0x240001a0

08001468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_GetTick+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	240001a0 	.word	0x240001a0

08001480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800149c:	4013      	ands	r3, r2
 800149e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <__NVIC_SetPriorityGrouping+0x40>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00
 80014c4:	05fa0000 	.word	0x05fa0000

080014c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	f003 0307 	and.w	r3, r3, #7
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db0a      	blt.n	800150e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	490c      	ldr	r1, [pc, #48]	; (8001530 <__NVIC_SetPriority+0x4c>)
 80014fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	440b      	add	r3, r1
 8001508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800150c:	e00a      	b.n	8001524 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4908      	ldr	r1, [pc, #32]	; (8001534 <__NVIC_SetPriority+0x50>)
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	3b04      	subs	r3, #4
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	440b      	add	r3, r1
 8001522:	761a      	strb	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f1c3 0307 	rsb	r3, r3, #7
 8001552:	2b04      	cmp	r3, #4
 8001554:	bf28      	it	cs
 8001556:	2304      	movcs	r3, #4
 8001558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3304      	adds	r3, #4
 800155e:	2b06      	cmp	r3, #6
 8001560:	d902      	bls.n	8001568 <NVIC_EncodePriority+0x30>
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3b03      	subs	r3, #3
 8001566:	e000      	b.n	800156a <NVIC_EncodePriority+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001580:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43d9      	mvns	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	4313      	orrs	r3, r2
         );
}
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	; 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b0:	d301      	bcc.n	80015b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00f      	b.n	80015d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <SysTick_Config+0x40>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015be:	210f      	movs	r1, #15
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015c4:	f7ff ff8e 	bl	80014e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <SysTick_Config+0x40>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <SysTick_Config+0x40>)
 80015d0:	2207      	movs	r2, #7
 80015d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	e000e010 	.word	0xe000e010

080015e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ff47 	bl	8001480 <__NVIC_SetPriorityGrouping>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001608:	f7ff ff5e 	bl	80014c8 <__NVIC_GetPriorityGrouping>
 800160c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	6978      	ldr	r0, [r7, #20]
 8001614:	f7ff ff90 	bl	8001538 <NVIC_EncodePriority>
 8001618:	4602      	mov	r2, r0
 800161a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff5f 	bl	80014e4 <__NVIC_SetPriority>
}
 8001626:	bf00      	nop
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ffb2 	bl	80015a0 <SysTick_Config>
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001656:	4b89      	ldr	r3, [pc, #548]	; (800187c <HAL_GPIO_Init+0x234>)
 8001658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800165a:	e194      	b.n	8001986 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2101      	movs	r1, #1
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fa01 f303 	lsl.w	r3, r1, r3
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 8186 	beq.w	8001980 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b01      	cmp	r3, #1
 800167e:	d005      	beq.n	800168c <HAL_GPIO_Init+0x44>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d130      	bne.n	80016ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016c2:	2201      	movs	r2, #1
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4013      	ands	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	091b      	lsrs	r3, r3, #4
 80016d8:	f003 0201 	and.w	r2, r3, #1
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d017      	beq.n	800172a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	2203      	movs	r2, #3
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d123      	bne.n	800177e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	08da      	lsrs	r2, r3, #3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3208      	adds	r2, #8
 800173e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	220f      	movs	r2, #15
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	691a      	ldr	r2, [r3, #16]
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	08da      	lsrs	r2, r3, #3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3208      	adds	r2, #8
 8001778:	69b9      	ldr	r1, [r7, #24]
 800177a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	2203      	movs	r2, #3
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0203 	and.w	r2, r3, #3
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 80e0 	beq.w	8001980 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c0:	4b2f      	ldr	r3, [pc, #188]	; (8001880 <HAL_GPIO_Init+0x238>)
 80017c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80017c6:	4a2e      	ldr	r2, [pc, #184]	; (8001880 <HAL_GPIO_Init+0x238>)
 80017c8:	f043 0302 	orr.w	r3, r3, #2
 80017cc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80017d0:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <HAL_GPIO_Init+0x238>)
 80017d2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017de:	4a29      	ldr	r2, [pc, #164]	; (8001884 <HAL_GPIO_Init+0x23c>)
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	3302      	adds	r3, #2
 80017e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	220f      	movs	r2, #15
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a20      	ldr	r2, [pc, #128]	; (8001888 <HAL_GPIO_Init+0x240>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d052      	beq.n	80018b0 <HAL_GPIO_Init+0x268>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a1f      	ldr	r2, [pc, #124]	; (800188c <HAL_GPIO_Init+0x244>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d031      	beq.n	8001876 <HAL_GPIO_Init+0x22e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a1e      	ldr	r2, [pc, #120]	; (8001890 <HAL_GPIO_Init+0x248>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d02b      	beq.n	8001872 <HAL_GPIO_Init+0x22a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a1d      	ldr	r2, [pc, #116]	; (8001894 <HAL_GPIO_Init+0x24c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d025      	beq.n	800186e <HAL_GPIO_Init+0x226>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a1c      	ldr	r2, [pc, #112]	; (8001898 <HAL_GPIO_Init+0x250>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d01f      	beq.n	800186a <HAL_GPIO_Init+0x222>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a1b      	ldr	r2, [pc, #108]	; (800189c <HAL_GPIO_Init+0x254>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d019      	beq.n	8001866 <HAL_GPIO_Init+0x21e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a1a      	ldr	r2, [pc, #104]	; (80018a0 <HAL_GPIO_Init+0x258>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d013      	beq.n	8001862 <HAL_GPIO_Init+0x21a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a19      	ldr	r2, [pc, #100]	; (80018a4 <HAL_GPIO_Init+0x25c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d00d      	beq.n	800185e <HAL_GPIO_Init+0x216>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a18      	ldr	r2, [pc, #96]	; (80018a8 <HAL_GPIO_Init+0x260>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d007      	beq.n	800185a <HAL_GPIO_Init+0x212>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a17      	ldr	r2, [pc, #92]	; (80018ac <HAL_GPIO_Init+0x264>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d101      	bne.n	8001856 <HAL_GPIO_Init+0x20e>
 8001852:	2309      	movs	r3, #9
 8001854:	e02d      	b.n	80018b2 <HAL_GPIO_Init+0x26a>
 8001856:	230a      	movs	r3, #10
 8001858:	e02b      	b.n	80018b2 <HAL_GPIO_Init+0x26a>
 800185a:	2308      	movs	r3, #8
 800185c:	e029      	b.n	80018b2 <HAL_GPIO_Init+0x26a>
 800185e:	2307      	movs	r3, #7
 8001860:	e027      	b.n	80018b2 <HAL_GPIO_Init+0x26a>
 8001862:	2306      	movs	r3, #6
 8001864:	e025      	b.n	80018b2 <HAL_GPIO_Init+0x26a>
 8001866:	2305      	movs	r3, #5
 8001868:	e023      	b.n	80018b2 <HAL_GPIO_Init+0x26a>
 800186a:	2304      	movs	r3, #4
 800186c:	e021      	b.n	80018b2 <HAL_GPIO_Init+0x26a>
 800186e:	2303      	movs	r3, #3
 8001870:	e01f      	b.n	80018b2 <HAL_GPIO_Init+0x26a>
 8001872:	2302      	movs	r3, #2
 8001874:	e01d      	b.n	80018b2 <HAL_GPIO_Init+0x26a>
 8001876:	2301      	movs	r3, #1
 8001878:	e01b      	b.n	80018b2 <HAL_GPIO_Init+0x26a>
 800187a:	bf00      	nop
 800187c:	58000080 	.word	0x58000080
 8001880:	58024400 	.word	0x58024400
 8001884:	58000400 	.word	0x58000400
 8001888:	58020000 	.word	0x58020000
 800188c:	58020400 	.word	0x58020400
 8001890:	58020800 	.word	0x58020800
 8001894:	58020c00 	.word	0x58020c00
 8001898:	58021000 	.word	0x58021000
 800189c:	58021400 	.word	0x58021400
 80018a0:	58021800 	.word	0x58021800
 80018a4:	58021c00 	.word	0x58021c00
 80018a8:	58022000 	.word	0x58022000
 80018ac:	58022400 	.word	0x58022400
 80018b0:	2300      	movs	r3, #0
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	f002 0203 	and.w	r2, r2, #3
 80018b8:	0092      	lsls	r2, r2, #2
 80018ba:	4093      	lsls	r3, r2
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018c2:	4938      	ldr	r1, [pc, #224]	; (80019a4 <HAL_GPIO_Init+0x35c>)
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	3302      	adds	r3, #2
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80018f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	3301      	adds	r3, #1
 8001984:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	f47f ae63 	bne.w	800165c <HAL_GPIO_Init+0x14>
  }
}
 8001996:	bf00      	nop
 8001998:	bf00      	nop
 800199a:	3724      	adds	r7, #36	; 0x24
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	58000400 	.word	0x58000400

080019a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
 80019b4:	4613      	mov	r3, r2
 80019b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019b8:	787b      	ldrb	r3, [r7, #1]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019be:	887a      	ldrh	r2, [r7, #2]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80019c4:	e003      	b.n	80019ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80019c6:	887b      	ldrh	r3, [r7, #2]
 80019c8:	041a      	lsls	r2, r3, #16
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	619a      	str	r2, [r3, #24]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019da:	b480      	push	{r7}
 80019dc:	b085      	sub	sp, #20
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	460b      	mov	r3, r1
 80019e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019ec:	887a      	ldrh	r2, [r7, #2]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4013      	ands	r3, r2
 80019f2:	041a      	lsls	r2, r3, #16
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	43d9      	mvns	r1, r3
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	400b      	ands	r3, r1
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	619a      	str	r2, [r3, #24]
}
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001a18:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	2b06      	cmp	r3, #6
 8001a22:	d00a      	beq.n	8001a3a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a24:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d001      	beq.n	8001a36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e040      	b.n	8001ab8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e03e      	b.n	8001ab8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a3a:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001a42:	491f      	ldr	r1, [pc, #124]	; (8001ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a4a:	f7ff fd0d 	bl	8001468 <HAL_GetTick>
 8001a4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a50:	e009      	b.n	8001a66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a52:	f7ff fd09 	bl	8001468 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a60:	d901      	bls.n	8001a66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e028      	b.n	8001ab8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a72:	d1ee      	bne.n	8001a52 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b1e      	cmp	r3, #30
 8001a78:	d008      	beq.n	8001a8c <HAL_PWREx_ConfigSupply+0x7c>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b2e      	cmp	r3, #46	; 0x2e
 8001a7e:	d005      	beq.n	8001a8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b1d      	cmp	r3, #29
 8001a84:	d002      	beq.n	8001a8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b2d      	cmp	r3, #45	; 0x2d
 8001a8a:	d114      	bne.n	8001ab6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001a8c:	f7ff fcec 	bl	8001468 <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a92:	e009      	b.n	8001aa8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a94:	f7ff fce8 	bl	8001468 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aa2:	d901      	bls.n	8001aa8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e007      	b.n	8001ab8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab4:	d1ee      	bne.n	8001a94 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	58024800 	.word	0x58024800

08001ac4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08c      	sub	sp, #48	; 0x30
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d102      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f000 bc1f 	b.w	8002316 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80b3 	beq.w	8001c4c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ae6:	4b95      	ldr	r3, [pc, #596]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001af0:	4b92      	ldr	r3, [pc, #584]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af8:	2b10      	cmp	r3, #16
 8001afa:	d007      	beq.n	8001b0c <HAL_RCC_OscConfig+0x48>
 8001afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afe:	2b18      	cmp	r3, #24
 8001b00:	d112      	bne.n	8001b28 <HAL_RCC_OscConfig+0x64>
 8001b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d10d      	bne.n	8001b28 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0c:	4b8b      	ldr	r3, [pc, #556]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 8098 	beq.w	8001c4a <HAL_RCC_OscConfig+0x186>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f040 8093 	bne.w	8001c4a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e3f6      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b30:	d106      	bne.n	8001b40 <HAL_RCC_OscConfig+0x7c>
 8001b32:	4b82      	ldr	r3, [pc, #520]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a81      	ldr	r2, [pc, #516]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e058      	b.n	8001bf2 <HAL_RCC_OscConfig+0x12e>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d112      	bne.n	8001b6e <HAL_RCC_OscConfig+0xaa>
 8001b48:	4b7c      	ldr	r3, [pc, #496]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a7b      	ldr	r2, [pc, #492]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	4b79      	ldr	r3, [pc, #484]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a78      	ldr	r2, [pc, #480]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001b5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b76      	ldr	r3, [pc, #472]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a75      	ldr	r2, [pc, #468]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	e041      	b.n	8001bf2 <HAL_RCC_OscConfig+0x12e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b76:	d112      	bne.n	8001b9e <HAL_RCC_OscConfig+0xda>
 8001b78:	4b70      	ldr	r3, [pc, #448]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a6f      	ldr	r2, [pc, #444]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001b7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b6d      	ldr	r3, [pc, #436]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a6c      	ldr	r2, [pc, #432]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001b8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b6a      	ldr	r3, [pc, #424]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a69      	ldr	r2, [pc, #420]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	e029      	b.n	8001bf2 <HAL_RCC_OscConfig+0x12e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001ba6:	d112      	bne.n	8001bce <HAL_RCC_OscConfig+0x10a>
 8001ba8:	4b64      	ldr	r3, [pc, #400]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a63      	ldr	r2, [pc, #396]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001bae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b61      	ldr	r3, [pc, #388]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a60      	ldr	r2, [pc, #384]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001bba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b5e      	ldr	r3, [pc, #376]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a5d      	ldr	r2, [pc, #372]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	e011      	b.n	8001bf2 <HAL_RCC_OscConfig+0x12e>
 8001bce:	4b5b      	ldr	r3, [pc, #364]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a5a      	ldr	r2, [pc, #360]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b58      	ldr	r3, [pc, #352]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a57      	ldr	r2, [pc, #348]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b55      	ldr	r3, [pc, #340]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a54      	ldr	r2, [pc, #336]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001bec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001bf0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d013      	beq.n	8001c22 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfa:	f7ff fc35 	bl	8001468 <HAL_GetTick>
 8001bfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c02:	f7ff fc31 	bl	8001468 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b64      	cmp	r3, #100	; 0x64
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e380      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c14:	4b49      	ldr	r3, [pc, #292]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0x13e>
 8001c20:	e014      	b.n	8001c4c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c22:	f7ff fc21 	bl	8001468 <HAL_GetTick>
 8001c26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c2a:	f7ff fc1d 	bl	8001468 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b64      	cmp	r3, #100	; 0x64
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e36c      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c3c:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f0      	bne.n	8001c2a <HAL_RCC_OscConfig+0x166>
 8001c48:	e000      	b.n	8001c4c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 808c 	beq.w	8001d72 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c62:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c64:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d007      	beq.n	8001c80 <HAL_RCC_OscConfig+0x1bc>
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	2b18      	cmp	r3, #24
 8001c74:	d137      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x222>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d132      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c80:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_OscConfig+0x1d4>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e33e      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c98:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f023 0219 	bic.w	r2, r3, #25
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	4925      	ldr	r1, [pc, #148]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001caa:	f7ff fbdd 	bl	8001468 <HAL_GetTick>
 8001cae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb2:	f7ff fbd9 	bl	8001468 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e328      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	061b      	lsls	r3, r3, #24
 8001cde:	4917      	ldr	r1, [pc, #92]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ce4:	e045      	b.n	8001d72 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d028      	beq.n	8001d40 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 0219 	bic.w	r2, r3, #25
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	4910      	ldr	r1, [pc, #64]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff fbb2 	bl	8001468 <HAL_GetTick>
 8001d04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d08:	f7ff fbae 	bl	8001468 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e2fd      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	061b      	lsls	r3, r3, #24
 8001d34:	4901      	ldr	r1, [pc, #4]	; (8001d3c <HAL_RCC_OscConfig+0x278>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]
 8001d3a:	e01a      	b.n	8001d72 <HAL_RCC_OscConfig+0x2ae>
 8001d3c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d40:	4b97      	ldr	r3, [pc, #604]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a96      	ldr	r2, [pc, #600]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001d46:	f023 0301 	bic.w	r3, r3, #1
 8001d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7ff fb8c 	bl	8001468 <HAL_GetTick>
 8001d50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d54:	f7ff fb88 	bl	8001468 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e2d7      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d66:	4b8e      	ldr	r3, [pc, #568]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d06a      	beq.n	8001e54 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d7e:	4b88      	ldr	r3, [pc, #544]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d88:	4b85      	ldr	r3, [pc, #532]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d007      	beq.n	8001da4 <HAL_RCC_OscConfig+0x2e0>
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2b18      	cmp	r3, #24
 8001d98:	d11b      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x30e>
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d116      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001da4:	4b7e      	ldr	r3, [pc, #504]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_RCC_OscConfig+0x2f8>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	2b80      	cmp	r3, #128	; 0x80
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e2ac      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dbc:	4b78      	ldr	r3, [pc, #480]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	061b      	lsls	r3, r3, #24
 8001dca:	4975      	ldr	r1, [pc, #468]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dd0:	e040      	b.n	8001e54 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d023      	beq.n	8001e22 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001dda:	4b71      	ldr	r3, [pc, #452]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a70      	ldr	r2, [pc, #448]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de6:	f7ff fb3f 	bl	8001468 <HAL_GetTick>
 8001dea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001dee:	f7ff fb3b 	bl	8001468 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e28a      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e00:	4b67      	ldr	r3, [pc, #412]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e0c:	4b64      	ldr	r3, [pc, #400]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	4961      	ldr	r1, [pc, #388]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60cb      	str	r3, [r1, #12]
 8001e20:	e018      	b.n	8001e54 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e22:	4b5f      	ldr	r3, [pc, #380]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a5e      	ldr	r2, [pc, #376]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2e:	f7ff fb1b 	bl	8001468 <HAL_GetTick>
 8001e32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e36:	f7ff fb17 	bl	8001468 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e266      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e48:	4b55      	ldr	r3, [pc, #340]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f0      	bne.n	8001e36 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d036      	beq.n	8001ece <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d019      	beq.n	8001e9c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e68:	4b4d      	ldr	r3, [pc, #308]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6c:	4a4c      	ldr	r2, [pc, #304]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e74:	f7ff faf8 	bl	8001468 <HAL_GetTick>
 8001e78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e7c:	f7ff faf4 	bl	8001468 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e243      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e8e:	4b44      	ldr	r3, [pc, #272]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x3b8>
 8001e9a:	e018      	b.n	8001ece <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9c:	4b40      	ldr	r3, [pc, #256]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea0:	4a3f      	ldr	r2, [pc, #252]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea8:	f7ff fade 	bl	8001468 <HAL_GetTick>
 8001eac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb0:	f7ff fada 	bl	8001468 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e229      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ec2:	4b37      	ldr	r3, [pc, #220]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d036      	beq.n	8001f48 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d019      	beq.n	8001f16 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ee2:	4b2f      	ldr	r3, [pc, #188]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a2e      	ldr	r2, [pc, #184]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001ee8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001eee:	f7ff fabb 	bl	8001468 <HAL_GetTick>
 8001ef2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ef6:	f7ff fab7 	bl	8001468 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e206      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f08:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x432>
 8001f14:	e018      	b.n	8001f48 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f16:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a21      	ldr	r2, [pc, #132]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001f1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f22:	f7ff faa1 	bl	8001468 <HAL_GetTick>
 8001f26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f2a:	f7ff fa9d 	bl	8001468 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e1ec      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f3c:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80af 	beq.w	80020b4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_RCC_OscConfig+0x4e0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <HAL_RCC_OscConfig+0x4e0>)
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f62:	f7ff fa81 	bl	8001468 <HAL_GetTick>
 8001f66:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6a:	f7ff fa7d 	bl	8001468 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b64      	cmp	r3, #100	; 0x64
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e1cc      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <HAL_RCC_OscConfig+0x4e0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x4e4>
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f94:	4a02      	ldr	r2, [pc, #8]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f9c:	e05b      	b.n	8002056 <HAL_RCC_OscConfig+0x592>
 8001f9e:	bf00      	nop
 8001fa0:	58024400 	.word	0x58024400
 8001fa4:	58024800 	.word	0x58024800
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d112      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x512>
 8001fb0:	4b9d      	ldr	r3, [pc, #628]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8001fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb4:	4a9c      	ldr	r2, [pc, #624]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8001fb6:	f023 0301 	bic.w	r3, r3, #1
 8001fba:	6713      	str	r3, [r2, #112]	; 0x70
 8001fbc:	4b9a      	ldr	r3, [pc, #616]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8001fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc0:	4a99      	ldr	r2, [pc, #612]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8001fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc8:	4b97      	ldr	r3, [pc, #604]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fcc:	4a96      	ldr	r2, [pc, #600]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8001fce:	f023 0304 	bic.w	r3, r3, #4
 8001fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd4:	e03f      	b.n	8002056 <HAL_RCC_OscConfig+0x592>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b05      	cmp	r3, #5
 8001fdc:	d112      	bne.n	8002004 <HAL_RCC_OscConfig+0x540>
 8001fde:	4b92      	ldr	r3, [pc, #584]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8001fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe2:	4a91      	ldr	r2, [pc, #580]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8001fe4:	f043 0304 	orr.w	r3, r3, #4
 8001fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fea:	4b8f      	ldr	r3, [pc, #572]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fee:	4a8e      	ldr	r2, [pc, #568]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8001ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff6:	4b8c      	ldr	r3, [pc, #560]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	4a8b      	ldr	r2, [pc, #556]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6713      	str	r3, [r2, #112]	; 0x70
 8002002:	e028      	b.n	8002056 <HAL_RCC_OscConfig+0x592>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b85      	cmp	r3, #133	; 0x85
 800200a:	d112      	bne.n	8002032 <HAL_RCC_OscConfig+0x56e>
 800200c:	4b86      	ldr	r3, [pc, #536]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	4a85      	ldr	r2, [pc, #532]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	6713      	str	r3, [r2, #112]	; 0x70
 8002018:	4b83      	ldr	r3, [pc, #524]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	4a82      	ldr	r2, [pc, #520]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 800201e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002022:	6713      	str	r3, [r2, #112]	; 0x70
 8002024:	4b80      	ldr	r3, [pc, #512]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002028:	4a7f      	ldr	r2, [pc, #508]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6713      	str	r3, [r2, #112]	; 0x70
 8002030:	e011      	b.n	8002056 <HAL_RCC_OscConfig+0x592>
 8002032:	4b7d      	ldr	r3, [pc, #500]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8002034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002036:	4a7c      	ldr	r2, [pc, #496]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	6713      	str	r3, [r2, #112]	; 0x70
 800203e:	4b7a      	ldr	r3, [pc, #488]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	4a79      	ldr	r2, [pc, #484]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8002044:	f023 0304 	bic.w	r3, r3, #4
 8002048:	6713      	str	r3, [r2, #112]	; 0x70
 800204a:	4b77      	ldr	r3, [pc, #476]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	4a76      	ldr	r2, [pc, #472]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8002050:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002054:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d015      	beq.n	800208a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205e:	f7ff fa03 	bl	8001468 <HAL_GetTick>
 8002062:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002064:	e00a      	b.n	800207c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002066:	f7ff f9ff 	bl	8001468 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	f241 3288 	movw	r2, #5000	; 0x1388
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e14c      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800207c:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0ee      	beq.n	8002066 <HAL_RCC_OscConfig+0x5a2>
 8002088:	e014      	b.n	80020b4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208a:	f7ff f9ed 	bl	8001468 <HAL_GetTick>
 800208e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002090:	e00a      	b.n	80020a8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002092:	f7ff f9e9 	bl	8001468 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e136      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020a8:	4b5f      	ldr	r3, [pc, #380]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1ee      	bne.n	8002092 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 812b 	beq.w	8002314 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80020be:	4b5a      	ldr	r3, [pc, #360]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020c6:	2b18      	cmp	r3, #24
 80020c8:	f000 80bb 	beq.w	8002242 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	f040 8095 	bne.w	8002200 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d6:	4b54      	ldr	r3, [pc, #336]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a53      	ldr	r2, [pc, #332]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 80020dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e2:	f7ff f9c1 	bl	8001468 <HAL_GetTick>
 80020e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ea:	f7ff f9bd 	bl	8001468 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e10c      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020fc:	4b4a      	ldr	r3, [pc, #296]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f0      	bne.n	80020ea <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002108:	4b47      	ldr	r3, [pc, #284]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 800210a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800210c:	4b47      	ldr	r3, [pc, #284]	; (800222c <HAL_RCC_OscConfig+0x768>)
 800210e:	4013      	ands	r3, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002118:	0112      	lsls	r2, r2, #4
 800211a:	430a      	orrs	r2, r1
 800211c:	4942      	ldr	r1, [pc, #264]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 800211e:	4313      	orrs	r3, r2
 8002120:	628b      	str	r3, [r1, #40]	; 0x28
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	3b01      	subs	r3, #1
 8002128:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002130:	3b01      	subs	r3, #1
 8002132:	025b      	lsls	r3, r3, #9
 8002134:	b29b      	uxth	r3, r3
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213c:	3b01      	subs	r3, #1
 800213e:	041b      	lsls	r3, r3, #16
 8002140:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214a:	3b01      	subs	r3, #1
 800214c:	061b      	lsls	r3, r3, #24
 800214e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002152:	4935      	ldr	r1, [pc, #212]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8002154:	4313      	orrs	r3, r2
 8002156:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002158:	4b33      	ldr	r3, [pc, #204]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	4a32      	ldr	r2, [pc, #200]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 800215e:	f023 0301 	bic.w	r3, r3, #1
 8002162:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002164:	4b30      	ldr	r3, [pc, #192]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8002166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002168:	4b31      	ldr	r3, [pc, #196]	; (8002230 <HAL_RCC_OscConfig+0x76c>)
 800216a:	4013      	ands	r3, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002170:	00d2      	lsls	r2, r2, #3
 8002172:	492d      	ldr	r1, [pc, #180]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8002174:	4313      	orrs	r3, r2
 8002176:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002178:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	f023 020c 	bic.w	r2, r3, #12
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	4928      	ldr	r1, [pc, #160]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8002186:	4313      	orrs	r3, r2
 8002188:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800218a:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 800218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218e:	f023 0202 	bic.w	r2, r3, #2
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	4924      	ldr	r1, [pc, #144]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8002198:	4313      	orrs	r3, r2
 800219a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800219c:	4b22      	ldr	r3, [pc, #136]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	4a21      	ldr	r2, [pc, #132]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 80021a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021a8:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	4a1e      	ldr	r2, [pc, #120]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 80021ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80021b4:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	4a1b      	ldr	r2, [pc, #108]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 80021ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80021c0:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	4a18      	ldr	r2, [pc, #96]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a15      	ldr	r2, [pc, #84]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 80021d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7ff f946 	bl	8001468 <HAL_GetTick>
 80021dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7ff f942 	bl	8001468 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e091      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021f2:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x71c>
 80021fe:	e089      	b.n	8002314 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002200:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a08      	ldr	r2, [pc, #32]	; (8002228 <HAL_RCC_OscConfig+0x764>)
 8002206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800220a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7ff f92c 	bl	8001468 <HAL_GetTick>
 8002210:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002212:	e00f      	b.n	8002234 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002214:	f7ff f928 	bl	8001468 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d908      	bls.n	8002234 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e077      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
 8002226:	bf00      	nop
 8002228:	58024400 	.word	0x58024400
 800222c:	fffffc0c 	.word	0xfffffc0c
 8002230:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002234:	4b3a      	ldr	r3, [pc, #232]	; (8002320 <HAL_RCC_OscConfig+0x85c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1e9      	bne.n	8002214 <HAL_RCC_OscConfig+0x750>
 8002240:	e068      	b.n	8002314 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002242:	4b37      	ldr	r3, [pc, #220]	; (8002320 <HAL_RCC_OscConfig+0x85c>)
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002248:	4b35      	ldr	r3, [pc, #212]	; (8002320 <HAL_RCC_OscConfig+0x85c>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	2b01      	cmp	r3, #1
 8002254:	d031      	beq.n	80022ba <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f003 0203 	and.w	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d12a      	bne.n	80022ba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002270:	429a      	cmp	r2, r3
 8002272:	d122      	bne.n	80022ba <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002280:	429a      	cmp	r2, r3
 8002282:	d11a      	bne.n	80022ba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	0a5b      	lsrs	r3, r3, #9
 8002288:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002290:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d111      	bne.n	80022ba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	0c1b      	lsrs	r3, r3, #16
 800229a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d108      	bne.n	80022ba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	0e1b      	lsrs	r3, r3, #24
 80022ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e02b      	b.n	8002316 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80022be:	4b18      	ldr	r3, [pc, #96]	; (8002320 <HAL_RCC_OscConfig+0x85c>)
 80022c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c2:	08db      	lsrs	r3, r3, #3
 80022c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80022c8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d01f      	beq.n	8002314 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80022d4:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_RCC_OscConfig+0x85c>)
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	4a11      	ldr	r2, [pc, #68]	; (8002320 <HAL_RCC_OscConfig+0x85c>)
 80022da:	f023 0301 	bic.w	r3, r3, #1
 80022de:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022e0:	f7ff f8c2 	bl	8001468 <HAL_GetTick>
 80022e4:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80022e6:	bf00      	nop
 80022e8:	f7ff f8be 	bl	8001468 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d0f9      	beq.n	80022e8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_RCC_OscConfig+0x85c>)
 80022f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_RCC_OscConfig+0x860>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002300:	00d2      	lsls	r2, r2, #3
 8002302:	4907      	ldr	r1, [pc, #28]	; (8002320 <HAL_RCC_OscConfig+0x85c>)
 8002304:	4313      	orrs	r3, r2
 8002306:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_RCC_OscConfig+0x85c>)
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	4a04      	ldr	r2, [pc, #16]	; (8002320 <HAL_RCC_OscConfig+0x85c>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3730      	adds	r7, #48	; 0x30
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	58024400 	.word	0x58024400
 8002324:	ffff0007 	.word	0xffff0007

08002328 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e19c      	b.n	8002676 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800233c:	4b8a      	ldr	r3, [pc, #552]	; (8002568 <HAL_RCC_ClockConfig+0x240>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d910      	bls.n	800236c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b87      	ldr	r3, [pc, #540]	; (8002568 <HAL_RCC_ClockConfig+0x240>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 020f 	bic.w	r2, r3, #15
 8002352:	4985      	ldr	r1, [pc, #532]	; (8002568 <HAL_RCC_ClockConfig+0x240>)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b83      	ldr	r3, [pc, #524]	; (8002568 <HAL_RCC_ClockConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e184      	b.n	8002676 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d010      	beq.n	800239a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	4b7b      	ldr	r3, [pc, #492]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002384:	429a      	cmp	r2, r3
 8002386:	d908      	bls.n	800239a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002388:	4b78      	ldr	r3, [pc, #480]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	4975      	ldr	r1, [pc, #468]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 8002396:	4313      	orrs	r3, r2
 8002398:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d010      	beq.n	80023c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	4b70      	ldr	r3, [pc, #448]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d908      	bls.n	80023c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023b6:	4b6d      	ldr	r3, [pc, #436]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	496a      	ldr	r1, [pc, #424]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d010      	beq.n	80023f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	4b64      	ldr	r3, [pc, #400]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d908      	bls.n	80023f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023e4:	4b61      	ldr	r3, [pc, #388]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	495e      	ldr	r1, [pc, #376]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d010      	beq.n	8002424 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	4b59      	ldr	r3, [pc, #356]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800240e:	429a      	cmp	r2, r3
 8002410:	d908      	bls.n	8002424 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002412:	4b56      	ldr	r3, [pc, #344]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	4953      	ldr	r1, [pc, #332]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 8002420:	4313      	orrs	r3, r2
 8002422:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d010      	beq.n	8002452 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	4b4d      	ldr	r3, [pc, #308]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	429a      	cmp	r2, r3
 800243e:	d908      	bls.n	8002452 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002440:	4b4a      	ldr	r3, [pc, #296]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f023 020f 	bic.w	r2, r3, #15
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4947      	ldr	r1, [pc, #284]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 800244e:	4313      	orrs	r3, r2
 8002450:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d055      	beq.n	800250a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800245e:	4b43      	ldr	r3, [pc, #268]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	4940      	ldr	r1, [pc, #256]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 800246c:	4313      	orrs	r3, r2
 800246e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d107      	bne.n	8002488 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002478:	4b3c      	ldr	r3, [pc, #240]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d121      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0f6      	b.n	8002676 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d107      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002490:	4b36      	ldr	r3, [pc, #216]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d115      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0ea      	b.n	8002676 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d107      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024a8:	4b30      	ldr	r3, [pc, #192]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0de      	b.n	8002676 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024b8:	4b2c      	ldr	r3, [pc, #176]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0d6      	b.n	8002676 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024c8:	4b28      	ldr	r3, [pc, #160]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	f023 0207 	bic.w	r2, r3, #7
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	4925      	ldr	r1, [pc, #148]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024da:	f7fe ffc5 	bl	8001468 <HAL_GetTick>
 80024de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e2:	f7fe ffc1 	bl	8001468 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e0be      	b.n	8002676 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f8:	4b1c      	ldr	r3, [pc, #112]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	429a      	cmp	r2, r3
 8002508:	d1eb      	bne.n	80024e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d010      	beq.n	8002538 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	429a      	cmp	r2, r3
 8002524:	d208      	bcs.n	8002538 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f023 020f 	bic.w	r2, r3, #15
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	490e      	ldr	r1, [pc, #56]	; (800256c <HAL_RCC_ClockConfig+0x244>)
 8002534:	4313      	orrs	r3, r2
 8002536:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_RCC_ClockConfig+0x240>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d214      	bcs.n	8002570 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b08      	ldr	r3, [pc, #32]	; (8002568 <HAL_RCC_ClockConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 020f 	bic.w	r2, r3, #15
 800254e:	4906      	ldr	r1, [pc, #24]	; (8002568 <HAL_RCC_ClockConfig+0x240>)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b04      	ldr	r3, [pc, #16]	; (8002568 <HAL_RCC_ClockConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e086      	b.n	8002676 <HAL_RCC_ClockConfig+0x34e>
 8002568:	52002000 	.word	0x52002000
 800256c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d010      	beq.n	800259e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <HAL_RCC_ClockConfig+0x358>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002588:	429a      	cmp	r2, r3
 800258a:	d208      	bcs.n	800259e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800258c:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <HAL_RCC_ClockConfig+0x358>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	4939      	ldr	r1, [pc, #228]	; (8002680 <HAL_RCC_ClockConfig+0x358>)
 800259a:	4313      	orrs	r3, r2
 800259c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d010      	beq.n	80025cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	4b34      	ldr	r3, [pc, #208]	; (8002680 <HAL_RCC_ClockConfig+0x358>)
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d208      	bcs.n	80025cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025ba:	4b31      	ldr	r3, [pc, #196]	; (8002680 <HAL_RCC_ClockConfig+0x358>)
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	492e      	ldr	r1, [pc, #184]	; (8002680 <HAL_RCC_ClockConfig+0x358>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d010      	beq.n	80025fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699a      	ldr	r2, [r3, #24]
 80025dc:	4b28      	ldr	r3, [pc, #160]	; (8002680 <HAL_RCC_ClockConfig+0x358>)
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d208      	bcs.n	80025fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <HAL_RCC_ClockConfig+0x358>)
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	4922      	ldr	r1, [pc, #136]	; (8002680 <HAL_RCC_ClockConfig+0x358>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0320 	and.w	r3, r3, #32
 8002602:	2b00      	cmp	r3, #0
 8002604:	d010      	beq.n	8002628 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69da      	ldr	r2, [r3, #28]
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_RCC_ClockConfig+0x358>)
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002612:	429a      	cmp	r2, r3
 8002614:	d208      	bcs.n	8002628 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <HAL_RCC_ClockConfig+0x358>)
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4917      	ldr	r1, [pc, #92]	; (8002680 <HAL_RCC_ClockConfig+0x358>)
 8002624:	4313      	orrs	r3, r2
 8002626:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002628:	f000 f834 	bl	8002694 <HAL_RCC_GetSysClockFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <HAL_RCC_ClockConfig+0x358>)
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	0a1b      	lsrs	r3, r3, #8
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	4912      	ldr	r1, [pc, #72]	; (8002684 <HAL_RCC_ClockConfig+0x35c>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
 8002644:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002646:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <HAL_RCC_ClockConfig+0x358>)
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <HAL_RCC_ClockConfig+0x35c>)
 8002650:	5cd3      	ldrb	r3, [r2, r3]
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
 800265c:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <HAL_RCC_ClockConfig+0x360>)
 800265e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002660:	4a0a      	ldr	r2, [pc, #40]	; (800268c <HAL_RCC_ClockConfig+0x364>)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <HAL_RCC_ClockConfig+0x368>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe feb2 	bl	80013d4 <HAL_InitTick>
 8002670:	4603      	mov	r3, r0
 8002672:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002674:	7bfb      	ldrb	r3, [r7, #15]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	58024400 	.word	0x58024400
 8002684:	08006d08 	.word	0x08006d08
 8002688:	24000004 	.word	0x24000004
 800268c:	24000000 	.word	0x24000000
 8002690:	24000008 	.word	0x24000008

08002694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002694:	b480      	push	{r7}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800269a:	4bb3      	ldr	r3, [pc, #716]	; (8002968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026a2:	2b18      	cmp	r3, #24
 80026a4:	f200 8155 	bhi.w	8002952 <HAL_RCC_GetSysClockFreq+0x2be>
 80026a8:	a201      	add	r2, pc, #4	; (adr r2, 80026b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80026aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ae:	bf00      	nop
 80026b0:	08002715 	.word	0x08002715
 80026b4:	08002953 	.word	0x08002953
 80026b8:	08002953 	.word	0x08002953
 80026bc:	08002953 	.word	0x08002953
 80026c0:	08002953 	.word	0x08002953
 80026c4:	08002953 	.word	0x08002953
 80026c8:	08002953 	.word	0x08002953
 80026cc:	08002953 	.word	0x08002953
 80026d0:	0800273b 	.word	0x0800273b
 80026d4:	08002953 	.word	0x08002953
 80026d8:	08002953 	.word	0x08002953
 80026dc:	08002953 	.word	0x08002953
 80026e0:	08002953 	.word	0x08002953
 80026e4:	08002953 	.word	0x08002953
 80026e8:	08002953 	.word	0x08002953
 80026ec:	08002953 	.word	0x08002953
 80026f0:	08002741 	.word	0x08002741
 80026f4:	08002953 	.word	0x08002953
 80026f8:	08002953 	.word	0x08002953
 80026fc:	08002953 	.word	0x08002953
 8002700:	08002953 	.word	0x08002953
 8002704:	08002953 	.word	0x08002953
 8002708:	08002953 	.word	0x08002953
 800270c:	08002953 	.word	0x08002953
 8002710:	08002747 	.word	0x08002747
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002714:	4b94      	ldr	r3, [pc, #592]	; (8002968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d009      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002720:	4b91      	ldr	r3, [pc, #580]	; (8002968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	08db      	lsrs	r3, r3, #3
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	4a90      	ldr	r2, [pc, #576]	; (800296c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
 8002730:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002732:	e111      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002734:	4b8d      	ldr	r3, [pc, #564]	; (800296c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002736:	61bb      	str	r3, [r7, #24]
      break;
 8002738:	e10e      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800273a:	4b8d      	ldr	r3, [pc, #564]	; (8002970 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800273c:	61bb      	str	r3, [r7, #24]
      break;
 800273e:	e10b      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002740:	4b8c      	ldr	r3, [pc, #560]	; (8002974 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002742:	61bb      	str	r3, [r7, #24]
      break;
 8002744:	e108      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002746:	4b88      	ldr	r3, [pc, #544]	; (8002968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002750:	4b85      	ldr	r3, [pc, #532]	; (8002968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800275a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800275c:	4b82      	ldr	r3, [pc, #520]	; (8002968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002766:	4b80      	ldr	r3, [pc, #512]	; (8002968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276a:	08db      	lsrs	r3, r3, #3
 800276c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	fb02 f303 	mul.w	r3, r2, r3
 8002776:	ee07 3a90 	vmov	s15, r3
 800277a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800277e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80e1 	beq.w	800294c <HAL_RCC_GetSysClockFreq+0x2b8>
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b02      	cmp	r3, #2
 800278e:	f000 8083 	beq.w	8002898 <HAL_RCC_GetSysClockFreq+0x204>
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b02      	cmp	r3, #2
 8002796:	f200 80a1 	bhi.w	80028dc <HAL_RCC_GetSysClockFreq+0x248>
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x114>
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d056      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0x1c0>
 80027a6:	e099      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027a8:	4b6f      	ldr	r3, [pc, #444]	; (8002968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d02d      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027b4:	4b6c      	ldr	r3, [pc, #432]	; (8002968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	08db      	lsrs	r3, r3, #3
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	4a6b      	ldr	r2, [pc, #428]	; (800296c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
 80027c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	ee07 3a90 	vmov	s15, r3
 80027cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027de:	4b62      	ldr	r3, [pc, #392]	; (8002968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e6:	ee07 3a90 	vmov	s15, r3
 80027ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80027f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002978 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800280e:	e087      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	ee07 3a90 	vmov	s15, r3
 8002816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800281a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800297c <HAL_RCC_GetSysClockFreq+0x2e8>
 800281e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002822:	4b51      	ldr	r3, [pc, #324]	; (8002968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002832:	ed97 6a02 	vldr	s12, [r7, #8]
 8002836:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002978 <HAL_RCC_GetSysClockFreq+0x2e4>
 800283a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800283e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800284a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800284e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002852:	e065      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	ee07 3a90 	vmov	s15, r3
 800285a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800285e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002980 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002866:	4b40      	ldr	r3, [pc, #256]	; (8002968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800286e:	ee07 3a90 	vmov	s15, r3
 8002872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002876:	ed97 6a02 	vldr	s12, [r7, #8]
 800287a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002978 <HAL_RCC_GetSysClockFreq+0x2e4>
 800287e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800288a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800288e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002892:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002896:	e043      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	ee07 3a90 	vmov	s15, r3
 800289e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002984 <HAL_RCC_GetSysClockFreq+0x2f0>
 80028a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028aa:	4b2f      	ldr	r3, [pc, #188]	; (8002968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b2:	ee07 3a90 	vmov	s15, r3
 80028b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80028be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002978 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028da:	e021      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	ee07 3a90 	vmov	s15, r3
 80028e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002980 <HAL_RCC_GetSysClockFreq+0x2ec>
 80028ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028ee:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f6:	ee07 3a90 	vmov	s15, r3
 80028fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002902:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002978 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800290a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800290e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800291a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800291e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002920:	4b11      	ldr	r3, [pc, #68]	; (8002968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	0a5b      	lsrs	r3, r3, #9
 8002926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800292a:	3301      	adds	r3, #1
 800292c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	ee07 3a90 	vmov	s15, r3
 8002934:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002938:	edd7 6a07 	vldr	s13, [r7, #28]
 800293c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002944:	ee17 3a90 	vmov	r3, s15
 8002948:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800294a:	e005      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	61bb      	str	r3, [r7, #24]
      break;
 8002950:	e002      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002954:	61bb      	str	r3, [r7, #24]
      break;
 8002956:	bf00      	nop
  }

  return sysclockfreq;
 8002958:	69bb      	ldr	r3, [r7, #24]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3724      	adds	r7, #36	; 0x24
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	58024400 	.word	0x58024400
 800296c:	03d09000 	.word	0x03d09000
 8002970:	003d0900 	.word	0x003d0900
 8002974:	016e3600 	.word	0x016e3600
 8002978:	46000000 	.word	0x46000000
 800297c:	4c742400 	.word	0x4c742400
 8002980:	4a742400 	.word	0x4a742400
 8002984:	4bb71b00 	.word	0x4bb71b00

08002988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800298e:	f7ff fe81 	bl	8002694 <HAL_RCC_GetSysClockFreq>
 8002992:	4602      	mov	r2, r0
 8002994:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	0a1b      	lsrs	r3, r3, #8
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	490f      	ldr	r1, [pc, #60]	; (80029dc <HAL_RCC_GetHCLKFreq+0x54>)
 80029a0:	5ccb      	ldrb	r3, [r1, r3]
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	fa22 f303 	lsr.w	r3, r2, r3
 80029aa:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80029ac:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 030f 	and.w	r3, r3, #15
 80029b4:	4a09      	ldr	r2, [pc, #36]	; (80029dc <HAL_RCC_GetHCLKFreq+0x54>)
 80029b6:	5cd3      	ldrb	r3, [r2, r3]
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	fa22 f303 	lsr.w	r3, r2, r3
 80029c2:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80029c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029c6:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	58024400 	.word	0x58024400
 80029dc:	08006d08 	.word	0x08006d08
 80029e0:	24000004 	.word	0x24000004
 80029e4:	24000000 	.word	0x24000000

080029e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80029ec:	f7ff ffcc 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	4904      	ldr	r1, [pc, #16]	; (8002a10 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	58024400 	.word	0x58024400
 8002a10:	08006d08 	.word	0x08006d08

08002a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002a18:	f7ff ffb6 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	0a1b      	lsrs	r3, r3, #8
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	4904      	ldr	r1, [pc, #16]	; (8002a3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a2a:	5ccb      	ldrb	r3, [r1, r3]
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	58024400 	.word	0x58024400
 8002a3c:	08006d08 	.word	0x08006d08

08002a40 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a44:	b0c8      	sub	sp, #288	; 0x120
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a52:	2300      	movs	r3, #0
 8002a54:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a60:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002a64:	2500      	movs	r5, #0
 8002a66:	ea54 0305 	orrs.w	r3, r4, r5
 8002a6a:	d049      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a76:	d02f      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002a78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a7c:	d828      	bhi.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a82:	d01a      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a88:	d822      	bhi.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a92:	d007      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a94:	e01c      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a96:	4ba7      	ldr	r3, [pc, #668]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	4aa6      	ldr	r2, [pc, #664]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002aa2:	e01a      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002aa8:	3308      	adds	r3, #8
 8002aaa:	2102      	movs	r1, #2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f001 fc43 	bl	8004338 <RCCEx_PLL2_Config>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ab8:	e00f      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002abe:	3328      	adds	r3, #40	; 0x28
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f001 fcea 	bl	800449c <RCCEx_PLL3_Config>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ace:	e004      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ad6:	e000      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ada:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10a      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002ae2:	4b94      	ldr	r3, [pc, #592]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af0:	4a90      	ldr	r2, [pc, #576]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002af2:	430b      	orrs	r3, r1
 8002af4:	6513      	str	r3, [r2, #80]	; 0x50
 8002af6:	e003      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002afc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002b0c:	f04f 0900 	mov.w	r9, #0
 8002b10:	ea58 0309 	orrs.w	r3, r8, r9
 8002b14:	d047      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d82a      	bhi.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002b20:	a201      	add	r2, pc, #4	; (adr r2, 8002b28 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b26:	bf00      	nop
 8002b28:	08002b3d 	.word	0x08002b3d
 8002b2c:	08002b4b 	.word	0x08002b4b
 8002b30:	08002b61 	.word	0x08002b61
 8002b34:	08002b7f 	.word	0x08002b7f
 8002b38:	08002b7f 	.word	0x08002b7f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b3c:	4b7d      	ldr	r3, [pc, #500]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	4a7c      	ldr	r2, [pc, #496]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b48:	e01a      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b4e:	3308      	adds	r3, #8
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f001 fbf0 	bl	8004338 <RCCEx_PLL2_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b5e:	e00f      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b64:	3328      	adds	r3, #40	; 0x28
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f001 fc97 	bl	800449c <RCCEx_PLL3_Config>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b74:	e004      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b7c:	e000      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b88:	4b6a      	ldr	r3, [pc, #424]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8c:	f023 0107 	bic.w	r1, r3, #7
 8002b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b96:	4a67      	ldr	r2, [pc, #412]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	6513      	str	r3, [r2, #80]	; 0x50
 8002b9c:	e003      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ba2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bae:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002bb2:	f04f 0b00 	mov.w	fp, #0
 8002bb6:	ea5a 030b 	orrs.w	r3, sl, fp
 8002bba:	d054      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002bc6:	d036      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002bc8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002bcc:	d82f      	bhi.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd2:	d032      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd8:	d829      	bhi.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002bda:	2bc0      	cmp	r3, #192	; 0xc0
 8002bdc:	d02f      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002bde:	2bc0      	cmp	r3, #192	; 0xc0
 8002be0:	d825      	bhi.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002be2:	2b80      	cmp	r3, #128	; 0x80
 8002be4:	d018      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002be6:	2b80      	cmp	r3, #128	; 0x80
 8002be8:	d821      	bhi.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002bee:	2b40      	cmp	r3, #64	; 0x40
 8002bf0:	d007      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002bf2:	e01c      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bf4:	4b4f      	ldr	r3, [pc, #316]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	4a4e      	ldr	r2, [pc, #312]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002c00:	e01e      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c06:	3308      	adds	r3, #8
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f001 fb94 	bl	8004338 <RCCEx_PLL2_Config>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002c16:	e013      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c1c:	3328      	adds	r3, #40	; 0x28
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4618      	mov	r0, r3
 8002c22:	f001 fc3b 	bl	800449c <RCCEx_PLL3_Config>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002c2c:	e008      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c34:	e004      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002c36:	bf00      	nop
 8002c38:	e002      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002c3a:	bf00      	nop
 8002c3c:	e000      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10a      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002c48:	4b3a      	ldr	r3, [pc, #232]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	4a37      	ldr	r2, [pc, #220]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	6513      	str	r3, [r2, #80]	; 0x50
 8002c5c:	e003      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c62:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002c72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002c76:	2300      	movs	r3, #0
 8002c78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c7c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002c80:	460b      	mov	r3, r1
 8002c82:	4313      	orrs	r3, r2
 8002c84:	d05c      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002c90:	d03b      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c92:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002c96:	d834      	bhi.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9c:	d037      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ca2:	d82e      	bhi.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002ca4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002ca8:	d033      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002caa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002cae:	d828      	bhi.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb4:	d01a      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cba:	d822      	bhi.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc4:	d007      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002cc6:	e01c      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	4a19      	ldr	r2, [pc, #100]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002cd4:	e01e      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cda:	3308      	adds	r3, #8
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f001 fb2a 	bl	8004338 <RCCEx_PLL2_Config>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002cea:	e013      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cf0:	3328      	adds	r3, #40	; 0x28
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f001 fbd1 	bl	800449c <RCCEx_PLL3_Config>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002d00:	e008      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d08:	e004      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002d0a:	bf00      	nop
 8002d0c:	e002      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002d0e:	bf00      	nop
 8002d10:	e000      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10d      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d20:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2a:	4a02      	ldr	r2, [pc, #8]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	6513      	str	r3, [r2, #80]	; 0x50
 8002d30:	e006      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002d32:	bf00      	nop
 8002d34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d3c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d48:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002d4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002d50:	2300      	movs	r3, #0
 8002d52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002d56:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	d03a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d66:	2b30      	cmp	r3, #48	; 0x30
 8002d68:	d01f      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002d6a:	2b30      	cmp	r3, #48	; 0x30
 8002d6c:	d819      	bhi.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002d6e:	2b20      	cmp	r3, #32
 8002d70:	d00c      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	d815      	bhi.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d019      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002d7a:	2b10      	cmp	r3, #16
 8002d7c:	d111      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d7e:	4bae      	ldr	r3, [pc, #696]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	4aad      	ldr	r2, [pc, #692]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002d8a:	e011      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d90:	3308      	adds	r3, #8
 8002d92:	2102      	movs	r1, #2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f001 facf 	bl	8004338 <RCCEx_PLL2_Config>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002da0:	e006      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002da8:	e002      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002daa:	bf00      	nop
 8002dac:	e000      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002db0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002db8:	4b9f      	ldr	r3, [pc, #636]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dbc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc6:	4a9c      	ldr	r2, [pc, #624]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dcc:	e003      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dd2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dde:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002de2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002de6:	2300      	movs	r3, #0
 8002de8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002dec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4313      	orrs	r3, r2
 8002df4:	d051      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e00:	d035      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002e02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e06:	d82e      	bhi.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002e08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e0c:	d031      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002e0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e12:	d828      	bhi.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e18:	d01a      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e1e:	d822      	bhi.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e28:	d007      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002e2a:	e01c      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e2c:	4b82      	ldr	r3, [pc, #520]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	4a81      	ldr	r2, [pc, #516]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e38:	e01c      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e3e:	3308      	adds	r3, #8
 8002e40:	2100      	movs	r1, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f001 fa78 	bl	8004338 <RCCEx_PLL2_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e4e:	e011      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e54:	3328      	adds	r3, #40	; 0x28
 8002e56:	2100      	movs	r1, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f001 fb1f 	bl	800449c <RCCEx_PLL3_Config>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e64:	e006      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e6c:	e002      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002e6e:	bf00      	nop
 8002e70:	e000      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002e7c:	4b6e      	ldr	r3, [pc, #440]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e80:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e8a:	4a6b      	ldr	r2, [pc, #428]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	6513      	str	r3, [r2, #80]	; 0x50
 8002e90:	e003      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e96:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002ea6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002eb0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	d053      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ec4:	d033      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002ec6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eca:	d82c      	bhi.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002ecc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ed0:	d02f      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002ed2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ed6:	d826      	bhi.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002ed8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002edc:	d02b      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002ede:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ee2:	d820      	bhi.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002ee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ee8:	d012      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002eea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002eee:	d81a      	bhi.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d022      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef8:	d115      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002efe:	3308      	adds	r3, #8
 8002f00:	2101      	movs	r1, #1
 8002f02:	4618      	mov	r0, r3
 8002f04:	f001 fa18 	bl	8004338 <RCCEx_PLL2_Config>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f0e:	e015      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f14:	3328      	adds	r3, #40	; 0x28
 8002f16:	2101      	movs	r1, #1
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f001 fabf 	bl	800449c <RCCEx_PLL3_Config>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f24:	e00a      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f2c:	e006      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002f2e:	bf00      	nop
 8002f30:	e004      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002f32:	bf00      	nop
 8002f34:	e002      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002f36:	bf00      	nop
 8002f38:	e000      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002f3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10a      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002f44:	4b3c      	ldr	r3, [pc, #240]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f48:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f52:	4a39      	ldr	r2, [pc, #228]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6513      	str	r3, [r2, #80]	; 0x50
 8002f58:	e003      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f5e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002f6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f72:	2300      	movs	r3, #0
 8002f74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f78:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	d060      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f8a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002f8e:	d039      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002f90:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002f94:	d832      	bhi.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f9a:	d035      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fa0:	d82c      	bhi.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa6:	d031      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fac:	d826      	bhi.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002fae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fb2:	d02d      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002fb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fb8:	d820      	bhi.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fbe:	d012      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fc4:	d81a      	bhi.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d024      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002fca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fce:	d115      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fd4:	3308      	adds	r3, #8
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f001 f9ad 	bl	8004338 <RCCEx_PLL2_Config>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002fe4:	e017      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fea:	3328      	adds	r3, #40	; 0x28
 8002fec:	2101      	movs	r1, #1
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f001 fa54 	bl	800449c <RCCEx_PLL3_Config>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002ffa:	e00c      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003002:	e008      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003004:	bf00      	nop
 8003006:	e006      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003008:	bf00      	nop
 800300a:	e004      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800300c:	bf00      	nop
 800300e:	e002      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003010:	bf00      	nop
 8003012:	e000      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003016:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10e      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003022:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800302a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800302e:	4a02      	ldr	r2, [pc, #8]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003030:	430b      	orrs	r3, r1
 8003032:	6593      	str	r3, [r2, #88]	; 0x58
 8003034:	e006      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003036:	bf00      	nop
 8003038:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003040:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003044:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003050:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003054:	2300      	movs	r3, #0
 8003056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800305a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800305e:	460b      	mov	r3, r1
 8003060:	4313      	orrs	r3, r2
 8003062:	d037      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003064:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800306a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800306e:	d00e      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003074:	d816      	bhi.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d018      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800307a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800307e:	d111      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003080:	4bc4      	ldr	r3, [pc, #784]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	4ac3      	ldr	r2, [pc, #780]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800308a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800308c:	e00f      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800308e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003092:	3308      	adds	r3, #8
 8003094:	2101      	movs	r1, #1
 8003096:	4618      	mov	r0, r3
 8003098:	f001 f94e 	bl	8004338 <RCCEx_PLL2_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80030a2:	e004      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030aa:	e000      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80030ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10a      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030b6:	4bb7      	ldr	r3, [pc, #732]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80030be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030c4:	4ab3      	ldr	r2, [pc, #716]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030c6:	430b      	orrs	r3, r1
 80030c8:	6513      	str	r3, [r2, #80]	; 0x50
 80030ca:	e003      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80030d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80030e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030e4:	2300      	movs	r3, #0
 80030e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80030ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4313      	orrs	r3, r2
 80030f2:	d039      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80030f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d81c      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80030fe:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003104:	08003141 	.word	0x08003141
 8003108:	08003115 	.word	0x08003115
 800310c:	08003123 	.word	0x08003123
 8003110:	08003141 	.word	0x08003141
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003114:	4b9f      	ldr	r3, [pc, #636]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	4a9e      	ldr	r2, [pc, #632]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800311a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800311e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003120:	e00f      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003126:	3308      	adds	r3, #8
 8003128:	2102      	movs	r1, #2
 800312a:	4618      	mov	r0, r3
 800312c:	f001 f904 	bl	8004338 <RCCEx_PLL2_Config>
 8003130:	4603      	mov	r3, r0
 8003132:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003136:	e004      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800313e:	e000      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003142:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10a      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800314a:	4b92      	ldr	r3, [pc, #584]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800314c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314e:	f023 0103 	bic.w	r1, r3, #3
 8003152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003158:	4a8e      	ldr	r2, [pc, #568]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800315a:	430b      	orrs	r3, r1
 800315c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800315e:	e003      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003160:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003164:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003170:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003174:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003178:	2300      	movs	r3, #0
 800317a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800317e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003182:	460b      	mov	r3, r1
 8003184:	4313      	orrs	r3, r2
 8003186:	f000 8099 	beq.w	80032bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800318a:	4b83      	ldr	r3, [pc, #524]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a82      	ldr	r2, [pc, #520]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003194:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003196:	f7fe f967 	bl	8001468 <HAL_GetTick>
 800319a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800319e:	e00b      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a0:	f7fe f962 	bl	8001468 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b64      	cmp	r3, #100	; 0x64
 80031ae:	d903      	bls.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031b6:	e005      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031b8:	4b77      	ldr	r3, [pc, #476]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0ed      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80031c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d173      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80031cc:	4b71      	ldr	r3, [pc, #452]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031d8:	4053      	eors	r3, r2
 80031da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d015      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031e2:	4b6c      	ldr	r3, [pc, #432]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031ee:	4b69      	ldr	r3, [pc, #420]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f2:	4a68      	ldr	r2, [pc, #416]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031fa:	4b66      	ldr	r3, [pc, #408]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	4a65      	ldr	r2, [pc, #404]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003204:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003206:	4a63      	ldr	r2, [pc, #396]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800320c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800320e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003212:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800321a:	d118      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fe f924 	bl	8001468 <HAL_GetTick>
 8003220:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003224:	e00d      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7fe f91f 	bl	8001468 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003230:	1ad2      	subs	r2, r2, r3
 8003232:	f241 3388 	movw	r3, #5000	; 0x1388
 8003236:	429a      	cmp	r2, r3
 8003238:	d903      	bls.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003240:	e005      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003242:	4b54      	ldr	r3, [pc, #336]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0eb      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800324e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003252:	2b00      	cmp	r3, #0
 8003254:	d129      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800325a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800325e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003266:	d10e      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003268:	4b4a      	ldr	r3, [pc, #296]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003274:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003278:	091a      	lsrs	r2, r3, #4
 800327a:	4b48      	ldr	r3, [pc, #288]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800327c:	4013      	ands	r3, r2
 800327e:	4a45      	ldr	r2, [pc, #276]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003280:	430b      	orrs	r3, r1
 8003282:	6113      	str	r3, [r2, #16]
 8003284:	e005      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003286:	4b43      	ldr	r3, [pc, #268]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	4a42      	ldr	r2, [pc, #264]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800328c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003290:	6113      	str	r3, [r2, #16]
 8003292:	4b40      	ldr	r3, [pc, #256]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003294:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800329a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800329e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a2:	4a3c      	ldr	r2, [pc, #240]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032a4:	430b      	orrs	r3, r1
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
 80032a8:	e008      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80032b2:	e003      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80032bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f002 0301 	and.w	r3, r2, #1
 80032c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032cc:	2300      	movs	r3, #0
 80032ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4313      	orrs	r3, r2
 80032da:	f000 8090 	beq.w	80033fe <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80032de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e6:	2b28      	cmp	r3, #40	; 0x28
 80032e8:	d870      	bhi.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80032ea:	a201      	add	r2, pc, #4	; (adr r2, 80032f0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80032ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f0:	080033d5 	.word	0x080033d5
 80032f4:	080033cd 	.word	0x080033cd
 80032f8:	080033cd 	.word	0x080033cd
 80032fc:	080033cd 	.word	0x080033cd
 8003300:	080033cd 	.word	0x080033cd
 8003304:	080033cd 	.word	0x080033cd
 8003308:	080033cd 	.word	0x080033cd
 800330c:	080033cd 	.word	0x080033cd
 8003310:	080033a1 	.word	0x080033a1
 8003314:	080033cd 	.word	0x080033cd
 8003318:	080033cd 	.word	0x080033cd
 800331c:	080033cd 	.word	0x080033cd
 8003320:	080033cd 	.word	0x080033cd
 8003324:	080033cd 	.word	0x080033cd
 8003328:	080033cd 	.word	0x080033cd
 800332c:	080033cd 	.word	0x080033cd
 8003330:	080033b7 	.word	0x080033b7
 8003334:	080033cd 	.word	0x080033cd
 8003338:	080033cd 	.word	0x080033cd
 800333c:	080033cd 	.word	0x080033cd
 8003340:	080033cd 	.word	0x080033cd
 8003344:	080033cd 	.word	0x080033cd
 8003348:	080033cd 	.word	0x080033cd
 800334c:	080033cd 	.word	0x080033cd
 8003350:	080033d5 	.word	0x080033d5
 8003354:	080033cd 	.word	0x080033cd
 8003358:	080033cd 	.word	0x080033cd
 800335c:	080033cd 	.word	0x080033cd
 8003360:	080033cd 	.word	0x080033cd
 8003364:	080033cd 	.word	0x080033cd
 8003368:	080033cd 	.word	0x080033cd
 800336c:	080033cd 	.word	0x080033cd
 8003370:	080033d5 	.word	0x080033d5
 8003374:	080033cd 	.word	0x080033cd
 8003378:	080033cd 	.word	0x080033cd
 800337c:	080033cd 	.word	0x080033cd
 8003380:	080033cd 	.word	0x080033cd
 8003384:	080033cd 	.word	0x080033cd
 8003388:	080033cd 	.word	0x080033cd
 800338c:	080033cd 	.word	0x080033cd
 8003390:	080033d5 	.word	0x080033d5
 8003394:	58024400 	.word	0x58024400
 8003398:	58024800 	.word	0x58024800
 800339c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033a4:	3308      	adds	r3, #8
 80033a6:	2101      	movs	r1, #1
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 ffc5 	bl	8004338 <RCCEx_PLL2_Config>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80033b4:	e00f      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ba:	3328      	adds	r3, #40	; 0x28
 80033bc:	2101      	movs	r1, #1
 80033be:	4618      	mov	r0, r3
 80033c0:	f001 f86c 	bl	800449c <RCCEx_PLL3_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80033ca:	e004      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033d2:	e000      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80033d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10b      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80033de:	4bc0      	ldr	r3, [pc, #768]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80033e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80033e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ee:	4abc      	ldr	r2, [pc, #752]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80033f0:	430b      	orrs	r3, r1
 80033f2:	6553      	str	r3, [r2, #84]	; 0x54
 80033f4:	e003      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80033fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f002 0302 	and.w	r3, r2, #2
 800340a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800340e:	2300      	movs	r3, #0
 8003410:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003414:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003418:	460b      	mov	r3, r1
 800341a:	4313      	orrs	r3, r2
 800341c:	d043      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800341e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003426:	2b05      	cmp	r3, #5
 8003428:	d824      	bhi.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800342a:	a201      	add	r2, pc, #4	; (adr r2, 8003430 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800342c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003430:	0800347d 	.word	0x0800347d
 8003434:	08003449 	.word	0x08003449
 8003438:	0800345f 	.word	0x0800345f
 800343c:	0800347d 	.word	0x0800347d
 8003440:	0800347d 	.word	0x0800347d
 8003444:	0800347d 	.word	0x0800347d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003448:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800344c:	3308      	adds	r3, #8
 800344e:	2101      	movs	r1, #1
 8003450:	4618      	mov	r0, r3
 8003452:	f000 ff71 	bl	8004338 <RCCEx_PLL2_Config>
 8003456:	4603      	mov	r3, r0
 8003458:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800345c:	e00f      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800345e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003462:	3328      	adds	r3, #40	; 0x28
 8003464:	2101      	movs	r1, #1
 8003466:	4618      	mov	r0, r3
 8003468:	f001 f818 	bl	800449c <RCCEx_PLL3_Config>
 800346c:	4603      	mov	r3, r0
 800346e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003472:	e004      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800347a:	e000      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800347c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800347e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10b      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003486:	4b96      	ldr	r3, [pc, #600]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	f023 0107 	bic.w	r1, r3, #7
 800348e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003496:	4a92      	ldr	r2, [pc, #584]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003498:	430b      	orrs	r3, r1
 800349a:	6553      	str	r3, [r2, #84]	; 0x54
 800349c:	e003      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ae:	f002 0304 	and.w	r3, r2, #4
 80034b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034b6:	2300      	movs	r3, #0
 80034b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034bc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4313      	orrs	r3, r2
 80034c4:	d043      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80034c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	d824      	bhi.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80034d2:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80034d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d8:	08003525 	.word	0x08003525
 80034dc:	080034f1 	.word	0x080034f1
 80034e0:	08003507 	.word	0x08003507
 80034e4:	08003525 	.word	0x08003525
 80034e8:	08003525 	.word	0x08003525
 80034ec:	08003525 	.word	0x08003525
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f4:	3308      	adds	r3, #8
 80034f6:	2101      	movs	r1, #1
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 ff1d 	bl	8004338 <RCCEx_PLL2_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003504:	e00f      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800350a:	3328      	adds	r3, #40	; 0x28
 800350c:	2101      	movs	r1, #1
 800350e:	4618      	mov	r0, r3
 8003510:	f000 ffc4 	bl	800449c <RCCEx_PLL3_Config>
 8003514:	4603      	mov	r3, r0
 8003516:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800351a:	e004      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003522:	e000      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003526:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10b      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800352e:	4b6c      	ldr	r3, [pc, #432]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003532:	f023 0107 	bic.w	r1, r3, #7
 8003536:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800353a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800353e:	4a68      	ldr	r2, [pc, #416]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003540:	430b      	orrs	r3, r1
 8003542:	6593      	str	r3, [r2, #88]	; 0x58
 8003544:	e003      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003546:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800354a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800354e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003556:	f002 0320 	and.w	r3, r2, #32
 800355a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800355e:	2300      	movs	r3, #0
 8003560:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003564:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003568:	460b      	mov	r3, r1
 800356a:	4313      	orrs	r3, r2
 800356c:	d055      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800356e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003572:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003576:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800357a:	d033      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800357c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003580:	d82c      	bhi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003586:	d02f      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358c:	d826      	bhi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800358e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003592:	d02b      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003594:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003598:	d820      	bhi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800359a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800359e:	d012      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80035a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035a4:	d81a      	bhi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d022      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80035aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035ae:	d115      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035b4:	3308      	adds	r3, #8
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 febd 	bl	8004338 <RCCEx_PLL2_Config>
 80035be:	4603      	mov	r3, r0
 80035c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80035c4:	e015      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ca:	3328      	adds	r3, #40	; 0x28
 80035cc:	2102      	movs	r1, #2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 ff64 	bl	800449c <RCCEx_PLL3_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80035da:	e00a      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035e2:	e006      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80035e4:	bf00      	nop
 80035e6:	e004      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80035e8:	bf00      	nop
 80035ea:	e002      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80035ec:	bf00      	nop
 80035ee:	e000      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80035f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10b      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035fa:	4b39      	ldr	r3, [pc, #228]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80035fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003606:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800360a:	4a35      	ldr	r2, [pc, #212]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800360c:	430b      	orrs	r3, r1
 800360e:	6553      	str	r3, [r2, #84]	; 0x54
 8003610:	e003      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003612:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003616:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800361a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003622:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800362a:	2300      	movs	r3, #0
 800362c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003630:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003634:	460b      	mov	r3, r1
 8003636:	4313      	orrs	r3, r2
 8003638:	d058      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800363a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800363e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003642:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003646:	d033      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003648:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800364c:	d82c      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800364e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003652:	d02f      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003658:	d826      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800365a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800365e:	d02b      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003660:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003664:	d820      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800366a:	d012      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800366c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003670:	d81a      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003672:	2b00      	cmp	r3, #0
 8003674:	d022      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367a:	d115      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800367c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003680:	3308      	adds	r3, #8
 8003682:	2100      	movs	r1, #0
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fe57 	bl	8004338 <RCCEx_PLL2_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003690:	e015      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003692:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003696:	3328      	adds	r3, #40	; 0x28
 8003698:	2102      	movs	r1, #2
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fefe 	bl	800449c <RCCEx_PLL3_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80036a6:	e00a      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036ae:	e006      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80036b0:	bf00      	nop
 80036b2:	e004      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80036b4:	bf00      	nop
 80036b6:	e002      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80036b8:	bf00      	nop
 80036ba:	e000      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80036bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10e      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80036c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ca:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80036ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036d6:	4a02      	ldr	r2, [pc, #8]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80036d8:	430b      	orrs	r3, r1
 80036da:	6593      	str	r3, [r2, #88]	; 0x58
 80036dc:	e006      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80036de:	bf00      	nop
 80036e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80036ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80036f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003702:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003706:	460b      	mov	r3, r1
 8003708:	4313      	orrs	r3, r2
 800370a:	d055      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800370c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003710:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003714:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003718:	d033      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800371a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800371e:	d82c      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003724:	d02f      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800372a:	d826      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800372c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003730:	d02b      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003732:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003736:	d820      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800373c:	d012      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800373e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003742:	d81a      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d022      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800374c:	d115      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800374e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003752:	3308      	adds	r3, #8
 8003754:	2100      	movs	r1, #0
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fdee 	bl	8004338 <RCCEx_PLL2_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003762:	e015      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003768:	3328      	adds	r3, #40	; 0x28
 800376a:	2102      	movs	r1, #2
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fe95 	bl	800449c <RCCEx_PLL3_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003778:	e00a      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003780:	e006      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003782:	bf00      	nop
 8003784:	e004      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003786:	bf00      	nop
 8003788:	e002      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800378a:	bf00      	nop
 800378c:	e000      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800378e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003790:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10b      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003798:	4ba1      	ldr	r3, [pc, #644]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80037a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037a8:	4a9d      	ldr	r2, [pc, #628]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037aa:	430b      	orrs	r3, r1
 80037ac:	6593      	str	r3, [r2, #88]	; 0x58
 80037ae:	e003      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80037b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c0:	f002 0308 	and.w	r3, r2, #8
 80037c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037c8:	2300      	movs	r3, #0
 80037ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80037ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80037d2:	460b      	mov	r3, r1
 80037d4:	4313      	orrs	r3, r2
 80037d6:	d01e      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80037d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e4:	d10c      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ea:	3328      	adds	r3, #40	; 0x28
 80037ec:	2102      	movs	r1, #2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fe54 	bl	800449c <RCCEx_PLL3_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003800:	4b87      	ldr	r3, [pc, #540]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003804:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003808:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800380c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003810:	4a83      	ldr	r2, [pc, #524]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003812:	430b      	orrs	r3, r1
 8003814:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800381a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381e:	f002 0310 	and.w	r3, r2, #16
 8003822:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003826:	2300      	movs	r3, #0
 8003828:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800382c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003830:	460b      	mov	r3, r1
 8003832:	4313      	orrs	r3, r2
 8003834:	d01e      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003836:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800383a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800383e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003842:	d10c      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003848:	3328      	adds	r3, #40	; 0x28
 800384a:	2102      	movs	r1, #2
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fe25 	bl	800449c <RCCEx_PLL3_Config>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800385e:	4b70      	ldr	r3, [pc, #448]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003862:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003866:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800386a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800386e:	4a6c      	ldr	r2, [pc, #432]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003870:	430b      	orrs	r3, r1
 8003872:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003880:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003884:	2300      	movs	r3, #0
 8003886:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800388a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800388e:	460b      	mov	r3, r1
 8003890:	4313      	orrs	r3, r2
 8003892:	d03e      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003898:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800389c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038a0:	d022      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80038a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038a6:	d81b      	bhi.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80038ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b0:	d00b      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80038b2:	e015      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038b8:	3308      	adds	r3, #8
 80038ba:	2100      	movs	r1, #0
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 fd3b 	bl	8004338 <RCCEx_PLL2_Config>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80038c8:	e00f      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ce:	3328      	adds	r3, #40	; 0x28
 80038d0:	2102      	movs	r1, #2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fde2 	bl	800449c <RCCEx_PLL3_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80038de:	e004      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038e6:	e000      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80038e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10b      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038f2:	4b4b      	ldr	r3, [pc, #300]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80038fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003902:	4a47      	ldr	r2, [pc, #284]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003904:	430b      	orrs	r3, r1
 8003906:	6593      	str	r3, [r2, #88]	; 0x58
 8003908:	e003      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800390e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800391e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003920:	2300      	movs	r3, #0
 8003922:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003924:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003928:	460b      	mov	r3, r1
 800392a:	4313      	orrs	r3, r2
 800392c:	d03b      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800392e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003936:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800393a:	d01f      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800393c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003940:	d818      	bhi.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003946:	d003      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003948:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800394c:	d007      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800394e:	e011      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003950:	4b33      	ldr	r3, [pc, #204]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	4a32      	ldr	r2, [pc, #200]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800395a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800395c:	e00f      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800395e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003962:	3328      	adds	r3, #40	; 0x28
 8003964:	2101      	movs	r1, #1
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fd98 	bl	800449c <RCCEx_PLL3_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003972:	e004      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800397a:	e000      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800397c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800397e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10b      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003986:	4b26      	ldr	r3, [pc, #152]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800398e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003996:	4a22      	ldr	r2, [pc, #136]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003998:	430b      	orrs	r3, r1
 800399a:	6553      	str	r3, [r2, #84]	; 0x54
 800399c:	e003      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80039a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ae:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80039b2:	673b      	str	r3, [r7, #112]	; 0x70
 80039b4:	2300      	movs	r3, #0
 80039b6:	677b      	str	r3, [r7, #116]	; 0x74
 80039b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80039bc:	460b      	mov	r3, r1
 80039be:	4313      	orrs	r3, r2
 80039c0:	d034      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80039c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80039cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d0:	d007      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80039d2:	e011      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d4:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	4a11      	ldr	r2, [pc, #68]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80039e0:	e00e      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e6:	3308      	adds	r3, #8
 80039e8:	2102      	movs	r1, #2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 fca4 	bl	8004338 <RCCEx_PLL2_Config>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80039f6:	e003      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80039fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10d      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a16:	4a02      	ldr	r2, [pc, #8]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a1c:	e006      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003a1e:	bf00      	nop
 8003a20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a28:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a34:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003a38:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a3e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003a42:	460b      	mov	r3, r1
 8003a44:	4313      	orrs	r3, r2
 8003a46:	d00c      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a4c:	3328      	adds	r3, #40	; 0x28
 8003a4e:	2102      	movs	r1, #2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fd23 	bl	800449c <RCCEx_PLL3_Config>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003a6e:	663b      	str	r3, [r7, #96]	; 0x60
 8003a70:	2300      	movs	r3, #0
 8003a72:	667b      	str	r3, [r7, #100]	; 0x64
 8003a74:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	d038      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a8a:	d018      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003a8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a90:	d811      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a96:	d014      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a9c:	d80b      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d011      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa6:	d106      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aa8:	4bc3      	ldr	r3, [pc, #780]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	4ac2      	ldr	r2, [pc, #776]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003abc:	e004      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003abe:	bf00      	nop
 8003ac0:	e002      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003ac2:	bf00      	nop
 8003ac4:	e000      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10b      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ad0:	4bb9      	ldr	r3, [pc, #740]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae0:	4ab5      	ldr	r2, [pc, #724]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	6553      	str	r3, [r2, #84]	; 0x54
 8003ae6:	e003      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003aec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003afc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003afe:	2300      	movs	r3, #0
 8003b00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b02:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003b06:	460b      	mov	r3, r1
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	d009      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b0c:	4baa      	ldr	r3, [pc, #680]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b1a:	4aa7      	ldr	r2, [pc, #668]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003b2c:	653b      	str	r3, [r7, #80]	; 0x50
 8003b2e:	2300      	movs	r3, #0
 8003b30:	657b      	str	r3, [r7, #84]	; 0x54
 8003b32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003b36:	460b      	mov	r3, r1
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	d009      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b3c:	4b9e      	ldr	r3, [pc, #632]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b40:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	4a9b      	ldr	r2, [pc, #620]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003b5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b5e:	2300      	movs	r3, #0
 8003b60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b62:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003b66:	460b      	mov	r3, r1
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	d009      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003b6c:	4b92      	ldr	r3, [pc, #584]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b70:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7a:	4a8f      	ldr	r2, [pc, #572]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003b8c:	643b      	str	r3, [r7, #64]	; 0x40
 8003b8e:	2300      	movs	r3, #0
 8003b90:	647b      	str	r3, [r7, #68]	; 0x44
 8003b92:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003b96:	460b      	mov	r3, r1
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	d00e      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b9c:	4b86      	ldr	r3, [pc, #536]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	4a85      	ldr	r2, [pc, #532]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ba2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ba6:	6113      	str	r3, [r2, #16]
 8003ba8:	4b83      	ldr	r3, [pc, #524]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003baa:	6919      	ldr	r1, [r3, #16]
 8003bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bb0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003bb4:	4a80      	ldr	r2, [pc, #512]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003bb6:	430b      	orrs	r3, r1
 8003bb8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003bc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bc8:	2300      	movs	r3, #0
 8003bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bcc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	d009      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003bd6:	4b78      	ldr	r3, [pc, #480]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bda:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	4a74      	ldr	r2, [pc, #464]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003be6:	430b      	orrs	r3, r1
 8003be8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003bf6:	633b      	str	r3, [r7, #48]	; 0x30
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8003bfc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003c00:	460b      	mov	r3, r1
 8003c02:	4313      	orrs	r3, r2
 8003c04:	d00a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c06:	4b6c      	ldr	r3, [pc, #432]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c16:	4a68      	ldr	r2, [pc, #416]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	2100      	movs	r1, #0
 8003c26:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c2e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003c32:	460b      	mov	r3, r1
 8003c34:	4313      	orrs	r3, r2
 8003c36:	d011      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fb79 	bl	8004338 <RCCEx_PLL2_Config>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003c4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c64:	2100      	movs	r1, #0
 8003c66:	6239      	str	r1, [r7, #32]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003c72:	460b      	mov	r3, r1
 8003c74:	4313      	orrs	r3, r2
 8003c76:	d011      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c7c:	3308      	adds	r3, #8
 8003c7e:	2101      	movs	r1, #1
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fb59 	bl	8004338 <RCCEx_PLL2_Config>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003c8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	61b9      	str	r1, [r7, #24]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	61fb      	str	r3, [r7, #28]
 8003cae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	d011      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	2102      	movs	r1, #2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fb39 	bl	8004338 <RCCEx_PLL2_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003ccc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cd8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	6139      	str	r1, [r7, #16]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	d011      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cfc:	3328      	adds	r3, #40	; 0x28
 8003cfe:	2100      	movs	r1, #0
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fbcb 	bl	800449c <RCCEx_PLL3_Config>
 8003d06:	4603      	mov	r3, r0
 8003d08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003d0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	2100      	movs	r1, #0
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003d32:	460b      	mov	r3, r1
 8003d34:	4313      	orrs	r3, r2
 8003d36:	d011      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d3c:	3328      	adds	r3, #40	; 0x28
 8003d3e:	2101      	movs	r1, #1
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fbab 	bl	800449c <RCCEx_PLL3_Config>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003d4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	2100      	movs	r1, #0
 8003d66:	6039      	str	r1, [r7, #0]
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	607b      	str	r3, [r7, #4]
 8003d6e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d72:	460b      	mov	r3, r1
 8003d74:	4313      	orrs	r3, r2
 8003d76:	d011      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d7c:	3328      	adds	r3, #40	; 0x28
 8003d7e:	2102      	movs	r1, #2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fb8b 	bl	800449c <RCCEx_PLL3_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003d8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003d9c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	e000      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003db0:	46bd      	mov	sp, r7
 8003db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db6:	bf00      	nop
 8003db8:	58024400 	.word	0x58024400

08003dbc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003dc0:	f7fe fde2 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	091b      	lsrs	r3, r3, #4
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	4904      	ldr	r1, [pc, #16]	; (8003de4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003dd2:	5ccb      	ldrb	r3, [r1, r3]
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	58024400 	.word	0x58024400
 8003de4:	08006d08 	.word	0x08006d08

08003de8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b089      	sub	sp, #36	; 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003df0:	4ba1      	ldr	r3, [pc, #644]	; (8004078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003dfa:	4b9f      	ldr	r3, [pc, #636]	; (8004078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	0b1b      	lsrs	r3, r3, #12
 8003e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e04:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003e06:	4b9c      	ldr	r3, [pc, #624]	; (8004078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0a:	091b      	lsrs	r3, r3, #4
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003e12:	4b99      	ldr	r3, [pc, #612]	; (8004078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e16:	08db      	lsrs	r3, r3, #3
 8003e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8111 	beq.w	8004058 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	f000 8083 	beq.w	8003f44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	f200 80a1 	bhi.w	8003f88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d056      	beq.n	8003f00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003e52:	e099      	b.n	8003f88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e54:	4b88      	ldr	r3, [pc, #544]	; (8004078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0320 	and.w	r3, r3, #32
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d02d      	beq.n	8003ebc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e60:	4b85      	ldr	r3, [pc, #532]	; (8004078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	08db      	lsrs	r3, r3, #3
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	4a84      	ldr	r2, [pc, #528]	; (800407c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e70:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	ee07 3a90 	vmov	s15, r3
 8003e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	ee07 3a90 	vmov	s15, r3
 8003e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e8a:	4b7b      	ldr	r3, [pc, #492]	; (8004078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e92:	ee07 3a90 	vmov	s15, r3
 8003e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003eba:	e087      	b.n	8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004084 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ece:	4b6a      	ldr	r3, [pc, #424]	; (8004078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed6:	ee07 3a90 	vmov	s15, r3
 8003eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ee2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003efe:	e065      	b.n	8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004088 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f12:	4b59      	ldr	r3, [pc, #356]	; (8004078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f1a:	ee07 3a90 	vmov	s15, r3
 8003f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f42:	e043      	b.n	8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800408c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f56:	4b48      	ldr	r3, [pc, #288]	; (8004078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f86:	e021      	b.n	8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004088 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f9a:	4b37      	ldr	r3, [pc, #220]	; (8004078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003fcc:	4b2a      	ldr	r3, [pc, #168]	; (8004078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	0a5b      	lsrs	r3, r3, #9
 8003fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fe6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ff2:	ee17 2a90 	vmov	r2, s15
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003ffa:	4b1f      	ldr	r3, [pc, #124]	; (8004078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	0c1b      	lsrs	r3, r3, #16
 8004000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004004:	ee07 3a90 	vmov	s15, r3
 8004008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004010:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004014:	edd7 6a07 	vldr	s13, [r7, #28]
 8004018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800401c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004020:	ee17 2a90 	vmov	r2, s15
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004028:	4b13      	ldr	r3, [pc, #76]	; (8004078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	0e1b      	lsrs	r3, r3, #24
 800402e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004032:	ee07 3a90 	vmov	s15, r3
 8004036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800403a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800403e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004042:	edd7 6a07 	vldr	s13, [r7, #28]
 8004046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800404a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800404e:	ee17 2a90 	vmov	r2, s15
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004056:	e008      	b.n	800406a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	609a      	str	r2, [r3, #8]
}
 800406a:	bf00      	nop
 800406c:	3724      	adds	r7, #36	; 0x24
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	58024400 	.word	0x58024400
 800407c:	03d09000 	.word	0x03d09000
 8004080:	46000000 	.word	0x46000000
 8004084:	4c742400 	.word	0x4c742400
 8004088:	4a742400 	.word	0x4a742400
 800408c:	4bb71b00 	.word	0x4bb71b00

08004090 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004090:	b480      	push	{r7}
 8004092:	b089      	sub	sp, #36	; 0x24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004098:	4ba1      	ldr	r3, [pc, #644]	; (8004320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80040a2:	4b9f      	ldr	r3, [pc, #636]	; (8004320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a6:	0d1b      	lsrs	r3, r3, #20
 80040a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80040ae:	4b9c      	ldr	r3, [pc, #624]	; (8004320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	0a1b      	lsrs	r3, r3, #8
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80040ba:	4b99      	ldr	r3, [pc, #612]	; (8004320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	08db      	lsrs	r3, r3, #3
 80040c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	fb02 f303 	mul.w	r3, r2, r3
 80040ca:	ee07 3a90 	vmov	s15, r3
 80040ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8111 	beq.w	8004300 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	f000 8083 	beq.w	80041ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	f200 80a1 	bhi.w	8004230 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d056      	beq.n	80041a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80040fa:	e099      	b.n	8004230 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040fc:	4b88      	ldr	r3, [pc, #544]	; (8004320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	2b00      	cmp	r3, #0
 8004106:	d02d      	beq.n	8004164 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004108:	4b85      	ldr	r3, [pc, #532]	; (8004320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	08db      	lsrs	r3, r3, #3
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	4a84      	ldr	r2, [pc, #528]	; (8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004114:	fa22 f303 	lsr.w	r3, r2, r3
 8004118:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	ee07 3a90 	vmov	s15, r3
 8004120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	ee07 3a90 	vmov	s15, r3
 800412a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004132:	4b7b      	ldr	r3, [pc, #492]	; (8004320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004142:	ed97 6a03 	vldr	s12, [r7, #12]
 8004146:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800414a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800414e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800415a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004162:	e087      	b.n	8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800432c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004176:	4b6a      	ldr	r3, [pc, #424]	; (8004320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004186:	ed97 6a03 	vldr	s12, [r7, #12]
 800418a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800418e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800419a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800419e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041a6:	e065      	b.n	8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004330 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80041b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ba:	4b59      	ldr	r3, [pc, #356]	; (8004320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ea:	e043      	b.n	8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004334 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80041fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041fe:	4b48      	ldr	r3, [pc, #288]	; (8004320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800420e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004212:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800421a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800421e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800422e:	e021      	b.n	8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004330 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800423e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004242:	4b37      	ldr	r3, [pc, #220]	; (8004320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004252:	ed97 6a03 	vldr	s12, [r7, #12]
 8004256:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800425a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800425e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800426a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800426e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004272:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004274:	4b2a      	ldr	r3, [pc, #168]	; (8004320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	0a5b      	lsrs	r3, r3, #9
 800427a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800427e:	ee07 3a90 	vmov	s15, r3
 8004282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800428a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800428e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800429a:	ee17 2a90 	vmov	r2, s15
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80042a2:	4b1f      	ldr	r3, [pc, #124]	; (8004320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	0c1b      	lsrs	r3, r3, #16
 80042a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ac:	ee07 3a90 	vmov	s15, r3
 80042b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80042c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042c8:	ee17 2a90 	vmov	r2, s15
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80042d0:	4b13      	ldr	r3, [pc, #76]	; (8004320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	0e1b      	lsrs	r3, r3, #24
 80042d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80042ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042f6:	ee17 2a90 	vmov	r2, s15
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80042fe:	e008      	b.n	8004312 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	609a      	str	r2, [r3, #8]
}
 8004312:	bf00      	nop
 8004314:	3724      	adds	r7, #36	; 0x24
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	58024400 	.word	0x58024400
 8004324:	03d09000 	.word	0x03d09000
 8004328:	46000000 	.word	0x46000000
 800432c:	4c742400 	.word	0x4c742400
 8004330:	4a742400 	.word	0x4a742400
 8004334:	4bb71b00 	.word	0x4bb71b00

08004338 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004346:	4b53      	ldr	r3, [pc, #332]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	2b03      	cmp	r3, #3
 8004350:	d101      	bne.n	8004356 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e099      	b.n	800448a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004356:	4b4f      	ldr	r3, [pc, #316]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a4e      	ldr	r2, [pc, #312]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 800435c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004360:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004362:	f7fd f881 	bl	8001468 <HAL_GetTick>
 8004366:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004368:	e008      	b.n	800437c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800436a:	f7fd f87d 	bl	8001468 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e086      	b.n	800448a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800437c:	4b45      	ldr	r3, [pc, #276]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1f0      	bne.n	800436a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004388:	4b42      	ldr	r3, [pc, #264]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	031b      	lsls	r3, r3, #12
 8004396:	493f      	ldr	r1, [pc, #252]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 8004398:	4313      	orrs	r3, r2
 800439a:	628b      	str	r3, [r1, #40]	; 0x28
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	025b      	lsls	r3, r3, #9
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	041b      	lsls	r3, r3, #16
 80043ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	061b      	lsls	r3, r3, #24
 80043c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043cc:	4931      	ldr	r1, [pc, #196]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80043d2:	4b30      	ldr	r3, [pc, #192]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	492d      	ldr	r1, [pc, #180]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80043e4:	4b2b      	ldr	r3, [pc, #172]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	f023 0220 	bic.w	r2, r3, #32
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	4928      	ldr	r1, [pc, #160]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80043f6:	4b27      	ldr	r3, [pc, #156]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	4a26      	ldr	r2, [pc, #152]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 80043fc:	f023 0310 	bic.w	r3, r3, #16
 8004400:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004402:	4b24      	ldr	r3, [pc, #144]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 8004404:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004406:	4b24      	ldr	r3, [pc, #144]	; (8004498 <RCCEx_PLL2_Config+0x160>)
 8004408:	4013      	ands	r3, r2
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	69d2      	ldr	r2, [r2, #28]
 800440e:	00d2      	lsls	r2, r2, #3
 8004410:	4920      	ldr	r1, [pc, #128]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 8004412:	4313      	orrs	r3, r2
 8004414:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004416:	4b1f      	ldr	r3, [pc, #124]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	4a1e      	ldr	r2, [pc, #120]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 800441c:	f043 0310 	orr.w	r3, r3, #16
 8004420:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d106      	bne.n	8004436 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004428:	4b1a      	ldr	r3, [pc, #104]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	4a19      	ldr	r2, [pc, #100]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 800442e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004432:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004434:	e00f      	b.n	8004456 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d106      	bne.n	800444a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800443c:	4b15      	ldr	r3, [pc, #84]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	4a14      	ldr	r2, [pc, #80]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 8004442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004446:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004448:	e005      	b.n	8004456 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800444a:	4b12      	ldr	r3, [pc, #72]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	4a11      	ldr	r2, [pc, #68]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 8004450:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004454:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004456:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a0e      	ldr	r2, [pc, #56]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 800445c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004462:	f7fd f801 	bl	8001468 <HAL_GetTick>
 8004466:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004468:	e008      	b.n	800447c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800446a:	f7fc fffd 	bl	8001468 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e006      	b.n	800448a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <RCCEx_PLL2_Config+0x15c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0f0      	beq.n	800446a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004488:	7bfb      	ldrb	r3, [r7, #15]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	58024400 	.word	0x58024400
 8004498:	ffff0007 	.word	0xffff0007

0800449c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044aa:	4b53      	ldr	r3, [pc, #332]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d101      	bne.n	80044ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e099      	b.n	80045ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80044ba:	4b4f      	ldr	r3, [pc, #316]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a4e      	ldr	r2, [pc, #312]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 80044c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c6:	f7fc ffcf 	bl	8001468 <HAL_GetTick>
 80044ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044cc:	e008      	b.n	80044e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80044ce:	f7fc ffcb 	bl	8001468 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e086      	b.n	80045ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044e0:	4b45      	ldr	r3, [pc, #276]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1f0      	bne.n	80044ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80044ec:	4b42      	ldr	r3, [pc, #264]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	051b      	lsls	r3, r3, #20
 80044fa:	493f      	ldr	r1, [pc, #252]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	628b      	str	r3, [r1, #40]	; 0x28
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	3b01      	subs	r3, #1
 8004506:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	3b01      	subs	r3, #1
 8004510:	025b      	lsls	r3, r3, #9
 8004512:	b29b      	uxth	r3, r3
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	3b01      	subs	r3, #1
 800451c:	041b      	lsls	r3, r3, #16
 800451e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	3b01      	subs	r3, #1
 800452a:	061b      	lsls	r3, r3, #24
 800452c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004530:	4931      	ldr	r1, [pc, #196]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 8004532:	4313      	orrs	r3, r2
 8004534:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004536:	4b30      	ldr	r3, [pc, #192]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	492d      	ldr	r1, [pc, #180]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 8004544:	4313      	orrs	r3, r2
 8004546:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004548:	4b2b      	ldr	r3, [pc, #172]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	4928      	ldr	r1, [pc, #160]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 8004556:	4313      	orrs	r3, r2
 8004558:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800455a:	4b27      	ldr	r3, [pc, #156]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	4a26      	ldr	r2, [pc, #152]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 8004560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004564:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004566:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 8004568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800456a:	4b24      	ldr	r3, [pc, #144]	; (80045fc <RCCEx_PLL3_Config+0x160>)
 800456c:	4013      	ands	r3, r2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	69d2      	ldr	r2, [r2, #28]
 8004572:	00d2      	lsls	r2, r2, #3
 8004574:	4920      	ldr	r1, [pc, #128]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 8004576:	4313      	orrs	r3, r2
 8004578:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800457a:	4b1f      	ldr	r3, [pc, #124]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	4a1e      	ldr	r2, [pc, #120]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 8004580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004584:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d106      	bne.n	800459a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800458c:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	4a19      	ldr	r2, [pc, #100]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 8004592:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004596:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004598:	e00f      	b.n	80045ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d106      	bne.n	80045ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80045a0:	4b15      	ldr	r3, [pc, #84]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	4a14      	ldr	r2, [pc, #80]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 80045a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045ac:	e005      	b.n	80045ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80045ae:	4b12      	ldr	r3, [pc, #72]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 80045b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b2:	4a11      	ldr	r2, [pc, #68]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 80045b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80045ba:	4b0f      	ldr	r3, [pc, #60]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a0e      	ldr	r2, [pc, #56]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 80045c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c6:	f7fc ff4f 	bl	8001468 <HAL_GetTick>
 80045ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045cc:	e008      	b.n	80045e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045ce:	f7fc ff4b 	bl	8001468 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e006      	b.n	80045ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <RCCEx_PLL3_Config+0x15c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0f0      	beq.n	80045ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	58024400 	.word	0x58024400
 80045fc:	ffff0007 	.word	0xffff0007

08004600 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e10f      	b.n	8004832 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a87      	ldr	r2, [pc, #540]	; (800483c <HAL_SPI_Init+0x23c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00f      	beq.n	8004642 <HAL_SPI_Init+0x42>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a86      	ldr	r2, [pc, #536]	; (8004840 <HAL_SPI_Init+0x240>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00a      	beq.n	8004642 <HAL_SPI_Init+0x42>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a84      	ldr	r2, [pc, #528]	; (8004844 <HAL_SPI_Init+0x244>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d005      	beq.n	8004642 <HAL_SPI_Init+0x42>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	2b0f      	cmp	r3, #15
 800463c:	d901      	bls.n	8004642 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e0f7      	b.n	8004832 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fc12 	bl	8004e6c <SPI_GetPacketSize>
 8004648:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a7b      	ldr	r2, [pc, #492]	; (800483c <HAL_SPI_Init+0x23c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00c      	beq.n	800466e <HAL_SPI_Init+0x6e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a79      	ldr	r2, [pc, #484]	; (8004840 <HAL_SPI_Init+0x240>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d007      	beq.n	800466e <HAL_SPI_Init+0x6e>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a78      	ldr	r2, [pc, #480]	; (8004844 <HAL_SPI_Init+0x244>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d002      	beq.n	800466e <HAL_SPI_Init+0x6e>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b08      	cmp	r3, #8
 800466c:	d811      	bhi.n	8004692 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004672:	4a72      	ldr	r2, [pc, #456]	; (800483c <HAL_SPI_Init+0x23c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d009      	beq.n	800468c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a70      	ldr	r2, [pc, #448]	; (8004840 <HAL_SPI_Init+0x240>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d004      	beq.n	800468c <HAL_SPI_Init+0x8c>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a6f      	ldr	r2, [pc, #444]	; (8004844 <HAL_SPI_Init+0x244>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d104      	bne.n	8004696 <HAL_SPI_Init+0x96>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b10      	cmp	r3, #16
 8004690:	d901      	bls.n	8004696 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e0cd      	b.n	8004832 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fc fc5a 	bl	8000f64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0201 	bic.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80046d2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046dc:	d119      	bne.n	8004712 <HAL_SPI_Init+0x112>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e6:	d103      	bne.n	80046f0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10c      	bne.n	8004712 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80046fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004700:	d107      	bne.n	8004712 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004710:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00f      	beq.n	800473e <HAL_SPI_Init+0x13e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	2b06      	cmp	r3, #6
 8004724:	d90b      	bls.n	800473e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	e007      	b.n	800474e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800474c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69da      	ldr	r2, [r3, #28]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004756:	431a      	orrs	r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004760:	ea42 0103 	orr.w	r1, r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ae:	ea42 0103 	orr.w	r1, r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d113      	bne.n	80047ee <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047d8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047ec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0201 	bic.w	r2, r2, #1
 80047fc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40013000 	.word	0x40013000
 8004840:	40003800 	.word	0x40003800
 8004844:	40003c00 	.word	0x40003c00

08004848 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	4613      	mov	r3, r2
 8004856:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485c:	095b      	lsrs	r3, r3, #5
 800485e:	b29b      	uxth	r3, r3
 8004860:	3301      	adds	r3, #1
 8004862:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3330      	adds	r3, #48	; 0x30
 800486a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800486c:	f7fc fdfc 	bl	8001468 <HAL_GetTick>
 8004870:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b01      	cmp	r3, #1
 800487c:	d001      	beq.n	8004882 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800487e:	2302      	movs	r3, #2
 8004880:	e250      	b.n	8004d24 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <HAL_SPI_Receive+0x46>
 8004888:	88fb      	ldrh	r3, [r7, #6]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e248      	b.n	8004d24 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_SPI_Receive+0x58>
 800489c:	2302      	movs	r3, #2
 800489e:	e241      	b.n	8004d24 <HAL_SPI_Receive+0x4dc>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2204      	movs	r2, #4
 80048ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	88fa      	ldrh	r2, [r7, #6]
 80048c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	88fa      	ldrh	r2, [r7, #6]
 80048ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80048f8:	d108      	bne.n	800490c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e009      	b.n	8004920 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800491e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	4b95      	ldr	r3, [pc, #596]	; (8004b7c <HAL_SPI_Receive+0x334>)
 8004928:	4013      	ands	r3, r2
 800492a:	88f9      	ldrh	r1, [r7, #6]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	6812      	ldr	r2, [r2, #0]
 8004930:	430b      	orrs	r3, r1
 8004932:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800494c:	d107      	bne.n	800495e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800495c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	2b0f      	cmp	r3, #15
 8004964:	d96c      	bls.n	8004a40 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004966:	e064      	b.n	8004a32 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b01      	cmp	r3, #1
 800497c:	d114      	bne.n	80049a8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004986:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004988:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800498e:	1d1a      	adds	r2, r3, #4
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80049a6:	e044      	b.n	8004a32 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	8bfa      	ldrh	r2, [r7, #30]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d919      	bls.n	80049ea <HAL_SPI_Receive+0x1a2>
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d014      	beq.n	80049ea <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049ca:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049d0:	1d1a      	adds	r2, r3, #4
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80049e8:	e023      	b.n	8004a32 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ea:	f7fc fd3d 	bl	8001468 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d803      	bhi.n	8004a02 <HAL_SPI_Receive+0x1ba>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a00:	d102      	bne.n	8004a08 <HAL_SPI_Receive+0x1c0>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d114      	bne.n	8004a32 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 f98f 	bl	8004d2c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e178      	b.n	8004d24 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d194      	bne.n	8004968 <HAL_SPI_Receive+0x120>
 8004a3e:	e15e      	b.n	8004cfe <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	2b07      	cmp	r3, #7
 8004a46:	f240 8153 	bls.w	8004cf0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004a4a:	e08f      	b.n	8004b6c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d114      	bne.n	8004a8c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	8812      	ldrh	r2, [r2, #0]
 8004a6a:	b292      	uxth	r2, r2
 8004a6c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a72:	1c9a      	adds	r2, r3, #2
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004a8a:	e06f      	b.n	8004b6c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	8bfa      	ldrh	r2, [r7, #30]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d924      	bls.n	8004ae4 <HAL_SPI_Receive+0x29c>
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01f      	beq.n	8004ae4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	8812      	ldrh	r2, [r2, #0]
 8004aac:	b292      	uxth	r2, r2
 8004aae:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ab4:	1c9a      	adds	r2, r3, #2
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	8812      	ldrh	r2, [r2, #0]
 8004ac2:	b292      	uxth	r2, r2
 8004ac4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aca:	1c9a      	adds	r2, r3, #2
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b02      	subs	r3, #2
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004ae2:	e043      	b.n	8004b6c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d119      	bne.n	8004b24 <HAL_SPI_Receive+0x2dc>
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d014      	beq.n	8004b24 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	8812      	ldrh	r2, [r2, #0]
 8004b02:	b292      	uxth	r2, r2
 8004b04:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b0a:	1c9a      	adds	r2, r3, #2
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004b22:	e023      	b.n	8004b6c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b24:	f7fc fca0 	bl	8001468 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d803      	bhi.n	8004b3c <HAL_SPI_Receive+0x2f4>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b3a:	d102      	bne.n	8004b42 <HAL_SPI_Receive+0x2fa>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d114      	bne.n	8004b6c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 f8f2 	bl	8004d2c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e0db      	b.n	8004d24 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f47f af69 	bne.w	8004a4c <HAL_SPI_Receive+0x204>
 8004b7a:	e0c0      	b.n	8004cfe <HAL_SPI_Receive+0x4b6>
 8004b7c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d117      	bne.n	8004bc6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ba2:	7812      	ldrb	r2, [r2, #0]
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004bc4:	e094      	b.n	8004cf0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	8bfa      	ldrh	r2, [r7, #30]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d946      	bls.n	8004c62 <HAL_SPI_Receive+0x41a>
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d041      	beq.n	8004c62 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bea:	7812      	ldrb	r2, [r2, #0]
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c06:	7812      	ldrb	r2, [r2, #0]
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c22:	7812      	ldrb	r2, [r2, #0]
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c3e:	7812      	ldrb	r2, [r2, #0]
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	3b04      	subs	r3, #4
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004c60:	e046      	b.n	8004cf0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d81c      	bhi.n	8004ca8 <HAL_SPI_Receive+0x460>
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d017      	beq.n	8004ca8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c84:	7812      	ldrb	r2, [r2, #0]
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004ca6:	e023      	b.n	8004cf0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ca8:	f7fc fbde 	bl	8001468 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d803      	bhi.n	8004cc0 <HAL_SPI_Receive+0x478>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cbe:	d102      	bne.n	8004cc6 <HAL_SPI_Receive+0x47e>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d114      	bne.n	8004cf0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 f830 	bl	8004d2c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e019      	b.n	8004d24 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f47f af41 	bne.w	8004b80 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 f814 	bl	8004d2c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8004d22:	2300      	movs	r3, #0
  }
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3720      	adds	r7, #32
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0208 	orr.w	r2, r2, #8
 8004d4a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0210 	orr.w	r2, r2, #16
 8004d5a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0201 	bic.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6919      	ldr	r1, [r3, #16]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	4b3c      	ldr	r3, [pc, #240]	; (8004e68 <SPI_CloseTransfer+0x13c>)
 8004d78:	400b      	ands	r3, r1
 8004d7a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004d8a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d014      	beq.n	8004dc2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00f      	beq.n	8004dc2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699a      	ldr	r2, [r3, #24]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f042 0220 	orr.w	r2, r2, #32
 8004dc0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d014      	beq.n	8004df8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00f      	beq.n	8004df8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dde:	f043 0204 	orr.w	r2, r3, #4
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004df6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00f      	beq.n	8004e22 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e08:	f043 0201 	orr.w	r2, r3, #1
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699a      	ldr	r2, [r3, #24]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e20:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00f      	beq.n	8004e4c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e32:	f043 0208 	orr.w	r2, r3, #8
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e4a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	fffffc90 	.word	0xfffffc90

08004e6c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	3301      	adds	r3, #1
 8004e84:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	3307      	adds	r3, #7
 8004e8a:	08db      	lsrs	r3, r3, #3
 8004e8c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	fb02 f303 	mul.w	r3, r2, r3
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b082      	sub	sp, #8
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e042      	b.n	8004f3a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fc f8dc 	bl	8001084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2224      	movs	r2, #36	; 0x24
 8004ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0201 	bic.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 ff23 	bl	8005d38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f8b4 	bl	8005060 <UART_SetConfig>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e01b      	b.n	8004f3a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0201 	orr.w	r2, r2, #1
 8004f30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 ffa2 	bl	8005e7c <UART_CheckIdleState>
 8004f38:	4603      	mov	r3, r0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b08a      	sub	sp, #40	; 0x28
 8004f46:	af02      	add	r7, sp, #8
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	603b      	str	r3, [r7, #0]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d17b      	bne.n	8005054 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <HAL_UART_Transmit+0x26>
 8004f62:	88fb      	ldrh	r3, [r7, #6]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e074      	b.n	8005056 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2221      	movs	r2, #33	; 0x21
 8004f78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f7c:	f7fc fa74 	bl	8001468 <HAL_GetTick>
 8004f80:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	88fa      	ldrh	r2, [r7, #6]
 8004f86:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	88fa      	ldrh	r2, [r7, #6]
 8004f8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f9a:	d108      	bne.n	8004fae <HAL_UART_Transmit+0x6c>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d104      	bne.n	8004fae <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	61bb      	str	r3, [r7, #24]
 8004fac:	e003      	b.n	8004fb6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fb6:	e030      	b.n	800501a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	2180      	movs	r1, #128	; 0x80
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f001 f804 	bl	8005fd0 <UART_WaitOnFlagUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e03d      	b.n	8005056 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10b      	bne.n	8004ff8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	3302      	adds	r3, #2
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	e007      	b.n	8005008 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	781a      	ldrb	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	3301      	adds	r3, #1
 8005006:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1c8      	bne.n	8004fb8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2200      	movs	r2, #0
 800502e:	2140      	movs	r1, #64	; 0x40
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 ffcd 	bl	8005fd0 <UART_WaitOnFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e006      	b.n	8005056 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2220      	movs	r2, #32
 800504c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	e000      	b.n	8005056 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005054:	2302      	movs	r3, #2
  }
}
 8005056:	4618      	mov	r0, r3
 8005058:	3720      	adds	r7, #32
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005064:	b092      	sub	sp, #72	; 0x48
 8005066:	af00      	add	r7, sp, #0
 8005068:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	431a      	orrs	r2, r3
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	431a      	orrs	r2, r3
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	4313      	orrs	r3, r2
 8005086:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4bbe      	ldr	r3, [pc, #760]	; (8005388 <UART_SetConfig+0x328>)
 8005090:	4013      	ands	r3, r2
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	6812      	ldr	r2, [r2, #0]
 8005096:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005098:	430b      	orrs	r3, r1
 800509a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4ab3      	ldr	r2, [pc, #716]	; (800538c <UART_SetConfig+0x32c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d004      	beq.n	80050cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050c8:	4313      	orrs	r3, r2
 80050ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	4baf      	ldr	r3, [pc, #700]	; (8005390 <UART_SetConfig+0x330>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	6812      	ldr	r2, [r2, #0]
 80050da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050dc:	430b      	orrs	r3, r1
 80050de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	f023 010f 	bic.w	r1, r3, #15
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4aa6      	ldr	r2, [pc, #664]	; (8005394 <UART_SetConfig+0x334>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d177      	bne.n	80051f0 <UART_SetConfig+0x190>
 8005100:	4ba5      	ldr	r3, [pc, #660]	; (8005398 <UART_SetConfig+0x338>)
 8005102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005104:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005108:	2b28      	cmp	r3, #40	; 0x28
 800510a:	d86d      	bhi.n	80051e8 <UART_SetConfig+0x188>
 800510c:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <UART_SetConfig+0xb4>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	080051b9 	.word	0x080051b9
 8005118:	080051e9 	.word	0x080051e9
 800511c:	080051e9 	.word	0x080051e9
 8005120:	080051e9 	.word	0x080051e9
 8005124:	080051e9 	.word	0x080051e9
 8005128:	080051e9 	.word	0x080051e9
 800512c:	080051e9 	.word	0x080051e9
 8005130:	080051e9 	.word	0x080051e9
 8005134:	080051c1 	.word	0x080051c1
 8005138:	080051e9 	.word	0x080051e9
 800513c:	080051e9 	.word	0x080051e9
 8005140:	080051e9 	.word	0x080051e9
 8005144:	080051e9 	.word	0x080051e9
 8005148:	080051e9 	.word	0x080051e9
 800514c:	080051e9 	.word	0x080051e9
 8005150:	080051e9 	.word	0x080051e9
 8005154:	080051c9 	.word	0x080051c9
 8005158:	080051e9 	.word	0x080051e9
 800515c:	080051e9 	.word	0x080051e9
 8005160:	080051e9 	.word	0x080051e9
 8005164:	080051e9 	.word	0x080051e9
 8005168:	080051e9 	.word	0x080051e9
 800516c:	080051e9 	.word	0x080051e9
 8005170:	080051e9 	.word	0x080051e9
 8005174:	080051d1 	.word	0x080051d1
 8005178:	080051e9 	.word	0x080051e9
 800517c:	080051e9 	.word	0x080051e9
 8005180:	080051e9 	.word	0x080051e9
 8005184:	080051e9 	.word	0x080051e9
 8005188:	080051e9 	.word	0x080051e9
 800518c:	080051e9 	.word	0x080051e9
 8005190:	080051e9 	.word	0x080051e9
 8005194:	080051d9 	.word	0x080051d9
 8005198:	080051e9 	.word	0x080051e9
 800519c:	080051e9 	.word	0x080051e9
 80051a0:	080051e9 	.word	0x080051e9
 80051a4:	080051e9 	.word	0x080051e9
 80051a8:	080051e9 	.word	0x080051e9
 80051ac:	080051e9 	.word	0x080051e9
 80051b0:	080051e9 	.word	0x080051e9
 80051b4:	080051e1 	.word	0x080051e1
 80051b8:	2301      	movs	r3, #1
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051be:	e326      	b.n	800580e <UART_SetConfig+0x7ae>
 80051c0:	2304      	movs	r3, #4
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c6:	e322      	b.n	800580e <UART_SetConfig+0x7ae>
 80051c8:	2308      	movs	r3, #8
 80051ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ce:	e31e      	b.n	800580e <UART_SetConfig+0x7ae>
 80051d0:	2310      	movs	r3, #16
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d6:	e31a      	b.n	800580e <UART_SetConfig+0x7ae>
 80051d8:	2320      	movs	r3, #32
 80051da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051de:	e316      	b.n	800580e <UART_SetConfig+0x7ae>
 80051e0:	2340      	movs	r3, #64	; 0x40
 80051e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051e6:	e312      	b.n	800580e <UART_SetConfig+0x7ae>
 80051e8:	2380      	movs	r3, #128	; 0x80
 80051ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ee:	e30e      	b.n	800580e <UART_SetConfig+0x7ae>
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a69      	ldr	r2, [pc, #420]	; (800539c <UART_SetConfig+0x33c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d130      	bne.n	800525c <UART_SetConfig+0x1fc>
 80051fa:	4b67      	ldr	r3, [pc, #412]	; (8005398 <UART_SetConfig+0x338>)
 80051fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	2b05      	cmp	r3, #5
 8005204:	d826      	bhi.n	8005254 <UART_SetConfig+0x1f4>
 8005206:	a201      	add	r2, pc, #4	; (adr r2, 800520c <UART_SetConfig+0x1ac>)
 8005208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520c:	08005225 	.word	0x08005225
 8005210:	0800522d 	.word	0x0800522d
 8005214:	08005235 	.word	0x08005235
 8005218:	0800523d 	.word	0x0800523d
 800521c:	08005245 	.word	0x08005245
 8005220:	0800524d 	.word	0x0800524d
 8005224:	2300      	movs	r3, #0
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522a:	e2f0      	b.n	800580e <UART_SetConfig+0x7ae>
 800522c:	2304      	movs	r3, #4
 800522e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005232:	e2ec      	b.n	800580e <UART_SetConfig+0x7ae>
 8005234:	2308      	movs	r3, #8
 8005236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523a:	e2e8      	b.n	800580e <UART_SetConfig+0x7ae>
 800523c:	2310      	movs	r3, #16
 800523e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005242:	e2e4      	b.n	800580e <UART_SetConfig+0x7ae>
 8005244:	2320      	movs	r3, #32
 8005246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524a:	e2e0      	b.n	800580e <UART_SetConfig+0x7ae>
 800524c:	2340      	movs	r3, #64	; 0x40
 800524e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005252:	e2dc      	b.n	800580e <UART_SetConfig+0x7ae>
 8005254:	2380      	movs	r3, #128	; 0x80
 8005256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525a:	e2d8      	b.n	800580e <UART_SetConfig+0x7ae>
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a4f      	ldr	r2, [pc, #316]	; (80053a0 <UART_SetConfig+0x340>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d130      	bne.n	80052c8 <UART_SetConfig+0x268>
 8005266:	4b4c      	ldr	r3, [pc, #304]	; (8005398 <UART_SetConfig+0x338>)
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	2b05      	cmp	r3, #5
 8005270:	d826      	bhi.n	80052c0 <UART_SetConfig+0x260>
 8005272:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <UART_SetConfig+0x218>)
 8005274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005278:	08005291 	.word	0x08005291
 800527c:	08005299 	.word	0x08005299
 8005280:	080052a1 	.word	0x080052a1
 8005284:	080052a9 	.word	0x080052a9
 8005288:	080052b1 	.word	0x080052b1
 800528c:	080052b9 	.word	0x080052b9
 8005290:	2300      	movs	r3, #0
 8005292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005296:	e2ba      	b.n	800580e <UART_SetConfig+0x7ae>
 8005298:	2304      	movs	r3, #4
 800529a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529e:	e2b6      	b.n	800580e <UART_SetConfig+0x7ae>
 80052a0:	2308      	movs	r3, #8
 80052a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a6:	e2b2      	b.n	800580e <UART_SetConfig+0x7ae>
 80052a8:	2310      	movs	r3, #16
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ae:	e2ae      	b.n	800580e <UART_SetConfig+0x7ae>
 80052b0:	2320      	movs	r3, #32
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b6:	e2aa      	b.n	800580e <UART_SetConfig+0x7ae>
 80052b8:	2340      	movs	r3, #64	; 0x40
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052be:	e2a6      	b.n	800580e <UART_SetConfig+0x7ae>
 80052c0:	2380      	movs	r3, #128	; 0x80
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052c6:	e2a2      	b.n	800580e <UART_SetConfig+0x7ae>
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a35      	ldr	r2, [pc, #212]	; (80053a4 <UART_SetConfig+0x344>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d130      	bne.n	8005334 <UART_SetConfig+0x2d4>
 80052d2:	4b31      	ldr	r3, [pc, #196]	; (8005398 <UART_SetConfig+0x338>)
 80052d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	2b05      	cmp	r3, #5
 80052dc:	d826      	bhi.n	800532c <UART_SetConfig+0x2cc>
 80052de:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <UART_SetConfig+0x284>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	080052fd 	.word	0x080052fd
 80052e8:	08005305 	.word	0x08005305
 80052ec:	0800530d 	.word	0x0800530d
 80052f0:	08005315 	.word	0x08005315
 80052f4:	0800531d 	.word	0x0800531d
 80052f8:	08005325 	.word	0x08005325
 80052fc:	2300      	movs	r3, #0
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005302:	e284      	b.n	800580e <UART_SetConfig+0x7ae>
 8005304:	2304      	movs	r3, #4
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530a:	e280      	b.n	800580e <UART_SetConfig+0x7ae>
 800530c:	2308      	movs	r3, #8
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005312:	e27c      	b.n	800580e <UART_SetConfig+0x7ae>
 8005314:	2310      	movs	r3, #16
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800531a:	e278      	b.n	800580e <UART_SetConfig+0x7ae>
 800531c:	2320      	movs	r3, #32
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005322:	e274      	b.n	800580e <UART_SetConfig+0x7ae>
 8005324:	2340      	movs	r3, #64	; 0x40
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800532a:	e270      	b.n	800580e <UART_SetConfig+0x7ae>
 800532c:	2380      	movs	r3, #128	; 0x80
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005332:	e26c      	b.n	800580e <UART_SetConfig+0x7ae>
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a1b      	ldr	r2, [pc, #108]	; (80053a8 <UART_SetConfig+0x348>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d142      	bne.n	80053c4 <UART_SetConfig+0x364>
 800533e:	4b16      	ldr	r3, [pc, #88]	; (8005398 <UART_SetConfig+0x338>)
 8005340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	2b05      	cmp	r3, #5
 8005348:	d838      	bhi.n	80053bc <UART_SetConfig+0x35c>
 800534a:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <UART_SetConfig+0x2f0>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	08005369 	.word	0x08005369
 8005354:	08005371 	.word	0x08005371
 8005358:	08005379 	.word	0x08005379
 800535c:	08005381 	.word	0x08005381
 8005360:	080053ad 	.word	0x080053ad
 8005364:	080053b5 	.word	0x080053b5
 8005368:	2300      	movs	r3, #0
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800536e:	e24e      	b.n	800580e <UART_SetConfig+0x7ae>
 8005370:	2304      	movs	r3, #4
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005376:	e24a      	b.n	800580e <UART_SetConfig+0x7ae>
 8005378:	2308      	movs	r3, #8
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537e:	e246      	b.n	800580e <UART_SetConfig+0x7ae>
 8005380:	2310      	movs	r3, #16
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005386:	e242      	b.n	800580e <UART_SetConfig+0x7ae>
 8005388:	cfff69f3 	.word	0xcfff69f3
 800538c:	58000c00 	.word	0x58000c00
 8005390:	11fff4ff 	.word	0x11fff4ff
 8005394:	40011000 	.word	0x40011000
 8005398:	58024400 	.word	0x58024400
 800539c:	40004400 	.word	0x40004400
 80053a0:	40004800 	.word	0x40004800
 80053a4:	40004c00 	.word	0x40004c00
 80053a8:	40005000 	.word	0x40005000
 80053ac:	2320      	movs	r3, #32
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053b2:	e22c      	b.n	800580e <UART_SetConfig+0x7ae>
 80053b4:	2340      	movs	r3, #64	; 0x40
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ba:	e228      	b.n	800580e <UART_SetConfig+0x7ae>
 80053bc:	2380      	movs	r3, #128	; 0x80
 80053be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053c2:	e224      	b.n	800580e <UART_SetConfig+0x7ae>
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4ab1      	ldr	r2, [pc, #708]	; (8005690 <UART_SetConfig+0x630>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d176      	bne.n	80054bc <UART_SetConfig+0x45c>
 80053ce:	4bb1      	ldr	r3, [pc, #708]	; (8005694 <UART_SetConfig+0x634>)
 80053d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053d6:	2b28      	cmp	r3, #40	; 0x28
 80053d8:	d86c      	bhi.n	80054b4 <UART_SetConfig+0x454>
 80053da:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <UART_SetConfig+0x380>)
 80053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e0:	08005485 	.word	0x08005485
 80053e4:	080054b5 	.word	0x080054b5
 80053e8:	080054b5 	.word	0x080054b5
 80053ec:	080054b5 	.word	0x080054b5
 80053f0:	080054b5 	.word	0x080054b5
 80053f4:	080054b5 	.word	0x080054b5
 80053f8:	080054b5 	.word	0x080054b5
 80053fc:	080054b5 	.word	0x080054b5
 8005400:	0800548d 	.word	0x0800548d
 8005404:	080054b5 	.word	0x080054b5
 8005408:	080054b5 	.word	0x080054b5
 800540c:	080054b5 	.word	0x080054b5
 8005410:	080054b5 	.word	0x080054b5
 8005414:	080054b5 	.word	0x080054b5
 8005418:	080054b5 	.word	0x080054b5
 800541c:	080054b5 	.word	0x080054b5
 8005420:	08005495 	.word	0x08005495
 8005424:	080054b5 	.word	0x080054b5
 8005428:	080054b5 	.word	0x080054b5
 800542c:	080054b5 	.word	0x080054b5
 8005430:	080054b5 	.word	0x080054b5
 8005434:	080054b5 	.word	0x080054b5
 8005438:	080054b5 	.word	0x080054b5
 800543c:	080054b5 	.word	0x080054b5
 8005440:	0800549d 	.word	0x0800549d
 8005444:	080054b5 	.word	0x080054b5
 8005448:	080054b5 	.word	0x080054b5
 800544c:	080054b5 	.word	0x080054b5
 8005450:	080054b5 	.word	0x080054b5
 8005454:	080054b5 	.word	0x080054b5
 8005458:	080054b5 	.word	0x080054b5
 800545c:	080054b5 	.word	0x080054b5
 8005460:	080054a5 	.word	0x080054a5
 8005464:	080054b5 	.word	0x080054b5
 8005468:	080054b5 	.word	0x080054b5
 800546c:	080054b5 	.word	0x080054b5
 8005470:	080054b5 	.word	0x080054b5
 8005474:	080054b5 	.word	0x080054b5
 8005478:	080054b5 	.word	0x080054b5
 800547c:	080054b5 	.word	0x080054b5
 8005480:	080054ad 	.word	0x080054ad
 8005484:	2301      	movs	r3, #1
 8005486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800548a:	e1c0      	b.n	800580e <UART_SetConfig+0x7ae>
 800548c:	2304      	movs	r3, #4
 800548e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005492:	e1bc      	b.n	800580e <UART_SetConfig+0x7ae>
 8005494:	2308      	movs	r3, #8
 8005496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800549a:	e1b8      	b.n	800580e <UART_SetConfig+0x7ae>
 800549c:	2310      	movs	r3, #16
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a2:	e1b4      	b.n	800580e <UART_SetConfig+0x7ae>
 80054a4:	2320      	movs	r3, #32
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054aa:	e1b0      	b.n	800580e <UART_SetConfig+0x7ae>
 80054ac:	2340      	movs	r3, #64	; 0x40
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b2:	e1ac      	b.n	800580e <UART_SetConfig+0x7ae>
 80054b4:	2380      	movs	r3, #128	; 0x80
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ba:	e1a8      	b.n	800580e <UART_SetConfig+0x7ae>
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a75      	ldr	r2, [pc, #468]	; (8005698 <UART_SetConfig+0x638>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d130      	bne.n	8005528 <UART_SetConfig+0x4c8>
 80054c6:	4b73      	ldr	r3, [pc, #460]	; (8005694 <UART_SetConfig+0x634>)
 80054c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	2b05      	cmp	r3, #5
 80054d0:	d826      	bhi.n	8005520 <UART_SetConfig+0x4c0>
 80054d2:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <UART_SetConfig+0x478>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	080054f1 	.word	0x080054f1
 80054dc:	080054f9 	.word	0x080054f9
 80054e0:	08005501 	.word	0x08005501
 80054e4:	08005509 	.word	0x08005509
 80054e8:	08005511 	.word	0x08005511
 80054ec:	08005519 	.word	0x08005519
 80054f0:	2300      	movs	r3, #0
 80054f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054f6:	e18a      	b.n	800580e <UART_SetConfig+0x7ae>
 80054f8:	2304      	movs	r3, #4
 80054fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054fe:	e186      	b.n	800580e <UART_SetConfig+0x7ae>
 8005500:	2308      	movs	r3, #8
 8005502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005506:	e182      	b.n	800580e <UART_SetConfig+0x7ae>
 8005508:	2310      	movs	r3, #16
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800550e:	e17e      	b.n	800580e <UART_SetConfig+0x7ae>
 8005510:	2320      	movs	r3, #32
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005516:	e17a      	b.n	800580e <UART_SetConfig+0x7ae>
 8005518:	2340      	movs	r3, #64	; 0x40
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800551e:	e176      	b.n	800580e <UART_SetConfig+0x7ae>
 8005520:	2380      	movs	r3, #128	; 0x80
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005526:	e172      	b.n	800580e <UART_SetConfig+0x7ae>
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a5b      	ldr	r2, [pc, #364]	; (800569c <UART_SetConfig+0x63c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d130      	bne.n	8005594 <UART_SetConfig+0x534>
 8005532:	4b58      	ldr	r3, [pc, #352]	; (8005694 <UART_SetConfig+0x634>)
 8005534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	2b05      	cmp	r3, #5
 800553c:	d826      	bhi.n	800558c <UART_SetConfig+0x52c>
 800553e:	a201      	add	r2, pc, #4	; (adr r2, 8005544 <UART_SetConfig+0x4e4>)
 8005540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005544:	0800555d 	.word	0x0800555d
 8005548:	08005565 	.word	0x08005565
 800554c:	0800556d 	.word	0x0800556d
 8005550:	08005575 	.word	0x08005575
 8005554:	0800557d 	.word	0x0800557d
 8005558:	08005585 	.word	0x08005585
 800555c:	2300      	movs	r3, #0
 800555e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005562:	e154      	b.n	800580e <UART_SetConfig+0x7ae>
 8005564:	2304      	movs	r3, #4
 8005566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556a:	e150      	b.n	800580e <UART_SetConfig+0x7ae>
 800556c:	2308      	movs	r3, #8
 800556e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005572:	e14c      	b.n	800580e <UART_SetConfig+0x7ae>
 8005574:	2310      	movs	r3, #16
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557a:	e148      	b.n	800580e <UART_SetConfig+0x7ae>
 800557c:	2320      	movs	r3, #32
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005582:	e144      	b.n	800580e <UART_SetConfig+0x7ae>
 8005584:	2340      	movs	r3, #64	; 0x40
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558a:	e140      	b.n	800580e <UART_SetConfig+0x7ae>
 800558c:	2380      	movs	r3, #128	; 0x80
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005592:	e13c      	b.n	800580e <UART_SetConfig+0x7ae>
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a41      	ldr	r2, [pc, #260]	; (80056a0 <UART_SetConfig+0x640>)
 800559a:	4293      	cmp	r3, r2
 800559c:	f040 8082 	bne.w	80056a4 <UART_SetConfig+0x644>
 80055a0:	4b3c      	ldr	r3, [pc, #240]	; (8005694 <UART_SetConfig+0x634>)
 80055a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055a8:	2b28      	cmp	r3, #40	; 0x28
 80055aa:	d86d      	bhi.n	8005688 <UART_SetConfig+0x628>
 80055ac:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <UART_SetConfig+0x554>)
 80055ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b2:	bf00      	nop
 80055b4:	08005659 	.word	0x08005659
 80055b8:	08005689 	.word	0x08005689
 80055bc:	08005689 	.word	0x08005689
 80055c0:	08005689 	.word	0x08005689
 80055c4:	08005689 	.word	0x08005689
 80055c8:	08005689 	.word	0x08005689
 80055cc:	08005689 	.word	0x08005689
 80055d0:	08005689 	.word	0x08005689
 80055d4:	08005661 	.word	0x08005661
 80055d8:	08005689 	.word	0x08005689
 80055dc:	08005689 	.word	0x08005689
 80055e0:	08005689 	.word	0x08005689
 80055e4:	08005689 	.word	0x08005689
 80055e8:	08005689 	.word	0x08005689
 80055ec:	08005689 	.word	0x08005689
 80055f0:	08005689 	.word	0x08005689
 80055f4:	08005669 	.word	0x08005669
 80055f8:	08005689 	.word	0x08005689
 80055fc:	08005689 	.word	0x08005689
 8005600:	08005689 	.word	0x08005689
 8005604:	08005689 	.word	0x08005689
 8005608:	08005689 	.word	0x08005689
 800560c:	08005689 	.word	0x08005689
 8005610:	08005689 	.word	0x08005689
 8005614:	08005671 	.word	0x08005671
 8005618:	08005689 	.word	0x08005689
 800561c:	08005689 	.word	0x08005689
 8005620:	08005689 	.word	0x08005689
 8005624:	08005689 	.word	0x08005689
 8005628:	08005689 	.word	0x08005689
 800562c:	08005689 	.word	0x08005689
 8005630:	08005689 	.word	0x08005689
 8005634:	08005679 	.word	0x08005679
 8005638:	08005689 	.word	0x08005689
 800563c:	08005689 	.word	0x08005689
 8005640:	08005689 	.word	0x08005689
 8005644:	08005689 	.word	0x08005689
 8005648:	08005689 	.word	0x08005689
 800564c:	08005689 	.word	0x08005689
 8005650:	08005689 	.word	0x08005689
 8005654:	08005681 	.word	0x08005681
 8005658:	2301      	movs	r3, #1
 800565a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800565e:	e0d6      	b.n	800580e <UART_SetConfig+0x7ae>
 8005660:	2304      	movs	r3, #4
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005666:	e0d2      	b.n	800580e <UART_SetConfig+0x7ae>
 8005668:	2308      	movs	r3, #8
 800566a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566e:	e0ce      	b.n	800580e <UART_SetConfig+0x7ae>
 8005670:	2310      	movs	r3, #16
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005676:	e0ca      	b.n	800580e <UART_SetConfig+0x7ae>
 8005678:	2320      	movs	r3, #32
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567e:	e0c6      	b.n	800580e <UART_SetConfig+0x7ae>
 8005680:	2340      	movs	r3, #64	; 0x40
 8005682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005686:	e0c2      	b.n	800580e <UART_SetConfig+0x7ae>
 8005688:	2380      	movs	r3, #128	; 0x80
 800568a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800568e:	e0be      	b.n	800580e <UART_SetConfig+0x7ae>
 8005690:	40011400 	.word	0x40011400
 8005694:	58024400 	.word	0x58024400
 8005698:	40007800 	.word	0x40007800
 800569c:	40007c00 	.word	0x40007c00
 80056a0:	40011800 	.word	0x40011800
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4aad      	ldr	r2, [pc, #692]	; (8005960 <UART_SetConfig+0x900>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d176      	bne.n	800579c <UART_SetConfig+0x73c>
 80056ae:	4bad      	ldr	r3, [pc, #692]	; (8005964 <UART_SetConfig+0x904>)
 80056b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056b6:	2b28      	cmp	r3, #40	; 0x28
 80056b8:	d86c      	bhi.n	8005794 <UART_SetConfig+0x734>
 80056ba:	a201      	add	r2, pc, #4	; (adr r2, 80056c0 <UART_SetConfig+0x660>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	08005765 	.word	0x08005765
 80056c4:	08005795 	.word	0x08005795
 80056c8:	08005795 	.word	0x08005795
 80056cc:	08005795 	.word	0x08005795
 80056d0:	08005795 	.word	0x08005795
 80056d4:	08005795 	.word	0x08005795
 80056d8:	08005795 	.word	0x08005795
 80056dc:	08005795 	.word	0x08005795
 80056e0:	0800576d 	.word	0x0800576d
 80056e4:	08005795 	.word	0x08005795
 80056e8:	08005795 	.word	0x08005795
 80056ec:	08005795 	.word	0x08005795
 80056f0:	08005795 	.word	0x08005795
 80056f4:	08005795 	.word	0x08005795
 80056f8:	08005795 	.word	0x08005795
 80056fc:	08005795 	.word	0x08005795
 8005700:	08005775 	.word	0x08005775
 8005704:	08005795 	.word	0x08005795
 8005708:	08005795 	.word	0x08005795
 800570c:	08005795 	.word	0x08005795
 8005710:	08005795 	.word	0x08005795
 8005714:	08005795 	.word	0x08005795
 8005718:	08005795 	.word	0x08005795
 800571c:	08005795 	.word	0x08005795
 8005720:	0800577d 	.word	0x0800577d
 8005724:	08005795 	.word	0x08005795
 8005728:	08005795 	.word	0x08005795
 800572c:	08005795 	.word	0x08005795
 8005730:	08005795 	.word	0x08005795
 8005734:	08005795 	.word	0x08005795
 8005738:	08005795 	.word	0x08005795
 800573c:	08005795 	.word	0x08005795
 8005740:	08005785 	.word	0x08005785
 8005744:	08005795 	.word	0x08005795
 8005748:	08005795 	.word	0x08005795
 800574c:	08005795 	.word	0x08005795
 8005750:	08005795 	.word	0x08005795
 8005754:	08005795 	.word	0x08005795
 8005758:	08005795 	.word	0x08005795
 800575c:	08005795 	.word	0x08005795
 8005760:	0800578d 	.word	0x0800578d
 8005764:	2301      	movs	r3, #1
 8005766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800576a:	e050      	b.n	800580e <UART_SetConfig+0x7ae>
 800576c:	2304      	movs	r3, #4
 800576e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005772:	e04c      	b.n	800580e <UART_SetConfig+0x7ae>
 8005774:	2308      	movs	r3, #8
 8005776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800577a:	e048      	b.n	800580e <UART_SetConfig+0x7ae>
 800577c:	2310      	movs	r3, #16
 800577e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005782:	e044      	b.n	800580e <UART_SetConfig+0x7ae>
 8005784:	2320      	movs	r3, #32
 8005786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800578a:	e040      	b.n	800580e <UART_SetConfig+0x7ae>
 800578c:	2340      	movs	r3, #64	; 0x40
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005792:	e03c      	b.n	800580e <UART_SetConfig+0x7ae>
 8005794:	2380      	movs	r3, #128	; 0x80
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579a:	e038      	b.n	800580e <UART_SetConfig+0x7ae>
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a71      	ldr	r2, [pc, #452]	; (8005968 <UART_SetConfig+0x908>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d130      	bne.n	8005808 <UART_SetConfig+0x7a8>
 80057a6:	4b6f      	ldr	r3, [pc, #444]	; (8005964 <UART_SetConfig+0x904>)
 80057a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	2b05      	cmp	r3, #5
 80057b0:	d826      	bhi.n	8005800 <UART_SetConfig+0x7a0>
 80057b2:	a201      	add	r2, pc, #4	; (adr r2, 80057b8 <UART_SetConfig+0x758>)
 80057b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b8:	080057d1 	.word	0x080057d1
 80057bc:	080057d9 	.word	0x080057d9
 80057c0:	080057e1 	.word	0x080057e1
 80057c4:	080057e9 	.word	0x080057e9
 80057c8:	080057f1 	.word	0x080057f1
 80057cc:	080057f9 	.word	0x080057f9
 80057d0:	2302      	movs	r3, #2
 80057d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057d6:	e01a      	b.n	800580e <UART_SetConfig+0x7ae>
 80057d8:	2304      	movs	r3, #4
 80057da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057de:	e016      	b.n	800580e <UART_SetConfig+0x7ae>
 80057e0:	2308      	movs	r3, #8
 80057e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057e6:	e012      	b.n	800580e <UART_SetConfig+0x7ae>
 80057e8:	2310      	movs	r3, #16
 80057ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ee:	e00e      	b.n	800580e <UART_SetConfig+0x7ae>
 80057f0:	2320      	movs	r3, #32
 80057f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057f6:	e00a      	b.n	800580e <UART_SetConfig+0x7ae>
 80057f8:	2340      	movs	r3, #64	; 0x40
 80057fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057fe:	e006      	b.n	800580e <UART_SetConfig+0x7ae>
 8005800:	2380      	movs	r3, #128	; 0x80
 8005802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005806:	e002      	b.n	800580e <UART_SetConfig+0x7ae>
 8005808:	2380      	movs	r3, #128	; 0x80
 800580a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a55      	ldr	r2, [pc, #340]	; (8005968 <UART_SetConfig+0x908>)
 8005814:	4293      	cmp	r3, r2
 8005816:	f040 80f8 	bne.w	8005a0a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800581a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800581e:	2b20      	cmp	r3, #32
 8005820:	dc46      	bgt.n	80058b0 <UART_SetConfig+0x850>
 8005822:	2b02      	cmp	r3, #2
 8005824:	db75      	blt.n	8005912 <UART_SetConfig+0x8b2>
 8005826:	3b02      	subs	r3, #2
 8005828:	2b1e      	cmp	r3, #30
 800582a:	d872      	bhi.n	8005912 <UART_SetConfig+0x8b2>
 800582c:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <UART_SetConfig+0x7d4>)
 800582e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005832:	bf00      	nop
 8005834:	080058b7 	.word	0x080058b7
 8005838:	08005913 	.word	0x08005913
 800583c:	080058bf 	.word	0x080058bf
 8005840:	08005913 	.word	0x08005913
 8005844:	08005913 	.word	0x08005913
 8005848:	08005913 	.word	0x08005913
 800584c:	080058cf 	.word	0x080058cf
 8005850:	08005913 	.word	0x08005913
 8005854:	08005913 	.word	0x08005913
 8005858:	08005913 	.word	0x08005913
 800585c:	08005913 	.word	0x08005913
 8005860:	08005913 	.word	0x08005913
 8005864:	08005913 	.word	0x08005913
 8005868:	08005913 	.word	0x08005913
 800586c:	080058df 	.word	0x080058df
 8005870:	08005913 	.word	0x08005913
 8005874:	08005913 	.word	0x08005913
 8005878:	08005913 	.word	0x08005913
 800587c:	08005913 	.word	0x08005913
 8005880:	08005913 	.word	0x08005913
 8005884:	08005913 	.word	0x08005913
 8005888:	08005913 	.word	0x08005913
 800588c:	08005913 	.word	0x08005913
 8005890:	08005913 	.word	0x08005913
 8005894:	08005913 	.word	0x08005913
 8005898:	08005913 	.word	0x08005913
 800589c:	08005913 	.word	0x08005913
 80058a0:	08005913 	.word	0x08005913
 80058a4:	08005913 	.word	0x08005913
 80058a8:	08005913 	.word	0x08005913
 80058ac:	08005905 	.word	0x08005905
 80058b0:	2b40      	cmp	r3, #64	; 0x40
 80058b2:	d02a      	beq.n	800590a <UART_SetConfig+0x8aa>
 80058b4:	e02d      	b.n	8005912 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80058b6:	f7fe fa81 	bl	8003dbc <HAL_RCCEx_GetD3PCLK1Freq>
 80058ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058bc:	e02f      	b.n	800591e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fe fa90 	bl	8003de8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058cc:	e027      	b.n	800591e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058ce:	f107 0318 	add.w	r3, r7, #24
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fe fbdc 	bl	8004090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058dc:	e01f      	b.n	800591e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058de:	4b21      	ldr	r3, [pc, #132]	; (8005964 <UART_SetConfig+0x904>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d009      	beq.n	80058fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058ea:	4b1e      	ldr	r3, [pc, #120]	; (8005964 <UART_SetConfig+0x904>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	08db      	lsrs	r3, r3, #3
 80058f0:	f003 0303 	and.w	r3, r3, #3
 80058f4:	4a1d      	ldr	r2, [pc, #116]	; (800596c <UART_SetConfig+0x90c>)
 80058f6:	fa22 f303 	lsr.w	r3, r2, r3
 80058fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058fc:	e00f      	b.n	800591e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80058fe:	4b1b      	ldr	r3, [pc, #108]	; (800596c <UART_SetConfig+0x90c>)
 8005900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005902:	e00c      	b.n	800591e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005904:	4b1a      	ldr	r3, [pc, #104]	; (8005970 <UART_SetConfig+0x910>)
 8005906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005908:	e009      	b.n	800591e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800590a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800590e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005910:	e005      	b.n	800591e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800591c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800591e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 81ee 	beq.w	8005d02 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	4a12      	ldr	r2, [pc, #72]	; (8005974 <UART_SetConfig+0x914>)
 800592c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005930:	461a      	mov	r2, r3
 8005932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005934:	fbb3 f3f2 	udiv	r3, r3, r2
 8005938:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	4413      	add	r3, r2
 8005944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005946:	429a      	cmp	r2, r3
 8005948:	d305      	bcc.n	8005956 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005952:	429a      	cmp	r2, r3
 8005954:	d910      	bls.n	8005978 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800595c:	e1d1      	b.n	8005d02 <UART_SetConfig+0xca2>
 800595e:	bf00      	nop
 8005960:	40011c00 	.word	0x40011c00
 8005964:	58024400 	.word	0x58024400
 8005968:	58000c00 	.word	0x58000c00
 800596c:	03d09000 	.word	0x03d09000
 8005970:	003d0900 	.word	0x003d0900
 8005974:	08006d18 	.word	0x08006d18
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597a:	2200      	movs	r2, #0
 800597c:	60bb      	str	r3, [r7, #8]
 800597e:	60fa      	str	r2, [r7, #12]
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	4ac0      	ldr	r2, [pc, #768]	; (8005c88 <UART_SetConfig+0xc28>)
 8005986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800598a:	b29b      	uxth	r3, r3
 800598c:	2200      	movs	r2, #0
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	607a      	str	r2, [r7, #4]
 8005992:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005996:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800599a:	f7fa fcf9 	bl	8000390 <__aeabi_uldivmod>
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	4610      	mov	r0, r2
 80059a4:	4619      	mov	r1, r3
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	020b      	lsls	r3, r1, #8
 80059b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059b4:	0202      	lsls	r2, r0, #8
 80059b6:	6979      	ldr	r1, [r7, #20]
 80059b8:	6849      	ldr	r1, [r1, #4]
 80059ba:	0849      	lsrs	r1, r1, #1
 80059bc:	2000      	movs	r0, #0
 80059be:	460c      	mov	r4, r1
 80059c0:	4605      	mov	r5, r0
 80059c2:	eb12 0804 	adds.w	r8, r2, r4
 80059c6:	eb43 0905 	adc.w	r9, r3, r5
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	469a      	mov	sl, r3
 80059d2:	4693      	mov	fp, r2
 80059d4:	4652      	mov	r2, sl
 80059d6:	465b      	mov	r3, fp
 80059d8:	4640      	mov	r0, r8
 80059da:	4649      	mov	r1, r9
 80059dc:	f7fa fcd8 	bl	8000390 <__aeabi_uldivmod>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4613      	mov	r3, r2
 80059e6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ee:	d308      	bcc.n	8005a02 <UART_SetConfig+0x9a2>
 80059f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059f6:	d204      	bcs.n	8005a02 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059fe:	60da      	str	r2, [r3, #12]
 8005a00:	e17f      	b.n	8005d02 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005a08:	e17b      	b.n	8005d02 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a12:	f040 80bd 	bne.w	8005b90 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005a16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	dc48      	bgt.n	8005ab0 <UART_SetConfig+0xa50>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	db7b      	blt.n	8005b1a <UART_SetConfig+0xaba>
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	d879      	bhi.n	8005b1a <UART_SetConfig+0xaba>
 8005a26:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <UART_SetConfig+0x9cc>)
 8005a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2c:	08005ab7 	.word	0x08005ab7
 8005a30:	08005abf 	.word	0x08005abf
 8005a34:	08005b1b 	.word	0x08005b1b
 8005a38:	08005b1b 	.word	0x08005b1b
 8005a3c:	08005ac7 	.word	0x08005ac7
 8005a40:	08005b1b 	.word	0x08005b1b
 8005a44:	08005b1b 	.word	0x08005b1b
 8005a48:	08005b1b 	.word	0x08005b1b
 8005a4c:	08005ad7 	.word	0x08005ad7
 8005a50:	08005b1b 	.word	0x08005b1b
 8005a54:	08005b1b 	.word	0x08005b1b
 8005a58:	08005b1b 	.word	0x08005b1b
 8005a5c:	08005b1b 	.word	0x08005b1b
 8005a60:	08005b1b 	.word	0x08005b1b
 8005a64:	08005b1b 	.word	0x08005b1b
 8005a68:	08005b1b 	.word	0x08005b1b
 8005a6c:	08005ae7 	.word	0x08005ae7
 8005a70:	08005b1b 	.word	0x08005b1b
 8005a74:	08005b1b 	.word	0x08005b1b
 8005a78:	08005b1b 	.word	0x08005b1b
 8005a7c:	08005b1b 	.word	0x08005b1b
 8005a80:	08005b1b 	.word	0x08005b1b
 8005a84:	08005b1b 	.word	0x08005b1b
 8005a88:	08005b1b 	.word	0x08005b1b
 8005a8c:	08005b1b 	.word	0x08005b1b
 8005a90:	08005b1b 	.word	0x08005b1b
 8005a94:	08005b1b 	.word	0x08005b1b
 8005a98:	08005b1b 	.word	0x08005b1b
 8005a9c:	08005b1b 	.word	0x08005b1b
 8005aa0:	08005b1b 	.word	0x08005b1b
 8005aa4:	08005b1b 	.word	0x08005b1b
 8005aa8:	08005b1b 	.word	0x08005b1b
 8005aac:	08005b0d 	.word	0x08005b0d
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d02e      	beq.n	8005b12 <UART_SetConfig+0xab2>
 8005ab4:	e031      	b.n	8005b1a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ab6:	f7fc ff97 	bl	80029e8 <HAL_RCC_GetPCLK1Freq>
 8005aba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005abc:	e033      	b.n	8005b26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005abe:	f7fc ffa9 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8005ac2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ac4:	e02f      	b.n	8005b26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fe f98c 	bl	8003de8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ad4:	e027      	b.n	8005b26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ad6:	f107 0318 	add.w	r3, r7, #24
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fe fad8 	bl	8004090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ae4:	e01f      	b.n	8005b26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ae6:	4b69      	ldr	r3, [pc, #420]	; (8005c8c <UART_SetConfig+0xc2c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0320 	and.w	r3, r3, #32
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005af2:	4b66      	ldr	r3, [pc, #408]	; (8005c8c <UART_SetConfig+0xc2c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	08db      	lsrs	r3, r3, #3
 8005af8:	f003 0303 	and.w	r3, r3, #3
 8005afc:	4a64      	ldr	r2, [pc, #400]	; (8005c90 <UART_SetConfig+0xc30>)
 8005afe:	fa22 f303 	lsr.w	r3, r2, r3
 8005b02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b04:	e00f      	b.n	8005b26 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005b06:	4b62      	ldr	r3, [pc, #392]	; (8005c90 <UART_SetConfig+0xc30>)
 8005b08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b0a:	e00c      	b.n	8005b26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b0c:	4b61      	ldr	r3, [pc, #388]	; (8005c94 <UART_SetConfig+0xc34>)
 8005b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b10:	e009      	b.n	8005b26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b18:	e005      	b.n	8005b26 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005b24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 80ea 	beq.w	8005d02 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	4a55      	ldr	r2, [pc, #340]	; (8005c88 <UART_SetConfig+0xc28>)
 8005b34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b40:	005a      	lsls	r2, r3, #1
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	085b      	lsrs	r3, r3, #1
 8005b48:	441a      	add	r2, r3
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b56:	2b0f      	cmp	r3, #15
 8005b58:	d916      	bls.n	8005b88 <UART_SetConfig+0xb28>
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b60:	d212      	bcs.n	8005b88 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f023 030f 	bic.w	r3, r3, #15
 8005b6a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6e:	085b      	lsrs	r3, r3, #1
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005b84:	60da      	str	r2, [r3, #12]
 8005b86:	e0bc      	b.n	8005d02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005b8e:	e0b8      	b.n	8005d02 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005b94:	2b20      	cmp	r3, #32
 8005b96:	dc4b      	bgt.n	8005c30 <UART_SetConfig+0xbd0>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f2c0 8087 	blt.w	8005cac <UART_SetConfig+0xc4c>
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	f200 8084 	bhi.w	8005cac <UART_SetConfig+0xc4c>
 8005ba4:	a201      	add	r2, pc, #4	; (adr r2, 8005bac <UART_SetConfig+0xb4c>)
 8005ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005baa:	bf00      	nop
 8005bac:	08005c37 	.word	0x08005c37
 8005bb0:	08005c3f 	.word	0x08005c3f
 8005bb4:	08005cad 	.word	0x08005cad
 8005bb8:	08005cad 	.word	0x08005cad
 8005bbc:	08005c47 	.word	0x08005c47
 8005bc0:	08005cad 	.word	0x08005cad
 8005bc4:	08005cad 	.word	0x08005cad
 8005bc8:	08005cad 	.word	0x08005cad
 8005bcc:	08005c57 	.word	0x08005c57
 8005bd0:	08005cad 	.word	0x08005cad
 8005bd4:	08005cad 	.word	0x08005cad
 8005bd8:	08005cad 	.word	0x08005cad
 8005bdc:	08005cad 	.word	0x08005cad
 8005be0:	08005cad 	.word	0x08005cad
 8005be4:	08005cad 	.word	0x08005cad
 8005be8:	08005cad 	.word	0x08005cad
 8005bec:	08005c67 	.word	0x08005c67
 8005bf0:	08005cad 	.word	0x08005cad
 8005bf4:	08005cad 	.word	0x08005cad
 8005bf8:	08005cad 	.word	0x08005cad
 8005bfc:	08005cad 	.word	0x08005cad
 8005c00:	08005cad 	.word	0x08005cad
 8005c04:	08005cad 	.word	0x08005cad
 8005c08:	08005cad 	.word	0x08005cad
 8005c0c:	08005cad 	.word	0x08005cad
 8005c10:	08005cad 	.word	0x08005cad
 8005c14:	08005cad 	.word	0x08005cad
 8005c18:	08005cad 	.word	0x08005cad
 8005c1c:	08005cad 	.word	0x08005cad
 8005c20:	08005cad 	.word	0x08005cad
 8005c24:	08005cad 	.word	0x08005cad
 8005c28:	08005cad 	.word	0x08005cad
 8005c2c:	08005c9f 	.word	0x08005c9f
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	d037      	beq.n	8005ca4 <UART_SetConfig+0xc44>
 8005c34:	e03a      	b.n	8005cac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c36:	f7fc fed7 	bl	80029e8 <HAL_RCC_GetPCLK1Freq>
 8005c3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c3c:	e03c      	b.n	8005cb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c3e:	f7fc fee9 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8005c42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c44:	e038      	b.n	8005cb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fe f8cc 	bl	8003de8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c54:	e030      	b.n	8005cb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c56:	f107 0318 	add.w	r3, r7, #24
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fe fa18 	bl	8004090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c64:	e028      	b.n	8005cb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c66:	4b09      	ldr	r3, [pc, #36]	; (8005c8c <UART_SetConfig+0xc2c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d012      	beq.n	8005c98 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c72:	4b06      	ldr	r3, [pc, #24]	; (8005c8c <UART_SetConfig+0xc2c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	08db      	lsrs	r3, r3, #3
 8005c78:	f003 0303 	and.w	r3, r3, #3
 8005c7c:	4a04      	ldr	r2, [pc, #16]	; (8005c90 <UART_SetConfig+0xc30>)
 8005c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c84:	e018      	b.n	8005cb8 <UART_SetConfig+0xc58>
 8005c86:	bf00      	nop
 8005c88:	08006d18 	.word	0x08006d18
 8005c8c:	58024400 	.word	0x58024400
 8005c90:	03d09000 	.word	0x03d09000
 8005c94:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005c98:	4b24      	ldr	r3, [pc, #144]	; (8005d2c <UART_SetConfig+0xccc>)
 8005c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c9c:	e00c      	b.n	8005cb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c9e:	4b24      	ldr	r3, [pc, #144]	; (8005d30 <UART_SetConfig+0xcd0>)
 8005ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ca2:	e009      	b.n	8005cb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ca4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005caa:	e005      	b.n	8005cb8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005cb6:	bf00      	nop
    }

    if (pclk != 0U)
 8005cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d021      	beq.n	8005d02 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	4a1c      	ldr	r2, [pc, #112]	; (8005d34 <UART_SetConfig+0xcd4>)
 8005cc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ccc:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	085b      	lsrs	r3, r3, #1
 8005cd6:	441a      	add	r2, r3
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	2b0f      	cmp	r3, #15
 8005ce6:	d909      	bls.n	8005cfc <UART_SetConfig+0xc9c>
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cee:	d205      	bcs.n	8005cfc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	60da      	str	r2, [r3, #12]
 8005cfa:	e002      	b.n	8005d02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2200      	movs	r2, #0
 8005d16:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005d1e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3748      	adds	r7, #72	; 0x48
 8005d26:	46bd      	mov	sp, r7
 8005d28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d2c:	03d09000 	.word	0x03d09000
 8005d30:	003d0900 	.word	0x003d0900
 8005d34:	08006d18 	.word	0x08006d18

08005d38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00a      	beq.n	8005da6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005daa:	f003 0304 	and.w	r3, r3, #4
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dcc:	f003 0310 	and.w	r3, r3, #16
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00a      	beq.n	8005dea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d01a      	beq.n	8005e4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e36:	d10a      	bne.n	8005e4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	605a      	str	r2, [r3, #4]
  }
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b098      	sub	sp, #96	; 0x60
 8005e80:	af02      	add	r7, sp, #8
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e8c:	f7fb faec 	bl	8001468 <HAL_GetTick>
 8005e90:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	2b08      	cmp	r3, #8
 8005e9e:	d12f      	bne.n	8005f00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f88e 	bl	8005fd0 <UART_WaitOnFlagUntilTimeout>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d022      	beq.n	8005f00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	e853 3f00 	ldrex	r3, [r3]
 8005ec6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ece:	653b      	str	r3, [r7, #80]	; 0x50
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ed8:	647b      	str	r3, [r7, #68]	; 0x44
 8005eda:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005edc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ee0:	e841 2300 	strex	r3, r2, [r1]
 8005ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1e6      	bne.n	8005eba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e063      	b.n	8005fc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	d149      	bne.n	8005fa2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f16:	2200      	movs	r2, #0
 8005f18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f857 	bl	8005fd0 <UART_WaitOnFlagUntilTimeout>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d03c      	beq.n	8005fa2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	623b      	str	r3, [r7, #32]
   return(result);
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f46:	633b      	str	r3, [r7, #48]	; 0x30
 8005f48:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4e:	e841 2300 	strex	r3, r2, [r1]
 8005f52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1e6      	bne.n	8005f28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3308      	adds	r3, #8
 8005f60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f023 0301 	bic.w	r3, r3, #1
 8005f70:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3308      	adds	r3, #8
 8005f78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f7a:	61fa      	str	r2, [r7, #28]
 8005f7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	69b9      	ldr	r1, [r7, #24]
 8005f80:	69fa      	ldr	r2, [r7, #28]
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	617b      	str	r3, [r7, #20]
   return(result);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e5      	bne.n	8005f5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e012      	b.n	8005fc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3758      	adds	r7, #88	; 0x58
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	603b      	str	r3, [r7, #0]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fe0:	e04f      	b.n	8006082 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fe8:	d04b      	beq.n	8006082 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fea:	f7fb fa3d 	bl	8001468 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d302      	bcc.n	8006000 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e04e      	b.n	80060a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	d037      	beq.n	8006082 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b80      	cmp	r3, #128	; 0x80
 8006016:	d034      	beq.n	8006082 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b40      	cmp	r3, #64	; 0x40
 800601c:	d031      	beq.n	8006082 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b08      	cmp	r3, #8
 800602a:	d110      	bne.n	800604e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2208      	movs	r2, #8
 8006032:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 f839 	bl	80060ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2208      	movs	r2, #8
 800603e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e029      	b.n	80060a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800605c:	d111      	bne.n	8006082 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006066:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f81f 	bl	80060ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2220      	movs	r2, #32
 8006072:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e00f      	b.n	80060a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69da      	ldr	r2, [r3, #28]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	4013      	ands	r3, r2
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	429a      	cmp	r2, r3
 8006090:	bf0c      	ite	eq
 8006092:	2301      	moveq	r3, #1
 8006094:	2300      	movne	r3, #0
 8006096:	b2db      	uxtb	r3, r3
 8006098:	461a      	mov	r2, r3
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	429a      	cmp	r2, r3
 800609e:	d0a0      	beq.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b095      	sub	sp, #84	; 0x54
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060bc:	e853 3f00 	ldrex	r3, [r3]
 80060c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d2:	643b      	str	r3, [r7, #64]	; 0x40
 80060d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060da:	e841 2300 	strex	r3, r2, [r1]
 80060de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1e6      	bne.n	80060b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3308      	adds	r3, #8
 80060ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	e853 3f00 	ldrex	r3, [r3]
 80060f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80060f6:	69fa      	ldr	r2, [r7, #28]
 80060f8:	4b1e      	ldr	r3, [pc, #120]	; (8006174 <UART_EndRxTransfer+0xc8>)
 80060fa:	4013      	ands	r3, r2
 80060fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3308      	adds	r3, #8
 8006104:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006106:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006108:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800610c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800610e:	e841 2300 	strex	r3, r2, [r1]
 8006112:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1e5      	bne.n	80060e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800611e:	2b01      	cmp	r3, #1
 8006120:	d118      	bne.n	8006154 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	e853 3f00 	ldrex	r3, [r3]
 800612e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f023 0310 	bic.w	r3, r3, #16
 8006136:	647b      	str	r3, [r7, #68]	; 0x44
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006140:	61bb      	str	r3, [r7, #24]
 8006142:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006144:	6979      	ldr	r1, [r7, #20]
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	e841 2300 	strex	r3, r2, [r1]
 800614c:	613b      	str	r3, [r7, #16]
   return(result);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e6      	bne.n	8006122 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006168:	bf00      	nop
 800616a:	3754      	adds	r7, #84	; 0x54
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	effffffe 	.word	0xeffffffe

08006178 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006186:	2b01      	cmp	r3, #1
 8006188:	d101      	bne.n	800618e <HAL_UARTEx_DisableFifoMode+0x16>
 800618a:	2302      	movs	r3, #2
 800618c:	e027      	b.n	80061de <HAL_UARTEx_DisableFifoMode+0x66>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2224      	movs	r2, #36	; 0x24
 800619a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0201 	bic.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d101      	bne.n	8006202 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061fe:	2302      	movs	r3, #2
 8006200:	e02d      	b.n	800625e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2224      	movs	r2, #36	; 0x24
 800620e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0201 	bic.w	r2, r2, #1
 8006228:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f850 	bl	80062e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2220      	movs	r2, #32
 8006250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b084      	sub	sp, #16
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006276:	2b01      	cmp	r3, #1
 8006278:	d101      	bne.n	800627e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800627a:	2302      	movs	r3, #2
 800627c:	e02d      	b.n	80062da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2224      	movs	r2, #36	; 0x24
 800628a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0201 	bic.w	r2, r2, #1
 80062a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f812 	bl	80062e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d108      	bne.n	8006306 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006304:	e031      	b.n	800636a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006306:	2310      	movs	r3, #16
 8006308:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800630a:	2310      	movs	r3, #16
 800630c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	0e5b      	lsrs	r3, r3, #25
 8006316:	b2db      	uxtb	r3, r3
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	0f5b      	lsrs	r3, r3, #29
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f003 0307 	and.w	r3, r3, #7
 800632c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800632e:	7bbb      	ldrb	r3, [r7, #14]
 8006330:	7b3a      	ldrb	r2, [r7, #12]
 8006332:	4911      	ldr	r1, [pc, #68]	; (8006378 <UARTEx_SetNbDataToProcess+0x94>)
 8006334:	5c8a      	ldrb	r2, [r1, r2]
 8006336:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800633a:	7b3a      	ldrb	r2, [r7, #12]
 800633c:	490f      	ldr	r1, [pc, #60]	; (800637c <UARTEx_SetNbDataToProcess+0x98>)
 800633e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006340:	fb93 f3f2 	sdiv	r3, r3, r2
 8006344:	b29a      	uxth	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	7b7a      	ldrb	r2, [r7, #13]
 8006350:	4909      	ldr	r1, [pc, #36]	; (8006378 <UARTEx_SetNbDataToProcess+0x94>)
 8006352:	5c8a      	ldrb	r2, [r1, r2]
 8006354:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006358:	7b7a      	ldrb	r2, [r7, #13]
 800635a:	4908      	ldr	r1, [pc, #32]	; (800637c <UARTEx_SetNbDataToProcess+0x98>)
 800635c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800635e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006362:	b29a      	uxth	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800636a:	bf00      	nop
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	08006d30 	.word	0x08006d30
 800637c:	08006d38 	.word	0x08006d38

08006380 <siprintf>:
 8006380:	b40e      	push	{r1, r2, r3}
 8006382:	b500      	push	{lr}
 8006384:	b09c      	sub	sp, #112	; 0x70
 8006386:	ab1d      	add	r3, sp, #116	; 0x74
 8006388:	9002      	str	r0, [sp, #8]
 800638a:	9006      	str	r0, [sp, #24]
 800638c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006390:	4809      	ldr	r0, [pc, #36]	; (80063b8 <siprintf+0x38>)
 8006392:	9107      	str	r1, [sp, #28]
 8006394:	9104      	str	r1, [sp, #16]
 8006396:	4909      	ldr	r1, [pc, #36]	; (80063bc <siprintf+0x3c>)
 8006398:	f853 2b04 	ldr.w	r2, [r3], #4
 800639c:	9105      	str	r1, [sp, #20]
 800639e:	6800      	ldr	r0, [r0, #0]
 80063a0:	9301      	str	r3, [sp, #4]
 80063a2:	a902      	add	r1, sp, #8
 80063a4:	f000 f992 	bl	80066cc <_svfiprintf_r>
 80063a8:	9b02      	ldr	r3, [sp, #8]
 80063aa:	2200      	movs	r2, #0
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	b01c      	add	sp, #112	; 0x70
 80063b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80063b4:	b003      	add	sp, #12
 80063b6:	4770      	bx	lr
 80063b8:	2400005c 	.word	0x2400005c
 80063bc:	ffff0208 	.word	0xffff0208

080063c0 <memset>:
 80063c0:	4402      	add	r2, r0
 80063c2:	4603      	mov	r3, r0
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d100      	bne.n	80063ca <memset+0xa>
 80063c8:	4770      	bx	lr
 80063ca:	f803 1b01 	strb.w	r1, [r3], #1
 80063ce:	e7f9      	b.n	80063c4 <memset+0x4>

080063d0 <__errno>:
 80063d0:	4b01      	ldr	r3, [pc, #4]	; (80063d8 <__errno+0x8>)
 80063d2:	6818      	ldr	r0, [r3, #0]
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	2400005c 	.word	0x2400005c

080063dc <__libc_init_array>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	4d0d      	ldr	r5, [pc, #52]	; (8006414 <__libc_init_array+0x38>)
 80063e0:	4c0d      	ldr	r4, [pc, #52]	; (8006418 <__libc_init_array+0x3c>)
 80063e2:	1b64      	subs	r4, r4, r5
 80063e4:	10a4      	asrs	r4, r4, #2
 80063e6:	2600      	movs	r6, #0
 80063e8:	42a6      	cmp	r6, r4
 80063ea:	d109      	bne.n	8006400 <__libc_init_array+0x24>
 80063ec:	4d0b      	ldr	r5, [pc, #44]	; (800641c <__libc_init_array+0x40>)
 80063ee:	4c0c      	ldr	r4, [pc, #48]	; (8006420 <__libc_init_array+0x44>)
 80063f0:	f000 fc6a 	bl	8006cc8 <_init>
 80063f4:	1b64      	subs	r4, r4, r5
 80063f6:	10a4      	asrs	r4, r4, #2
 80063f8:	2600      	movs	r6, #0
 80063fa:	42a6      	cmp	r6, r4
 80063fc:	d105      	bne.n	800640a <__libc_init_array+0x2e>
 80063fe:	bd70      	pop	{r4, r5, r6, pc}
 8006400:	f855 3b04 	ldr.w	r3, [r5], #4
 8006404:	4798      	blx	r3
 8006406:	3601      	adds	r6, #1
 8006408:	e7ee      	b.n	80063e8 <__libc_init_array+0xc>
 800640a:	f855 3b04 	ldr.w	r3, [r5], #4
 800640e:	4798      	blx	r3
 8006410:	3601      	adds	r6, #1
 8006412:	e7f2      	b.n	80063fa <__libc_init_array+0x1e>
 8006414:	08006d7c 	.word	0x08006d7c
 8006418:	08006d7c 	.word	0x08006d7c
 800641c:	08006d7c 	.word	0x08006d7c
 8006420:	08006d80 	.word	0x08006d80

08006424 <__retarget_lock_acquire_recursive>:
 8006424:	4770      	bx	lr

08006426 <__retarget_lock_release_recursive>:
 8006426:	4770      	bx	lr

08006428 <_free_r>:
 8006428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800642a:	2900      	cmp	r1, #0
 800642c:	d044      	beq.n	80064b8 <_free_r+0x90>
 800642e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006432:	9001      	str	r0, [sp, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	f1a1 0404 	sub.w	r4, r1, #4
 800643a:	bfb8      	it	lt
 800643c:	18e4      	addlt	r4, r4, r3
 800643e:	f000 f8df 	bl	8006600 <__malloc_lock>
 8006442:	4a1e      	ldr	r2, [pc, #120]	; (80064bc <_free_r+0x94>)
 8006444:	9801      	ldr	r0, [sp, #4]
 8006446:	6813      	ldr	r3, [r2, #0]
 8006448:	b933      	cbnz	r3, 8006458 <_free_r+0x30>
 800644a:	6063      	str	r3, [r4, #4]
 800644c:	6014      	str	r4, [r2, #0]
 800644e:	b003      	add	sp, #12
 8006450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006454:	f000 b8da 	b.w	800660c <__malloc_unlock>
 8006458:	42a3      	cmp	r3, r4
 800645a:	d908      	bls.n	800646e <_free_r+0x46>
 800645c:	6825      	ldr	r5, [r4, #0]
 800645e:	1961      	adds	r1, r4, r5
 8006460:	428b      	cmp	r3, r1
 8006462:	bf01      	itttt	eq
 8006464:	6819      	ldreq	r1, [r3, #0]
 8006466:	685b      	ldreq	r3, [r3, #4]
 8006468:	1949      	addeq	r1, r1, r5
 800646a:	6021      	streq	r1, [r4, #0]
 800646c:	e7ed      	b.n	800644a <_free_r+0x22>
 800646e:	461a      	mov	r2, r3
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	b10b      	cbz	r3, 8006478 <_free_r+0x50>
 8006474:	42a3      	cmp	r3, r4
 8006476:	d9fa      	bls.n	800646e <_free_r+0x46>
 8006478:	6811      	ldr	r1, [r2, #0]
 800647a:	1855      	adds	r5, r2, r1
 800647c:	42a5      	cmp	r5, r4
 800647e:	d10b      	bne.n	8006498 <_free_r+0x70>
 8006480:	6824      	ldr	r4, [r4, #0]
 8006482:	4421      	add	r1, r4
 8006484:	1854      	adds	r4, r2, r1
 8006486:	42a3      	cmp	r3, r4
 8006488:	6011      	str	r1, [r2, #0]
 800648a:	d1e0      	bne.n	800644e <_free_r+0x26>
 800648c:	681c      	ldr	r4, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	6053      	str	r3, [r2, #4]
 8006492:	440c      	add	r4, r1
 8006494:	6014      	str	r4, [r2, #0]
 8006496:	e7da      	b.n	800644e <_free_r+0x26>
 8006498:	d902      	bls.n	80064a0 <_free_r+0x78>
 800649a:	230c      	movs	r3, #12
 800649c:	6003      	str	r3, [r0, #0]
 800649e:	e7d6      	b.n	800644e <_free_r+0x26>
 80064a0:	6825      	ldr	r5, [r4, #0]
 80064a2:	1961      	adds	r1, r4, r5
 80064a4:	428b      	cmp	r3, r1
 80064a6:	bf04      	itt	eq
 80064a8:	6819      	ldreq	r1, [r3, #0]
 80064aa:	685b      	ldreq	r3, [r3, #4]
 80064ac:	6063      	str	r3, [r4, #4]
 80064ae:	bf04      	itt	eq
 80064b0:	1949      	addeq	r1, r1, r5
 80064b2:	6021      	streq	r1, [r4, #0]
 80064b4:	6054      	str	r4, [r2, #4]
 80064b6:	e7ca      	b.n	800644e <_free_r+0x26>
 80064b8:	b003      	add	sp, #12
 80064ba:	bd30      	pop	{r4, r5, pc}
 80064bc:	240002e4 	.word	0x240002e4

080064c0 <sbrk_aligned>:
 80064c0:	b570      	push	{r4, r5, r6, lr}
 80064c2:	4e0e      	ldr	r6, [pc, #56]	; (80064fc <sbrk_aligned+0x3c>)
 80064c4:	460c      	mov	r4, r1
 80064c6:	6831      	ldr	r1, [r6, #0]
 80064c8:	4605      	mov	r5, r0
 80064ca:	b911      	cbnz	r1, 80064d2 <sbrk_aligned+0x12>
 80064cc:	f000 fba6 	bl	8006c1c <_sbrk_r>
 80064d0:	6030      	str	r0, [r6, #0]
 80064d2:	4621      	mov	r1, r4
 80064d4:	4628      	mov	r0, r5
 80064d6:	f000 fba1 	bl	8006c1c <_sbrk_r>
 80064da:	1c43      	adds	r3, r0, #1
 80064dc:	d00a      	beq.n	80064f4 <sbrk_aligned+0x34>
 80064de:	1cc4      	adds	r4, r0, #3
 80064e0:	f024 0403 	bic.w	r4, r4, #3
 80064e4:	42a0      	cmp	r0, r4
 80064e6:	d007      	beq.n	80064f8 <sbrk_aligned+0x38>
 80064e8:	1a21      	subs	r1, r4, r0
 80064ea:	4628      	mov	r0, r5
 80064ec:	f000 fb96 	bl	8006c1c <_sbrk_r>
 80064f0:	3001      	adds	r0, #1
 80064f2:	d101      	bne.n	80064f8 <sbrk_aligned+0x38>
 80064f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80064f8:	4620      	mov	r0, r4
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
 80064fc:	240002e8 	.word	0x240002e8

08006500 <_malloc_r>:
 8006500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006504:	1ccd      	adds	r5, r1, #3
 8006506:	f025 0503 	bic.w	r5, r5, #3
 800650a:	3508      	adds	r5, #8
 800650c:	2d0c      	cmp	r5, #12
 800650e:	bf38      	it	cc
 8006510:	250c      	movcc	r5, #12
 8006512:	2d00      	cmp	r5, #0
 8006514:	4607      	mov	r7, r0
 8006516:	db01      	blt.n	800651c <_malloc_r+0x1c>
 8006518:	42a9      	cmp	r1, r5
 800651a:	d905      	bls.n	8006528 <_malloc_r+0x28>
 800651c:	230c      	movs	r3, #12
 800651e:	603b      	str	r3, [r7, #0]
 8006520:	2600      	movs	r6, #0
 8006522:	4630      	mov	r0, r6
 8006524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006528:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80065fc <_malloc_r+0xfc>
 800652c:	f000 f868 	bl	8006600 <__malloc_lock>
 8006530:	f8d8 3000 	ldr.w	r3, [r8]
 8006534:	461c      	mov	r4, r3
 8006536:	bb5c      	cbnz	r4, 8006590 <_malloc_r+0x90>
 8006538:	4629      	mov	r1, r5
 800653a:	4638      	mov	r0, r7
 800653c:	f7ff ffc0 	bl	80064c0 <sbrk_aligned>
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	4604      	mov	r4, r0
 8006544:	d155      	bne.n	80065f2 <_malloc_r+0xf2>
 8006546:	f8d8 4000 	ldr.w	r4, [r8]
 800654a:	4626      	mov	r6, r4
 800654c:	2e00      	cmp	r6, #0
 800654e:	d145      	bne.n	80065dc <_malloc_r+0xdc>
 8006550:	2c00      	cmp	r4, #0
 8006552:	d048      	beq.n	80065e6 <_malloc_r+0xe6>
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	4631      	mov	r1, r6
 8006558:	4638      	mov	r0, r7
 800655a:	eb04 0903 	add.w	r9, r4, r3
 800655e:	f000 fb5d 	bl	8006c1c <_sbrk_r>
 8006562:	4581      	cmp	r9, r0
 8006564:	d13f      	bne.n	80065e6 <_malloc_r+0xe6>
 8006566:	6821      	ldr	r1, [r4, #0]
 8006568:	1a6d      	subs	r5, r5, r1
 800656a:	4629      	mov	r1, r5
 800656c:	4638      	mov	r0, r7
 800656e:	f7ff ffa7 	bl	80064c0 <sbrk_aligned>
 8006572:	3001      	adds	r0, #1
 8006574:	d037      	beq.n	80065e6 <_malloc_r+0xe6>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	442b      	add	r3, r5
 800657a:	6023      	str	r3, [r4, #0]
 800657c:	f8d8 3000 	ldr.w	r3, [r8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d038      	beq.n	80065f6 <_malloc_r+0xf6>
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	42a2      	cmp	r2, r4
 8006588:	d12b      	bne.n	80065e2 <_malloc_r+0xe2>
 800658a:	2200      	movs	r2, #0
 800658c:	605a      	str	r2, [r3, #4]
 800658e:	e00f      	b.n	80065b0 <_malloc_r+0xb0>
 8006590:	6822      	ldr	r2, [r4, #0]
 8006592:	1b52      	subs	r2, r2, r5
 8006594:	d41f      	bmi.n	80065d6 <_malloc_r+0xd6>
 8006596:	2a0b      	cmp	r2, #11
 8006598:	d917      	bls.n	80065ca <_malloc_r+0xca>
 800659a:	1961      	adds	r1, r4, r5
 800659c:	42a3      	cmp	r3, r4
 800659e:	6025      	str	r5, [r4, #0]
 80065a0:	bf18      	it	ne
 80065a2:	6059      	strne	r1, [r3, #4]
 80065a4:	6863      	ldr	r3, [r4, #4]
 80065a6:	bf08      	it	eq
 80065a8:	f8c8 1000 	streq.w	r1, [r8]
 80065ac:	5162      	str	r2, [r4, r5]
 80065ae:	604b      	str	r3, [r1, #4]
 80065b0:	4638      	mov	r0, r7
 80065b2:	f104 060b 	add.w	r6, r4, #11
 80065b6:	f000 f829 	bl	800660c <__malloc_unlock>
 80065ba:	f026 0607 	bic.w	r6, r6, #7
 80065be:	1d23      	adds	r3, r4, #4
 80065c0:	1af2      	subs	r2, r6, r3
 80065c2:	d0ae      	beq.n	8006522 <_malloc_r+0x22>
 80065c4:	1b9b      	subs	r3, r3, r6
 80065c6:	50a3      	str	r3, [r4, r2]
 80065c8:	e7ab      	b.n	8006522 <_malloc_r+0x22>
 80065ca:	42a3      	cmp	r3, r4
 80065cc:	6862      	ldr	r2, [r4, #4]
 80065ce:	d1dd      	bne.n	800658c <_malloc_r+0x8c>
 80065d0:	f8c8 2000 	str.w	r2, [r8]
 80065d4:	e7ec      	b.n	80065b0 <_malloc_r+0xb0>
 80065d6:	4623      	mov	r3, r4
 80065d8:	6864      	ldr	r4, [r4, #4]
 80065da:	e7ac      	b.n	8006536 <_malloc_r+0x36>
 80065dc:	4634      	mov	r4, r6
 80065de:	6876      	ldr	r6, [r6, #4]
 80065e0:	e7b4      	b.n	800654c <_malloc_r+0x4c>
 80065e2:	4613      	mov	r3, r2
 80065e4:	e7cc      	b.n	8006580 <_malloc_r+0x80>
 80065e6:	230c      	movs	r3, #12
 80065e8:	603b      	str	r3, [r7, #0]
 80065ea:	4638      	mov	r0, r7
 80065ec:	f000 f80e 	bl	800660c <__malloc_unlock>
 80065f0:	e797      	b.n	8006522 <_malloc_r+0x22>
 80065f2:	6025      	str	r5, [r4, #0]
 80065f4:	e7dc      	b.n	80065b0 <_malloc_r+0xb0>
 80065f6:	605b      	str	r3, [r3, #4]
 80065f8:	deff      	udf	#255	; 0xff
 80065fa:	bf00      	nop
 80065fc:	240002e4 	.word	0x240002e4

08006600 <__malloc_lock>:
 8006600:	4801      	ldr	r0, [pc, #4]	; (8006608 <__malloc_lock+0x8>)
 8006602:	f7ff bf0f 	b.w	8006424 <__retarget_lock_acquire_recursive>
 8006606:	bf00      	nop
 8006608:	240002e0 	.word	0x240002e0

0800660c <__malloc_unlock>:
 800660c:	4801      	ldr	r0, [pc, #4]	; (8006614 <__malloc_unlock+0x8>)
 800660e:	f7ff bf0a 	b.w	8006426 <__retarget_lock_release_recursive>
 8006612:	bf00      	nop
 8006614:	240002e0 	.word	0x240002e0

08006618 <__ssputs_r>:
 8006618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800661c:	688e      	ldr	r6, [r1, #8]
 800661e:	461f      	mov	r7, r3
 8006620:	42be      	cmp	r6, r7
 8006622:	680b      	ldr	r3, [r1, #0]
 8006624:	4682      	mov	sl, r0
 8006626:	460c      	mov	r4, r1
 8006628:	4690      	mov	r8, r2
 800662a:	d82c      	bhi.n	8006686 <__ssputs_r+0x6e>
 800662c:	898a      	ldrh	r2, [r1, #12]
 800662e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006632:	d026      	beq.n	8006682 <__ssputs_r+0x6a>
 8006634:	6965      	ldr	r5, [r4, #20]
 8006636:	6909      	ldr	r1, [r1, #16]
 8006638:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800663c:	eba3 0901 	sub.w	r9, r3, r1
 8006640:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006644:	1c7b      	adds	r3, r7, #1
 8006646:	444b      	add	r3, r9
 8006648:	106d      	asrs	r5, r5, #1
 800664a:	429d      	cmp	r5, r3
 800664c:	bf38      	it	cc
 800664e:	461d      	movcc	r5, r3
 8006650:	0553      	lsls	r3, r2, #21
 8006652:	d527      	bpl.n	80066a4 <__ssputs_r+0x8c>
 8006654:	4629      	mov	r1, r5
 8006656:	f7ff ff53 	bl	8006500 <_malloc_r>
 800665a:	4606      	mov	r6, r0
 800665c:	b360      	cbz	r0, 80066b8 <__ssputs_r+0xa0>
 800665e:	6921      	ldr	r1, [r4, #16]
 8006660:	464a      	mov	r2, r9
 8006662:	f000 faeb 	bl	8006c3c <memcpy>
 8006666:	89a3      	ldrh	r3, [r4, #12]
 8006668:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800666c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006670:	81a3      	strh	r3, [r4, #12]
 8006672:	6126      	str	r6, [r4, #16]
 8006674:	6165      	str	r5, [r4, #20]
 8006676:	444e      	add	r6, r9
 8006678:	eba5 0509 	sub.w	r5, r5, r9
 800667c:	6026      	str	r6, [r4, #0]
 800667e:	60a5      	str	r5, [r4, #8]
 8006680:	463e      	mov	r6, r7
 8006682:	42be      	cmp	r6, r7
 8006684:	d900      	bls.n	8006688 <__ssputs_r+0x70>
 8006686:	463e      	mov	r6, r7
 8006688:	6820      	ldr	r0, [r4, #0]
 800668a:	4632      	mov	r2, r6
 800668c:	4641      	mov	r1, r8
 800668e:	f000 faab 	bl	8006be8 <memmove>
 8006692:	68a3      	ldr	r3, [r4, #8]
 8006694:	1b9b      	subs	r3, r3, r6
 8006696:	60a3      	str	r3, [r4, #8]
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	4433      	add	r3, r6
 800669c:	6023      	str	r3, [r4, #0]
 800669e:	2000      	movs	r0, #0
 80066a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066a4:	462a      	mov	r2, r5
 80066a6:	f000 fad7 	bl	8006c58 <_realloc_r>
 80066aa:	4606      	mov	r6, r0
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d1e0      	bne.n	8006672 <__ssputs_r+0x5a>
 80066b0:	6921      	ldr	r1, [r4, #16]
 80066b2:	4650      	mov	r0, sl
 80066b4:	f7ff feb8 	bl	8006428 <_free_r>
 80066b8:	230c      	movs	r3, #12
 80066ba:	f8ca 3000 	str.w	r3, [sl]
 80066be:	89a3      	ldrh	r3, [r4, #12]
 80066c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066c4:	81a3      	strh	r3, [r4, #12]
 80066c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066ca:	e7e9      	b.n	80066a0 <__ssputs_r+0x88>

080066cc <_svfiprintf_r>:
 80066cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d0:	4698      	mov	r8, r3
 80066d2:	898b      	ldrh	r3, [r1, #12]
 80066d4:	061b      	lsls	r3, r3, #24
 80066d6:	b09d      	sub	sp, #116	; 0x74
 80066d8:	4607      	mov	r7, r0
 80066da:	460d      	mov	r5, r1
 80066dc:	4614      	mov	r4, r2
 80066de:	d50e      	bpl.n	80066fe <_svfiprintf_r+0x32>
 80066e0:	690b      	ldr	r3, [r1, #16]
 80066e2:	b963      	cbnz	r3, 80066fe <_svfiprintf_r+0x32>
 80066e4:	2140      	movs	r1, #64	; 0x40
 80066e6:	f7ff ff0b 	bl	8006500 <_malloc_r>
 80066ea:	6028      	str	r0, [r5, #0]
 80066ec:	6128      	str	r0, [r5, #16]
 80066ee:	b920      	cbnz	r0, 80066fa <_svfiprintf_r+0x2e>
 80066f0:	230c      	movs	r3, #12
 80066f2:	603b      	str	r3, [r7, #0]
 80066f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066f8:	e0d0      	b.n	800689c <_svfiprintf_r+0x1d0>
 80066fa:	2340      	movs	r3, #64	; 0x40
 80066fc:	616b      	str	r3, [r5, #20]
 80066fe:	2300      	movs	r3, #0
 8006700:	9309      	str	r3, [sp, #36]	; 0x24
 8006702:	2320      	movs	r3, #32
 8006704:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006708:	f8cd 800c 	str.w	r8, [sp, #12]
 800670c:	2330      	movs	r3, #48	; 0x30
 800670e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80068b4 <_svfiprintf_r+0x1e8>
 8006712:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006716:	f04f 0901 	mov.w	r9, #1
 800671a:	4623      	mov	r3, r4
 800671c:	469a      	mov	sl, r3
 800671e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006722:	b10a      	cbz	r2, 8006728 <_svfiprintf_r+0x5c>
 8006724:	2a25      	cmp	r2, #37	; 0x25
 8006726:	d1f9      	bne.n	800671c <_svfiprintf_r+0x50>
 8006728:	ebba 0b04 	subs.w	fp, sl, r4
 800672c:	d00b      	beq.n	8006746 <_svfiprintf_r+0x7a>
 800672e:	465b      	mov	r3, fp
 8006730:	4622      	mov	r2, r4
 8006732:	4629      	mov	r1, r5
 8006734:	4638      	mov	r0, r7
 8006736:	f7ff ff6f 	bl	8006618 <__ssputs_r>
 800673a:	3001      	adds	r0, #1
 800673c:	f000 80a9 	beq.w	8006892 <_svfiprintf_r+0x1c6>
 8006740:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006742:	445a      	add	r2, fp
 8006744:	9209      	str	r2, [sp, #36]	; 0x24
 8006746:	f89a 3000 	ldrb.w	r3, [sl]
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 80a1 	beq.w	8006892 <_svfiprintf_r+0x1c6>
 8006750:	2300      	movs	r3, #0
 8006752:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006756:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800675a:	f10a 0a01 	add.w	sl, sl, #1
 800675e:	9304      	str	r3, [sp, #16]
 8006760:	9307      	str	r3, [sp, #28]
 8006762:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006766:	931a      	str	r3, [sp, #104]	; 0x68
 8006768:	4654      	mov	r4, sl
 800676a:	2205      	movs	r2, #5
 800676c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006770:	4850      	ldr	r0, [pc, #320]	; (80068b4 <_svfiprintf_r+0x1e8>)
 8006772:	f7f9 fdbd 	bl	80002f0 <memchr>
 8006776:	9a04      	ldr	r2, [sp, #16]
 8006778:	b9d8      	cbnz	r0, 80067b2 <_svfiprintf_r+0xe6>
 800677a:	06d0      	lsls	r0, r2, #27
 800677c:	bf44      	itt	mi
 800677e:	2320      	movmi	r3, #32
 8006780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006784:	0711      	lsls	r1, r2, #28
 8006786:	bf44      	itt	mi
 8006788:	232b      	movmi	r3, #43	; 0x2b
 800678a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800678e:	f89a 3000 	ldrb.w	r3, [sl]
 8006792:	2b2a      	cmp	r3, #42	; 0x2a
 8006794:	d015      	beq.n	80067c2 <_svfiprintf_r+0xf6>
 8006796:	9a07      	ldr	r2, [sp, #28]
 8006798:	4654      	mov	r4, sl
 800679a:	2000      	movs	r0, #0
 800679c:	f04f 0c0a 	mov.w	ip, #10
 80067a0:	4621      	mov	r1, r4
 80067a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067a6:	3b30      	subs	r3, #48	; 0x30
 80067a8:	2b09      	cmp	r3, #9
 80067aa:	d94d      	bls.n	8006848 <_svfiprintf_r+0x17c>
 80067ac:	b1b0      	cbz	r0, 80067dc <_svfiprintf_r+0x110>
 80067ae:	9207      	str	r2, [sp, #28]
 80067b0:	e014      	b.n	80067dc <_svfiprintf_r+0x110>
 80067b2:	eba0 0308 	sub.w	r3, r0, r8
 80067b6:	fa09 f303 	lsl.w	r3, r9, r3
 80067ba:	4313      	orrs	r3, r2
 80067bc:	9304      	str	r3, [sp, #16]
 80067be:	46a2      	mov	sl, r4
 80067c0:	e7d2      	b.n	8006768 <_svfiprintf_r+0x9c>
 80067c2:	9b03      	ldr	r3, [sp, #12]
 80067c4:	1d19      	adds	r1, r3, #4
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	9103      	str	r1, [sp, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	bfbb      	ittet	lt
 80067ce:	425b      	neglt	r3, r3
 80067d0:	f042 0202 	orrlt.w	r2, r2, #2
 80067d4:	9307      	strge	r3, [sp, #28]
 80067d6:	9307      	strlt	r3, [sp, #28]
 80067d8:	bfb8      	it	lt
 80067da:	9204      	strlt	r2, [sp, #16]
 80067dc:	7823      	ldrb	r3, [r4, #0]
 80067de:	2b2e      	cmp	r3, #46	; 0x2e
 80067e0:	d10c      	bne.n	80067fc <_svfiprintf_r+0x130>
 80067e2:	7863      	ldrb	r3, [r4, #1]
 80067e4:	2b2a      	cmp	r3, #42	; 0x2a
 80067e6:	d134      	bne.n	8006852 <_svfiprintf_r+0x186>
 80067e8:	9b03      	ldr	r3, [sp, #12]
 80067ea:	1d1a      	adds	r2, r3, #4
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	9203      	str	r2, [sp, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	bfb8      	it	lt
 80067f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80067f8:	3402      	adds	r4, #2
 80067fa:	9305      	str	r3, [sp, #20]
 80067fc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80068c4 <_svfiprintf_r+0x1f8>
 8006800:	7821      	ldrb	r1, [r4, #0]
 8006802:	2203      	movs	r2, #3
 8006804:	4650      	mov	r0, sl
 8006806:	f7f9 fd73 	bl	80002f0 <memchr>
 800680a:	b138      	cbz	r0, 800681c <_svfiprintf_r+0x150>
 800680c:	9b04      	ldr	r3, [sp, #16]
 800680e:	eba0 000a 	sub.w	r0, r0, sl
 8006812:	2240      	movs	r2, #64	; 0x40
 8006814:	4082      	lsls	r2, r0
 8006816:	4313      	orrs	r3, r2
 8006818:	3401      	adds	r4, #1
 800681a:	9304      	str	r3, [sp, #16]
 800681c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006820:	4825      	ldr	r0, [pc, #148]	; (80068b8 <_svfiprintf_r+0x1ec>)
 8006822:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006826:	2206      	movs	r2, #6
 8006828:	f7f9 fd62 	bl	80002f0 <memchr>
 800682c:	2800      	cmp	r0, #0
 800682e:	d038      	beq.n	80068a2 <_svfiprintf_r+0x1d6>
 8006830:	4b22      	ldr	r3, [pc, #136]	; (80068bc <_svfiprintf_r+0x1f0>)
 8006832:	bb1b      	cbnz	r3, 800687c <_svfiprintf_r+0x1b0>
 8006834:	9b03      	ldr	r3, [sp, #12]
 8006836:	3307      	adds	r3, #7
 8006838:	f023 0307 	bic.w	r3, r3, #7
 800683c:	3308      	adds	r3, #8
 800683e:	9303      	str	r3, [sp, #12]
 8006840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006842:	4433      	add	r3, r6
 8006844:	9309      	str	r3, [sp, #36]	; 0x24
 8006846:	e768      	b.n	800671a <_svfiprintf_r+0x4e>
 8006848:	fb0c 3202 	mla	r2, ip, r2, r3
 800684c:	460c      	mov	r4, r1
 800684e:	2001      	movs	r0, #1
 8006850:	e7a6      	b.n	80067a0 <_svfiprintf_r+0xd4>
 8006852:	2300      	movs	r3, #0
 8006854:	3401      	adds	r4, #1
 8006856:	9305      	str	r3, [sp, #20]
 8006858:	4619      	mov	r1, r3
 800685a:	f04f 0c0a 	mov.w	ip, #10
 800685e:	4620      	mov	r0, r4
 8006860:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006864:	3a30      	subs	r2, #48	; 0x30
 8006866:	2a09      	cmp	r2, #9
 8006868:	d903      	bls.n	8006872 <_svfiprintf_r+0x1a6>
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0c6      	beq.n	80067fc <_svfiprintf_r+0x130>
 800686e:	9105      	str	r1, [sp, #20]
 8006870:	e7c4      	b.n	80067fc <_svfiprintf_r+0x130>
 8006872:	fb0c 2101 	mla	r1, ip, r1, r2
 8006876:	4604      	mov	r4, r0
 8006878:	2301      	movs	r3, #1
 800687a:	e7f0      	b.n	800685e <_svfiprintf_r+0x192>
 800687c:	ab03      	add	r3, sp, #12
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	462a      	mov	r2, r5
 8006882:	4b0f      	ldr	r3, [pc, #60]	; (80068c0 <_svfiprintf_r+0x1f4>)
 8006884:	a904      	add	r1, sp, #16
 8006886:	4638      	mov	r0, r7
 8006888:	f3af 8000 	nop.w
 800688c:	1c42      	adds	r2, r0, #1
 800688e:	4606      	mov	r6, r0
 8006890:	d1d6      	bne.n	8006840 <_svfiprintf_r+0x174>
 8006892:	89ab      	ldrh	r3, [r5, #12]
 8006894:	065b      	lsls	r3, r3, #25
 8006896:	f53f af2d 	bmi.w	80066f4 <_svfiprintf_r+0x28>
 800689a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800689c:	b01d      	add	sp, #116	; 0x74
 800689e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a2:	ab03      	add	r3, sp, #12
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	462a      	mov	r2, r5
 80068a8:	4b05      	ldr	r3, [pc, #20]	; (80068c0 <_svfiprintf_r+0x1f4>)
 80068aa:	a904      	add	r1, sp, #16
 80068ac:	4638      	mov	r0, r7
 80068ae:	f000 f879 	bl	80069a4 <_printf_i>
 80068b2:	e7eb      	b.n	800688c <_svfiprintf_r+0x1c0>
 80068b4:	08006d40 	.word	0x08006d40
 80068b8:	08006d4a 	.word	0x08006d4a
 80068bc:	00000000 	.word	0x00000000
 80068c0:	08006619 	.word	0x08006619
 80068c4:	08006d46 	.word	0x08006d46

080068c8 <_printf_common>:
 80068c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068cc:	4616      	mov	r6, r2
 80068ce:	4699      	mov	r9, r3
 80068d0:	688a      	ldr	r2, [r1, #8]
 80068d2:	690b      	ldr	r3, [r1, #16]
 80068d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068d8:	4293      	cmp	r3, r2
 80068da:	bfb8      	it	lt
 80068dc:	4613      	movlt	r3, r2
 80068de:	6033      	str	r3, [r6, #0]
 80068e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068e4:	4607      	mov	r7, r0
 80068e6:	460c      	mov	r4, r1
 80068e8:	b10a      	cbz	r2, 80068ee <_printf_common+0x26>
 80068ea:	3301      	adds	r3, #1
 80068ec:	6033      	str	r3, [r6, #0]
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	0699      	lsls	r1, r3, #26
 80068f2:	bf42      	ittt	mi
 80068f4:	6833      	ldrmi	r3, [r6, #0]
 80068f6:	3302      	addmi	r3, #2
 80068f8:	6033      	strmi	r3, [r6, #0]
 80068fa:	6825      	ldr	r5, [r4, #0]
 80068fc:	f015 0506 	ands.w	r5, r5, #6
 8006900:	d106      	bne.n	8006910 <_printf_common+0x48>
 8006902:	f104 0a19 	add.w	sl, r4, #25
 8006906:	68e3      	ldr	r3, [r4, #12]
 8006908:	6832      	ldr	r2, [r6, #0]
 800690a:	1a9b      	subs	r3, r3, r2
 800690c:	42ab      	cmp	r3, r5
 800690e:	dc26      	bgt.n	800695e <_printf_common+0x96>
 8006910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006914:	1e13      	subs	r3, r2, #0
 8006916:	6822      	ldr	r2, [r4, #0]
 8006918:	bf18      	it	ne
 800691a:	2301      	movne	r3, #1
 800691c:	0692      	lsls	r2, r2, #26
 800691e:	d42b      	bmi.n	8006978 <_printf_common+0xb0>
 8006920:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006924:	4649      	mov	r1, r9
 8006926:	4638      	mov	r0, r7
 8006928:	47c0      	blx	r8
 800692a:	3001      	adds	r0, #1
 800692c:	d01e      	beq.n	800696c <_printf_common+0xa4>
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	6922      	ldr	r2, [r4, #16]
 8006932:	f003 0306 	and.w	r3, r3, #6
 8006936:	2b04      	cmp	r3, #4
 8006938:	bf02      	ittt	eq
 800693a:	68e5      	ldreq	r5, [r4, #12]
 800693c:	6833      	ldreq	r3, [r6, #0]
 800693e:	1aed      	subeq	r5, r5, r3
 8006940:	68a3      	ldr	r3, [r4, #8]
 8006942:	bf0c      	ite	eq
 8006944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006948:	2500      	movne	r5, #0
 800694a:	4293      	cmp	r3, r2
 800694c:	bfc4      	itt	gt
 800694e:	1a9b      	subgt	r3, r3, r2
 8006950:	18ed      	addgt	r5, r5, r3
 8006952:	2600      	movs	r6, #0
 8006954:	341a      	adds	r4, #26
 8006956:	42b5      	cmp	r5, r6
 8006958:	d11a      	bne.n	8006990 <_printf_common+0xc8>
 800695a:	2000      	movs	r0, #0
 800695c:	e008      	b.n	8006970 <_printf_common+0xa8>
 800695e:	2301      	movs	r3, #1
 8006960:	4652      	mov	r2, sl
 8006962:	4649      	mov	r1, r9
 8006964:	4638      	mov	r0, r7
 8006966:	47c0      	blx	r8
 8006968:	3001      	adds	r0, #1
 800696a:	d103      	bne.n	8006974 <_printf_common+0xac>
 800696c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006974:	3501      	adds	r5, #1
 8006976:	e7c6      	b.n	8006906 <_printf_common+0x3e>
 8006978:	18e1      	adds	r1, r4, r3
 800697a:	1c5a      	adds	r2, r3, #1
 800697c:	2030      	movs	r0, #48	; 0x30
 800697e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006982:	4422      	add	r2, r4
 8006984:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800698c:	3302      	adds	r3, #2
 800698e:	e7c7      	b.n	8006920 <_printf_common+0x58>
 8006990:	2301      	movs	r3, #1
 8006992:	4622      	mov	r2, r4
 8006994:	4649      	mov	r1, r9
 8006996:	4638      	mov	r0, r7
 8006998:	47c0      	blx	r8
 800699a:	3001      	adds	r0, #1
 800699c:	d0e6      	beq.n	800696c <_printf_common+0xa4>
 800699e:	3601      	adds	r6, #1
 80069a0:	e7d9      	b.n	8006956 <_printf_common+0x8e>
	...

080069a4 <_printf_i>:
 80069a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069a8:	7e0f      	ldrb	r7, [r1, #24]
 80069aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069ac:	2f78      	cmp	r7, #120	; 0x78
 80069ae:	4691      	mov	r9, r2
 80069b0:	4680      	mov	r8, r0
 80069b2:	460c      	mov	r4, r1
 80069b4:	469a      	mov	sl, r3
 80069b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069ba:	d807      	bhi.n	80069cc <_printf_i+0x28>
 80069bc:	2f62      	cmp	r7, #98	; 0x62
 80069be:	d80a      	bhi.n	80069d6 <_printf_i+0x32>
 80069c0:	2f00      	cmp	r7, #0
 80069c2:	f000 80d4 	beq.w	8006b6e <_printf_i+0x1ca>
 80069c6:	2f58      	cmp	r7, #88	; 0x58
 80069c8:	f000 80c0 	beq.w	8006b4c <_printf_i+0x1a8>
 80069cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069d4:	e03a      	b.n	8006a4c <_printf_i+0xa8>
 80069d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069da:	2b15      	cmp	r3, #21
 80069dc:	d8f6      	bhi.n	80069cc <_printf_i+0x28>
 80069de:	a101      	add	r1, pc, #4	; (adr r1, 80069e4 <_printf_i+0x40>)
 80069e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069e4:	08006a3d 	.word	0x08006a3d
 80069e8:	08006a51 	.word	0x08006a51
 80069ec:	080069cd 	.word	0x080069cd
 80069f0:	080069cd 	.word	0x080069cd
 80069f4:	080069cd 	.word	0x080069cd
 80069f8:	080069cd 	.word	0x080069cd
 80069fc:	08006a51 	.word	0x08006a51
 8006a00:	080069cd 	.word	0x080069cd
 8006a04:	080069cd 	.word	0x080069cd
 8006a08:	080069cd 	.word	0x080069cd
 8006a0c:	080069cd 	.word	0x080069cd
 8006a10:	08006b55 	.word	0x08006b55
 8006a14:	08006a7d 	.word	0x08006a7d
 8006a18:	08006b0f 	.word	0x08006b0f
 8006a1c:	080069cd 	.word	0x080069cd
 8006a20:	080069cd 	.word	0x080069cd
 8006a24:	08006b77 	.word	0x08006b77
 8006a28:	080069cd 	.word	0x080069cd
 8006a2c:	08006a7d 	.word	0x08006a7d
 8006a30:	080069cd 	.word	0x080069cd
 8006a34:	080069cd 	.word	0x080069cd
 8006a38:	08006b17 	.word	0x08006b17
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	1d1a      	adds	r2, r3, #4
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	602a      	str	r2, [r5, #0]
 8006a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e09f      	b.n	8006b90 <_printf_i+0x1ec>
 8006a50:	6820      	ldr	r0, [r4, #0]
 8006a52:	682b      	ldr	r3, [r5, #0]
 8006a54:	0607      	lsls	r7, r0, #24
 8006a56:	f103 0104 	add.w	r1, r3, #4
 8006a5a:	6029      	str	r1, [r5, #0]
 8006a5c:	d501      	bpl.n	8006a62 <_printf_i+0xbe>
 8006a5e:	681e      	ldr	r6, [r3, #0]
 8006a60:	e003      	b.n	8006a6a <_printf_i+0xc6>
 8006a62:	0646      	lsls	r6, r0, #25
 8006a64:	d5fb      	bpl.n	8006a5e <_printf_i+0xba>
 8006a66:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a6a:	2e00      	cmp	r6, #0
 8006a6c:	da03      	bge.n	8006a76 <_printf_i+0xd2>
 8006a6e:	232d      	movs	r3, #45	; 0x2d
 8006a70:	4276      	negs	r6, r6
 8006a72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a76:	485a      	ldr	r0, [pc, #360]	; (8006be0 <_printf_i+0x23c>)
 8006a78:	230a      	movs	r3, #10
 8006a7a:	e012      	b.n	8006aa2 <_printf_i+0xfe>
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	6820      	ldr	r0, [r4, #0]
 8006a80:	1d19      	adds	r1, r3, #4
 8006a82:	6029      	str	r1, [r5, #0]
 8006a84:	0605      	lsls	r5, r0, #24
 8006a86:	d501      	bpl.n	8006a8c <_printf_i+0xe8>
 8006a88:	681e      	ldr	r6, [r3, #0]
 8006a8a:	e002      	b.n	8006a92 <_printf_i+0xee>
 8006a8c:	0641      	lsls	r1, r0, #25
 8006a8e:	d5fb      	bpl.n	8006a88 <_printf_i+0xe4>
 8006a90:	881e      	ldrh	r6, [r3, #0]
 8006a92:	4853      	ldr	r0, [pc, #332]	; (8006be0 <_printf_i+0x23c>)
 8006a94:	2f6f      	cmp	r7, #111	; 0x6f
 8006a96:	bf0c      	ite	eq
 8006a98:	2308      	moveq	r3, #8
 8006a9a:	230a      	movne	r3, #10
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006aa2:	6865      	ldr	r5, [r4, #4]
 8006aa4:	60a5      	str	r5, [r4, #8]
 8006aa6:	2d00      	cmp	r5, #0
 8006aa8:	bfa2      	ittt	ge
 8006aaa:	6821      	ldrge	r1, [r4, #0]
 8006aac:	f021 0104 	bicge.w	r1, r1, #4
 8006ab0:	6021      	strge	r1, [r4, #0]
 8006ab2:	b90e      	cbnz	r6, 8006ab8 <_printf_i+0x114>
 8006ab4:	2d00      	cmp	r5, #0
 8006ab6:	d04b      	beq.n	8006b50 <_printf_i+0x1ac>
 8006ab8:	4615      	mov	r5, r2
 8006aba:	fbb6 f1f3 	udiv	r1, r6, r3
 8006abe:	fb03 6711 	mls	r7, r3, r1, r6
 8006ac2:	5dc7      	ldrb	r7, [r0, r7]
 8006ac4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ac8:	4637      	mov	r7, r6
 8006aca:	42bb      	cmp	r3, r7
 8006acc:	460e      	mov	r6, r1
 8006ace:	d9f4      	bls.n	8006aba <_printf_i+0x116>
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d10b      	bne.n	8006aec <_printf_i+0x148>
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	07de      	lsls	r6, r3, #31
 8006ad8:	d508      	bpl.n	8006aec <_printf_i+0x148>
 8006ada:	6923      	ldr	r3, [r4, #16]
 8006adc:	6861      	ldr	r1, [r4, #4]
 8006ade:	4299      	cmp	r1, r3
 8006ae0:	bfde      	ittt	le
 8006ae2:	2330      	movle	r3, #48	; 0x30
 8006ae4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ae8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006aec:	1b52      	subs	r2, r2, r5
 8006aee:	6122      	str	r2, [r4, #16]
 8006af0:	f8cd a000 	str.w	sl, [sp]
 8006af4:	464b      	mov	r3, r9
 8006af6:	aa03      	add	r2, sp, #12
 8006af8:	4621      	mov	r1, r4
 8006afa:	4640      	mov	r0, r8
 8006afc:	f7ff fee4 	bl	80068c8 <_printf_common>
 8006b00:	3001      	adds	r0, #1
 8006b02:	d14a      	bne.n	8006b9a <_printf_i+0x1f6>
 8006b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b08:	b004      	add	sp, #16
 8006b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	f043 0320 	orr.w	r3, r3, #32
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	4833      	ldr	r0, [pc, #204]	; (8006be4 <_printf_i+0x240>)
 8006b18:	2778      	movs	r7, #120	; 0x78
 8006b1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	6829      	ldr	r1, [r5, #0]
 8006b22:	061f      	lsls	r7, r3, #24
 8006b24:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b28:	d402      	bmi.n	8006b30 <_printf_i+0x18c>
 8006b2a:	065f      	lsls	r7, r3, #25
 8006b2c:	bf48      	it	mi
 8006b2e:	b2b6      	uxthmi	r6, r6
 8006b30:	07df      	lsls	r7, r3, #31
 8006b32:	bf48      	it	mi
 8006b34:	f043 0320 	orrmi.w	r3, r3, #32
 8006b38:	6029      	str	r1, [r5, #0]
 8006b3a:	bf48      	it	mi
 8006b3c:	6023      	strmi	r3, [r4, #0]
 8006b3e:	b91e      	cbnz	r6, 8006b48 <_printf_i+0x1a4>
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	f023 0320 	bic.w	r3, r3, #32
 8006b46:	6023      	str	r3, [r4, #0]
 8006b48:	2310      	movs	r3, #16
 8006b4a:	e7a7      	b.n	8006a9c <_printf_i+0xf8>
 8006b4c:	4824      	ldr	r0, [pc, #144]	; (8006be0 <_printf_i+0x23c>)
 8006b4e:	e7e4      	b.n	8006b1a <_printf_i+0x176>
 8006b50:	4615      	mov	r5, r2
 8006b52:	e7bd      	b.n	8006ad0 <_printf_i+0x12c>
 8006b54:	682b      	ldr	r3, [r5, #0]
 8006b56:	6826      	ldr	r6, [r4, #0]
 8006b58:	6961      	ldr	r1, [r4, #20]
 8006b5a:	1d18      	adds	r0, r3, #4
 8006b5c:	6028      	str	r0, [r5, #0]
 8006b5e:	0635      	lsls	r5, r6, #24
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	d501      	bpl.n	8006b68 <_printf_i+0x1c4>
 8006b64:	6019      	str	r1, [r3, #0]
 8006b66:	e002      	b.n	8006b6e <_printf_i+0x1ca>
 8006b68:	0670      	lsls	r0, r6, #25
 8006b6a:	d5fb      	bpl.n	8006b64 <_printf_i+0x1c0>
 8006b6c:	8019      	strh	r1, [r3, #0]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	6123      	str	r3, [r4, #16]
 8006b72:	4615      	mov	r5, r2
 8006b74:	e7bc      	b.n	8006af0 <_printf_i+0x14c>
 8006b76:	682b      	ldr	r3, [r5, #0]
 8006b78:	1d1a      	adds	r2, r3, #4
 8006b7a:	602a      	str	r2, [r5, #0]
 8006b7c:	681d      	ldr	r5, [r3, #0]
 8006b7e:	6862      	ldr	r2, [r4, #4]
 8006b80:	2100      	movs	r1, #0
 8006b82:	4628      	mov	r0, r5
 8006b84:	f7f9 fbb4 	bl	80002f0 <memchr>
 8006b88:	b108      	cbz	r0, 8006b8e <_printf_i+0x1ea>
 8006b8a:	1b40      	subs	r0, r0, r5
 8006b8c:	6060      	str	r0, [r4, #4]
 8006b8e:	6863      	ldr	r3, [r4, #4]
 8006b90:	6123      	str	r3, [r4, #16]
 8006b92:	2300      	movs	r3, #0
 8006b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b98:	e7aa      	b.n	8006af0 <_printf_i+0x14c>
 8006b9a:	6923      	ldr	r3, [r4, #16]
 8006b9c:	462a      	mov	r2, r5
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	4640      	mov	r0, r8
 8006ba2:	47d0      	blx	sl
 8006ba4:	3001      	adds	r0, #1
 8006ba6:	d0ad      	beq.n	8006b04 <_printf_i+0x160>
 8006ba8:	6823      	ldr	r3, [r4, #0]
 8006baa:	079b      	lsls	r3, r3, #30
 8006bac:	d413      	bmi.n	8006bd6 <_printf_i+0x232>
 8006bae:	68e0      	ldr	r0, [r4, #12]
 8006bb0:	9b03      	ldr	r3, [sp, #12]
 8006bb2:	4298      	cmp	r0, r3
 8006bb4:	bfb8      	it	lt
 8006bb6:	4618      	movlt	r0, r3
 8006bb8:	e7a6      	b.n	8006b08 <_printf_i+0x164>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	4632      	mov	r2, r6
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	4640      	mov	r0, r8
 8006bc2:	47d0      	blx	sl
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d09d      	beq.n	8006b04 <_printf_i+0x160>
 8006bc8:	3501      	adds	r5, #1
 8006bca:	68e3      	ldr	r3, [r4, #12]
 8006bcc:	9903      	ldr	r1, [sp, #12]
 8006bce:	1a5b      	subs	r3, r3, r1
 8006bd0:	42ab      	cmp	r3, r5
 8006bd2:	dcf2      	bgt.n	8006bba <_printf_i+0x216>
 8006bd4:	e7eb      	b.n	8006bae <_printf_i+0x20a>
 8006bd6:	2500      	movs	r5, #0
 8006bd8:	f104 0619 	add.w	r6, r4, #25
 8006bdc:	e7f5      	b.n	8006bca <_printf_i+0x226>
 8006bde:	bf00      	nop
 8006be0:	08006d51 	.word	0x08006d51
 8006be4:	08006d62 	.word	0x08006d62

08006be8 <memmove>:
 8006be8:	4288      	cmp	r0, r1
 8006bea:	b510      	push	{r4, lr}
 8006bec:	eb01 0402 	add.w	r4, r1, r2
 8006bf0:	d902      	bls.n	8006bf8 <memmove+0x10>
 8006bf2:	4284      	cmp	r4, r0
 8006bf4:	4623      	mov	r3, r4
 8006bf6:	d807      	bhi.n	8006c08 <memmove+0x20>
 8006bf8:	1e43      	subs	r3, r0, #1
 8006bfa:	42a1      	cmp	r1, r4
 8006bfc:	d008      	beq.n	8006c10 <memmove+0x28>
 8006bfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c06:	e7f8      	b.n	8006bfa <memmove+0x12>
 8006c08:	4402      	add	r2, r0
 8006c0a:	4601      	mov	r1, r0
 8006c0c:	428a      	cmp	r2, r1
 8006c0e:	d100      	bne.n	8006c12 <memmove+0x2a>
 8006c10:	bd10      	pop	{r4, pc}
 8006c12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c1a:	e7f7      	b.n	8006c0c <memmove+0x24>

08006c1c <_sbrk_r>:
 8006c1c:	b538      	push	{r3, r4, r5, lr}
 8006c1e:	4d06      	ldr	r5, [pc, #24]	; (8006c38 <_sbrk_r+0x1c>)
 8006c20:	2300      	movs	r3, #0
 8006c22:	4604      	mov	r4, r0
 8006c24:	4608      	mov	r0, r1
 8006c26:	602b      	str	r3, [r5, #0]
 8006c28:	f7fa fac0 	bl	80011ac <_sbrk>
 8006c2c:	1c43      	adds	r3, r0, #1
 8006c2e:	d102      	bne.n	8006c36 <_sbrk_r+0x1a>
 8006c30:	682b      	ldr	r3, [r5, #0]
 8006c32:	b103      	cbz	r3, 8006c36 <_sbrk_r+0x1a>
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	bd38      	pop	{r3, r4, r5, pc}
 8006c38:	240002dc 	.word	0x240002dc

08006c3c <memcpy>:
 8006c3c:	440a      	add	r2, r1
 8006c3e:	4291      	cmp	r1, r2
 8006c40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006c44:	d100      	bne.n	8006c48 <memcpy+0xc>
 8006c46:	4770      	bx	lr
 8006c48:	b510      	push	{r4, lr}
 8006c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c52:	4291      	cmp	r1, r2
 8006c54:	d1f9      	bne.n	8006c4a <memcpy+0xe>
 8006c56:	bd10      	pop	{r4, pc}

08006c58 <_realloc_r>:
 8006c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c5c:	4680      	mov	r8, r0
 8006c5e:	4614      	mov	r4, r2
 8006c60:	460e      	mov	r6, r1
 8006c62:	b921      	cbnz	r1, 8006c6e <_realloc_r+0x16>
 8006c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c68:	4611      	mov	r1, r2
 8006c6a:	f7ff bc49 	b.w	8006500 <_malloc_r>
 8006c6e:	b92a      	cbnz	r2, 8006c7c <_realloc_r+0x24>
 8006c70:	f7ff fbda 	bl	8006428 <_free_r>
 8006c74:	4625      	mov	r5, r4
 8006c76:	4628      	mov	r0, r5
 8006c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c7c:	f000 f81b 	bl	8006cb6 <_malloc_usable_size_r>
 8006c80:	4284      	cmp	r4, r0
 8006c82:	4607      	mov	r7, r0
 8006c84:	d802      	bhi.n	8006c8c <_realloc_r+0x34>
 8006c86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c8a:	d812      	bhi.n	8006cb2 <_realloc_r+0x5a>
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	4640      	mov	r0, r8
 8006c90:	f7ff fc36 	bl	8006500 <_malloc_r>
 8006c94:	4605      	mov	r5, r0
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d0ed      	beq.n	8006c76 <_realloc_r+0x1e>
 8006c9a:	42bc      	cmp	r4, r7
 8006c9c:	4622      	mov	r2, r4
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	bf28      	it	cs
 8006ca2:	463a      	movcs	r2, r7
 8006ca4:	f7ff ffca 	bl	8006c3c <memcpy>
 8006ca8:	4631      	mov	r1, r6
 8006caa:	4640      	mov	r0, r8
 8006cac:	f7ff fbbc 	bl	8006428 <_free_r>
 8006cb0:	e7e1      	b.n	8006c76 <_realloc_r+0x1e>
 8006cb2:	4635      	mov	r5, r6
 8006cb4:	e7df      	b.n	8006c76 <_realloc_r+0x1e>

08006cb6 <_malloc_usable_size_r>:
 8006cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cba:	1f18      	subs	r0, r3, #4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	bfbc      	itt	lt
 8006cc0:	580b      	ldrlt	r3, [r1, r0]
 8006cc2:	18c0      	addlt	r0, r0, r3
 8006cc4:	4770      	bx	lr
	...

08006cc8 <_init>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	bf00      	nop
 8006ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cce:	bc08      	pop	{r3}
 8006cd0:	469e      	mov	lr, r3
 8006cd2:	4770      	bx	lr

08006cd4 <_fini>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	bf00      	nop
 8006cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cda:	bc08      	pop	{r3}
 8006cdc:	469e      	mov	lr, r3
 8006cde:	4770      	bx	lr
