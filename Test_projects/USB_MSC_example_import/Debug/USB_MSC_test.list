
USB_MSC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b704  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800b9b4  0800b9b4  0001b9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ba98  0800ba98  0001ba98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ba9c  0800ba9c  0001ba9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000015c  24000000  0800baa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000fadac  2400015c  0800bbfc  0002015c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240faf08  0800bbfc  0002af08  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002018a  2**0
                  CONTENTS, READONLY
 10 .debug_info   000146a5  00000000  00000000  000201cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003930  00000000  00000000  00034872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001080  00000000  00000000  000381a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c34  00000000  00000000  00039228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000346fb  00000000  00000000  00039e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000182f1  00000000  00000000  0006e557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00137590  00000000  00000000  00086848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000049a0  00000000  00000000  001bddd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000089  00000000  00000000  001c2778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400015c 	.word	0x2400015c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b99c 	.word	0x0800b99c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000160 	.word	0x24000160
 80002ec:	0800b99c 	.word	0x0800b99c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000394:	f000 fd44 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000398:	f000 f806 	bl	80003a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039c:	f000 f8b2 	bl	8000504 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80003a0:	f009 fdbe 	bl	8009f20 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <main+0x14>
	...

080003a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b0a4      	sub	sp, #144	; 0x90
 80003ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003b2:	224c      	movs	r2, #76	; 0x4c
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f00a fc8f 	bl	800acda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003c0:	2220      	movs	r2, #32
 80003c2:	2100      	movs	r1, #0
 80003c4:	4618      	mov	r0, r3
 80003c6:	f00a fc88 	bl	800acda <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]
 80003da:	615a      	str	r2, [r3, #20]

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80003dc:	4b47      	ldr	r3, [pc, #284]	; (80004fc <SystemClock_Config+0x154>)
 80003de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80003e6:	2004      	movs	r0, #4
 80003e8:	f002 fb80 	bl	8002aec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003ec:	2300      	movs	r3, #0
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	4b43      	ldr	r3, [pc, #268]	; (8000500 <SystemClock_Config+0x158>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a42      	ldr	r2, [pc, #264]	; (8000500 <SystemClock_Config+0x158>)
 80003f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b40      	ldr	r3, [pc, #256]	; (8000500 <SystemClock_Config+0x158>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000404:	60bb      	str	r3, [r7, #8]
 8000406:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000408:	bf00      	nop
 800040a:	4b3d      	ldr	r3, [pc, #244]	; (8000500 <SystemClock_Config+0x158>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000416:	d1f8      	bne.n	800040a <SystemClock_Config+0x62>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000418:	2321      	movs	r3, #33	; 0x21
 800041a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800041c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000420:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000422:	2301      	movs	r3, #1
 8000424:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000426:	2302      	movs	r3, #2
 8000428:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800042a:	2302      	movs	r3, #2
 800042c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800042e:	2302      	movs	r3, #2
 8000430:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000432:	230c      	movs	r3, #12
 8000434:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000436:	2302      	movs	r3, #2
 8000438:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800043a:	2303      	movs	r3, #3
 800043c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 4;
 800043e:	2304      	movs	r3, #4
 8000440:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000444:	230c      	movs	r3, #12
 8000446:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800044a:	2300      	movs	r3, #0
 800044c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000456:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800045a:	4618      	mov	r0, r3
 800045c:	f002 fbb0 	bl	8002bc0 <HAL_RCC_OscConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000466:	f000 fb41 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800046a:	233f      	movs	r3, #63	; 0x3f
 800046c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046e:	2303      	movs	r3, #3
 8000470:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000476:	2300      	movs	r3, #0
 8000478:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800047a:	2340      	movs	r3, #64	; 0x40
 800047c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800047e:	2340      	movs	r3, #64	; 0x40
 8000480:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000486:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000488:	2340      	movs	r3, #64	; 0x40
 800048a:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800048c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000490:	2103      	movs	r1, #3
 8000492:	4618      	mov	r0, r3
 8000494:	f002 ffc6 	bl	8003424 <HAL_RCC_ClockConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800049e:	f000 fb25 	bl	8000aec <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80004a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80004a6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80004aa:	2000      	movs	r0, #0
 80004ac:	f003 f970 	bl	8003790 <HAL_RCC_MCOConfig>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 80004b0:	4b12      	ldr	r3, [pc, #72]	; (80004fc <SystemClock_Config+0x154>)
 80004b2:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80004b6:	4a11      	ldr	r2, [pc, #68]	; (80004fc <SystemClock_Config+0x154>)
 80004b8:	f043 0302 	orr.w	r3, r3, #2
 80004bc:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 80004c0:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <SystemClock_Config+0x154>)
 80004c2:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80004c6:	f003 0302 	and.w	r3, r3, #2
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80004ce:	2300      	movs	r3, #0
 80004d0:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB2;
 80004d2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80004d6:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80004d8:	2300      	movs	r3, #0
 80004da:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 80004dc:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 80004e0:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80004e2:	2322      	movs	r3, #34	; 0x22
 80004e4:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80004e6:	2320      	movs	r3, #32
 80004e8:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80004ea:	f107 030c 	add.w	r3, r7, #12
 80004ee:	4618      	mov	r0, r3
 80004f0:	f004 fd20 	bl	8004f34 <HAL_RCCEx_CRSConfig>
}
 80004f4:	bf00      	nop
 80004f6:	3790      	adds	r7, #144	; 0x90
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	58024400 	.word	0x58024400
 8000500:	58024800 	.word	0x58024800

08000504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b090      	sub	sp, #64	; 0x40
 8000508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800051a:	4bbf      	ldr	r3, [pc, #764]	; (8000818 <MX_GPIO_Init+0x314>)
 800051c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000520:	4abd      	ldr	r2, [pc, #756]	; (8000818 <MX_GPIO_Init+0x314>)
 8000522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000526:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800052a:	4bbb      	ldr	r3, [pc, #748]	; (8000818 <MX_GPIO_Init+0x314>)
 800052c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000534:	62bb      	str	r3, [r7, #40]	; 0x28
 8000536:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000538:	4bb7      	ldr	r3, [pc, #732]	; (8000818 <MX_GPIO_Init+0x314>)
 800053a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800053e:	4ab6      	ldr	r2, [pc, #728]	; (8000818 <MX_GPIO_Init+0x314>)
 8000540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000544:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000548:	4bb3      	ldr	r3, [pc, #716]	; (8000818 <MX_GPIO_Init+0x314>)
 800054a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800054e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000552:	627b      	str	r3, [r7, #36]	; 0x24
 8000554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000556:	4bb0      	ldr	r3, [pc, #704]	; (8000818 <MX_GPIO_Init+0x314>)
 8000558:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800055c:	4aae      	ldr	r2, [pc, #696]	; (8000818 <MX_GPIO_Init+0x314>)
 800055e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000562:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000566:	4bac      	ldr	r3, [pc, #688]	; (8000818 <MX_GPIO_Init+0x314>)
 8000568:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800056c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000570:	623b      	str	r3, [r7, #32]
 8000572:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000574:	4ba8      	ldr	r3, [pc, #672]	; (8000818 <MX_GPIO_Init+0x314>)
 8000576:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800057a:	4aa7      	ldr	r2, [pc, #668]	; (8000818 <MX_GPIO_Init+0x314>)
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000584:	4ba4      	ldr	r3, [pc, #656]	; (8000818 <MX_GPIO_Init+0x314>)
 8000586:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800058a:	f003 0308 	and.w	r3, r3, #8
 800058e:	61fb      	str	r3, [r7, #28]
 8000590:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000592:	4ba1      	ldr	r3, [pc, #644]	; (8000818 <MX_GPIO_Init+0x314>)
 8000594:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000598:	4a9f      	ldr	r2, [pc, #636]	; (8000818 <MX_GPIO_Init+0x314>)
 800059a:	f043 0304 	orr.w	r3, r3, #4
 800059e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80005a2:	4b9d      	ldr	r3, [pc, #628]	; (8000818 <MX_GPIO_Init+0x314>)
 80005a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005a8:	f003 0304 	and.w	r3, r3, #4
 80005ac:	61bb      	str	r3, [r7, #24]
 80005ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005b0:	4b99      	ldr	r3, [pc, #612]	; (8000818 <MX_GPIO_Init+0x314>)
 80005b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005b6:	4a98      	ldr	r2, [pc, #608]	; (8000818 <MX_GPIO_Init+0x314>)
 80005b8:	f043 0310 	orr.w	r3, r3, #16
 80005bc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80005c0:	4b95      	ldr	r3, [pc, #596]	; (8000818 <MX_GPIO_Init+0x314>)
 80005c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005c6:	f003 0310 	and.w	r3, r3, #16
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	4b92      	ldr	r3, [pc, #584]	; (8000818 <MX_GPIO_Init+0x314>)
 80005d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005d4:	4a90      	ldr	r2, [pc, #576]	; (8000818 <MX_GPIO_Init+0x314>)
 80005d6:	f043 0302 	orr.w	r3, r3, #2
 80005da:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80005de:	4b8e      	ldr	r3, [pc, #568]	; (8000818 <MX_GPIO_Init+0x314>)
 80005e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005e4:	f003 0302 	and.w	r3, r3, #2
 80005e8:	613b      	str	r3, [r7, #16]
 80005ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80005ec:	4b8a      	ldr	r3, [pc, #552]	; (8000818 <MX_GPIO_Init+0x314>)
 80005ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005f2:	4a89      	ldr	r2, [pc, #548]	; (8000818 <MX_GPIO_Init+0x314>)
 80005f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005f8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80005fc:	4b86      	ldr	r3, [pc, #536]	; (8000818 <MX_GPIO_Init+0x314>)
 80005fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b83      	ldr	r3, [pc, #524]	; (8000818 <MX_GPIO_Init+0x314>)
 800060c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000610:	4a81      	ldr	r2, [pc, #516]	; (8000818 <MX_GPIO_Init+0x314>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800061a:	4b7f      	ldr	r3, [pc, #508]	; (8000818 <MX_GPIO_Init+0x314>)
 800061c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000628:	4b7b      	ldr	r3, [pc, #492]	; (8000818 <MX_GPIO_Init+0x314>)
 800062a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800062e:	4a7a      	ldr	r2, [pc, #488]	; (8000818 <MX_GPIO_Init+0x314>)
 8000630:	f043 0320 	orr.w	r3, r3, #32
 8000634:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000638:	4b77      	ldr	r3, [pc, #476]	; (8000818 <MX_GPIO_Init+0x314>)
 800063a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800063e:	f003 0320 	and.w	r3, r3, #32
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	4b74      	ldr	r3, [pc, #464]	; (8000818 <MX_GPIO_Init+0x314>)
 8000648:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800064c:	4a72      	ldr	r2, [pc, #456]	; (8000818 <MX_GPIO_Init+0x314>)
 800064e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000652:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000656:	4b70      	ldr	r3, [pc, #448]	; (8000818 <MX_GPIO_Init+0x314>)
 8000658:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800065c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	210e      	movs	r1, #14
 8000668:	486c      	ldr	r0, [pc, #432]	; (800081c <MX_GPIO_Init+0x318>)
 800066a:	f000 ff5b 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f640 0104 	movw	r1, #2052	; 0x804
 8000674:	486a      	ldr	r0, [pc, #424]	; (8000820 <MX_GPIO_Init+0x31c>)
 8000676:	f000 ff55 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000680:	4868      	ldr	r0, [pc, #416]	; (8000824 <MX_GPIO_Init+0x320>)
 8000682:	f000 ff4f 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	2108      	movs	r1, #8
 800068a:	4865      	ldr	r0, [pc, #404]	; (8000820 <MX_GPIO_Init+0x31c>)
 800068c:	f000 ff4a 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	2106      	movs	r1, #6
 8000694:	4863      	ldr	r0, [pc, #396]	; (8000824 <MX_GPIO_Init+0x320>)
 8000696:	f000 ff45 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_GPIO_Pin WIFI_DATRDY_Pin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 800069a:	2330      	movs	r3, #48	; 0x30
 800069c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800069e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80006a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ac:	4619      	mov	r1, r3
 80006ae:	485b      	ldr	r0, [pc, #364]	; (800081c <MX_GPIO_Init+0x318>)
 80006b0:	f000 fd88 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNCAS_Pin SDCLK_Pin A15_Pin A14_Pin
                           A11_Pin A10_Pin */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 80006b4:	f248 1333 	movw	r3, #33075	; 0x8133
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ba:	2302      	movs	r3, #2
 80006bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c2:	2303      	movs	r3, #3
 80006c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006c6:	230c      	movs	r3, #12
 80006c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ce:	4619      	mov	r1, r3
 80006d0:	4853      	ldr	r0, [pc, #332]	; (8000820 <MX_GPIO_Init+0x31c>)
 80006d2:	f000 fd77 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B6_Pin LCD_B7_Pin LCD_B4_Pin LCD_B5_Pin
                           LCD_DE_Pin LCD_G7_Pin LCD_G6_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 80006d6:	23ff      	movs	r3, #255	; 0xff
 80006d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	2302      	movs	r3, #2
 80006dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80006e6:	230e      	movs	r3, #14
 80006e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80006ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ee:	4619      	mov	r1, r3
 80006f0:	484d      	ldr	r0, [pc, #308]	; (8000828 <MX_GPIO_Init+0x324>)
 80006f2:	f000 fd67 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S6_SDO_Pin I2S6_SDI_Pin I2S6_CK_Pin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 80006f6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fc:	2302      	movs	r3, #2
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000708:	2305      	movs	r3, #5
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800070c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000710:	4619      	mov	r1, r3
 8000712:	4843      	ldr	r0, [pc, #268]	; (8000820 <MX_GPIO_Init+0x31c>)
 8000714:	f000 fd56 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO6_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8000718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800071c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071e:	2302      	movs	r3, #2
 8000720:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000726:	2303      	movs	r3, #3
 8000728:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800072a:	2309      	movs	r3, #9
 800072c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 800072e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000732:	4619      	mov	r1, r3
 8000734:	483a      	ldr	r0, [pc, #232]	; (8000820 <MX_GPIO_Init+0x31c>)
 8000736:	f000 fd45 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO7_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 800073a:	2380      	movs	r3, #128	; 0x80
 800073c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800074a:	230a      	movs	r3, #10
 800074c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 800074e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000752:	4619      	mov	r1, r3
 8000754:	4835      	ldr	r0, [pc, #212]	; (800082c <MX_GPIO_Init+0x328>)
 8000756:	f000 fd35 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D2_Pin D0_Pin D1_Pin
                           D13_Pin D15_Pin D14_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 800075a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800076c:	230c      	movs	r3, #12
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000770:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000774:	4619      	mov	r1, r3
 8000776:	482d      	ldr	r0, [pc, #180]	; (800082c <MX_GPIO_Init+0x328>)
 8000778:	f000 fd24 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_CK_Pin SDIO1_D3_Pin SDIO1_D1_Pin
                           SDIO1_D0_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D1_Pin
 800077c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800078e:	230c      	movs	r3, #12
 8000790:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000796:	4619      	mov	r1, r3
 8000798:	4825      	ldr	r0, [pc, #148]	; (8000830 <MX_GPIO_Init+0x32c>)
 800079a:	f000 fd13 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_BOOT_Pin WIFI_WKUP_Pin WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 800079e:	230e      	movs	r3, #14
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b2:	4619      	mov	r1, r3
 80007b4:	4819      	ldr	r0, [pc, #100]	; (800081c <MX_GPIO_Init+0x318>)
 80007b6:	f000 fd05 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL0_Pin FMC_NBL1_Pin D9_Pin D4_Pin
                           D10_Pin D11_Pin D7_Pin D6_Pin
                           D12_Pin D5_Pin D8_Pin */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 80007ba:	f64f 7383 	movw	r3, #65411	; 0xff83
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007cc:	230c      	movs	r3, #12
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d4:	4619      	mov	r1, r3
 80007d6:	4817      	ldr	r0, [pc, #92]	; (8000834 <MX_GPIO_Init+0x330>)
 80007d8:	f000 fcf4 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED1_Pin AUDIO_NRST_Pin USER_LED2_Pin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 80007dc:	f640 030c 	movw	r3, #2060	; 0x80c
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f2:	4619      	mov	r1, r3
 80007f4:	480a      	ldr	r0, [pc, #40]	; (8000820 <MX_GPIO_Init+0x31c>)
 80007f6:	f000 fce5 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B3_Pin LCD_B2_Pin LCD_B1_Pin LCD_B0_Pin
                           LCD_G4_Pin LCD_G3_Pin LCD_G2_Pin LCD_G1_Pin
                           LCD_R7_Pin LCD_G0_Pin LCD_R1_Pin LCD_R6_Pin
                           LCD_R2_Pin LCD_R5_Pin LCD_R3_Pin LCD_R4_Pin */
  GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 80007fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800080c:	230e      	movs	r3, #14
 800080e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000810:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000814:	e010      	b.n	8000838 <MX_GPIO_Init+0x334>
 8000816:	bf00      	nop
 8000818:	58024400 	.word	0x58024400
 800081c:	58022000 	.word	0x58022000
 8000820:	58021800 	.word	0x58021800
 8000824:	58020000 	.word	0x58020000
 8000828:	58022800 	.word	0x58022800
 800082c:	58020c00 	.word	0x58020c00
 8000830:	58020800 	.word	0x58020800
 8000834:	58021000 	.word	0x58021000
 8000838:	4619      	mov	r1, r3
 800083a:	48a3      	ldr	r0, [pc, #652]	; (8000ac8 <MX_GPIO_Init+0x5c4>)
 800083c:	f000 fcc2 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000840:	2304      	movs	r3, #4
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000850:	230c      	movs	r3, #12
 8000852:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000858:	4619      	mov	r1, r3
 800085a:	489c      	ldr	r0, [pc, #624]	; (8000acc <MX_GPIO_Init+0x5c8>)
 800085c:	f000 fcb2 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000860:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000866:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800086c:	2301      	movs	r3, #1
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000874:	4619      	mov	r1, r3
 8000876:	4896      	ldr	r0, [pc, #600]	; (8000ad0 <MX_GPIO_Init+0x5cc>)
 8000878:	f000 fca4 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 800087c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800088e:	2305      	movs	r3, #5
 8000890:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000896:	4619      	mov	r1, r3
 8000898:	488e      	ldr	r0, [pc, #568]	; (8000ad4 <MX_GPIO_Init+0x5d0>)
 800089a:	f000 fc93 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LCD_BL_CTRL_Pin LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 800089e:	f640 0306 	movw	r3, #2054	; 0x806
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008b4:	4619      	mov	r1, r3
 80008b6:	4887      	ldr	r0, [pc, #540]	; (8000ad4 <MX_GPIO_Init+0x5d0>)
 80008b8:	f000 fc84 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_RX_Pin VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80008bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008ce:	2307      	movs	r3, #7
 80008d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008d6:	4619      	mov	r1, r3
 80008d8:	487e      	ldr	r0, [pc, #504]	; (8000ad4 <MX_GPIO_Init+0x5d0>)
 80008da:	f000 fc73 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKEUP_Pin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 80008de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f2:	4619      	mov	r1, r3
 80008f4:	4878      	ldr	r0, [pc, #480]	; (8000ad8 <MX_GPIO_Init+0x5d4>)
 80008f6:	f000 fc65 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin A0_Pin A2_Pin A4_Pin
                           A3_Pin A5_Pin A7_Pin SDNRAS_Pin
                           A9_Pin A8_Pin A6_Pin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 80008fa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800090c:	230c      	movs	r3, #12
 800090e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000914:	4619      	mov	r1, r3
 8000916:	4871      	ldr	r0, [pc, #452]	; (8000adc <MX_GPIO_Init+0x5d8>)
 8000918:	f000 fc54 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 800091c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800092e:	2300      	movs	r3, #0
 8000930:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000936:	4619      	mov	r1, r3
 8000938:	4866      	ldr	r0, [pc, #408]	; (8000ad4 <MX_GPIO_Init+0x5d0>)
 800093a:	f000 fc43 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 800093e:	2340      	movs	r3, #64	; 0x40
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800094e:	230a      	movs	r3, #10
 8000950:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000956:	4619      	mov	r1, r3
 8000958:	4861      	ldr	r0, [pc, #388]	; (8000ae0 <MX_GPIO_Init+0x5dc>)
 800095a:	f000 fc33 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_CLK_Pin LCD_VSYNC_Pin LCD_R0_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 800095e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000970:	230e      	movs	r3, #14
 8000972:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000978:	4619      	mov	r1, r3
 800097a:	4855      	ldr	r0, [pc, #340]	; (8000ad0 <MX_GPIO_Init+0x5cc>)
 800097c:	f000 fc22 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO3_Pin OCSPI1_IO2_Pin OCSPI1_IO1_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO3_Pin|OCSPI1_IO2_Pin|OCSPI1_IO1_Pin;
 8000980:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000992:	230a      	movs	r3, #10
 8000994:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099a:	4619      	mov	r1, r3
 800099c:	484f      	ldr	r0, [pc, #316]	; (8000adc <MX_GPIO_Init+0x5d8>)
 800099e:	f000 fc11 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 80009a2:	230c      	movs	r3, #12
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009b2:	2305      	movs	r3, #5
 80009b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ba:	4619      	mov	r1, r3
 80009bc:	4846      	ldr	r0, [pc, #280]	; (8000ad8 <MX_GPIO_Init+0x5d4>)
 80009be:	f000 fc01 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C4_SDA_Pin I2C4_SCL_Pin */
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 80009c2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c8:	2312      	movs	r3, #18
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80009d4:	2304      	movs	r3, #4
 80009d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009dc:	4619      	mov	r1, r3
 80009de:	483b      	ldr	r0, [pc, #236]	; (8000acc <MX_GPIO_Init+0x5c8>)
 80009e0:	f000 fbf0 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO0_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO0_Pin;
 80009e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80009f6:	2309      	movs	r3, #9
 80009f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO0_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009fe:	4619      	mov	r1, r3
 8000a00:	4832      	ldr	r0, [pc, #200]	; (8000acc <MX_GPIO_Init+0x5c8>)
 8000a02:	f000 fbdf 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO4_Pin OCSPI1_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 8000a06:	2322      	movs	r3, #34	; 0x22
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000a16:	230a      	movs	r3, #10
 8000a18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a1e:	4619      	mov	r1, r3
 8000a20:	482d      	ldr	r0, [pc, #180]	; (8000ad8 <MX_GPIO_Init+0x5d4>)
 8000a22:	f000 fbcf 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000a26:	2304      	movs	r3, #4
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a38:	4619      	mov	r1, r3
 8000a3a:	482a      	ldr	r0, [pc, #168]	; (8000ae4 <MX_GPIO_Init+0x5e0>)
 8000a3c:	f000 fbc2 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNE1_Pin SDNWE_Pin SDCKE1_Pin */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000a40:	23e0      	movs	r3, #224	; 0xe0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a50:	230c      	movs	r3, #12
 8000a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4822      	ldr	r0, [pc, #136]	; (8000ae4 <MX_GPIO_Init+0x5e0>)
 8000a5c:	f000 fbb2 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO5_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 8000a60:	2308      	movs	r3, #8
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000a70:	2309      	movs	r3, #9
 8000a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a78:	4619      	mov	r1, r3
 8000a7a:	481a      	ldr	r0, [pc, #104]	; (8000ae4 <MX_GPIO_Init+0x5e0>)
 8000a7c:	f000 fba2 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S6_WS_Pin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin;
 8000a80:	2301      	movs	r3, #1
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000a90:	2305      	movs	r3, #5
 8000a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S6_WS_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480e      	ldr	r0, [pc, #56]	; (8000ad4 <MX_GPIO_Init+0x5d0>)
 8000a9c:	f000 fb92 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_CLK_Pin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000ab0:	2309      	movs	r3, #9
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <MX_GPIO_Init+0x5e4>)
 8000abc:	f000 fb82 	bl	80011c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac0:	bf00      	nop
 8000ac2:	3740      	adds	r7, #64	; 0x40
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	58022400 	.word	0x58022400
 8000acc:	58020c00 	.word	0x58020c00
 8000ad0:	58022000 	.word	0x58022000
 8000ad4:	58020000 	.word	0x58020000
 8000ad8:	58020800 	.word	0x58020800
 8000adc:	58021400 	.word	0x58021400
 8000ae0:	58021800 	.word	0x58021800
 8000ae4:	58021c00 	.word	0x58021c00
 8000ae8:	58020400 	.word	0x58020400

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x8>
	...

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_MspInit+0x30>)
 8000b00:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b04:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <HAL_MspInit+0x30>)
 8000b06:	f043 0302 	orr.w	r3, r3, #2
 8000b0a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_MspInit+0x30>)
 8000b10:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b14:	f003 0302 	and.w	r3, r3, #2
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	58024400 	.word	0x58024400

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler+0x4>

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b78:	f000 f9c4 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <OTG_HS_IRQHandler+0x10>)
 8000b86:	f000 fe27 	bl	80017d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	240fa660 	.word	0x240fa660

08000b94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	e00a      	b.n	8000bbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ba6:	f3af 8000 	nop.w
 8000baa:	4601      	mov	r1, r0
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	60ba      	str	r2, [r7, #8]
 8000bb2:	b2ca      	uxtb	r2, r1
 8000bb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697a      	ldr	r2, [r7, #20]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	dbf0      	blt.n	8000ba6 <_read+0x12>
  }

  return len;
 8000bc4:	687b      	ldr	r3, [r7, #4]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	e009      	b.n	8000bf4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	60ba      	str	r2, [r7, #8]
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697a      	ldr	r2, [r7, #20]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	dbf1      	blt.n	8000be0 <_write+0x12>
  }
  return len;
 8000bfc:	687b      	ldr	r3, [r7, #4]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <_close>:

int _close(int file)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_isatty>:

int _isatty(int file)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c78:	4a14      	ldr	r2, [pc, #80]	; (8000ccc <_sbrk+0x5c>)
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <_sbrk+0x60>)
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d102      	bne.n	8000c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <_sbrk+0x64>)
 8000c8e:	4a12      	ldr	r2, [pc, #72]	; (8000cd8 <_sbrk+0x68>)
 8000c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d207      	bcs.n	8000cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca0:	f00a f86a 	bl	800ad78 <__errno>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cae:	e009      	b.n	8000cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <_sbrk+0x64>)
 8000cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	24100000 	.word	0x24100000
 8000cd0:	00000400 	.word	0x00000400
 8000cd4:	24000178 	.word	0x24000178
 8000cd8:	240faf08 	.word	0x240faf08

08000cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b32      	ldr	r3, [pc, #200]	; (8000dac <SystemInit+0xd0>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce6:	4a31      	ldr	r2, [pc, #196]	; (8000dac <SystemInit+0xd0>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cf0:	4b2f      	ldr	r3, [pc, #188]	; (8000db0 <SystemInit+0xd4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 030f 	and.w	r3, r3, #15
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d807      	bhi.n	8000d0c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cfc:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <SystemInit+0xd4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f023 030f 	bic.w	r3, r3, #15
 8000d04:	4a2a      	ldr	r2, [pc, #168]	; (8000db0 <SystemInit+0xd4>)
 8000d06:	f043 0303 	orr.w	r3, r3, #3
 8000d0a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d0c:	4b29      	ldr	r3, [pc, #164]	; (8000db4 <SystemInit+0xd8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a28      	ldr	r2, [pc, #160]	; (8000db4 <SystemInit+0xd8>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d18:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <SystemInit+0xd8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d1e:	4b25      	ldr	r3, [pc, #148]	; (8000db4 <SystemInit+0xd8>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	4924      	ldr	r1, [pc, #144]	; (8000db4 <SystemInit+0xd8>)
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <SystemInit+0xdc>)
 8000d26:	4013      	ands	r3, r2
 8000d28:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <SystemInit+0xd4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 030c 	and.w	r3, r3, #12
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d007      	beq.n	8000d46 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d36:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <SystemInit+0xd4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f023 030f 	bic.w	r3, r3, #15
 8000d3e:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <SystemInit+0xd4>)
 8000d40:	f043 0303 	orr.w	r3, r3, #3
 8000d44:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d46:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <SystemInit+0xd8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <SystemInit+0xd8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <SystemInit+0xd8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <SystemInit+0xd8>)
 8000d5a:	4a18      	ldr	r2, [pc, #96]	; (8000dbc <SystemInit+0xe0>)
 8000d5c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <SystemInit+0xd8>)
 8000d60:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <SystemInit+0xe4>)
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <SystemInit+0xd8>)
 8000d66:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <SystemInit+0xe8>)
 8000d68:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <SystemInit+0xd8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <SystemInit+0xd8>)
 8000d72:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <SystemInit+0xe8>)
 8000d74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <SystemInit+0xd8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <SystemInit+0xd8>)
 8000d7e:	4a11      	ldr	r2, [pc, #68]	; (8000dc4 <SystemInit+0xe8>)
 8000d80:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <SystemInit+0xd8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <SystemInit+0xd8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a09      	ldr	r2, [pc, #36]	; (8000db4 <SystemInit+0xd8>)
 8000d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d94:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <SystemInit+0xd8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <SystemInit+0xec>)
 8000d9c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000da0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00
 8000db0:	52002000 	.word	0x52002000
 8000db4:	58024400 	.word	0x58024400
 8000db8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000dbc:	02020200 	.word	0x02020200
 8000dc0:	01ff0000 	.word	0x01ff0000
 8000dc4:	01010280 	.word	0x01010280
 8000dc8:	52004000 	.word	0x52004000

08000dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dd0:	f7ff ff84 	bl	8000cdc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dd6:	490d      	ldr	r1, [pc, #52]	; (8000e0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dec:	4c0a      	ldr	r4, [pc, #40]	; (8000e18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f009 ffc3 	bl	800ad84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfe:	f7ff fac7 	bl	8000390 <main>
  bx  lr
 8000e02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e04:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000e08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e0c:	2400015c 	.word	0x2400015c
  ldr r2, =_sidata
 8000e10:	0800baa0 	.word	0x0800baa0
  ldr r2, =_sbss
 8000e14:	2400015c 	.word	0x2400015c
  ldr r4, =_ebss
 8000e18:	240faf08 	.word	0x240faf08

08000e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC_IRQHandler>
	...

08000e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e26:	2003      	movs	r0, #3
 8000e28:	f000 f98c 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000e2c:	f002 fd1a 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8000e30:	4602      	mov	r2, r0
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_Init+0x68>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	0a1b      	lsrs	r3, r3, #8
 8000e38:	f003 030f 	and.w	r3, r3, #15
 8000e3c:	4913      	ldr	r1, [pc, #76]	; (8000e8c <HAL_Init+0x6c>)
 8000e3e:	5ccb      	ldrb	r3, [r1, r3]
 8000e40:	f003 031f 	and.w	r3, r3, #31
 8000e44:	fa22 f303 	lsr.w	r3, r2, r3
 8000e48:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <HAL_Init+0x68>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <HAL_Init+0x6c>)
 8000e54:	5cd3      	ldrb	r3, [r2, r3]
 8000e56:	f003 031f 	and.w	r3, r3, #31
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e60:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <HAL_Init+0x70>)
 8000e62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e64:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <HAL_Init+0x74>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 f814 	bl	8000e98 <HAL_InitTick>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e002      	b.n	8000e80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7a:	f7ff fe3d 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	58024400 	.word	0x58024400
 8000e8c:	0800ba30 	.word	0x0800ba30
 8000e90:	24000004 	.word	0x24000004
 8000e94:	24000000 	.word	0x24000000

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_InitTick+0x60>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e021      	b.n	8000ef0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <HAL_InitTick+0x64>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_InitTick+0x60>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f971 	bl	80011aa <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00e      	b.n	8000ef0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d80a      	bhi.n	8000eee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ee0:	f000 f93b 	bl	800115a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee4:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <HAL_InitTick+0x68>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2400000c 	.word	0x2400000c
 8000efc:	24000000 	.word	0x24000000
 8000f00:	24000008 	.word	0x24000008

08000f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x20>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x24>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_IncTick+0x24>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	2400000c 	.word	0x2400000c
 8000f28:	2400017c 	.word	0x2400017c

08000f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <HAL_GetTick+0x14>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	2400017c 	.word	0x2400017c

08000f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff ffee 	bl	8000f2c <HAL_GetTick>
 8000f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f5c:	d005      	beq.n	8000f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_Delay+0x44>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4413      	add	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f6a:	bf00      	nop
 8000f6c:	f7ff ffde 	bl	8000f2c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d8f7      	bhi.n	8000f6c <HAL_Delay+0x28>
  {
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2400000c 	.word	0x2400000c

08000f8c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetREVID+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	0c1b      	lsrs	r3, r3, #16
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	5c001000 	.word	0x5c001000

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00
 8000fe8:	05fa0000 	.word	0x05fa0000

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db0b      	blt.n	8001032 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	f003 021f 	and.w	r2, r3, #31
 8001020:	4907      	ldr	r1, [pc, #28]	; (8001040 <__NVIC_EnableIRQ+0x38>)
 8001022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001026:	095b      	lsrs	r3, r3, #5
 8001028:	2001      	movs	r0, #1
 800102a:	fa00 f202 	lsl.w	r2, r0, r2
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	490c      	ldr	r1, [pc, #48]	; (8001090 <__NVIC_SetPriority+0x4c>)
 800105e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4908      	ldr	r1, [pc, #32]	; (8001094 <__NVIC_SetPriority+0x50>)
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	3b04      	subs	r3, #4
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4313      	orrs	r3, r2
         );
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001110:	d301      	bcc.n	8001116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001112:	2301      	movs	r3, #1
 8001114:	e00f      	b.n	8001136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <SysTick_Config+0x40>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111e:	210f      	movs	r1, #15
 8001120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001124:	f7ff ff8e 	bl	8001044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <SysTick_Config+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <SysTick_Config+0x40>)
 8001130:	2207      	movs	r2, #7
 8001132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	e000e010 	.word	0xe000e010

08001144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff29 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001168:	f7ff ff40 	bl	8000fec <__NVIC_GetPriorityGrouping>
 800116c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	6978      	ldr	r0, [r7, #20]
 8001174:	f7ff ff90 	bl	8001098 <NVIC_EncodePriority>
 8001178:	4602      	mov	r2, r0
 800117a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff5f 	bl	8001044 <__NVIC_SetPriority>
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001198:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff33 	bl	8001008 <__NVIC_EnableIRQ>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffa4 	bl	8001100 <SysTick_Config>
 80011b8:	4603      	mov	r3, r0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011d2:	4b89      	ldr	r3, [pc, #548]	; (80013f8 <HAL_GPIO_Init+0x234>)
 80011d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011d6:	e194      	b.n	8001502 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	2101      	movs	r1, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa01 f303 	lsl.w	r3, r1, r3
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 8186 	beq.w	80014fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d005      	beq.n	8001208 <HAL_GPIO_Init+0x44>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d130      	bne.n	800126a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800123e:	2201      	movs	r2, #1
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	091b      	lsrs	r3, r3, #4
 8001254:	f003 0201 	and.w	r2, r3, #1
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	2b03      	cmp	r3, #3
 8001274:	d017      	beq.n	80012a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	2203      	movs	r2, #3
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d123      	bne.n	80012fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	08da      	lsrs	r2, r3, #3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3208      	adds	r2, #8
 80012ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	220f      	movs	r2, #15
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	691a      	ldr	r2, [r3, #16]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	08da      	lsrs	r2, r3, #3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3208      	adds	r2, #8
 80012f4:	69b9      	ldr	r1, [r7, #24]
 80012f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	2203      	movs	r2, #3
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0203 	and.w	r2, r3, #3
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 80e0 	beq.w	80014fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133c:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <HAL_GPIO_Init+0x238>)
 800133e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001342:	4a2e      	ldr	r2, [pc, #184]	; (80013fc <HAL_GPIO_Init+0x238>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800134c:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <HAL_GPIO_Init+0x238>)
 800134e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800135a:	4a29      	ldr	r2, [pc, #164]	; (8001400 <HAL_GPIO_Init+0x23c>)
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	3302      	adds	r3, #2
 8001362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	220f      	movs	r2, #15
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a20      	ldr	r2, [pc, #128]	; (8001404 <HAL_GPIO_Init+0x240>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d052      	beq.n	800142c <HAL_GPIO_Init+0x268>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a1f      	ldr	r2, [pc, #124]	; (8001408 <HAL_GPIO_Init+0x244>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d031      	beq.n	80013f2 <HAL_GPIO_Init+0x22e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a1e      	ldr	r2, [pc, #120]	; (800140c <HAL_GPIO_Init+0x248>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d02b      	beq.n	80013ee <HAL_GPIO_Init+0x22a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <HAL_GPIO_Init+0x24c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d025      	beq.n	80013ea <HAL_GPIO_Init+0x226>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a1c      	ldr	r2, [pc, #112]	; (8001414 <HAL_GPIO_Init+0x250>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d01f      	beq.n	80013e6 <HAL_GPIO_Init+0x222>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <HAL_GPIO_Init+0x254>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d019      	beq.n	80013e2 <HAL_GPIO_Init+0x21e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a1a      	ldr	r2, [pc, #104]	; (800141c <HAL_GPIO_Init+0x258>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d013      	beq.n	80013de <HAL_GPIO_Init+0x21a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a19      	ldr	r2, [pc, #100]	; (8001420 <HAL_GPIO_Init+0x25c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d00d      	beq.n	80013da <HAL_GPIO_Init+0x216>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a18      	ldr	r2, [pc, #96]	; (8001424 <HAL_GPIO_Init+0x260>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d007      	beq.n	80013d6 <HAL_GPIO_Init+0x212>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a17      	ldr	r2, [pc, #92]	; (8001428 <HAL_GPIO_Init+0x264>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_GPIO_Init+0x20e>
 80013ce:	2309      	movs	r3, #9
 80013d0:	e02d      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013d2:	230a      	movs	r3, #10
 80013d4:	e02b      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013d6:	2308      	movs	r3, #8
 80013d8:	e029      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013da:	2307      	movs	r3, #7
 80013dc:	e027      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013de:	2306      	movs	r3, #6
 80013e0:	e025      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013e2:	2305      	movs	r3, #5
 80013e4:	e023      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013e6:	2304      	movs	r3, #4
 80013e8:	e021      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013ea:	2303      	movs	r3, #3
 80013ec:	e01f      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e01d      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e01b      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013f6:	bf00      	nop
 80013f8:	58000080 	.word	0x58000080
 80013fc:	58024400 	.word	0x58024400
 8001400:	58000400 	.word	0x58000400
 8001404:	58020000 	.word	0x58020000
 8001408:	58020400 	.word	0x58020400
 800140c:	58020800 	.word	0x58020800
 8001410:	58020c00 	.word	0x58020c00
 8001414:	58021000 	.word	0x58021000
 8001418:	58021400 	.word	0x58021400
 800141c:	58021800 	.word	0x58021800
 8001420:	58021c00 	.word	0x58021c00
 8001424:	58022000 	.word	0x58022000
 8001428:	58022400 	.word	0x58022400
 800142c:	2300      	movs	r3, #0
 800142e:	69fa      	ldr	r2, [r7, #28]
 8001430:	f002 0203 	and.w	r2, r2, #3
 8001434:	0092      	lsls	r2, r2, #2
 8001436:	4093      	lsls	r3, r2
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800143e:	4938      	ldr	r1, [pc, #224]	; (8001520 <HAL_GPIO_Init+0x35c>)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3302      	adds	r3, #2
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800144c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001472:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800147a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	3301      	adds	r3, #1
 8001500:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	fa22 f303 	lsr.w	r3, r2, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	f47f ae63 	bne.w	80011d8 <HAL_GPIO_Init+0x14>
  }
}
 8001512:	bf00      	nop
 8001514:	bf00      	nop
 8001516:	3724      	adds	r7, #36	; 0x24
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	58000400 	.word	0x58000400

08001524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	807b      	strh	r3, [r7, #2]
 8001530:	4613      	mov	r3, r2
 8001532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001534:	787b      	ldrb	r3, [r7, #1]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800153a:	887a      	ldrh	r2, [r7, #2]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001540:	e003      	b.n	800154a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001542:	887b      	ldrh	r3, [r7, #2]
 8001544:	041a      	lsls	r2, r3, #16
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	619a      	str	r2, [r3, #24]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af02      	add	r7, sp, #8
 800155c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0fe      	b.n	8001766 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d106      	bne.n	8001582 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f008 fe8b 	bl	800a298 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2203      	movs	r2, #3
 8001586:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f003 ffaf 	bl	80054f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7c1a      	ldrb	r2, [r3, #16]
 800159c:	f88d 2000 	strb.w	r2, [sp]
 80015a0:	3304      	adds	r3, #4
 80015a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a4:	f003 fe80 	bl	80052a8 <USB_CoreInit>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2202      	movs	r2, #2
 80015b2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e0d5      	b.n	8001766 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f003 ffa7 	bl	8005514 <USB_SetCurrentMode>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2202      	movs	r2, #2
 80015d0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0c6      	b.n	8001766 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d8:	2300      	movs	r3, #0
 80015da:	73fb      	strb	r3, [r7, #15]
 80015dc:	e04a      	b.n	8001674 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	3315      	adds	r3, #21
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	3314      	adds	r3, #20
 8001602:	7bfa      	ldrb	r2, [r7, #15]
 8001604:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	b298      	uxth	r0, r3
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	332e      	adds	r3, #46	; 0x2e
 800161a:	4602      	mov	r2, r0
 800161c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4413      	add	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	3318      	adds	r3, #24
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001632:	7bfa      	ldrb	r2, [r7, #15]
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	440b      	add	r3, r1
 8001640:	331c      	adds	r3, #28
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	3320      	adds	r3, #32
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800165a:	7bfa      	ldrb	r2, [r7, #15]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4413      	add	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	440b      	add	r3, r1
 8001668:	3324      	adds	r3, #36	; 0x24
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	3301      	adds	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	791b      	ldrb	r3, [r3, #4]
 8001678:	7bfa      	ldrb	r2, [r7, #15]
 800167a:	429a      	cmp	r2, r3
 800167c:	d3af      	bcc.n	80015de <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800167e:	2300      	movs	r3, #0
 8001680:	73fb      	strb	r3, [r7, #15]
 8001682:	e044      	b.n	800170e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001684:	7bfa      	ldrb	r2, [r7, #15]
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80016ac:	7bfa      	ldrb	r2, [r7, #15]
 80016ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016b0:	7bfa      	ldrb	r2, [r7, #15]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4413      	add	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016c6:	7bfa      	ldrb	r2, [r7, #15]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4413      	add	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4413      	add	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	3301      	adds	r3, #1
 800170c:	73fb      	strb	r3, [r7, #15]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	791b      	ldrb	r3, [r3, #4]
 8001712:	7bfa      	ldrb	r2, [r7, #15]
 8001714:	429a      	cmp	r2, r3
 8001716:	d3b5      	bcc.n	8001684 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6818      	ldr	r0, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7c1a      	ldrb	r2, [r3, #16]
 8001720:	f88d 2000 	strb.w	r2, [sp]
 8001724:	3304      	adds	r3, #4
 8001726:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001728:	f003 ff40 	bl	80055ac <USB_DevInit>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d005      	beq.n	800173e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2202      	movs	r2, #2
 8001736:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e013      	b.n	8001766 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7b1b      	ldrb	r3, [r3, #12]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d102      	bne.n	800175a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f001 f999 	bl	8002a8c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f004 ff7f 	bl	8006662 <USB_DevDisconnect>

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b084      	sub	sp, #16
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_PCD_Start+0x1c>
 8001786:	2302      	movs	r3, #2
 8001788:	e022      	b.n	80017d0 <HAL_PCD_Start+0x62>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800179a:	2b00      	cmp	r3, #0
 800179c:	d009      	beq.n	80017b2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d105      	bne.n	80017b2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f003 fe8a 	bl	80054d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f004 ff2d 	bl	8006620 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b08d      	sub	sp, #52	; 0x34
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017e6:	6a3b      	ldr	r3, [r7, #32]
 80017e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f004 ffeb 	bl	80067ca <USB_GetMode>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f040 84b9 	bne.w	800216e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f004 ff4f 	bl	80066a4 <USB_ReadInterrupts>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 84af 	beq.w	800216c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	0a1b      	lsrs	r3, r3, #8
 8001818:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f004 ff3c 	bl	80066a4 <USB_ReadInterrupts>
 800182c:	4603      	mov	r3, r0
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b02      	cmp	r3, #2
 8001834:	d107      	bne.n	8001846 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	695a      	ldr	r2, [r3, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f002 0202 	and.w	r2, r2, #2
 8001844:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f004 ff2a 	bl	80066a4 <USB_ReadInterrupts>
 8001850:	4603      	mov	r3, r0
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	2b10      	cmp	r3, #16
 8001858:	d161      	bne.n	800191e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	699a      	ldr	r2, [r3, #24]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0210 	bic.w	r2, r2, #16
 8001868:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	f003 020f 	and.w	r2, r3, #15
 8001876:	4613      	mov	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4413      	add	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	3304      	adds	r3, #4
 8001888:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	0c5b      	lsrs	r3, r3, #17
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	2b02      	cmp	r3, #2
 8001894:	d124      	bne.n	80018e0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800189c:	4013      	ands	r3, r2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d035      	beq.n	800190e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	6a38      	ldr	r0, [r7, #32]
 80018b6:	f004 fd61 	bl	800637c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018c6:	441a      	add	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	695a      	ldr	r2, [r3, #20]
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	091b      	lsrs	r3, r3, #4
 80018d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018d8:	441a      	add	r2, r3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	615a      	str	r2, [r3, #20]
 80018de:	e016      	b.n	800190e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	0c5b      	lsrs	r3, r3, #17
 80018e4:	f003 030f 	and.w	r3, r3, #15
 80018e8:	2b06      	cmp	r3, #6
 80018ea:	d110      	bne.n	800190e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80018f2:	2208      	movs	r2, #8
 80018f4:	4619      	mov	r1, r3
 80018f6:	6a38      	ldr	r0, [r7, #32]
 80018f8:	f004 fd40 	bl	800637c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	695a      	ldr	r2, [r3, #20]
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	091b      	lsrs	r3, r3, #4
 8001904:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001908:	441a      	add	r2, r3
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	699a      	ldr	r2, [r3, #24]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0210 	orr.w	r2, r2, #16
 800191c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f004 febe 	bl	80066a4 <USB_ReadInterrupts>
 8001928:	4603      	mov	r3, r0
 800192a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800192e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001932:	f040 80a7 	bne.w	8001a84 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f004 fec3 	bl	80066ca <USB_ReadDevAllOutEpInterrupt>
 8001944:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001946:	e099      	b.n	8001a7c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 808e 	beq.w	8001a70 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f004 fee7 	bl	8006732 <USB_ReadDevOutEPInterrupt>
 8001964:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00c      	beq.n	800198a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	015a      	lsls	r2, r3, #5
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	4413      	add	r3, r2
 8001978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800197c:	461a      	mov	r2, r3
 800197e:	2301      	movs	r3, #1
 8001980:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 fefb 	bl	8002780 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00c      	beq.n	80019ae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	015a      	lsls	r2, r3, #5
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	4413      	add	r3, r2
 800199c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019a0:	461a      	mov	r2, r3
 80019a2:	2308      	movs	r3, #8
 80019a4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80019a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 ffd1 	bl	8002950 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d008      	beq.n	80019ca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	015a      	lsls	r2, r3, #5
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	4413      	add	r3, r2
 80019c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019c4:	461a      	mov	r2, r3
 80019c6:	2310      	movs	r3, #16
 80019c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d030      	beq.n	8001a36 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019dc:	2b80      	cmp	r3, #128	; 0x80
 80019de:	d109      	bne.n	80019f4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019f2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80019f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f6:	4613      	mov	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4413      	add	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	3304      	adds	r3, #4
 8001a08:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	78db      	ldrb	r3, [r3, #3]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d108      	bne.n	8001a24 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2200      	movs	r2, #0
 8001a16:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f008 fe1a 	bl	800a658 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	015a      	lsls	r2, r3, #5
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a30:	461a      	mov	r2, r3
 8001a32:	2302      	movs	r3, #2
 8001a34:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	f003 0320 	and.w	r3, r3, #32
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	015a      	lsls	r2, r3, #5
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	4413      	add	r3, r2
 8001a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	2320      	movs	r3, #32
 8001a50:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d009      	beq.n	8001a70 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	015a      	lsls	r2, r3, #5
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	4413      	add	r3, r2
 8001a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a68:	461a      	mov	r2, r3
 8001a6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a6e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	3301      	adds	r3, #1
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a78:	085b      	lsrs	r3, r3, #1
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f47f af62 	bne.w	8001948 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f004 fe0b 	bl	80066a4 <USB_ReadInterrupts>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a98:	f040 80db 	bne.w	8001c52 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f004 fe2c 	bl	80066fe <USB_ReadDevAllInEpInterrupt>
 8001aa6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001aac:	e0cd      	b.n	8001c4a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80c2 	beq.w	8001c3e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f004 fe52 	bl	800676e <USB_ReadDevInEPInterrupt>
 8001aca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d057      	beq.n	8001b86 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	f003 030f 	and.w	r3, r3, #15
 8001adc:	2201      	movs	r2, #1
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69f9      	ldr	r1, [r7, #28]
 8001af2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001af6:	4013      	ands	r3, r2
 8001af8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	015a      	lsls	r2, r3, #5
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	4413      	add	r3, r2
 8001b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b06:	461a      	mov	r2, r3
 8001b08:	2301      	movs	r3, #1
 8001b0a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	799b      	ldrb	r3, [r3, #6]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d132      	bne.n	8001b7a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b18:	4613      	mov	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	3320      	adds	r3, #32
 8001b24:	6819      	ldr	r1, [r3, #0]
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4413      	add	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4403      	add	r3, r0
 8001b34:	331c      	adds	r3, #28
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4419      	add	r1, r3
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3e:	4613      	mov	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4403      	add	r3, r0
 8001b48:	3320      	adds	r3, #32
 8001b4a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d113      	bne.n	8001b7a <HAL_PCD_IRQHandler+0x3a2>
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b56:	4613      	mov	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	440b      	add	r3, r1
 8001b60:	3324      	adds	r3, #36	; 0x24
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d108      	bne.n	8001b7a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001b72:	461a      	mov	r2, r3
 8001b74:	2101      	movs	r1, #1
 8001b76:	f004 fe5b 	bl	8006830 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	4619      	mov	r1, r3
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f008 fce4 	bl	800a54e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2308      	movs	r3, #8
 8001ba0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	f003 0310 	and.w	r3, r3, #16
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	015a      	lsls	r2, r3, #5
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bb8:	461a      	mov	r2, r3
 8001bba:	2310      	movs	r3, #16
 8001bbc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	015a      	lsls	r2, r3, #5
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	4413      	add	r3, r2
 8001bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	2340      	movs	r3, #64	; 0x40
 8001bd8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d023      	beq.n	8001c2c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001be4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001be6:	6a38      	ldr	r0, [r7, #32]
 8001be8:	f003 fe3e 	bl	8005868 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bee:	4613      	mov	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	3310      	adds	r3, #16
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	78db      	ldrb	r3, [r3, #3]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d108      	bne.n	8001c1a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	4619      	mov	r1, r3
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f008 fd31 	bl	800a67c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	015a      	lsls	r2, r3, #5
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	4413      	add	r3, r2
 8001c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c26:	461a      	mov	r2, r3
 8001c28:	2302      	movs	r3, #2
 8001c2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fd15 	bl	8002668 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	3301      	adds	r3, #1
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f47f af2e 	bne.w	8001aae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f004 fd24 	bl	80066a4 <USB_ReadInterrupts>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c66:	d122      	bne.n	8001cae <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	69fa      	ldr	r2, [r7, #28]
 8001c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c76:	f023 0301 	bic.w	r3, r3, #1
 8001c7a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d108      	bne.n	8001c98 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c8e:	2100      	movs	r1, #0
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 ff1f 	bl	8002ad4 <HAL_PCDEx_LPM_Callback>
 8001c96:	e002      	b.n	8001c9e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f008 fccf 	bl	800a63c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695a      	ldr	r2, [r3, #20]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001cac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f004 fcf6 	bl	80066a4 <USB_ReadInterrupts>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cc2:	d112      	bne.n	8001cea <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d102      	bne.n	8001cda <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f008 fc8b 	bl	800a5f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695a      	ldr	r2, [r3, #20]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f004 fcd8 	bl	80066a4 <USB_ReadInterrupts>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cfe:	d121      	bne.n	8001d44 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695a      	ldr	r2, [r3, #20]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001d0e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d111      	bne.n	8001d3e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	f003 020f 	and.w	r2, r3, #15
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001d34:	2101      	movs	r1, #1
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fecc 	bl	8002ad4 <HAL_PCDEx_LPM_Callback>
 8001d3c:	e002      	b.n	8001d44 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f008 fc56 	bl	800a5f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f004 fcab 	bl	80066a4 <USB_ReadInterrupts>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d58:	f040 80b7 	bne.w	8001eca <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d6a:	f023 0301 	bic.w	r3, r3, #1
 8001d6e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2110      	movs	r1, #16
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 fd76 	bl	8005868 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d80:	e046      	b.n	8001e10 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d94:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d98:	015a      	lsls	r2, r3, #5
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001da6:	0151      	lsls	r1, r2, #5
 8001da8:	69fa      	ldr	r2, [r7, #28]
 8001daa:	440a      	add	r2, r1
 8001dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001db0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001db4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001dc8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dda:	0151      	lsls	r1, r2, #5
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	440a      	add	r2, r1
 8001de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001de4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001de8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dfa:	0151      	lsls	r1, r2, #5
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	440a      	add	r2, r1
 8001e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e08:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	791b      	ldrb	r3, [r3, #4]
 8001e14:	461a      	mov	r2, r3
 8001e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d3b2      	bcc.n	8001d82 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	69fa      	ldr	r2, [r7, #28]
 8001e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e2a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001e2e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7bdb      	ldrb	r3, [r3, #15]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d016      	beq.n	8001e66 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e48:	f043 030b 	orr.w	r3, r3, #11
 8001e4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e58:	69fa      	ldr	r2, [r7, #28]
 8001e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e5e:	f043 030b 	orr.w	r3, r3, #11
 8001e62:	6453      	str	r3, [r2, #68]	; 0x44
 8001e64:	e015      	b.n	8001e92 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e6c:	695a      	ldr	r2, [r3, #20]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e74:	4619      	mov	r1, r3
 8001e76:	f242 032b 	movw	r3, #8235	; 0x202b
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e8c:	f043 030b 	orr.w	r3, r3, #11
 8001e90:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ea0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ea4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f004 fcbb 	bl	8006830 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f004 fbe8 	bl	80066a4 <USB_ReadInterrupts>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ede:	d123      	bne.n	8001f28 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f004 fc7f 	bl	80067e8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 fd33 	bl	800595a <USB_GetDevSpeed>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681c      	ldr	r4, [r3, #0]
 8001f00:	f001 fe2a 	bl	8003b58 <HAL_RCC_GetHCLKFreq>
 8001f04:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f003 fa3d 	bl	800538c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f008 fb43 	bl	800a59e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695a      	ldr	r2, [r3, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001f26:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f004 fbb9 	bl	80066a4 <USB_ReadInterrupts>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d10a      	bne.n	8001f52 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f008 fb20 	bl	800a582 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f002 0208 	and.w	r2, r2, #8
 8001f50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f004 fba4 	bl	80066a4 <USB_ReadInterrupts>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f62:	2b80      	cmp	r3, #128	; 0x80
 8001f64:	d123      	bne.n	8001fae <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f72:	2301      	movs	r3, #1
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
 8001f76:	e014      	b.n	8001fa2 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	4619      	mov	r1, r3
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 fb08 	bl	80025ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	791b      	ldrb	r3, [r3, #4]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d3e4      	bcc.n	8001f78 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f004 fb76 	bl	80066a4 <USB_ReadInterrupts>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fc2:	d13c      	bne.n	800203e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc8:	e02b      	b.n	8002022 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	015a      	lsls	r2, r3, #5
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fde:	4613      	mov	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3318      	adds	r3, #24
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d115      	bne.n	800201c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ff0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	da12      	bge.n	800201c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	3317      	adds	r3, #23
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002012:	b2db      	uxtb	r3, r3
 8002014:	4619      	mov	r1, r3
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fac8 	bl	80025ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	3301      	adds	r3, #1
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	791b      	ldrb	r3, [r3, #4]
 8002026:	461a      	mov	r2, r3
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	4293      	cmp	r3, r2
 800202c:	d3cd      	bcc.n	8001fca <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800203c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f004 fb2e 	bl	80066a4 <USB_ReadInterrupts>
 8002048:	4603      	mov	r3, r0
 800204a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002052:	d156      	bne.n	8002102 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002054:	2301      	movs	r3, #1
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
 8002058:	e045      	b.n	80020e6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	4413      	add	r3, r2
 8002062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d12e      	bne.n	80020e0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002082:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002084:	2b00      	cmp	r3, #0
 8002086:	da2b      	bge.n	80020e0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002094:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002098:	429a      	cmp	r2, r3
 800209a:	d121      	bne.n	80020e0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	f203 2357 	addw	r3, r3, #599	; 0x257
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10a      	bne.n	80020e0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020dc:	6053      	str	r3, [r2, #4]
            break;
 80020de:	e008      	b.n	80020f2 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	3301      	adds	r3, #1
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	791b      	ldrb	r3, [r3, #4]
 80020ea:	461a      	mov	r2, r3
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d3b3      	bcc.n	800205a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695a      	ldr	r2, [r3, #20]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002100:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f004 facc 	bl	80066a4 <USB_ReadInterrupts>
 800210c:	4603      	mov	r3, r0
 800210e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002116:	d10a      	bne.n	800212e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f008 fac1 	bl	800a6a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800212c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f004 fab6 	bl	80066a4 <USB_ReadInterrupts>
 8002138:	4603      	mov	r3, r0
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b04      	cmp	r3, #4
 8002140:	d115      	bne.n	800216e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f008 fab1 	bl	800a6bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	430a      	orrs	r2, r1
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	e000      	b.n	800216e <HAL_PCD_IRQHandler+0x996>
      return;
 800216c:	bf00      	nop
    }
  }
}
 800216e:	3734      	adds	r7, #52	; 0x34
 8002170:	46bd      	mov	sp, r7
 8002172:	bd90      	pop	{r4, r7, pc}

08002174 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_PCD_SetAddress+0x1a>
 800218a:	2302      	movs	r3, #2
 800218c:	e012      	b.n	80021b4 <HAL_PCD_SetAddress+0x40>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	78fa      	ldrb	r2, [r7, #3]
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f004 fa15 	bl	80065d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	4608      	mov	r0, r1
 80021c6:	4611      	mov	r1, r2
 80021c8:	461a      	mov	r2, r3
 80021ca:	4603      	mov	r3, r0
 80021cc:	70fb      	strb	r3, [r7, #3]
 80021ce:	460b      	mov	r3, r1
 80021d0:	803b      	strh	r3, [r7, #0]
 80021d2:	4613      	mov	r3, r2
 80021d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	da0f      	bge.n	8002202 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	f003 020f 	and.w	r2, r3, #15
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	3310      	adds	r3, #16
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	3304      	adds	r3, #4
 80021f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	705a      	strb	r2, [r3, #1]
 8002200:	e00f      	b.n	8002222 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	f003 020f 	and.w	r2, r3, #15
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	4413      	add	r3, r2
 8002218:	3304      	adds	r3, #4
 800221a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	b2da      	uxtb	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800222e:	883a      	ldrh	r2, [r7, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	78ba      	ldrb	r2, [r7, #2]
 8002238:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	785b      	ldrb	r3, [r3, #1]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d004      	beq.n	800224c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800224c:	78bb      	ldrb	r3, [r7, #2]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d102      	bne.n	8002258 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_PCD_EP_Open+0xaa>
 8002262:	2302      	movs	r3, #2
 8002264:	e00e      	b.n	8002284 <HAL_PCD_EP_Open+0xc8>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68f9      	ldr	r1, [r7, #12]
 8002274:	4618      	mov	r0, r3
 8002276:	f003 fb95 	bl	80059a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002282:	7afb      	ldrb	r3, [r7, #11]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800229c:	2b00      	cmp	r3, #0
 800229e:	da0f      	bge.n	80022c0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	f003 020f 	and.w	r2, r3, #15
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	3310      	adds	r3, #16
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	3304      	adds	r3, #4
 80022b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2201      	movs	r2, #1
 80022bc:	705a      	strb	r2, [r3, #1]
 80022be:	e00f      	b.n	80022e0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	f003 020f 	and.w	r2, r3, #15
 80022c6:	4613      	mov	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4413      	add	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	3304      	adds	r3, #4
 80022d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_PCD_EP_Close+0x6e>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e00e      	b.n	8002318 <HAL_PCD_EP_Close+0x8c>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68f9      	ldr	r1, [r7, #12]
 8002308:	4618      	mov	r0, r3
 800230a:	f003 fbd3 	bl	8005ab4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	460b      	mov	r3, r1
 800232e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002330:	7afb      	ldrb	r3, [r7, #11]
 8002332:	f003 020f 	and.w	r2, r3, #15
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4413      	add	r3, r2
 8002346:	3304      	adds	r3, #4
 8002348:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2200      	movs	r2, #0
 800235a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2200      	movs	r2, #0
 8002360:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002362:	7afb      	ldrb	r3, [r7, #11]
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	b2da      	uxtb	r2, r3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	799b      	ldrb	r3, [r3, #6]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d102      	bne.n	800237c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	799b      	ldrb	r3, [r3, #6]
 8002384:	461a      	mov	r2, r3
 8002386:	6979      	ldr	r1, [r7, #20]
 8002388:	f003 fc70 	bl	8005c6c <USB_EPStartXfer>

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	460b      	mov	r3, r1
 80023a0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80023a2:	78fb      	ldrb	r3, [r7, #3]
 80023a4:	f003 020f 	and.w	r2, r3, #15
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80023b8:	681b      	ldr	r3, [r3, #0]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	460b      	mov	r3, r1
 80023d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023d6:	7afb      	ldrb	r3, [r7, #11]
 80023d8:	f003 020f 	and.w	r2, r3, #15
 80023dc:	4613      	mov	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	3310      	adds	r3, #16
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4413      	add	r3, r2
 80023ea:	3304      	adds	r3, #4
 80023ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2200      	movs	r2, #0
 80023fe:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2201      	movs	r2, #1
 8002404:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002406:	7afb      	ldrb	r3, [r7, #11]
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	b2da      	uxtb	r2, r3
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	799b      	ldrb	r3, [r3, #6]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d102      	bne.n	8002420 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	799b      	ldrb	r3, [r3, #6]
 8002428:	461a      	mov	r2, r3
 800242a:	6979      	ldr	r1, [r7, #20]
 800242c:	f003 fc1e 	bl	8005c6c <USB_EPStartXfer>

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b084      	sub	sp, #16
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	7912      	ldrb	r2, [r2, #4]
 8002450:	4293      	cmp	r3, r2
 8002452:	d901      	bls.n	8002458 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e04f      	b.n	80024f8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002458:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800245c:	2b00      	cmp	r3, #0
 800245e:	da0f      	bge.n	8002480 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	f003 020f 	and.w	r2, r3, #15
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	3310      	adds	r3, #16
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	4413      	add	r3, r2
 8002474:	3304      	adds	r3, #4
 8002476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2201      	movs	r2, #1
 800247c:	705a      	strb	r2, [r3, #1]
 800247e:	e00d      	b.n	800249c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	4613      	mov	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	4413      	add	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	3304      	adds	r3, #4
 8002494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2201      	movs	r2, #1
 80024a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_PCD_EP_SetStall+0x82>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e01d      	b.n	80024f8 <HAL_PCD_EP_SetStall+0xbe>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68f9      	ldr	r1, [r7, #12]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f003 ffae 	bl	800642c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7999      	ldrb	r1, [r3, #6]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80024e8:	461a      	mov	r2, r3
 80024ea:	f004 f9a1 	bl	8006830 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	7912      	ldrb	r2, [r2, #4]
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e042      	b.n	80025a4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800251e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002522:	2b00      	cmp	r3, #0
 8002524:	da0f      	bge.n	8002546 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	f003 020f 	and.w	r2, r3, #15
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	3310      	adds	r3, #16
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	3304      	adds	r3, #4
 800253c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	705a      	strb	r2, [r3, #1]
 8002544:	e00f      	b.n	8002566 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	f003 020f 	and.w	r2, r3, #15
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	4413      	add	r3, r2
 800255c:	3304      	adds	r3, #4
 800255e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	b2da      	uxtb	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_PCD_EP_ClrStall+0x86>
 8002582:	2302      	movs	r3, #2
 8002584:	e00e      	b.n	80025a4 <HAL_PCD_EP_ClrStall+0xa4>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68f9      	ldr	r1, [r7, #12]
 8002594:	4618      	mov	r0, r3
 8002596:	f003 ffb7 	bl	8006508 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80025b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	da0c      	bge.n	80025da <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	f003 020f 	and.w	r2, r3, #15
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	3310      	adds	r3, #16
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	4413      	add	r3, r2
 80025d4:	3304      	adds	r3, #4
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	e00c      	b.n	80025f4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	f003 020f 	and.w	r2, r3, #15
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	4413      	add	r3, r2
 80025f0:	3304      	adds	r3, #4
 80025f2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68f9      	ldr	r1, [r7, #12]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f003 fdd6 	bl	80061ac <USB_EPStopXfer>
 8002600:	4603      	mov	r3, r0
 8002602:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002604:	7afb      	ldrb	r3, [r7, #11]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	460b      	mov	r3, r1
 8002618:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_PCD_EP_Flush+0x1a>
 8002624:	2302      	movs	r3, #2
 8002626:	e01b      	b.n	8002660 <HAL_PCD_EP_Flush+0x52>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8002630:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002634:	2b00      	cmp	r3, #0
 8002636:	da09      	bge.n	800264c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f003 f90f 	bl	8005868 <USB_FlushTxFifo>
 800264a:	e004      	b.n	8002656 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f003 f93b 	bl	80058cc <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	; 0x28
 800266c:	af02      	add	r7, sp, #8
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	4613      	mov	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	3310      	adds	r3, #16
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	4413      	add	r3, r2
 800268c:	3304      	adds	r3, #4
 800268e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	695a      	ldr	r2, [r3, #20]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	429a      	cmp	r2, r3
 800269a:	d901      	bls.n	80026a0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e06b      	b.n	8002778 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d902      	bls.n	80026bc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	3303      	adds	r3, #3
 80026c0:	089b      	lsrs	r3, r3, #2
 80026c2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026c4:	e02a      	b.n	800271c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	691a      	ldr	r2, [r3, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d902      	bls.n	80026e2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3303      	adds	r3, #3
 80026e6:	089b      	lsrs	r3, r3, #2
 80026e8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	68d9      	ldr	r1, [r3, #12]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	4603      	mov	r3, r0
 80026fe:	6978      	ldr	r0, [r7, #20]
 8002700:	f003 fdfe 	bl	8006300 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	441a      	add	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	695a      	ldr	r2, [r3, #20]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	441a      	add	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4413      	add	r3, r2
 8002724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	429a      	cmp	r2, r3
 8002730:	d809      	bhi.n	8002746 <PCD_WriteEmptyTxFifo+0xde>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800273a:	429a      	cmp	r2, r3
 800273c:	d203      	bcs.n	8002746 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1bf      	bne.n	80026c6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	429a      	cmp	r2, r3
 8002750:	d811      	bhi.n	8002776 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	2201      	movs	r2, #1
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	43db      	mvns	r3, r3
 800276c:	6939      	ldr	r1, [r7, #16]
 800276e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002772:	4013      	ands	r3, r2
 8002774:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3720      	adds	r7, #32
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	333c      	adds	r3, #60	; 0x3c
 8002798:	3304      	adds	r3, #4
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	799b      	ldrb	r3, [r3, #6]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d17b      	bne.n	80028ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d015      	beq.n	80027ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	4a61      	ldr	r2, [pc, #388]	; (8002948 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	f240 80b9 	bls.w	800293c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80b3 	beq.w	800293c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e2:	461a      	mov	r2, r3
 80027e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027e8:	6093      	str	r3, [r2, #8]
 80027ea:	e0a7      	b.n	800293c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002802:	461a      	mov	r2, r3
 8002804:	2320      	movs	r3, #32
 8002806:	6093      	str	r3, [r2, #8]
 8002808:	e098      	b.n	800293c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002810:	2b00      	cmp	r3, #0
 8002812:	f040 8093 	bne.w	800293c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	4a4b      	ldr	r2, [pc, #300]	; (8002948 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d90f      	bls.n	800283e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002834:	461a      	mov	r2, r3
 8002836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800283a:	6093      	str	r3, [r2, #8]
 800283c:	e07e      	b.n	800293c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	4613      	mov	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	4413      	add	r3, r2
 8002850:	3304      	adds	r3, #4
 8002852:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a1a      	ldr	r2, [r3, #32]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	0159      	lsls	r1, r3, #5
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	440b      	add	r3, r1
 8002860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286a:	1ad2      	subs	r2, r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d114      	bne.n	80028a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002888:	461a      	mov	r2, r3
 800288a:	2101      	movs	r1, #1
 800288c:	f003 ffd0 	bl	8006830 <USB_EP0_OutStart>
 8002890:	e006      	b.n	80028a0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	441a      	add	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	4619      	mov	r1, r3
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f007 fe36 	bl	800a518 <HAL_PCD_DataOutStageCallback>
 80028ac:	e046      	b.n	800293c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	4a26      	ldr	r2, [pc, #152]	; (800294c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d124      	bne.n	8002900 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00a      	beq.n	80028d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028cc:	461a      	mov	r2, r3
 80028ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028d2:	6093      	str	r3, [r2, #8]
 80028d4:	e032      	b.n	800293c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f003 0320 	and.w	r3, r3, #32
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ec:	461a      	mov	r2, r3
 80028ee:	2320      	movs	r3, #32
 80028f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	4619      	mov	r1, r3
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f007 fe0d 	bl	800a518 <HAL_PCD_DataOutStageCallback>
 80028fe:	e01d      	b.n	800293c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d114      	bne.n	8002930 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d108      	bne.n	8002930 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002928:	461a      	mov	r2, r3
 800292a:	2100      	movs	r1, #0
 800292c:	f003 ff80 	bl	8006830 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	4619      	mov	r1, r3
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f007 fdee 	bl	800a518 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3720      	adds	r7, #32
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	4f54300a 	.word	0x4f54300a
 800294c:	4f54310a 	.word	0x4f54310a

08002950 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	333c      	adds	r3, #60	; 0x3c
 8002968:	3304      	adds	r3, #4
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4413      	add	r3, r2
 8002976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4a15      	ldr	r2, [pc, #84]	; (80029d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d90e      	bls.n	80029a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800298c:	2b00      	cmp	r3, #0
 800298e:	d009      	beq.n	80029a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800299c:	461a      	mov	r2, r3
 800299e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f007 fda5 	bl	800a4f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d90c      	bls.n	80029cc <PCD_EP_OutSetupPacket_int+0x7c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	799b      	ldrb	r3, [r3, #6]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d108      	bne.n	80029cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80029c4:	461a      	mov	r2, r3
 80029c6:	2101      	movs	r1, #1
 80029c8:	f003 ff32 	bl	8006830 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	4f54300a 	.word	0x4f54300a

080029dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	70fb      	strb	r3, [r7, #3]
 80029e8:	4613      	mov	r3, r2
 80029ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d107      	bne.n	8002a0a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80029fa:	883b      	ldrh	r3, [r7, #0]
 80029fc:	0419      	lsls	r1, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	629a      	str	r2, [r3, #40]	; 0x28
 8002a08:	e028      	b.n	8002a5c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	4413      	add	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a18:	2300      	movs	r3, #0
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	e00d      	b.n	8002a3a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	3340      	adds	r3, #64	; 0x40
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	0c1b      	lsrs	r3, r3, #16
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	4413      	add	r3, r2
 8002a32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	3301      	adds	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
 8002a3a:	7bfa      	ldrb	r2, [r7, #15]
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d3ec      	bcc.n	8002a1e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a44:	883b      	ldrh	r3, [r7, #0]
 8002a46:	0418      	lsls	r0, r3, #16
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6819      	ldr	r1, [r3, #0]
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	4302      	orrs	r2, r0
 8002a54:	3340      	adds	r3, #64	; 0x40
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	460b      	mov	r3, r1
 8002a74:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	887a      	ldrh	r2, [r7, #2]
 8002a7c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002aba:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_PCDEx_ActivateLPM+0x44>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	10000003 	.word	0x10000003

08002ad4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002af4:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	2b06      	cmp	r3, #6
 8002afe:	d00a      	beq.n	8002b16 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b00:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d001      	beq.n	8002b12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e040      	b.n	8002b94 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e03e      	b.n	8002b94 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b16:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002b1e:	491f      	ldr	r1, [pc, #124]	; (8002b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b26:	f7fe fa01 	bl	8000f2c <HAL_GetTick>
 8002b2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b2c:	e009      	b.n	8002b42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b2e:	f7fe f9fd 	bl	8000f2c <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b3c:	d901      	bls.n	8002b42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e028      	b.n	8002b94 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b42:	4b16      	ldr	r3, [pc, #88]	; (8002b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b4e:	d1ee      	bne.n	8002b2e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b1e      	cmp	r3, #30
 8002b54:	d008      	beq.n	8002b68 <HAL_PWREx_ConfigSupply+0x7c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b2e      	cmp	r3, #46	; 0x2e
 8002b5a:	d005      	beq.n	8002b68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b1d      	cmp	r3, #29
 8002b60:	d002      	beq.n	8002b68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b2d      	cmp	r3, #45	; 0x2d
 8002b66:	d114      	bne.n	8002b92 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002b68:	f7fe f9e0 	bl	8000f2c <HAL_GetTick>
 8002b6c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002b6e:	e009      	b.n	8002b84 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b70:	f7fe f9dc 	bl	8000f2c <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b7e:	d901      	bls.n	8002b84 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e007      	b.n	8002b94 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b90:	d1ee      	bne.n	8002b70 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	58024800 	.word	0x58024800

08002ba0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bae:	60d3      	str	r3, [r2, #12]
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	58024800 	.word	0x58024800

08002bc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08c      	sub	sp, #48	; 0x30
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d102      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f000 bc1f 	b.w	8003412 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80b3 	beq.w	8002d48 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be2:	4b95      	ldr	r3, [pc, #596]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bec:	4b92      	ldr	r3, [pc, #584]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	2b10      	cmp	r3, #16
 8002bf6:	d007      	beq.n	8002c08 <HAL_RCC_OscConfig+0x48>
 8002bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfa:	2b18      	cmp	r3, #24
 8002bfc:	d112      	bne.n	8002c24 <HAL_RCC_OscConfig+0x64>
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d10d      	bne.n	8002c24 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c08:	4b8b      	ldr	r3, [pc, #556]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 8098 	beq.w	8002d46 <HAL_RCC_OscConfig+0x186>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f040 8093 	bne.w	8002d46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e3f6      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d106      	bne.n	8002c3c <HAL_RCC_OscConfig+0x7c>
 8002c2e:	4b82      	ldr	r3, [pc, #520]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a81      	ldr	r2, [pc, #516]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e058      	b.n	8002cee <HAL_RCC_OscConfig+0x12e>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d112      	bne.n	8002c6a <HAL_RCC_OscConfig+0xaa>
 8002c44:	4b7c      	ldr	r3, [pc, #496]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a7b      	ldr	r2, [pc, #492]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	4b79      	ldr	r3, [pc, #484]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a78      	ldr	r2, [pc, #480]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002c56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	4b76      	ldr	r3, [pc, #472]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a75      	ldr	r2, [pc, #468]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	e041      	b.n	8002cee <HAL_RCC_OscConfig+0x12e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c72:	d112      	bne.n	8002c9a <HAL_RCC_OscConfig+0xda>
 8002c74:	4b70      	ldr	r3, [pc, #448]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a6f      	ldr	r2, [pc, #444]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002c7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b6d      	ldr	r3, [pc, #436]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a6c      	ldr	r2, [pc, #432]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002c86:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b6a      	ldr	r3, [pc, #424]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a69      	ldr	r2, [pc, #420]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	e029      	b.n	8002cee <HAL_RCC_OscConfig+0x12e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002ca2:	d112      	bne.n	8002cca <HAL_RCC_OscConfig+0x10a>
 8002ca4:	4b64      	ldr	r3, [pc, #400]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a63      	ldr	r2, [pc, #396]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002caa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	4b61      	ldr	r3, [pc, #388]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a60      	ldr	r2, [pc, #384]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002cb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b5e      	ldr	r3, [pc, #376]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a5d      	ldr	r2, [pc, #372]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	e011      	b.n	8002cee <HAL_RCC_OscConfig+0x12e>
 8002cca:	4b5b      	ldr	r3, [pc, #364]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a5a      	ldr	r2, [pc, #360]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	4b58      	ldr	r3, [pc, #352]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a57      	ldr	r2, [pc, #348]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002cdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b55      	ldr	r3, [pc, #340]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a54      	ldr	r2, [pc, #336]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002ce8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002cec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d013      	beq.n	8002d1e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7fe f919 	bl	8000f2c <HAL_GetTick>
 8002cfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cfe:	f7fe f915 	bl	8000f2c <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b64      	cmp	r3, #100	; 0x64
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e380      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d10:	4b49      	ldr	r3, [pc, #292]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x13e>
 8002d1c:	e014      	b.n	8002d48 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1e:	f7fe f905 	bl	8000f2c <HAL_GetTick>
 8002d22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d26:	f7fe f901 	bl	8000f2c <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b64      	cmp	r3, #100	; 0x64
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e36c      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d38:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f0      	bne.n	8002d26 <HAL_RCC_OscConfig+0x166>
 8002d44:	e000      	b.n	8002d48 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d46:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 808c 	beq.w	8002e6e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d56:	4b38      	ldr	r3, [pc, #224]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d5e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d60:	4b35      	ldr	r3, [pc, #212]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d64:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d007      	beq.n	8002d7c <HAL_RCC_OscConfig+0x1bc>
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	2b18      	cmp	r3, #24
 8002d70:	d137      	bne.n	8002de2 <HAL_RCC_OscConfig+0x222>
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d132      	bne.n	8002de2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d7c:	4b2e      	ldr	r3, [pc, #184]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_OscConfig+0x1d4>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e33e      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d94:	4b28      	ldr	r3, [pc, #160]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f023 0219 	bic.w	r2, r3, #25
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4925      	ldr	r1, [pc, #148]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da6:	f7fe f8c1 	bl	8000f2c <HAL_GetTick>
 8002daa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dae:	f7fe f8bd 	bl	8000f2c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e328      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dcc:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	061b      	lsls	r3, r3, #24
 8002dda:	4917      	ldr	r1, [pc, #92]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002de0:	e045      	b.n	8002e6e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d028      	beq.n	8002e3c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002dea:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 0219 	bic.w	r2, r3, #25
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	4910      	ldr	r1, [pc, #64]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe f896 	bl	8000f2c <HAL_GetTick>
 8002e00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e04:	f7fe f892 	bl	8000f2c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e2fd      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e16:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e22:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	061b      	lsls	r3, r3, #24
 8002e30:	4901      	ldr	r1, [pc, #4]	; (8002e38 <HAL_RCC_OscConfig+0x278>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]
 8002e36:	e01a      	b.n	8002e6e <HAL_RCC_OscConfig+0x2ae>
 8002e38:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3c:	4b97      	ldr	r3, [pc, #604]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a96      	ldr	r2, [pc, #600]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002e42:	f023 0301 	bic.w	r3, r3, #1
 8002e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe f870 	bl	8000f2c <HAL_GetTick>
 8002e4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e50:	f7fe f86c 	bl	8000f2c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e2d7      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e62:	4b8e      	ldr	r3, [pc, #568]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d06a      	beq.n	8002f50 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e7a:	4b88      	ldr	r3, [pc, #544]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e82:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e84:	4b85      	ldr	r3, [pc, #532]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d007      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x2e0>
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	2b18      	cmp	r3, #24
 8002e94:	d11b      	bne.n	8002ece <HAL_RCC_OscConfig+0x30e>
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d116      	bne.n	8002ece <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ea0:	4b7e      	ldr	r3, [pc, #504]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x2f8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	2b80      	cmp	r3, #128	; 0x80
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e2ac      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002eb8:	4b78      	ldr	r3, [pc, #480]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	061b      	lsls	r3, r3, #24
 8002ec6:	4975      	ldr	r1, [pc, #468]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ecc:	e040      	b.n	8002f50 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d023      	beq.n	8002f1e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ed6:	4b71      	ldr	r3, [pc, #452]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a70      	ldr	r2, [pc, #448]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7fe f823 	bl	8000f2c <HAL_GetTick>
 8002ee6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002eea:	f7fe f81f 	bl	8000f2c <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e28a      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002efc:	4b67      	ldr	r3, [pc, #412]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f08:	4b64      	ldr	r3, [pc, #400]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	061b      	lsls	r3, r3, #24
 8002f16:	4961      	ldr	r1, [pc, #388]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60cb      	str	r3, [r1, #12]
 8002f1c:	e018      	b.n	8002f50 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f1e:	4b5f      	ldr	r3, [pc, #380]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a5e      	ldr	r2, [pc, #376]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2a:	f7fd ffff 	bl	8000f2c <HAL_GetTick>
 8002f2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f32:	f7fd fffb 	bl	8000f2c <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e266      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f44:	4b55      	ldr	r3, [pc, #340]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f0      	bne.n	8002f32 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d036      	beq.n	8002fca <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d019      	beq.n	8002f98 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f64:	4b4d      	ldr	r3, [pc, #308]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f68:	4a4c      	ldr	r2, [pc, #304]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7fd ffdc 	bl	8000f2c <HAL_GetTick>
 8002f74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f78:	f7fd ffd8 	bl	8000f2c <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e243      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f8a:	4b44      	ldr	r3, [pc, #272]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x3b8>
 8002f96:	e018      	b.n	8002fca <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f98:	4b40      	ldr	r3, [pc, #256]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9c:	4a3f      	ldr	r2, [pc, #252]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa4:	f7fd ffc2 	bl	8000f2c <HAL_GetTick>
 8002fa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fac:	f7fd ffbe 	bl	8000f2c <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e229      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fbe:	4b37      	ldr	r3, [pc, #220]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d036      	beq.n	8003044 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d019      	beq.n	8003012 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fde:	4b2f      	ldr	r3, [pc, #188]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a2e      	ldr	r2, [pc, #184]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002fe4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fe8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fea:	f7fd ff9f 	bl	8000f2c <HAL_GetTick>
 8002fee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ff2:	f7fd ff9b 	bl	8000f2c <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e206      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003004:	4b25      	ldr	r3, [pc, #148]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x432>
 8003010:	e018      	b.n	8003044 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003012:	4b22      	ldr	r3, [pc, #136]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a21      	ldr	r2, [pc, #132]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8003018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800301c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800301e:	f7fd ff85 	bl	8000f2c <HAL_GetTick>
 8003022:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003026:	f7fd ff81 	bl	8000f2c <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e1ec      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003038:	4b18      	ldr	r3, [pc, #96]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f0      	bne.n	8003026 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80af 	beq.w	80031b0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003052:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <HAL_RCC_OscConfig+0x4e0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a12      	ldr	r2, [pc, #72]	; (80030a0 <HAL_RCC_OscConfig+0x4e0>)
 8003058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800305e:	f7fd ff65 	bl	8000f2c <HAL_GetTick>
 8003062:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003066:	f7fd ff61 	bl	8000f2c <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b64      	cmp	r3, #100	; 0x64
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e1cc      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <HAL_RCC_OscConfig+0x4e0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d10b      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4e4>
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	4a02      	ldr	r2, [pc, #8]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6713      	str	r3, [r2, #112]	; 0x70
 8003098:	e05b      	b.n	8003152 <HAL_RCC_OscConfig+0x592>
 800309a:	bf00      	nop
 800309c:	58024400 	.word	0x58024400
 80030a0:	58024800 	.word	0x58024800
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d112      	bne.n	80030d2 <HAL_RCC_OscConfig+0x512>
 80030ac:	4b9d      	ldr	r3, [pc, #628]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	4a9c      	ldr	r2, [pc, #624]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80030b2:	f023 0301 	bic.w	r3, r3, #1
 80030b6:	6713      	str	r3, [r2, #112]	; 0x70
 80030b8:	4b9a      	ldr	r3, [pc, #616]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80030ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030bc:	4a99      	ldr	r2, [pc, #612]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80030be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030c2:	6713      	str	r3, [r2, #112]	; 0x70
 80030c4:	4b97      	ldr	r3, [pc, #604]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80030c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c8:	4a96      	ldr	r2, [pc, #600]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80030ca:	f023 0304 	bic.w	r3, r3, #4
 80030ce:	6713      	str	r3, [r2, #112]	; 0x70
 80030d0:	e03f      	b.n	8003152 <HAL_RCC_OscConfig+0x592>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b05      	cmp	r3, #5
 80030d8:	d112      	bne.n	8003100 <HAL_RCC_OscConfig+0x540>
 80030da:	4b92      	ldr	r3, [pc, #584]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80030dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030de:	4a91      	ldr	r2, [pc, #580]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80030e0:	f043 0304 	orr.w	r3, r3, #4
 80030e4:	6713      	str	r3, [r2, #112]	; 0x70
 80030e6:	4b8f      	ldr	r3, [pc, #572]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	4a8e      	ldr	r2, [pc, #568]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80030ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030f0:	6713      	str	r3, [r2, #112]	; 0x70
 80030f2:	4b8c      	ldr	r3, [pc, #560]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80030f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f6:	4a8b      	ldr	r2, [pc, #556]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6713      	str	r3, [r2, #112]	; 0x70
 80030fe:	e028      	b.n	8003152 <HAL_RCC_OscConfig+0x592>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b85      	cmp	r3, #133	; 0x85
 8003106:	d112      	bne.n	800312e <HAL_RCC_OscConfig+0x56e>
 8003108:	4b86      	ldr	r3, [pc, #536]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 800310a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310c:	4a85      	ldr	r2, [pc, #532]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 800310e:	f043 0304 	orr.w	r3, r3, #4
 8003112:	6713      	str	r3, [r2, #112]	; 0x70
 8003114:	4b83      	ldr	r3, [pc, #524]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003118:	4a82      	ldr	r2, [pc, #520]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 800311a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800311e:	6713      	str	r3, [r2, #112]	; 0x70
 8003120:	4b80      	ldr	r3, [pc, #512]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 8003122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003124:	4a7f      	ldr	r2, [pc, #508]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	6713      	str	r3, [r2, #112]	; 0x70
 800312c:	e011      	b.n	8003152 <HAL_RCC_OscConfig+0x592>
 800312e:	4b7d      	ldr	r3, [pc, #500]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	4a7c      	ldr	r2, [pc, #496]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	6713      	str	r3, [r2, #112]	; 0x70
 800313a:	4b7a      	ldr	r3, [pc, #488]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 800313c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313e:	4a79      	ldr	r2, [pc, #484]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 8003140:	f023 0304 	bic.w	r3, r3, #4
 8003144:	6713      	str	r3, [r2, #112]	; 0x70
 8003146:	4b77      	ldr	r3, [pc, #476]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 8003148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314a:	4a76      	ldr	r2, [pc, #472]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 800314c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003150:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d015      	beq.n	8003186 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315a:	f7fd fee7 	bl	8000f2c <HAL_GetTick>
 800315e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003160:	e00a      	b.n	8003178 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003162:	f7fd fee3 	bl	8000f2c <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003170:	4293      	cmp	r3, r2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e14c      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003178:	4b6a      	ldr	r3, [pc, #424]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0ee      	beq.n	8003162 <HAL_RCC_OscConfig+0x5a2>
 8003184:	e014      	b.n	80031b0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003186:	f7fd fed1 	bl	8000f2c <HAL_GetTick>
 800318a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800318c:	e00a      	b.n	80031a4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f7fd fecd 	bl	8000f2c <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f241 3288 	movw	r2, #5000	; 0x1388
 800319c:	4293      	cmp	r3, r2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e136      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031a4:	4b5f      	ldr	r3, [pc, #380]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1ee      	bne.n	800318e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 812b 	beq.w	8003410 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80031ba:	4b5a      	ldr	r3, [pc, #360]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031c2:	2b18      	cmp	r3, #24
 80031c4:	f000 80bb 	beq.w	800333e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	f040 8095 	bne.w	80032fc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d2:	4b54      	ldr	r3, [pc, #336]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a53      	ldr	r2, [pc, #332]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80031d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031de:	f7fd fea5 	bl	8000f2c <HAL_GetTick>
 80031e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e6:	f7fd fea1 	bl	8000f2c <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e10c      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031f8:	4b4a      	ldr	r3, [pc, #296]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f0      	bne.n	80031e6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003204:	4b47      	ldr	r3, [pc, #284]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 8003206:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003208:	4b47      	ldr	r3, [pc, #284]	; (8003328 <HAL_RCC_OscConfig+0x768>)
 800320a:	4013      	ands	r3, r2
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003214:	0112      	lsls	r2, r2, #4
 8003216:	430a      	orrs	r2, r1
 8003218:	4942      	ldr	r1, [pc, #264]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 800321a:	4313      	orrs	r3, r2
 800321c:	628b      	str	r3, [r1, #40]	; 0x28
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	3b01      	subs	r3, #1
 8003224:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322c:	3b01      	subs	r3, #1
 800322e:	025b      	lsls	r3, r3, #9
 8003230:	b29b      	uxth	r3, r3
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003238:	3b01      	subs	r3, #1
 800323a:	041b      	lsls	r3, r3, #16
 800323c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003246:	3b01      	subs	r3, #1
 8003248:	061b      	lsls	r3, r3, #24
 800324a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800324e:	4935      	ldr	r1, [pc, #212]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 8003250:	4313      	orrs	r3, r2
 8003252:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003254:	4b33      	ldr	r3, [pc, #204]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	4a32      	ldr	r2, [pc, #200]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 800325a:	f023 0301 	bic.w	r3, r3, #1
 800325e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003260:	4b30      	ldr	r3, [pc, #192]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 8003262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003264:	4b31      	ldr	r3, [pc, #196]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 8003266:	4013      	ands	r3, r2
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800326c:	00d2      	lsls	r2, r2, #3
 800326e:	492d      	ldr	r1, [pc, #180]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 8003270:	4313      	orrs	r3, r2
 8003272:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003274:	4b2b      	ldr	r3, [pc, #172]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	f023 020c 	bic.w	r2, r3, #12
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	4928      	ldr	r1, [pc, #160]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 8003282:	4313      	orrs	r3, r2
 8003284:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003286:	4b27      	ldr	r3, [pc, #156]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	f023 0202 	bic.w	r2, r3, #2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003292:	4924      	ldr	r1, [pc, #144]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 8003294:	4313      	orrs	r3, r2
 8003296:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003298:	4b22      	ldr	r3, [pc, #136]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	4a21      	ldr	r2, [pc, #132]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 800329e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a4:	4b1f      	ldr	r3, [pc, #124]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	4a1e      	ldr	r2, [pc, #120]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80032aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80032b0:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	4a1b      	ldr	r2, [pc, #108]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80032b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80032bc:	4b19      	ldr	r3, [pc, #100]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	4a18      	ldr	r2, [pc, #96]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c8:	4b16      	ldr	r3, [pc, #88]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a15      	ldr	r2, [pc, #84]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80032ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fd fe2a 	bl	8000f2c <HAL_GetTick>
 80032d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032dc:	f7fd fe26 	bl	8000f2c <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e091      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x71c>
 80032fa:	e089      	b.n	8003410 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fc:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a08      	ldr	r2, [pc, #32]	; (8003324 <HAL_RCC_OscConfig+0x764>)
 8003302:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fd fe10 	bl	8000f2c <HAL_GetTick>
 800330c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800330e:	e00f      	b.n	8003330 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003310:	f7fd fe0c 	bl	8000f2c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d908      	bls.n	8003330 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e077      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
 8003322:	bf00      	nop
 8003324:	58024400 	.word	0x58024400
 8003328:	fffffc0c 	.word	0xfffffc0c
 800332c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003330:	4b3a      	ldr	r3, [pc, #232]	; (800341c <HAL_RCC_OscConfig+0x85c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e9      	bne.n	8003310 <HAL_RCC_OscConfig+0x750>
 800333c:	e068      	b.n	8003410 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800333e:	4b37      	ldr	r3, [pc, #220]	; (800341c <HAL_RCC_OscConfig+0x85c>)
 8003340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003342:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003344:	4b35      	ldr	r3, [pc, #212]	; (800341c <HAL_RCC_OscConfig+0x85c>)
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	2b01      	cmp	r3, #1
 8003350:	d031      	beq.n	80033b6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f003 0203 	and.w	r2, r3, #3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335c:	429a      	cmp	r2, r3
 800335e:	d12a      	bne.n	80033b6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	091b      	lsrs	r3, r3, #4
 8003364:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336c:	429a      	cmp	r2, r3
 800336e:	d122      	bne.n	80033b6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d11a      	bne.n	80033b6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	0a5b      	lsrs	r3, r3, #9
 8003384:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800338e:	429a      	cmp	r2, r3
 8003390:	d111      	bne.n	80033b6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	0c1b      	lsrs	r3, r3, #16
 8003396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d108      	bne.n	80033b6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	0e1b      	lsrs	r3, r3, #24
 80033a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d001      	beq.n	80033ba <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e02b      	b.n	8003412 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80033ba:	4b18      	ldr	r3, [pc, #96]	; (800341c <HAL_RCC_OscConfig+0x85c>)
 80033bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033be:	08db      	lsrs	r3, r3, #3
 80033c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033c4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d01f      	beq.n	8003410 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80033d0:	4b12      	ldr	r3, [pc, #72]	; (800341c <HAL_RCC_OscConfig+0x85c>)
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	4a11      	ldr	r2, [pc, #68]	; (800341c <HAL_RCC_OscConfig+0x85c>)
 80033d6:	f023 0301 	bic.w	r3, r3, #1
 80033da:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033dc:	f7fd fda6 	bl	8000f2c <HAL_GetTick>
 80033e0:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80033e2:	bf00      	nop
 80033e4:	f7fd fda2 	bl	8000f2c <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d0f9      	beq.n	80033e4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033f0:	4b0a      	ldr	r3, [pc, #40]	; (800341c <HAL_RCC_OscConfig+0x85c>)
 80033f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033f4:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <HAL_RCC_OscConfig+0x860>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033fc:	00d2      	lsls	r2, r2, #3
 80033fe:	4907      	ldr	r1, [pc, #28]	; (800341c <HAL_RCC_OscConfig+0x85c>)
 8003400:	4313      	orrs	r3, r2
 8003402:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_OscConfig+0x85c>)
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	4a04      	ldr	r2, [pc, #16]	; (800341c <HAL_RCC_OscConfig+0x85c>)
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3730      	adds	r7, #48	; 0x30
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	58024400 	.word	0x58024400
 8003420:	ffff0007 	.word	0xffff0007

08003424 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e19c      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003438:	4b8a      	ldr	r3, [pc, #552]	; (8003664 <HAL_RCC_ClockConfig+0x240>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d910      	bls.n	8003468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b87      	ldr	r3, [pc, #540]	; (8003664 <HAL_RCC_ClockConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 020f 	bic.w	r2, r3, #15
 800344e:	4985      	ldr	r1, [pc, #532]	; (8003664 <HAL_RCC_ClockConfig+0x240>)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003456:	4b83      	ldr	r3, [pc, #524]	; (8003664 <HAL_RCC_ClockConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e184      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d010      	beq.n	8003496 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	4b7b      	ldr	r3, [pc, #492]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003480:	429a      	cmp	r2, r3
 8003482:	d908      	bls.n	8003496 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003484:	4b78      	ldr	r3, [pc, #480]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	4975      	ldr	r1, [pc, #468]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003492:	4313      	orrs	r3, r2
 8003494:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d010      	beq.n	80034c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	4b70      	ldr	r3, [pc, #448]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d908      	bls.n	80034c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034b2:	4b6d      	ldr	r3, [pc, #436]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	496a      	ldr	r1, [pc, #424]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d010      	beq.n	80034f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699a      	ldr	r2, [r3, #24]
 80034d4:	4b64      	ldr	r3, [pc, #400]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034dc:	429a      	cmp	r2, r3
 80034de:	d908      	bls.n	80034f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034e0:	4b61      	ldr	r3, [pc, #388]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	495e      	ldr	r1, [pc, #376]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d010      	beq.n	8003520 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69da      	ldr	r2, [r3, #28]
 8003502:	4b59      	ldr	r3, [pc, #356]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800350a:	429a      	cmp	r2, r3
 800350c:	d908      	bls.n	8003520 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800350e:	4b56      	ldr	r3, [pc, #344]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	4953      	ldr	r1, [pc, #332]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 800351c:	4313      	orrs	r3, r2
 800351e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d010      	beq.n	800354e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	4b4d      	ldr	r3, [pc, #308]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	429a      	cmp	r2, r3
 800353a:	d908      	bls.n	800354e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800353c:	4b4a      	ldr	r3, [pc, #296]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f023 020f 	bic.w	r2, r3, #15
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4947      	ldr	r1, [pc, #284]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 800354a:	4313      	orrs	r3, r2
 800354c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d055      	beq.n	8003606 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800355a:	4b43      	ldr	r3, [pc, #268]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	4940      	ldr	r1, [pc, #256]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003568:	4313      	orrs	r3, r2
 800356a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d107      	bne.n	8003584 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003574:	4b3c      	ldr	r3, [pc, #240]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d121      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0f6      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b03      	cmp	r3, #3
 800358a:	d107      	bne.n	800359c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800358c:	4b36      	ldr	r3, [pc, #216]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d115      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0ea      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035a4:	4b30      	ldr	r3, [pc, #192]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d109      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0de      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035b4:	4b2c      	ldr	r3, [pc, #176]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0d6      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035c4:	4b28      	ldr	r3, [pc, #160]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f023 0207 	bic.w	r2, r3, #7
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4925      	ldr	r1, [pc, #148]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d6:	f7fd fca9 	bl	8000f2c <HAL_GetTick>
 80035da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035dc:	e00a      	b.n	80035f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035de:	f7fd fca5 	bl	8000f2c <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e0be      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f4:	4b1c      	ldr	r3, [pc, #112]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	429a      	cmp	r2, r3
 8003604:	d1eb      	bne.n	80035de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d010      	beq.n	8003634 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	4b14      	ldr	r3, [pc, #80]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	429a      	cmp	r2, r3
 8003620:	d208      	bcs.n	8003634 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003622:	4b11      	ldr	r3, [pc, #68]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f023 020f 	bic.w	r2, r3, #15
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	490e      	ldr	r1, [pc, #56]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003630:	4313      	orrs	r3, r2
 8003632:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCC_ClockConfig+0x240>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d214      	bcs.n	800366c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003642:	4b08      	ldr	r3, [pc, #32]	; (8003664 <HAL_RCC_ClockConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 020f 	bic.w	r2, r3, #15
 800364a:	4906      	ldr	r1, [pc, #24]	; (8003664 <HAL_RCC_ClockConfig+0x240>)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003652:	4b04      	ldr	r3, [pc, #16]	; (8003664 <HAL_RCC_ClockConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d005      	beq.n	800366c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e086      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
 8003664:	52002000 	.word	0x52002000
 8003668:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d010      	beq.n	800369a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	4b3f      	ldr	r3, [pc, #252]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003684:	429a      	cmp	r2, r3
 8003686:	d208      	bcs.n	800369a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003688:	4b3c      	ldr	r3, [pc, #240]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	4939      	ldr	r1, [pc, #228]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 8003696:	4313      	orrs	r3, r2
 8003698:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d010      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	4b34      	ldr	r3, [pc, #208]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d208      	bcs.n	80036c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036b6:	4b31      	ldr	r3, [pc, #196]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	492e      	ldr	r1, [pc, #184]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d010      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699a      	ldr	r2, [r3, #24]
 80036d8:	4b28      	ldr	r3, [pc, #160]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d208      	bcs.n	80036f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036e4:	4b25      	ldr	r3, [pc, #148]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	4922      	ldr	r1, [pc, #136]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d010      	beq.n	8003724 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69da      	ldr	r2, [r3, #28]
 8003706:	4b1d      	ldr	r3, [pc, #116]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800370e:	429a      	cmp	r2, r3
 8003710:	d208      	bcs.n	8003724 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003712:	4b1a      	ldr	r3, [pc, #104]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	4917      	ldr	r1, [pc, #92]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 8003720:	4313      	orrs	r3, r2
 8003722:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003724:	f000 f89e 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8003728:	4602      	mov	r2, r0
 800372a:	4b14      	ldr	r3, [pc, #80]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	4912      	ldr	r1, [pc, #72]	; (8003780 <HAL_RCC_ClockConfig+0x35c>)
 8003736:	5ccb      	ldrb	r3, [r1, r3]
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
 8003740:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003742:	4b0e      	ldr	r3, [pc, #56]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	4a0d      	ldr	r2, [pc, #52]	; (8003780 <HAL_RCC_ClockConfig+0x35c>)
 800374c:	5cd3      	ldrb	r3, [r2, r3]
 800374e:	f003 031f 	and.w	r3, r3, #31
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	fa22 f303 	lsr.w	r3, r2, r3
 8003758:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <HAL_RCC_ClockConfig+0x360>)
 800375a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800375c:	4a0a      	ldr	r2, [pc, #40]	; (8003788 <HAL_RCC_ClockConfig+0x364>)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003762:	4b0a      	ldr	r3, [pc, #40]	; (800378c <HAL_RCC_ClockConfig+0x368>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd fb96 	bl	8000e98 <HAL_InitTick>
 800376c:	4603      	mov	r3, r0
 800376e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003770:	7bfb      	ldrb	r3, [r7, #15]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	58024400 	.word	0x58024400
 8003780:	0800ba30 	.word	0x0800ba30
 8003784:	24000004 	.word	0x24000004
 8003788:	24000000 	.word	0x24000000
 800378c:	24000008 	.word	0x24000008

08003790 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08c      	sub	sp, #48	; 0x30
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d12a      	bne.n	80037f8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80037a2:	4b2d      	ldr	r3, [pc, #180]	; (8003858 <HAL_RCC_MCOConfig+0xc8>)
 80037a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80037a8:	4a2b      	ldr	r2, [pc, #172]	; (8003858 <HAL_RCC_MCOConfig+0xc8>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80037b2:	4b29      	ldr	r3, [pc, #164]	; (8003858 <HAL_RCC_MCOConfig+0xc8>)
 80037b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80037c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c6:	2302      	movs	r3, #2
 80037c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ca:	2303      	movs	r3, #3
 80037cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80037d2:	2300      	movs	r3, #0
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80037d6:	f107 031c 	add.w	r3, r7, #28
 80037da:	4619      	mov	r1, r3
 80037dc:	481f      	ldr	r0, [pc, #124]	; (800385c <HAL_RCC_MCOConfig+0xcc>)
 80037de:	f7fd fcf1 	bl	80011c4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80037e2:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <HAL_RCC_MCOConfig+0xc8>)
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80037ea:	68b9      	ldr	r1, [r7, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	430b      	orrs	r3, r1
 80037f0:	4919      	ldr	r1, [pc, #100]	; (8003858 <HAL_RCC_MCOConfig+0xc8>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80037f6:	e02a      	b.n	800384e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80037f8:	4b17      	ldr	r3, [pc, #92]	; (8003858 <HAL_RCC_MCOConfig+0xc8>)
 80037fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80037fe:	4a16      	ldr	r2, [pc, #88]	; (8003858 <HAL_RCC_MCOConfig+0xc8>)
 8003800:	f043 0304 	orr.w	r3, r3, #4
 8003804:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003808:	4b13      	ldr	r3, [pc, #76]	; (8003858 <HAL_RCC_MCOConfig+0xc8>)
 800380a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800381a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381c:	2302      	movs	r3, #2
 800381e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003820:	2303      	movs	r3, #3
 8003822:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003824:	2300      	movs	r3, #0
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003828:	2300      	movs	r3, #0
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800382c:	f107 031c 	add.w	r3, r7, #28
 8003830:	4619      	mov	r1, r3
 8003832:	480b      	ldr	r0, [pc, #44]	; (8003860 <HAL_RCC_MCOConfig+0xd0>)
 8003834:	f7fd fcc6 	bl	80011c4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003838:	4b07      	ldr	r3, [pc, #28]	; (8003858 <HAL_RCC_MCOConfig+0xc8>)
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	01d9      	lsls	r1, r3, #7
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	430b      	orrs	r3, r1
 8003848:	4903      	ldr	r1, [pc, #12]	; (8003858 <HAL_RCC_MCOConfig+0xc8>)
 800384a:	4313      	orrs	r3, r2
 800384c:	610b      	str	r3, [r1, #16]
}
 800384e:	bf00      	nop
 8003850:	3730      	adds	r7, #48	; 0x30
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	58024400 	.word	0x58024400
 800385c:	58020000 	.word	0x58020000
 8003860:	58020800 	.word	0x58020800

08003864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003864:	b480      	push	{r7}
 8003866:	b089      	sub	sp, #36	; 0x24
 8003868:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800386a:	4bb3      	ldr	r3, [pc, #716]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003872:	2b18      	cmp	r3, #24
 8003874:	f200 8155 	bhi.w	8003b22 <HAL_RCC_GetSysClockFreq+0x2be>
 8003878:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <HAL_RCC_GetSysClockFreq+0x1c>)
 800387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387e:	bf00      	nop
 8003880:	080038e5 	.word	0x080038e5
 8003884:	08003b23 	.word	0x08003b23
 8003888:	08003b23 	.word	0x08003b23
 800388c:	08003b23 	.word	0x08003b23
 8003890:	08003b23 	.word	0x08003b23
 8003894:	08003b23 	.word	0x08003b23
 8003898:	08003b23 	.word	0x08003b23
 800389c:	08003b23 	.word	0x08003b23
 80038a0:	0800390b 	.word	0x0800390b
 80038a4:	08003b23 	.word	0x08003b23
 80038a8:	08003b23 	.word	0x08003b23
 80038ac:	08003b23 	.word	0x08003b23
 80038b0:	08003b23 	.word	0x08003b23
 80038b4:	08003b23 	.word	0x08003b23
 80038b8:	08003b23 	.word	0x08003b23
 80038bc:	08003b23 	.word	0x08003b23
 80038c0:	08003911 	.word	0x08003911
 80038c4:	08003b23 	.word	0x08003b23
 80038c8:	08003b23 	.word	0x08003b23
 80038cc:	08003b23 	.word	0x08003b23
 80038d0:	08003b23 	.word	0x08003b23
 80038d4:	08003b23 	.word	0x08003b23
 80038d8:	08003b23 	.word	0x08003b23
 80038dc:	08003b23 	.word	0x08003b23
 80038e0:	08003917 	.word	0x08003917
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038e4:	4b94      	ldr	r3, [pc, #592]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d009      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038f0:	4b91      	ldr	r3, [pc, #580]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	08db      	lsrs	r3, r3, #3
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	4a90      	ldr	r2, [pc, #576]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003900:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003902:	e111      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003904:	4b8d      	ldr	r3, [pc, #564]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003906:	61bb      	str	r3, [r7, #24]
      break;
 8003908:	e10e      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800390a:	4b8d      	ldr	r3, [pc, #564]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800390c:	61bb      	str	r3, [r7, #24]
      break;
 800390e:	e10b      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003910:	4b8c      	ldr	r3, [pc, #560]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003912:	61bb      	str	r3, [r7, #24]
      break;
 8003914:	e108      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003916:	4b88      	ldr	r3, [pc, #544]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003920:	4b85      	ldr	r3, [pc, #532]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800392a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800392c:	4b82      	ldr	r3, [pc, #520]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003936:	4b80      	ldr	r3, [pc, #512]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393a:	08db      	lsrs	r3, r3, #3
 800393c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	ee07 3a90 	vmov	s15, r3
 800394a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80e1 	beq.w	8003b1c <HAL_RCC_GetSysClockFreq+0x2b8>
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b02      	cmp	r3, #2
 800395e:	f000 8083 	beq.w	8003a68 <HAL_RCC_GetSysClockFreq+0x204>
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b02      	cmp	r3, #2
 8003966:	f200 80a1 	bhi.w	8003aac <HAL_RCC_GetSysClockFreq+0x248>
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0x114>
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d056      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003976:	e099      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003978:	4b6f      	ldr	r3, [pc, #444]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d02d      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003984:	4b6c      	ldr	r3, [pc, #432]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	08db      	lsrs	r3, r3, #3
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	4a6b      	ldr	r2, [pc, #428]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
 8003994:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	ee07 3a90 	vmov	s15, r3
 800399c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ae:	4b62      	ldr	r3, [pc, #392]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039be:	ed97 6a02 	vldr	s12, [r7, #8]
 80039c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003b48 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80039de:	e087      	b.n	8003af0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003b4c <HAL_RCC_GetSysClockFreq+0x2e8>
 80039ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039f2:	4b51      	ldr	r3, [pc, #324]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039fa:	ee07 3a90 	vmov	s15, r3
 80039fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a06:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003b48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a22:	e065      	b.n	8003af0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	ee07 3a90 	vmov	s15, r3
 8003a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003b50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a36:	4b40      	ldr	r3, [pc, #256]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a46:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a4a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003b48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a66:	e043      	b.n	8003af0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	ee07 3a90 	vmov	s15, r3
 8003a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a72:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003b54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a7a:	4b2f      	ldr	r3, [pc, #188]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a8e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003b48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003aaa:	e021      	b.n	8003af0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003b50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003abe:	4b1e      	ldr	r3, [pc, #120]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac6:	ee07 3a90 	vmov	s15, r3
 8003aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ace:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ad2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003b48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003aee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003af0:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	0a5b      	lsrs	r3, r3, #9
 8003af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003afa:	3301      	adds	r3, #1
 8003afc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	ee07 3a90 	vmov	s15, r3
 8003b04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b08:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b14:	ee17 3a90 	vmov	r3, s15
 8003b18:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003b1a:	e005      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61bb      	str	r3, [r7, #24]
      break;
 8003b20:	e002      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003b22:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b24:	61bb      	str	r3, [r7, #24]
      break;
 8003b26:	bf00      	nop
  }

  return sysclockfreq;
 8003b28:	69bb      	ldr	r3, [r7, #24]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3724      	adds	r7, #36	; 0x24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	58024400 	.word	0x58024400
 8003b3c:	03d09000 	.word	0x03d09000
 8003b40:	003d0900 	.word	0x003d0900
 8003b44:	016e3600 	.word	0x016e3600
 8003b48:	46000000 	.word	0x46000000
 8003b4c:	4c742400 	.word	0x4c742400
 8003b50:	4a742400 	.word	0x4a742400
 8003b54:	4bb71b00 	.word	0x4bb71b00

08003b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003b5e:	f7ff fe81 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8003b62:	4602      	mov	r2, r0
 8003b64:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	0a1b      	lsrs	r3, r3, #8
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	490f      	ldr	r1, [pc, #60]	; (8003bac <HAL_RCC_GetHCLKFreq+0x54>)
 8003b70:	5ccb      	ldrb	r3, [r1, r3]
 8003b72:	f003 031f 	and.w	r3, r3, #31
 8003b76:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	4a09      	ldr	r2, [pc, #36]	; (8003bac <HAL_RCC_GetHCLKFreq+0x54>)
 8003b86:	5cd3      	ldrb	r3, [r2, r3]
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b92:	4a07      	ldr	r2, [pc, #28]	; (8003bb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b96:	4a07      	ldr	r2, [pc, #28]	; (8003bb4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b9c:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	58024400 	.word	0x58024400
 8003bac:	0800ba30 	.word	0x0800ba30
 8003bb0:	24000004 	.word	0x24000004
 8003bb4:	24000000 	.word	0x24000000

08003bb8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bbc:	b0c8      	sub	sp, #288	; 0x120
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003bdc:	2500      	movs	r5, #0
 8003bde:	ea54 0305 	orrs.w	r3, r4, r5
 8003be2:	d049      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bee:	d02f      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003bf0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bf4:	d828      	bhi.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003bf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bfa:	d01a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003bfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c00:	d822      	bhi.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c0a:	d007      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c0c:	e01c      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c0e:	4ba7      	ldr	r3, [pc, #668]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	4aa6      	ldr	r2, [pc, #664]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c1a:	e01a      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c20:	3308      	adds	r3, #8
 8003c22:	2102      	movs	r1, #2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f001 f9db 	bl	8004fe0 <RCCEx_PLL2_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c30:	e00f      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c36:	3328      	adds	r3, #40	; 0x28
 8003c38:	2102      	movs	r1, #2
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f001 fa82 	bl	8005144 <RCCEx_PLL3_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c46:	e004      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c4e:	e000      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10a      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c5a:	4b94      	ldr	r3, [pc, #592]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c68:	4a90      	ldr	r2, [pc, #576]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c6a:	430b      	orrs	r3, r1
 8003c6c:	6513      	str	r3, [r2, #80]	; 0x50
 8003c6e:	e003      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c74:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c80:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003c84:	f04f 0900 	mov.w	r9, #0
 8003c88:	ea58 0309 	orrs.w	r3, r8, r9
 8003c8c:	d047      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d82a      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003c98:	a201      	add	r2, pc, #4	; (adr r2, 8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9e:	bf00      	nop
 8003ca0:	08003cb5 	.word	0x08003cb5
 8003ca4:	08003cc3 	.word	0x08003cc3
 8003ca8:	08003cd9 	.word	0x08003cd9
 8003cac:	08003cf7 	.word	0x08003cf7
 8003cb0:	08003cf7 	.word	0x08003cf7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb4:	4b7d      	ldr	r3, [pc, #500]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	4a7c      	ldr	r2, [pc, #496]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cc0:	e01a      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f001 f988 	bl	8004fe0 <RCCEx_PLL2_Config>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cd6:	e00f      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cdc:	3328      	adds	r3, #40	; 0x28
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f001 fa2f 	bl	8005144 <RCCEx_PLL3_Config>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cec:	e004      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003cf4:	e000      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10a      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d00:	4b6a      	ldr	r3, [pc, #424]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d04:	f023 0107 	bic.w	r1, r3, #7
 8003d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	4a67      	ldr	r2, [pc, #412]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d10:	430b      	orrs	r3, r1
 8003d12:	6513      	str	r3, [r2, #80]	; 0x50
 8003d14:	e003      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d1a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d26:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003d2a:	f04f 0b00 	mov.w	fp, #0
 8003d2e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d32:	d054      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d3e:	d036      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003d40:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d44:	d82f      	bhi.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d4a:	d032      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d50:	d829      	bhi.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d52:	2bc0      	cmp	r3, #192	; 0xc0
 8003d54:	d02f      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003d56:	2bc0      	cmp	r3, #192	; 0xc0
 8003d58:	d825      	bhi.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d5a:	2b80      	cmp	r3, #128	; 0x80
 8003d5c:	d018      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003d5e:	2b80      	cmp	r3, #128	; 0x80
 8003d60:	d821      	bhi.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003d66:	2b40      	cmp	r3, #64	; 0x40
 8003d68:	d007      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003d6a:	e01c      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d6c:	4b4f      	ldr	r3, [pc, #316]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	4a4e      	ldr	r2, [pc, #312]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003d78:	e01e      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d7e:	3308      	adds	r3, #8
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f001 f92c 	bl	8004fe0 <RCCEx_PLL2_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003d8e:	e013      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d94:	3328      	adds	r3, #40	; 0x28
 8003d96:	2100      	movs	r1, #0
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f001 f9d3 	bl	8005144 <RCCEx_PLL3_Config>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003da4:	e008      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003dac:	e004      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003dae:	bf00      	nop
 8003db0:	e002      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003db2:	bf00      	nop
 8003db4:	e000      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003db6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003dc0:	4b3a      	ldr	r3, [pc, #232]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dce:	4a37      	ldr	r2, [pc, #220]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	6513      	str	r3, [r2, #80]	; 0x50
 8003dd4:	e003      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dda:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003dea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003dee:	2300      	movs	r3, #0
 8003df0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003df4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	d05c      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e04:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003e08:	d03b      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e0a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003e0e:	d834      	bhi.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e14:	d037      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e1a:	d82e      	bhi.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e20:	d033      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003e22:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e26:	d828      	bhi.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2c:	d01a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e32:	d822      	bhi.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e3c:	d007      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003e3e:	e01c      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e40:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	4a19      	ldr	r2, [pc, #100]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003e4c:	e01e      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e52:	3308      	adds	r3, #8
 8003e54:	2100      	movs	r1, #0
 8003e56:	4618      	mov	r0, r3
 8003e58:	f001 f8c2 	bl	8004fe0 <RCCEx_PLL2_Config>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003e62:	e013      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e68:	3328      	adds	r3, #40	; 0x28
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f001 f969 	bl	8005144 <RCCEx_PLL3_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003e78:	e008      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e80:	e004      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003e82:	bf00      	nop
 8003e84:	e002      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003e86:	bf00      	nop
 8003e88:	e000      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003e8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10d      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003e94:	4b05      	ldr	r3, [pc, #20]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e98:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea2:	4a02      	ldr	r2, [pc, #8]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	6513      	str	r3, [r2, #80]	; 0x50
 8003ea8:	e006      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003eaa:	bf00      	nop
 8003eac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003eb4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003ec4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003ece:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	d03a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ede:	2b30      	cmp	r3, #48	; 0x30
 8003ee0:	d01f      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003ee2:	2b30      	cmp	r3, #48	; 0x30
 8003ee4:	d819      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003ee6:	2b20      	cmp	r3, #32
 8003ee8:	d00c      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003eea:	2b20      	cmp	r3, #32
 8003eec:	d815      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d019      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003ef2:	2b10      	cmp	r3, #16
 8003ef4:	d111      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ef6:	4bae      	ldr	r3, [pc, #696]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	4aad      	ldr	r2, [pc, #692]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f02:	e011      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f08:	3308      	adds	r3, #8
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f001 f867 	bl	8004fe0 <RCCEx_PLL2_Config>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f18:	e006      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f20:	e002      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003f22:	bf00      	nop
 8003f24:	e000      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003f30:	4b9f      	ldr	r3, [pc, #636]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f34:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3e:	4a9c      	ldr	r2, [pc, #624]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f40:	430b      	orrs	r3, r1
 8003f42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f44:	e003      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f56:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003f5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f64:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	d051      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f78:	d035      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003f7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f7e:	d82e      	bhi.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003f80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f84:	d031      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003f86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f8a:	d828      	bhi.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f90:	d01a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f96:	d822      	bhi.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa0:	d007      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003fa2:	e01c      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fa4:	4b82      	ldr	r3, [pc, #520]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa8:	4a81      	ldr	r2, [pc, #516]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003fb0:	e01c      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f001 f810 	bl	8004fe0 <RCCEx_PLL2_Config>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003fc6:	e011      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fcc:	3328      	adds	r3, #40	; 0x28
 8003fce:	2100      	movs	r1, #0
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f001 f8b7 	bl	8005144 <RCCEx_PLL3_Config>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003fdc:	e006      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003fe4:	e002      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ff4:	4b6e      	ldr	r3, [pc, #440]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004002:	4a6b      	ldr	r2, [pc, #428]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004004:	430b      	orrs	r3, r1
 8004006:	6513      	str	r3, [r2, #80]	; 0x50
 8004008:	e003      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800400e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800401e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004022:	2300      	movs	r3, #0
 8004024:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004028:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800402c:	460b      	mov	r3, r1
 800402e:	4313      	orrs	r3, r2
 8004030:	d053      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800403c:	d033      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800403e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004042:	d82c      	bhi.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004044:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004048:	d02f      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800404a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800404e:	d826      	bhi.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004050:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004054:	d02b      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004056:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800405a:	d820      	bhi.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800405c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004060:	d012      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004062:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004066:	d81a      	bhi.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004068:	2b00      	cmp	r3, #0
 800406a:	d022      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800406c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004070:	d115      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004076:	3308      	adds	r3, #8
 8004078:	2101      	movs	r1, #1
 800407a:	4618      	mov	r0, r3
 800407c:	f000 ffb0 	bl	8004fe0 <RCCEx_PLL2_Config>
 8004080:	4603      	mov	r3, r0
 8004082:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004086:	e015      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004088:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800408c:	3328      	adds	r3, #40	; 0x28
 800408e:	2101      	movs	r1, #1
 8004090:	4618      	mov	r0, r3
 8004092:	f001 f857 	bl	8005144 <RCCEx_PLL3_Config>
 8004096:	4603      	mov	r3, r0
 8004098:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800409c:	e00a      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040a4:	e006      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040a6:	bf00      	nop
 80040a8:	e004      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040aa:	bf00      	nop
 80040ac:	e002      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040ae:	bf00      	nop
 80040b0:	e000      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80040bc:	4b3c      	ldr	r3, [pc, #240]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80040c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ca:	4a39      	ldr	r2, [pc, #228]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040cc:	430b      	orrs	r3, r1
 80040ce:	6513      	str	r3, [r2, #80]	; 0x50
 80040d0:	e003      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80040da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80040e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040ea:	2300      	movs	r3, #0
 80040ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040f0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4313      	orrs	r3, r2
 80040f8:	d060      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80040fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004102:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004106:	d039      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004108:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800410c:	d832      	bhi.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800410e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004112:	d035      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004118:	d82c      	bhi.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800411a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411e:	d031      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004124:	d826      	bhi.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004126:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800412a:	d02d      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800412c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004130:	d820      	bhi.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004136:	d012      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800413c:	d81a      	bhi.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800413e:	2b00      	cmp	r3, #0
 8004140:	d024      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004142:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004146:	d115      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004148:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800414c:	3308      	adds	r3, #8
 800414e:	2101      	movs	r1, #1
 8004150:	4618      	mov	r0, r3
 8004152:	f000 ff45 	bl	8004fe0 <RCCEx_PLL2_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800415c:	e017      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800415e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004162:	3328      	adds	r3, #40	; 0x28
 8004164:	2101      	movs	r1, #1
 8004166:	4618      	mov	r0, r3
 8004168:	f000 ffec 	bl	8005144 <RCCEx_PLL3_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004172:	e00c      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800417a:	e008      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800417c:	bf00      	nop
 800417e:	e006      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004180:	bf00      	nop
 8004182:	e004      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004184:	bf00      	nop
 8004186:	e002      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004188:	bf00      	nop
 800418a:	e000      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800418c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800418e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10e      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004196:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800419e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041a6:	4a02      	ldr	r2, [pc, #8]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041a8:	430b      	orrs	r3, r1
 80041aa:	6593      	str	r3, [r2, #88]	; 0x58
 80041ac:	e006      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80041ae:	bf00      	nop
 80041b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80041c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041cc:	2300      	movs	r3, #0
 80041ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80041d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041d6:	460b      	mov	r3, r1
 80041d8:	4313      	orrs	r3, r2
 80041da:	d037      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80041dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041e6:	d00e      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80041e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ec:	d816      	bhi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d018      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80041f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041f6:	d111      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f8:	4bc4      	ldr	r3, [pc, #784]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	4ac3      	ldr	r2, [pc, #780]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004202:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004204:	e00f      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800420a:	3308      	adds	r3, #8
 800420c:	2101      	movs	r1, #1
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fee6 	bl	8004fe0 <RCCEx_PLL2_Config>
 8004214:	4603      	mov	r3, r0
 8004216:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800421a:	e004      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004222:	e000      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004226:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10a      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800422e:	4bb7      	ldr	r3, [pc, #732]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004232:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800423a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800423c:	4ab3      	ldr	r2, [pc, #716]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800423e:	430b      	orrs	r3, r1
 8004240:	6513      	str	r3, [r2, #80]	; 0x50
 8004242:	e003      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004244:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004248:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800424c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004254:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800425c:	2300      	movs	r3, #0
 800425e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004262:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004266:	460b      	mov	r3, r1
 8004268:	4313      	orrs	r3, r2
 800426a:	d039      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800426c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004272:	2b03      	cmp	r3, #3
 8004274:	d81c      	bhi.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004276:	a201      	add	r2, pc, #4	; (adr r2, 800427c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427c:	080042b9 	.word	0x080042b9
 8004280:	0800428d 	.word	0x0800428d
 8004284:	0800429b 	.word	0x0800429b
 8004288:	080042b9 	.word	0x080042b9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800428c:	4b9f      	ldr	r3, [pc, #636]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	4a9e      	ldr	r2, [pc, #632]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004296:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004298:	e00f      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800429a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800429e:	3308      	adds	r3, #8
 80042a0:	2102      	movs	r1, #2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fe9c 	bl	8004fe0 <RCCEx_PLL2_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042ae:	e004      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042b6:	e000      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80042b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80042c2:	4b92      	ldr	r3, [pc, #584]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c6:	f023 0103 	bic.w	r1, r3, #3
 80042ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d0:	4a8e      	ldr	r2, [pc, #568]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042d2:	430b      	orrs	r3, r1
 80042d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042d6:	e003      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80042ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042f0:	2300      	movs	r3, #0
 80042f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80042fa:	460b      	mov	r3, r1
 80042fc:	4313      	orrs	r3, r2
 80042fe:	f000 8099 	beq.w	8004434 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004302:	4b83      	ldr	r3, [pc, #524]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a82      	ldr	r2, [pc, #520]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800430c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800430e:	f7fc fe0d 	bl	8000f2c <HAL_GetTick>
 8004312:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004316:	e00b      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004318:	f7fc fe08 	bl	8000f2c <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b64      	cmp	r3, #100	; 0x64
 8004326:	d903      	bls.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800432e:	e005      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004330:	4b77      	ldr	r3, [pc, #476]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0ed      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800433c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004340:	2b00      	cmp	r3, #0
 8004342:	d173      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004344:	4b71      	ldr	r3, [pc, #452]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004346:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800434c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004350:	4053      	eors	r3, r2
 8004352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004356:	2b00      	cmp	r3, #0
 8004358:	d015      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800435a:	4b6c      	ldr	r3, [pc, #432]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004362:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004366:	4b69      	ldr	r3, [pc, #420]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436a:	4a68      	ldr	r2, [pc, #416]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800436c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004370:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004372:	4b66      	ldr	r3, [pc, #408]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004376:	4a65      	ldr	r2, [pc, #404]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800437e:	4a63      	ldr	r2, [pc, #396]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004384:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800438a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800438e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004392:	d118      	bne.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7fc fdca 	bl	8000f2c <HAL_GetTick>
 8004398:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800439c:	e00d      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439e:	f7fc fdc5 	bl	8000f2c <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80043a8:	1ad2      	subs	r2, r2, r3
 80043aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d903      	bls.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80043b8:	e005      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043ba:	4b54      	ldr	r3, [pc, #336]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0eb      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80043c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d129      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043de:	d10e      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x846>
 80043e0:	4b4a      	ldr	r3, [pc, #296]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80043e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043f0:	091a      	lsrs	r2, r3, #4
 80043f2:	4b48      	ldr	r3, [pc, #288]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	4a45      	ldr	r2, [pc, #276]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043f8:	430b      	orrs	r3, r1
 80043fa:	6113      	str	r3, [r2, #16]
 80043fc:	e005      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x852>
 80043fe:	4b43      	ldr	r3, [pc, #268]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	4a42      	ldr	r2, [pc, #264]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004404:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004408:	6113      	str	r3, [r2, #16]
 800440a:	4b40      	ldr	r3, [pc, #256]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800440c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800440e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004412:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441a:	4a3c      	ldr	r2, [pc, #240]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800441c:	430b      	orrs	r3, r1
 800441e:	6713      	str	r3, [r2, #112]	; 0x70
 8004420:	e008      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004422:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004426:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800442a:	e003      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004430:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f002 0301 	and.w	r3, r2, #1
 8004440:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004444:	2300      	movs	r3, #0
 8004446:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800444a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800444e:	460b      	mov	r3, r1
 8004450:	4313      	orrs	r3, r2
 8004452:	f000 8090 	beq.w	8004576 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004456:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800445a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800445e:	2b28      	cmp	r3, #40	; 0x28
 8004460:	d870      	bhi.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	0800454d 	.word	0x0800454d
 800446c:	08004545 	.word	0x08004545
 8004470:	08004545 	.word	0x08004545
 8004474:	08004545 	.word	0x08004545
 8004478:	08004545 	.word	0x08004545
 800447c:	08004545 	.word	0x08004545
 8004480:	08004545 	.word	0x08004545
 8004484:	08004545 	.word	0x08004545
 8004488:	08004519 	.word	0x08004519
 800448c:	08004545 	.word	0x08004545
 8004490:	08004545 	.word	0x08004545
 8004494:	08004545 	.word	0x08004545
 8004498:	08004545 	.word	0x08004545
 800449c:	08004545 	.word	0x08004545
 80044a0:	08004545 	.word	0x08004545
 80044a4:	08004545 	.word	0x08004545
 80044a8:	0800452f 	.word	0x0800452f
 80044ac:	08004545 	.word	0x08004545
 80044b0:	08004545 	.word	0x08004545
 80044b4:	08004545 	.word	0x08004545
 80044b8:	08004545 	.word	0x08004545
 80044bc:	08004545 	.word	0x08004545
 80044c0:	08004545 	.word	0x08004545
 80044c4:	08004545 	.word	0x08004545
 80044c8:	0800454d 	.word	0x0800454d
 80044cc:	08004545 	.word	0x08004545
 80044d0:	08004545 	.word	0x08004545
 80044d4:	08004545 	.word	0x08004545
 80044d8:	08004545 	.word	0x08004545
 80044dc:	08004545 	.word	0x08004545
 80044e0:	08004545 	.word	0x08004545
 80044e4:	08004545 	.word	0x08004545
 80044e8:	0800454d 	.word	0x0800454d
 80044ec:	08004545 	.word	0x08004545
 80044f0:	08004545 	.word	0x08004545
 80044f4:	08004545 	.word	0x08004545
 80044f8:	08004545 	.word	0x08004545
 80044fc:	08004545 	.word	0x08004545
 8004500:	08004545 	.word	0x08004545
 8004504:	08004545 	.word	0x08004545
 8004508:	0800454d 	.word	0x0800454d
 800450c:	58024400 	.word	0x58024400
 8004510:	58024800 	.word	0x58024800
 8004514:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004518:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800451c:	3308      	adds	r3, #8
 800451e:	2101      	movs	r1, #1
 8004520:	4618      	mov	r0, r3
 8004522:	f000 fd5d 	bl	8004fe0 <RCCEx_PLL2_Config>
 8004526:	4603      	mov	r3, r0
 8004528:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800452c:	e00f      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800452e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004532:	3328      	adds	r3, #40	; 0x28
 8004534:	2101      	movs	r1, #1
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fe04 	bl	8005144 <RCCEx_PLL3_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004542:	e004      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800454a:	e000      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800454c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800454e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10b      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004556:	4bc0      	ldr	r3, [pc, #768]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800455e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004566:	4abc      	ldr	r2, [pc, #752]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004568:	430b      	orrs	r3, r1
 800456a:	6553      	str	r3, [r2, #84]	; 0x54
 800456c:	e003      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004572:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004576:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f002 0302 	and.w	r3, r2, #2
 8004582:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004586:	2300      	movs	r3, #0
 8004588:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800458c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004590:	460b      	mov	r3, r1
 8004592:	4313      	orrs	r3, r2
 8004594:	d043      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800459a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800459e:	2b05      	cmp	r3, #5
 80045a0:	d824      	bhi.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80045a2:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80045a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a8:	080045f5 	.word	0x080045f5
 80045ac:	080045c1 	.word	0x080045c1
 80045b0:	080045d7 	.word	0x080045d7
 80045b4:	080045f5 	.word	0x080045f5
 80045b8:	080045f5 	.word	0x080045f5
 80045bc:	080045f5 	.word	0x080045f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c4:	3308      	adds	r3, #8
 80045c6:	2101      	movs	r1, #1
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fd09 	bl	8004fe0 <RCCEx_PLL2_Config>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80045d4:	e00f      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045da:	3328      	adds	r3, #40	; 0x28
 80045dc:	2101      	movs	r1, #1
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fdb0 	bl	8005144 <RCCEx_PLL3_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80045ea:	e004      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80045f2:	e000      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80045f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10b      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80045fe:	4b96      	ldr	r3, [pc, #600]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004602:	f023 0107 	bic.w	r1, r3, #7
 8004606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800460a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800460e:	4a92      	ldr	r2, [pc, #584]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004610:	430b      	orrs	r3, r1
 8004612:	6553      	str	r3, [r2, #84]	; 0x54
 8004614:	e003      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004616:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800461a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800461e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	f002 0304 	and.w	r3, r2, #4
 800462a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800462e:	2300      	movs	r3, #0
 8004630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004634:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004638:	460b      	mov	r3, r1
 800463a:	4313      	orrs	r3, r2
 800463c:	d043      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800463e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004646:	2b05      	cmp	r3, #5
 8004648:	d824      	bhi.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800464a:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004650:	0800469d 	.word	0x0800469d
 8004654:	08004669 	.word	0x08004669
 8004658:	0800467f 	.word	0x0800467f
 800465c:	0800469d 	.word	0x0800469d
 8004660:	0800469d 	.word	0x0800469d
 8004664:	0800469d 	.word	0x0800469d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800466c:	3308      	adds	r3, #8
 800466e:	2101      	movs	r1, #1
 8004670:	4618      	mov	r0, r3
 8004672:	f000 fcb5 	bl	8004fe0 <RCCEx_PLL2_Config>
 8004676:	4603      	mov	r3, r0
 8004678:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800467c:	e00f      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800467e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004682:	3328      	adds	r3, #40	; 0x28
 8004684:	2101      	movs	r1, #1
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fd5c 	bl	8005144 <RCCEx_PLL3_Config>
 800468c:	4603      	mov	r3, r0
 800468e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004692:	e004      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800469a:	e000      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800469c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800469e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10b      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046a6:	4b6c      	ldr	r3, [pc, #432]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046aa:	f023 0107 	bic.w	r1, r3, #7
 80046ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046b6:	4a68      	ldr	r2, [pc, #416]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046b8:	430b      	orrs	r3, r1
 80046ba:	6593      	str	r3, [r2, #88]	; 0x58
 80046bc:	e003      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ce:	f002 0320 	and.w	r3, r2, #32
 80046d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046d6:	2300      	movs	r3, #0
 80046d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80046e0:	460b      	mov	r3, r1
 80046e2:	4313      	orrs	r3, r2
 80046e4:	d055      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80046e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046f2:	d033      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80046f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046f8:	d82c      	bhi.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80046fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046fe:	d02f      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004704:	d826      	bhi.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004706:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800470a:	d02b      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800470c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004710:	d820      	bhi.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004712:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004716:	d012      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800471c:	d81a      	bhi.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800471e:	2b00      	cmp	r3, #0
 8004720:	d022      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004726:	d115      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004728:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800472c:	3308      	adds	r3, #8
 800472e:	2100      	movs	r1, #0
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fc55 	bl	8004fe0 <RCCEx_PLL2_Config>
 8004736:	4603      	mov	r3, r0
 8004738:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800473c:	e015      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800473e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004742:	3328      	adds	r3, #40	; 0x28
 8004744:	2102      	movs	r1, #2
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fcfc 	bl	8005144 <RCCEx_PLL3_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004752:	e00a      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800475a:	e006      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800475c:	bf00      	nop
 800475e:	e004      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004760:	bf00      	nop
 8004762:	e002      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004764:	bf00      	nop
 8004766:	e000      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800476a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10b      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004772:	4b39      	ldr	r3, [pc, #228]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004776:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800477a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800477e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004782:	4a35      	ldr	r2, [pc, #212]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004784:	430b      	orrs	r3, r1
 8004786:	6553      	str	r3, [r2, #84]	; 0x54
 8004788:	e003      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800478e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800479e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047a2:	2300      	movs	r3, #0
 80047a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80047a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4313      	orrs	r3, r2
 80047b0:	d058      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80047b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047be:	d033      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80047c0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047c4:	d82c      	bhi.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80047c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ca:	d02f      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80047cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d0:	d826      	bhi.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80047d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047d6:	d02b      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80047d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047dc:	d820      	bhi.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80047de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e2:	d012      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80047e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e8:	d81a      	bhi.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d022      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80047ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f2:	d115      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f8:	3308      	adds	r3, #8
 80047fa:	2100      	movs	r1, #0
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fbef 	bl	8004fe0 <RCCEx_PLL2_Config>
 8004802:	4603      	mov	r3, r0
 8004804:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004808:	e015      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800480a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800480e:	3328      	adds	r3, #40	; 0x28
 8004810:	2102      	movs	r1, #2
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fc96 	bl	8005144 <RCCEx_PLL3_Config>
 8004818:	4603      	mov	r3, r0
 800481a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800481e:	e00a      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004826:	e006      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004828:	bf00      	nop
 800482a:	e004      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800482c:	bf00      	nop
 800482e:	e002      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004830:	bf00      	nop
 8004832:	e000      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004836:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10e      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800483e:	4b06      	ldr	r3, [pc, #24]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004842:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800484a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800484e:	4a02      	ldr	r2, [pc, #8]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004850:	430b      	orrs	r3, r1
 8004852:	6593      	str	r3, [r2, #88]	; 0x58
 8004854:	e006      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004856:	bf00      	nop
 8004858:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004860:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004874:	2300      	movs	r3, #0
 8004876:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800487a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800487e:	460b      	mov	r3, r1
 8004880:	4313      	orrs	r3, r2
 8004882:	d055      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004888:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800488c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004890:	d033      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004892:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004896:	d82c      	bhi.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800489c:	d02f      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800489e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a2:	d826      	bhi.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80048a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048a8:	d02b      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80048aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048ae:	d820      	bhi.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80048b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048b4:	d012      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80048b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048ba:	d81a      	bhi.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d022      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80048c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c4:	d115      	bne.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ca:	3308      	adds	r3, #8
 80048cc:	2100      	movs	r1, #0
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fb86 	bl	8004fe0 <RCCEx_PLL2_Config>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80048da:	e015      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e0:	3328      	adds	r3, #40	; 0x28
 80048e2:	2102      	movs	r1, #2
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fc2d 	bl	8005144 <RCCEx_PLL3_Config>
 80048ea:	4603      	mov	r3, r0
 80048ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80048f0:	e00a      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80048f8:	e006      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80048fa:	bf00      	nop
 80048fc:	e004      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80048fe:	bf00      	nop
 8004900:	e002      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004902:	bf00      	nop
 8004904:	e000      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004906:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004908:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004910:	4ba1      	ldr	r3, [pc, #644]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004914:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800491c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004920:	4a9d      	ldr	r2, [pc, #628]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004922:	430b      	orrs	r3, r1
 8004924:	6593      	str	r3, [r2, #88]	; 0x58
 8004926:	e003      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004928:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800492c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f002 0308 	and.w	r3, r2, #8
 800493c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004940:	2300      	movs	r3, #0
 8004942:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004946:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800494a:	460b      	mov	r3, r1
 800494c:	4313      	orrs	r3, r2
 800494e:	d01e      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495c:	d10c      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800495e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004962:	3328      	adds	r3, #40	; 0x28
 8004964:	2102      	movs	r1, #2
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fbec 	bl	8005144 <RCCEx_PLL3_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004978:	4b87      	ldr	r3, [pc, #540]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800497a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004988:	4a83      	ldr	r2, [pc, #524]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800498a:	430b      	orrs	r3, r1
 800498c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800498e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004996:	f002 0310 	and.w	r3, r2, #16
 800499a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800499e:	2300      	movs	r3, #0
 80049a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80049a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80049a8:	460b      	mov	r3, r1
 80049aa:	4313      	orrs	r3, r2
 80049ac:	d01e      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80049ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ba:	d10c      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c0:	3328      	adds	r3, #40	; 0x28
 80049c2:	2102      	movs	r1, #2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fbbd 	bl	8005144 <RCCEx_PLL3_Config>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049d6:	4b70      	ldr	r3, [pc, #448]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049e6:	4a6c      	ldr	r2, [pc, #432]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049e8:	430b      	orrs	r3, r1
 80049ea:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80049f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049fc:	2300      	movs	r3, #0
 80049fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a02:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004a06:	460b      	mov	r3, r1
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	d03e      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a18:	d022      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004a1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a1e:	d81b      	bhi.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a28:	d00b      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004a2a:	e015      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a30:	3308      	adds	r3, #8
 8004a32:	2100      	movs	r1, #0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 fad3 	bl	8004fe0 <RCCEx_PLL2_Config>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a40:	e00f      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a46:	3328      	adds	r3, #40	; 0x28
 8004a48:	2102      	movs	r1, #2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fb7a 	bl	8005144 <RCCEx_PLL3_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a56:	e004      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a5e:	e000      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10b      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a6a:	4b4b      	ldr	r3, [pc, #300]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a7a:	4a47      	ldr	r2, [pc, #284]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a80:	e003      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a86:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a92:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004a96:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a98:	2300      	movs	r3, #0
 8004a9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a9c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	d03b      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ab2:	d01f      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004ab4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ab8:	d818      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004abe:	d003      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004ac0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ac4:	d007      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004ac6:	e011      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ac8:	4b33      	ldr	r3, [pc, #204]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	4a32      	ldr	r2, [pc, #200]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ad2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004ad4:	e00f      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ada:	3328      	adds	r3, #40	; 0x28
 8004adc:	2101      	movs	r1, #1
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fb30 	bl	8005144 <RCCEx_PLL3_Config>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004aea:	e004      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004af2:	e000      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004af6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10b      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004afe:	4b26      	ldr	r3, [pc, #152]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b02:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0e:	4a22      	ldr	r2, [pc, #136]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b10:	430b      	orrs	r3, r1
 8004b12:	6553      	str	r3, [r2, #84]	; 0x54
 8004b14:	e003      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b1a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b26:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004b2a:	673b      	str	r3, [r7, #112]	; 0x70
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	677b      	str	r3, [r7, #116]	; 0x74
 8004b30:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004b34:	460b      	mov	r3, r1
 8004b36:	4313      	orrs	r3, r2
 8004b38:	d034      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b48:	d007      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004b4a:	e011      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b4c:	4b12      	ldr	r3, [pc, #72]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	4a11      	ldr	r2, [pc, #68]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b58:	e00e      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b5e:	3308      	adds	r3, #8
 8004b60:	2102      	movs	r1, #2
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fa3c 	bl	8004fe0 <RCCEx_PLL2_Config>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b6e:	e003      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10d      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b8e:	4a02      	ldr	r2, [pc, #8]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b90:	430b      	orrs	r3, r1
 8004b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b94:	e006      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004b96:	bf00      	nop
 8004b98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ba0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bac:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004bb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bb6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	d00c      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc4:	3328      	adds	r3, #40	; 0x28
 8004bc6:	2102      	movs	r1, #2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 fabb 	bl	8005144 <RCCEx_PLL3_Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004be6:	663b      	str	r3, [r7, #96]	; 0x60
 8004be8:	2300      	movs	r3, #0
 8004bea:	667b      	str	r3, [r7, #100]	; 0x64
 8004bec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	d038      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c02:	d018      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004c04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c08:	d811      	bhi.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c0e:	d014      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c14:	d80b      	bhi.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d011      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c1e:	d106      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c20:	4bc3      	ldr	r3, [pc, #780]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c24:	4ac2      	ldr	r2, [pc, #776]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c2c:	e008      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c34:	e004      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004c36:	bf00      	nop
 8004c38:	e002      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004c3a:	bf00      	nop
 8004c3c:	e000      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10b      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c48:	4bb9      	ldr	r3, [pc, #740]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c58:	4ab5      	ldr	r2, [pc, #724]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c5a:	430b      	orrs	r3, r1
 8004c5c:	6553      	str	r3, [r2, #84]	; 0x54
 8004c5e:	e003      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c64:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004c74:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c76:	2300      	movs	r3, #0
 8004c78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4313      	orrs	r3, r2
 8004c82:	d009      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c84:	4baa      	ldr	r3, [pc, #680]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004c8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c92:	4aa7      	ldr	r2, [pc, #668]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c94:	430b      	orrs	r3, r1
 8004c96:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004ca4:	653b      	str	r3, [r7, #80]	; 0x50
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	657b      	str	r3, [r7, #84]	; 0x54
 8004caa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	d009      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cb4:	4b9e      	ldr	r3, [pc, #632]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc2:	4a9b      	ldr	r2, [pc, #620]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004cd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cda:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	d009      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004ce4:	4b92      	ldr	r3, [pc, #584]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce8:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf2:	4a8f      	ldr	r2, [pc, #572]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004d04:	643b      	str	r3, [r7, #64]	; 0x40
 8004d06:	2300      	movs	r3, #0
 8004d08:	647b      	str	r3, [r7, #68]	; 0x44
 8004d0a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4313      	orrs	r3, r2
 8004d12:	d00e      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d14:	4b86      	ldr	r3, [pc, #536]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	4a85      	ldr	r2, [pc, #532]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d1e:	6113      	str	r3, [r2, #16]
 8004d20:	4b83      	ldr	r3, [pc, #524]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d22:	6919      	ldr	r1, [r3, #16]
 8004d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004d2c:	4a80      	ldr	r2, [pc, #512]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d2e:	430b      	orrs	r3, r1
 8004d30:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004d3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d40:	2300      	movs	r3, #0
 8004d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d44:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	d009      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d4e:	4b78      	ldr	r3, [pc, #480]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d52:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5c:	4a74      	ldr	r2, [pc, #464]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d5e:	430b      	orrs	r3, r1
 8004d60:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004d6e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d70:	2300      	movs	r3, #0
 8004d72:	637b      	str	r3, [r7, #52]	; 0x34
 8004d74:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	d00a      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d7e:	4b6c      	ldr	r3, [pc, #432]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d82:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d8e:	4a68      	ldr	r2, [pc, #416]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d90:	430b      	orrs	r3, r1
 8004d92:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004da6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004daa:	460b      	mov	r3, r1
 8004dac:	4313      	orrs	r3, r2
 8004dae:	d011      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004db4:	3308      	adds	r3, #8
 8004db6:	2100      	movs	r1, #0
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 f911 	bl	8004fe0 <RCCEx_PLL2_Config>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004dc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dcc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004dd0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ddc:	2100      	movs	r1, #0
 8004dde:	6239      	str	r1, [r7, #32]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
 8004de6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004dea:	460b      	mov	r3, r1
 8004dec:	4313      	orrs	r3, r2
 8004dee:	d011      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df4:	3308      	adds	r3, #8
 8004df6:	2101      	movs	r1, #1
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 f8f1 	bl	8004fe0 <RCCEx_PLL2_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004e04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e10:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	61b9      	str	r1, [r7, #24]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	61fb      	str	r3, [r7, #28]
 8004e26:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	d011      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e34:	3308      	adds	r3, #8
 8004e36:	2102      	movs	r1, #2
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 f8d1 	bl	8004fe0 <RCCEx_PLL2_Config>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004e44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e50:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	6139      	str	r1, [r7, #16]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	d011      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e74:	3328      	adds	r3, #40	; 0x28
 8004e76:	2100      	movs	r1, #0
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 f963 	bl	8005144 <RCCEx_PLL3_Config>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004e84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	f003 0310 	and.w	r3, r3, #16
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4313      	orrs	r3, r2
 8004eae:	d011      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eb4:	3328      	adds	r3, #40	; 0x28
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 f943 	bl	8005144 <RCCEx_PLL3_Config>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004ec4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ecc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ed0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	2100      	movs	r1, #0
 8004ede:	6039      	str	r1, [r7, #0]
 8004ee0:	f003 0320 	and.w	r3, r3, #32
 8004ee4:	607b      	str	r3, [r7, #4]
 8004ee6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004eea:	460b      	mov	r3, r1
 8004eec:	4313      	orrs	r3, r2
 8004eee:	d011      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef4:	3328      	adds	r3, #40	; 0x28
 8004ef6:	2102      	movs	r1, #2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 f923 	bl	8005144 <RCCEx_PLL3_Config>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004f04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f10:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004f14:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	e000      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f2e:	bf00      	nop
 8004f30:	58024400 	.word	0x58024400

08004f34 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8004f3c:	4b26      	ldr	r3, [pc, #152]	; (8004fd8 <HAL_RCCEx_CRSConfig+0xa4>)
 8004f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f42:	4a25      	ldr	r2, [pc, #148]	; (8004fd8 <HAL_RCCEx_CRSConfig+0xa4>)
 8004f44:	f043 0302 	orr.w	r3, r3, #2
 8004f48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8004f4c:	4b22      	ldr	r3, [pc, #136]	; (8004fd8 <HAL_RCCEx_CRSConfig+0xa4>)
 8004f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f52:	4a21      	ldr	r2, [pc, #132]	; (8004fd8 <HAL_RCCEx_CRSConfig+0xa4>)
 8004f54:	f023 0302 	bic.w	r3, r3, #2
 8004f58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8004f5c:	f7fc f816 	bl	8000f8c <HAL_GetREVID>
 8004f60:	4603      	mov	r3, r0
 8004f62:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d80b      	bhi.n	8004f82 <HAL_RCCEx_CRSConfig+0x4e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f72:	d106      	bne.n	8004f82 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	e008      	b.n	8004f94 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	041b      	lsls	r3, r3, #16
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8004faa:	4a0c      	ldr	r2, [pc, #48]	; (8004fdc <HAL_RCCEx_CRSConfig+0xa8>)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8004fb0:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <HAL_RCCEx_CRSConfig+0xa8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	4907      	ldr	r1, [pc, #28]	; (8004fdc <HAL_RCCEx_CRSConfig+0xa8>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <HAL_RCCEx_CRSConfig+0xa8>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a04      	ldr	r2, [pc, #16]	; (8004fdc <HAL_RCCEx_CRSConfig+0xa8>)
 8004fca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004fce:	6013      	str	r3, [r2, #0]
}
 8004fd0:	bf00      	nop
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	58024400 	.word	0x58024400
 8004fdc:	40008400 	.word	0x40008400

08004fe0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fee:	4b53      	ldr	r3, [pc, #332]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d101      	bne.n	8004ffe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e099      	b.n	8005132 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ffe:	4b4f      	ldr	r3, [pc, #316]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a4e      	ldr	r2, [pc, #312]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8005004:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800500a:	f7fb ff8f 	bl	8000f2c <HAL_GetTick>
 800500e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005010:	e008      	b.n	8005024 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005012:	f7fb ff8b 	bl	8000f2c <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e086      	b.n	8005132 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005024:	4b45      	ldr	r3, [pc, #276]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1f0      	bne.n	8005012 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005030:	4b42      	ldr	r3, [pc, #264]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8005032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005034:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	031b      	lsls	r3, r3, #12
 800503e:	493f      	ldr	r1, [pc, #252]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8005040:	4313      	orrs	r3, r2
 8005042:	628b      	str	r3, [r1, #40]	; 0x28
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	3b01      	subs	r3, #1
 800504a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	3b01      	subs	r3, #1
 8005054:	025b      	lsls	r3, r3, #9
 8005056:	b29b      	uxth	r3, r3
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	3b01      	subs	r3, #1
 8005060:	041b      	lsls	r3, r3, #16
 8005062:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	3b01      	subs	r3, #1
 800506e:	061b      	lsls	r3, r3, #24
 8005070:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005074:	4931      	ldr	r1, [pc, #196]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8005076:	4313      	orrs	r3, r2
 8005078:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800507a:	4b30      	ldr	r3, [pc, #192]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	492d      	ldr	r1, [pc, #180]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8005088:	4313      	orrs	r3, r2
 800508a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800508c:	4b2b      	ldr	r3, [pc, #172]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	f023 0220 	bic.w	r2, r3, #32
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	4928      	ldr	r1, [pc, #160]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 800509a:	4313      	orrs	r3, r2
 800509c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800509e:	4b27      	ldr	r3, [pc, #156]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a2:	4a26      	ldr	r2, [pc, #152]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050a4:	f023 0310 	bic.w	r3, r3, #16
 80050a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80050aa:	4b24      	ldr	r3, [pc, #144]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050ae:	4b24      	ldr	r3, [pc, #144]	; (8005140 <RCCEx_PLL2_Config+0x160>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	69d2      	ldr	r2, [r2, #28]
 80050b6:	00d2      	lsls	r2, r2, #3
 80050b8:	4920      	ldr	r1, [pc, #128]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80050be:	4b1f      	ldr	r3, [pc, #124]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	4a1e      	ldr	r2, [pc, #120]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050c4:	f043 0310 	orr.w	r3, r3, #16
 80050c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d106      	bne.n	80050de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80050d0:	4b1a      	ldr	r3, [pc, #104]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	4a19      	ldr	r2, [pc, #100]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050dc:	e00f      	b.n	80050fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d106      	bne.n	80050f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80050e4:	4b15      	ldr	r3, [pc, #84]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	4a14      	ldr	r2, [pc, #80]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050f0:	e005      	b.n	80050fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80050f2:	4b12      	ldr	r3, [pc, #72]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	4a11      	ldr	r2, [pc, #68]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 80050f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80050fe:	4b0f      	ldr	r3, [pc, #60]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a0e      	ldr	r2, [pc, #56]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8005104:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005108:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800510a:	f7fb ff0f 	bl	8000f2c <HAL_GetTick>
 800510e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005110:	e008      	b.n	8005124 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005112:	f7fb ff0b 	bl	8000f2c <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e006      	b.n	8005132 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <RCCEx_PLL2_Config+0x15c>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f0      	beq.n	8005112 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005130:	7bfb      	ldrb	r3, [r7, #15]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	58024400 	.word	0x58024400
 8005140:	ffff0007 	.word	0xffff0007

08005144 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005152:	4b53      	ldr	r3, [pc, #332]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	2b03      	cmp	r3, #3
 800515c:	d101      	bne.n	8005162 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e099      	b.n	8005296 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005162:	4b4f      	ldr	r3, [pc, #316]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a4e      	ldr	r2, [pc, #312]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800516c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800516e:	f7fb fedd 	bl	8000f2c <HAL_GetTick>
 8005172:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005174:	e008      	b.n	8005188 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005176:	f7fb fed9 	bl	8000f2c <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e086      	b.n	8005296 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005188:	4b45      	ldr	r3, [pc, #276]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1f0      	bne.n	8005176 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005194:	4b42      	ldr	r3, [pc, #264]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005198:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	051b      	lsls	r3, r3, #20
 80051a2:	493f      	ldr	r1, [pc, #252]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	628b      	str	r3, [r1, #40]	; 0x28
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	025b      	lsls	r3, r3, #9
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	041b      	lsls	r3, r3, #16
 80051c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	061b      	lsls	r3, r3, #24
 80051d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80051d8:	4931      	ldr	r1, [pc, #196]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051de:	4b30      	ldr	r3, [pc, #192]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	492d      	ldr	r1, [pc, #180]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80051f0:	4b2b      	ldr	r3, [pc, #172]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	4928      	ldr	r1, [pc, #160]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005202:	4b27      	ldr	r3, [pc, #156]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	4a26      	ldr	r2, [pc, #152]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800520c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800520e:	4b24      	ldr	r3, [pc, #144]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005212:	4b24      	ldr	r3, [pc, #144]	; (80052a4 <RCCEx_PLL3_Config+0x160>)
 8005214:	4013      	ands	r3, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	69d2      	ldr	r2, [r2, #28]
 800521a:	00d2      	lsls	r2, r2, #3
 800521c:	4920      	ldr	r1, [pc, #128]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 800521e:	4313      	orrs	r3, r2
 8005220:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005222:	4b1f      	ldr	r3, [pc, #124]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005226:	4a1e      	ldr	r2, [pc, #120]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800522c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d106      	bne.n	8005242 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005234:	4b1a      	ldr	r3, [pc, #104]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	4a19      	ldr	r2, [pc, #100]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 800523a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800523e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005240:	e00f      	b.n	8005262 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d106      	bne.n	8005256 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005248:	4b15      	ldr	r3, [pc, #84]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	4a14      	ldr	r2, [pc, #80]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 800524e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005252:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005254:	e005      	b.n	8005262 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005256:	4b12      	ldr	r3, [pc, #72]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	4a11      	ldr	r2, [pc, #68]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 800525c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005260:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005262:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a0e      	ldr	r2, [pc, #56]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 8005268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800526c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800526e:	f7fb fe5d 	bl	8000f2c <HAL_GetTick>
 8005272:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005274:	e008      	b.n	8005288 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005276:	f7fb fe59 	bl	8000f2c <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e006      	b.n	8005296 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <RCCEx_PLL3_Config+0x15c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0f0      	beq.n	8005276 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005294:	7bfb      	ldrb	r3, [r7, #15]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	58024400 	.word	0x58024400
 80052a4:	ffff0007 	.word	0xffff0007

080052a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052a8:	b084      	sub	sp, #16
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	f107 001c 	add.w	r0, r7, #28
 80052b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052ba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d121      	bne.n	8005306 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	4b2c      	ldr	r3, [pc, #176]	; (8005384 <USB_CoreInit+0xdc>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d105      	bne.n	80052fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f001 faf6 	bl	80068ec <USB_CoreReset>
 8005300:	4603      	mov	r3, r0
 8005302:	73fb      	strb	r3, [r7, #15]
 8005304:	e01b      	b.n	800533e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f001 faea 	bl	80068ec <USB_CoreReset>
 8005318:	4603      	mov	r3, r0
 800531a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800531c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005320:	2b00      	cmp	r3, #0
 8005322:	d106      	bne.n	8005332 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	639a      	str	r2, [r3, #56]	; 0x38
 8005330:	e005      	b.n	800533e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800533e:	7fbb      	ldrb	r3, [r7, #30]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d116      	bne.n	8005372 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005348:	b29a      	uxth	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005352:	4b0d      	ldr	r3, [pc, #52]	; (8005388 <USB_CoreInit+0xe0>)
 8005354:	4313      	orrs	r3, r2
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f043 0206 	orr.w	r2, r3, #6
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f043 0220 	orr.w	r2, r3, #32
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005372:	7bfb      	ldrb	r3, [r7, #15]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800537e:	b004      	add	sp, #16
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	ffbdffbf 	.word	0xffbdffbf
 8005388:	03ee0000 	.word	0x03ee0000

0800538c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	4613      	mov	r3, r2
 8005398:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d165      	bne.n	800546c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	4a41      	ldr	r2, [pc, #260]	; (80054a8 <USB_SetTurnaroundTime+0x11c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d906      	bls.n	80053b6 <USB_SetTurnaroundTime+0x2a>
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	4a40      	ldr	r2, [pc, #256]	; (80054ac <USB_SetTurnaroundTime+0x120>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d202      	bcs.n	80053b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80053b0:	230f      	movs	r3, #15
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	e062      	b.n	800547c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	4a3c      	ldr	r2, [pc, #240]	; (80054ac <USB_SetTurnaroundTime+0x120>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d306      	bcc.n	80053cc <USB_SetTurnaroundTime+0x40>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	4a3b      	ldr	r2, [pc, #236]	; (80054b0 <USB_SetTurnaroundTime+0x124>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d202      	bcs.n	80053cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80053c6:	230e      	movs	r3, #14
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	e057      	b.n	800547c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4a38      	ldr	r2, [pc, #224]	; (80054b0 <USB_SetTurnaroundTime+0x124>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d306      	bcc.n	80053e2 <USB_SetTurnaroundTime+0x56>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4a37      	ldr	r2, [pc, #220]	; (80054b4 <USB_SetTurnaroundTime+0x128>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d202      	bcs.n	80053e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80053dc:	230d      	movs	r3, #13
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	e04c      	b.n	800547c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	4a33      	ldr	r2, [pc, #204]	; (80054b4 <USB_SetTurnaroundTime+0x128>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d306      	bcc.n	80053f8 <USB_SetTurnaroundTime+0x6c>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	4a32      	ldr	r2, [pc, #200]	; (80054b8 <USB_SetTurnaroundTime+0x12c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d802      	bhi.n	80053f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80053f2:	230c      	movs	r3, #12
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	e041      	b.n	800547c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4a2f      	ldr	r2, [pc, #188]	; (80054b8 <USB_SetTurnaroundTime+0x12c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d906      	bls.n	800540e <USB_SetTurnaroundTime+0x82>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4a2e      	ldr	r2, [pc, #184]	; (80054bc <USB_SetTurnaroundTime+0x130>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d802      	bhi.n	800540e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005408:	230b      	movs	r3, #11
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	e036      	b.n	800547c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4a2a      	ldr	r2, [pc, #168]	; (80054bc <USB_SetTurnaroundTime+0x130>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d906      	bls.n	8005424 <USB_SetTurnaroundTime+0x98>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	4a29      	ldr	r2, [pc, #164]	; (80054c0 <USB_SetTurnaroundTime+0x134>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d802      	bhi.n	8005424 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800541e:	230a      	movs	r3, #10
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	e02b      	b.n	800547c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4a26      	ldr	r2, [pc, #152]	; (80054c0 <USB_SetTurnaroundTime+0x134>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d906      	bls.n	800543a <USB_SetTurnaroundTime+0xae>
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	4a25      	ldr	r2, [pc, #148]	; (80054c4 <USB_SetTurnaroundTime+0x138>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d202      	bcs.n	800543a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005434:	2309      	movs	r3, #9
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	e020      	b.n	800547c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	4a21      	ldr	r2, [pc, #132]	; (80054c4 <USB_SetTurnaroundTime+0x138>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d306      	bcc.n	8005450 <USB_SetTurnaroundTime+0xc4>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	4a20      	ldr	r2, [pc, #128]	; (80054c8 <USB_SetTurnaroundTime+0x13c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d802      	bhi.n	8005450 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800544a:	2308      	movs	r3, #8
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	e015      	b.n	800547c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4a1d      	ldr	r2, [pc, #116]	; (80054c8 <USB_SetTurnaroundTime+0x13c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d906      	bls.n	8005466 <USB_SetTurnaroundTime+0xda>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4a1c      	ldr	r2, [pc, #112]	; (80054cc <USB_SetTurnaroundTime+0x140>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d202      	bcs.n	8005466 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005460:	2307      	movs	r3, #7
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	e00a      	b.n	800547c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005466:	2306      	movs	r3, #6
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	e007      	b.n	800547c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800546c:	79fb      	ldrb	r3, [r7, #7]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d102      	bne.n	8005478 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005472:	2309      	movs	r3, #9
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	e001      	b.n	800547c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005478:	2309      	movs	r3, #9
 800547a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	029b      	lsls	r3, r3, #10
 8005490:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005494:	431a      	orrs	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	371c      	adds	r7, #28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	00d8acbf 	.word	0x00d8acbf
 80054ac:	00e4e1c0 	.word	0x00e4e1c0
 80054b0:	00f42400 	.word	0x00f42400
 80054b4:	01067380 	.word	0x01067380
 80054b8:	011a499f 	.word	0x011a499f
 80054bc:	01312cff 	.word	0x01312cff
 80054c0:	014ca43f 	.word	0x014ca43f
 80054c4:	016e3600 	.word	0x016e3600
 80054c8:	01a6ab1f 	.word	0x01a6ab1f
 80054cc:	01e84800 	.word	0x01e84800

080054d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f043 0201 	orr.w	r2, r3, #1
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f023 0201 	bic.w	r2, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d115      	bne.n	8005562 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005542:	200a      	movs	r0, #10
 8005544:	f7fb fcfe 	bl	8000f44 <HAL_Delay>
      ms += 10U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	330a      	adds	r3, #10
 800554c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f001 f93b 	bl	80067ca <USB_GetMode>
 8005554:	4603      	mov	r3, r0
 8005556:	2b01      	cmp	r3, #1
 8005558:	d01e      	beq.n	8005598 <USB_SetCurrentMode+0x84>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2bc7      	cmp	r3, #199	; 0xc7
 800555e:	d9f0      	bls.n	8005542 <USB_SetCurrentMode+0x2e>
 8005560:	e01a      	b.n	8005598 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005562:	78fb      	ldrb	r3, [r7, #3]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d115      	bne.n	8005594 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005574:	200a      	movs	r0, #10
 8005576:	f7fb fce5 	bl	8000f44 <HAL_Delay>
      ms += 10U;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	330a      	adds	r3, #10
 800557e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f001 f922 	bl	80067ca <USB_GetMode>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d005      	beq.n	8005598 <USB_SetCurrentMode+0x84>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2bc7      	cmp	r3, #199	; 0xc7
 8005590:	d9f0      	bls.n	8005574 <USB_SetCurrentMode+0x60>
 8005592:	e001      	b.n	8005598 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e005      	b.n	80055a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2bc8      	cmp	r3, #200	; 0xc8
 800559c:	d101      	bne.n	80055a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055ac:	b084      	sub	sp, #16
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b086      	sub	sp, #24
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80055ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80055c6:	2300      	movs	r3, #0
 80055c8:	613b      	str	r3, [r7, #16]
 80055ca:	e009      	b.n	80055e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	3340      	adds	r3, #64	; 0x40
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	2200      	movs	r2, #0
 80055d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	3301      	adds	r3, #1
 80055de:	613b      	str	r3, [r7, #16]
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	2b0e      	cmp	r3, #14
 80055e4:	d9f2      	bls.n	80055cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d11c      	bne.n	8005628 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055fc:	f043 0302 	orr.w	r3, r3, #2
 8005600:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005606:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	e005      	b.n	8005634 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800563a:	461a      	mov	r2, r3
 800563c:	2300      	movs	r3, #0
 800563e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005640:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005644:	2b01      	cmp	r3, #1
 8005646:	d10d      	bne.n	8005664 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800564c:	2b00      	cmp	r3, #0
 800564e:	d104      	bne.n	800565a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005650:	2100      	movs	r1, #0
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f968 	bl	8005928 <USB_SetDevSpeed>
 8005658:	e008      	b.n	800566c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800565a:	2101      	movs	r1, #1
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f963 	bl	8005928 <USB_SetDevSpeed>
 8005662:	e003      	b.n	800566c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005664:	2103      	movs	r1, #3
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f95e 	bl	8005928 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800566c:	2110      	movs	r1, #16
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f8fa 	bl	8005868 <USB_FlushTxFifo>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f924 	bl	80058cc <USB_FlushRxFifo>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005694:	461a      	mov	r2, r3
 8005696:	2300      	movs	r3, #0
 8005698:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a0:	461a      	mov	r2, r3
 80056a2:	2300      	movs	r3, #0
 80056a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ac:	461a      	mov	r2, r3
 80056ae:	2300      	movs	r3, #0
 80056b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056b2:	2300      	movs	r3, #0
 80056b4:	613b      	str	r3, [r7, #16]
 80056b6:	e043      	b.n	8005740 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056ce:	d118      	bne.n	8005702 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10a      	bne.n	80056ec <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e2:	461a      	mov	r2, r3
 80056e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	e013      	b.n	8005714 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f8:	461a      	mov	r2, r3
 80056fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	e008      	b.n	8005714 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570e:	461a      	mov	r2, r3
 8005710:	2300      	movs	r3, #0
 8005712:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005720:	461a      	mov	r2, r3
 8005722:	2300      	movs	r3, #0
 8005724:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005732:	461a      	mov	r2, r3
 8005734:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005738:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	3301      	adds	r3, #1
 800573e:	613b      	str	r3, [r7, #16]
 8005740:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005744:	461a      	mov	r2, r3
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	4293      	cmp	r3, r2
 800574a:	d3b5      	bcc.n	80056b8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800574c:	2300      	movs	r3, #0
 800574e:	613b      	str	r3, [r7, #16]
 8005750:	e043      	b.n	80057da <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005768:	d118      	bne.n	800579c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10a      	bne.n	8005786 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577c:	461a      	mov	r2, r3
 800577e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	e013      	b.n	80057ae <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005792:	461a      	mov	r2, r3
 8005794:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	e008      	b.n	80057ae <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a8:	461a      	mov	r2, r3
 80057aa:	2300      	movs	r3, #0
 80057ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ba:	461a      	mov	r2, r3
 80057bc:	2300      	movs	r3, #0
 80057be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057cc:	461a      	mov	r2, r3
 80057ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	3301      	adds	r3, #1
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057de:	461a      	mov	r2, r3
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d3b5      	bcc.n	8005752 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005806:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005808:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800580c:	2b00      	cmp	r3, #0
 800580e:	d105      	bne.n	800581c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	f043 0210 	orr.w	r2, r3, #16
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699a      	ldr	r2, [r3, #24]
 8005820:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <USB_DevInit+0x2b4>)
 8005822:	4313      	orrs	r3, r2
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005828:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	f043 0208 	orr.w	r2, r3, #8
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800583c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005840:	2b01      	cmp	r3, #1
 8005842:	d105      	bne.n	8005850 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699a      	ldr	r2, [r3, #24]
 8005848:	4b06      	ldr	r3, [pc, #24]	; (8005864 <USB_DevInit+0x2b8>)
 800584a:	4313      	orrs	r3, r2
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005850:	7dfb      	ldrb	r3, [r7, #23]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800585c:	b004      	add	sp, #16
 800585e:	4770      	bx	lr
 8005860:	803c3800 	.word	0x803c3800
 8005864:	40000004 	.word	0x40000004

08005868 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3301      	adds	r3, #1
 800587a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005882:	d901      	bls.n	8005888 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e01b      	b.n	80058c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	daf2      	bge.n	8005876 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	019b      	lsls	r3, r3, #6
 8005898:	f043 0220 	orr.w	r2, r3, #32
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3301      	adds	r3, #1
 80058a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80058ac:	d901      	bls.n	80058b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e006      	b.n	80058c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d0f0      	beq.n	80058a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3301      	adds	r3, #1
 80058dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80058e4:	d901      	bls.n	80058ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e018      	b.n	800591c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	daf2      	bge.n	80058d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2210      	movs	r2, #16
 80058fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3301      	adds	r3, #1
 8005900:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005908:	d901      	bls.n	800590e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e006      	b.n	800591c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0310 	and.w	r3, r3, #16
 8005916:	2b10      	cmp	r3, #16
 8005918:	d0f0      	beq.n	80058fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	460b      	mov	r3, r1
 8005932:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	68f9      	ldr	r1, [r7, #12]
 8005944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005948:	4313      	orrs	r3, r2
 800594a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800595a:	b480      	push	{r7}
 800595c:	b087      	sub	sp, #28
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 0306 	and.w	r3, r3, #6
 8005972:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d102      	bne.n	8005980 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800597a:	2300      	movs	r3, #0
 800597c:	75fb      	strb	r3, [r7, #23]
 800597e:	e00a      	b.n	8005996 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d002      	beq.n	800598c <USB_GetDevSpeed+0x32>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b06      	cmp	r3, #6
 800598a:	d102      	bne.n	8005992 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800598c:	2302      	movs	r3, #2
 800598e:	75fb      	strb	r3, [r7, #23]
 8005990:	e001      	b.n	8005996 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005992:	230f      	movs	r3, #15
 8005994:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005996:	7dfb      	ldrb	r3, [r7, #23]
}
 8005998:	4618      	mov	r0, r3
 800599a:	371c      	adds	r7, #28
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d139      	bne.n	8005a34 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	2101      	movs	r1, #1
 80059d2:	fa01 f303 	lsl.w	r3, r1, r3
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	68f9      	ldr	r1, [r7, #12]
 80059da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059de:	4313      	orrs	r3, r2
 80059e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d153      	bne.n	8005aa0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	791b      	ldrb	r3, [r3, #4]
 8005a12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	059b      	lsls	r3, r3, #22
 8005a1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	0159      	lsls	r1, r3, #5
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	440b      	add	r3, r1
 8005a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	4b20      	ldr	r3, [pc, #128]	; (8005ab0 <USB_ActivateEndpoint+0x10c>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	600b      	str	r3, [r1, #0]
 8005a32:	e035      	b.n	8005aa0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3a:	69da      	ldr	r2, [r3, #28]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	2101      	movs	r1, #1
 8005a46:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4a:	041b      	lsls	r3, r3, #16
 8005a4c:	68f9      	ldr	r1, [r7, #12]
 8005a4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a52:	4313      	orrs	r3, r2
 8005a54:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d119      	bne.n	8005aa0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	791b      	ldrb	r3, [r3, #4]
 8005a86:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	0159      	lsls	r1, r3, #5
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	440b      	add	r3, r1
 8005a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4b05      	ldr	r3, [pc, #20]	; (8005ab0 <USB_ActivateEndpoint+0x10c>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	10008000 	.word	0x10008000

08005ab4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	785b      	ldrb	r3, [r3, #1]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d161      	bne.n	8005b94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ae6:	d11f      	bne.n	8005b28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	0151      	lsls	r1, r2, #5
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	440a      	add	r2, r1
 8005afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	f003 030f 	and.w	r3, r3, #15
 8005b38:	2101      	movs	r1, #1
 8005b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	43db      	mvns	r3, r3
 8005b42:	68f9      	ldr	r1, [r7, #12]
 8005b44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b48:	4013      	ands	r3, r2
 8005b4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b52:	69da      	ldr	r2, [r3, #28]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	f003 030f 	and.w	r3, r3, #15
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	43db      	mvns	r3, r3
 8005b66:	68f9      	ldr	r1, [r7, #12]
 8005b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	0159      	lsls	r1, r3, #5
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	440b      	add	r3, r1
 8005b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4b35      	ldr	r3, [pc, #212]	; (8005c64 <USB_DeactivateEndpoint+0x1b0>)
 8005b8e:	4013      	ands	r3, r2
 8005b90:	600b      	str	r3, [r1, #0]
 8005b92:	e060      	b.n	8005c56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005baa:	d11f      	bne.n	8005bec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	0151      	lsls	r1, r2, #5
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	440a      	add	r2, r1
 8005bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	0151      	lsls	r1, r2, #5
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	440a      	add	r2, r1
 8005be2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	f003 030f 	and.w	r3, r3, #15
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005c02:	041b      	lsls	r3, r3, #16
 8005c04:	43db      	mvns	r3, r3
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c16:	69da      	ldr	r2, [r3, #28]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	2101      	movs	r1, #1
 8005c22:	fa01 f303 	lsl.w	r3, r1, r3
 8005c26:	041b      	lsls	r3, r3, #16
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	68f9      	ldr	r1, [r7, #12]
 8005c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c30:	4013      	ands	r3, r2
 8005c32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	0159      	lsls	r1, r3, #5
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	440b      	add	r3, r1
 8005c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <USB_DeactivateEndpoint+0x1b4>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	ec337800 	.word	0xec337800
 8005c68:	eff37800 	.word	0xeff37800

08005c6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b08a      	sub	sp, #40	; 0x28
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	4613      	mov	r3, r2
 8005c78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	785b      	ldrb	r3, [r3, #1]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	f040 8181 	bne.w	8005f90 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d132      	bne.n	8005cfc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	0159      	lsls	r1, r3, #5
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	440b      	add	r3, r1
 8005cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4ba5      	ldr	r3, [pc, #660]	; (8005f48 <USB_EPStartXfer+0x2dc>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce4:	691a      	ldr	r2, [r3, #16]
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	0159      	lsls	r1, r3, #5
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	440b      	add	r3, r1
 8005cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4b95      	ldr	r3, [pc, #596]	; (8005f4c <USB_EPStartXfer+0x2e0>)
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	610b      	str	r3, [r1, #16]
 8005cfa:	e092      	b.n	8005e22 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d08:	691a      	ldr	r2, [r3, #16]
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	0159      	lsls	r1, r3, #5
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	440b      	add	r3, r1
 8005d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d16:	4619      	mov	r1, r3
 8005d18:	4b8c      	ldr	r3, [pc, #560]	; (8005f4c <USB_EPStartXfer+0x2e0>)
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2a:	691a      	ldr	r2, [r3, #16]
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	0159      	lsls	r1, r3, #5
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	440b      	add	r3, r1
 8005d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4b83      	ldr	r3, [pc, #524]	; (8005f48 <USB_EPStartXfer+0x2dc>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d11a      	bne.n	8005d7c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d903      	bls.n	8005d5a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	689a      	ldr	r2, [r3, #8]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	0151      	lsls	r1, r2, #5
 8005d6c:	69fa      	ldr	r2, [r7, #28]
 8005d6e:	440a      	add	r2, r1
 8005d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d78:	6113      	str	r3, [r2, #16]
 8005d7a:	e01b      	b.n	8005db4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d88:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	6919      	ldr	r1, [r3, #16]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	440b      	add	r3, r1
 8005d94:	1e59      	subs	r1, r3, #1
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d9e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005da0:	4b6b      	ldr	r3, [pc, #428]	; (8005f50 <USB_EPStartXfer+0x2e4>)
 8005da2:	400b      	ands	r3, r1
 8005da4:	69b9      	ldr	r1, [r7, #24]
 8005da6:	0148      	lsls	r0, r1, #5
 8005da8:	69f9      	ldr	r1, [r7, #28]
 8005daa:	4401      	add	r1, r0
 8005dac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005db0:	4313      	orrs	r3, r2
 8005db2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dca:	69b9      	ldr	r1, [r7, #24]
 8005dcc:	0148      	lsls	r0, r1, #5
 8005dce:	69f9      	ldr	r1, [r7, #28]
 8005dd0:	4401      	add	r1, r0
 8005dd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	791b      	ldrb	r3, [r3, #4]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d11f      	bne.n	8005e22 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dfc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e00:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e20:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005e22:	79fb      	ldrb	r3, [r7, #7]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d14b      	bne.n	8005ec0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d009      	beq.n	8005e44 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	791b      	ldrb	r3, [r3, #4]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d128      	bne.n	8005e9e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d110      	bne.n	8005e7e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e7a:	6013      	str	r3, [r2, #0]
 8005e7c:	e00f      	b.n	8005e9e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	0151      	lsls	r1, r2, #5
 8005e90:	69fa      	ldr	r2, [r7, #28]
 8005e92:	440a      	add	r2, r1
 8005e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e9c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	0151      	lsls	r1, r2, #5
 8005eb0:	69fa      	ldr	r2, [r7, #28]
 8005eb2:	440a      	add	r2, r1
 8005eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	e16a      	b.n	8006196 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	0151      	lsls	r1, r2, #5
 8005ed2:	69fa      	ldr	r2, [r7, #28]
 8005ed4:	440a      	add	r2, r1
 8005ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ede:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	791b      	ldrb	r3, [r3, #4]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d015      	beq.n	8005f14 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8152 	beq.w	8006196 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	2101      	movs	r1, #1
 8005f04:	fa01 f303 	lsl.w	r3, r1, r3
 8005f08:	69f9      	ldr	r1, [r7, #28]
 8005f0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	634b      	str	r3, [r1, #52]	; 0x34
 8005f12:	e140      	b.n	8006196 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d117      	bne.n	8005f54 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	e016      	b.n	8005f74 <USB_EPStartXfer+0x308>
 8005f46:	bf00      	nop
 8005f48:	e007ffff 	.word	0xe007ffff
 8005f4c:	fff80000 	.word	0xfff80000
 8005f50:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	69fa      	ldr	r2, [r7, #28]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f72:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	68d9      	ldr	r1, [r3, #12]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	781a      	ldrb	r2, [r3, #0]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	b298      	uxth	r0, r3
 8005f82:	79fb      	ldrb	r3, [r7, #7]
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	4603      	mov	r3, r0
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 f9b9 	bl	8006300 <USB_WritePacket>
 8005f8e:	e102      	b.n	8006196 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9c:	691a      	ldr	r2, [r3, #16]
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	0159      	lsls	r1, r3, #5
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	440b      	add	r3, r1
 8005fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005faa:	4619      	mov	r1, r3
 8005fac:	4b7c      	ldr	r3, [pc, #496]	; (80061a0 <USB_EPStartXfer+0x534>)
 8005fae:	4013      	ands	r3, r2
 8005fb0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	0159      	lsls	r1, r3, #5
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	440b      	add	r3, r1
 8005fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4b75      	ldr	r3, [pc, #468]	; (80061a4 <USB_EPStartXfer+0x538>)
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d12f      	bne.n	800603a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	689a      	ldr	r2, [r3, #8]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffe:	691a      	ldr	r2, [r3, #16]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006008:	69b9      	ldr	r1, [r7, #24]
 800600a:	0148      	lsls	r0, r1, #5
 800600c:	69f9      	ldr	r1, [r7, #28]
 800600e:	4401      	add	r1, r0
 8006010:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006014:	4313      	orrs	r3, r2
 8006016:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	440a      	add	r2, r1
 800602e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006032:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006036:	6113      	str	r3, [r2, #16]
 8006038:	e05f      	b.n	80060fa <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d123      	bne.n	800608a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604e:	691a      	ldr	r2, [r3, #16]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006058:	69b9      	ldr	r1, [r7, #24]
 800605a:	0148      	lsls	r0, r1, #5
 800605c:	69f9      	ldr	r1, [r7, #28]
 800605e:	4401      	add	r1, r0
 8006060:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006064:	4313      	orrs	r3, r2
 8006066:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	440a      	add	r2, r1
 800607e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006082:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006086:	6113      	str	r3, [r2, #16]
 8006088:	e037      	b.n	80060fa <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	691a      	ldr	r2, [r3, #16]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	4413      	add	r3, r2
 8006094:	1e5a      	subs	r2, r3, #1
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	fbb2 f3f3 	udiv	r3, r2, r3
 800609e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	8afa      	ldrh	r2, [r7, #22]
 80060a6:	fb03 f202 	mul.w	r2, r3, r2
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	8afb      	ldrh	r3, [r7, #22]
 80060be:	04d9      	lsls	r1, r3, #19
 80060c0:	4b39      	ldr	r3, [pc, #228]	; (80061a8 <USB_EPStartXfer+0x53c>)
 80060c2:	400b      	ands	r3, r1
 80060c4:	69b9      	ldr	r1, [r7, #24]
 80060c6:	0148      	lsls	r0, r1, #5
 80060c8:	69f9      	ldr	r1, [r7, #28]
 80060ca:	4401      	add	r1, r0
 80060cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060d0:	4313      	orrs	r3, r2
 80060d2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e0:	691a      	ldr	r2, [r3, #16]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060ea:	69b9      	ldr	r1, [r7, #24]
 80060ec:	0148      	lsls	r0, r1, #5
 80060ee:	69f9      	ldr	r1, [r7, #28]
 80060f0:	4401      	add	r1, r0
 80060f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060f6:	4313      	orrs	r3, r2
 80060f8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d10d      	bne.n	800611c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d009      	beq.n	800611c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	68d9      	ldr	r1, [r3, #12]
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006118:	460a      	mov	r2, r1
 800611a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	791b      	ldrb	r3, [r3, #4]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d128      	bne.n	8006176 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006130:	2b00      	cmp	r3, #0
 8006132:	d110      	bne.n	8006156 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	0151      	lsls	r1, r2, #5
 8006146:	69fa      	ldr	r2, [r7, #28]
 8006148:	440a      	add	r2, r1
 800614a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800614e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	e00f      	b.n	8006176 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	4413      	add	r3, r2
 800615e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	0151      	lsls	r1, r2, #5
 8006168:	69fa      	ldr	r2, [r7, #28]
 800616a:	440a      	add	r2, r1
 800616c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006174:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	0151      	lsls	r1, r2, #5
 8006188:	69fa      	ldr	r2, [r7, #28]
 800618a:	440a      	add	r2, r1
 800618c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006190:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006194:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3720      	adds	r7, #32
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	fff80000 	.word	0xfff80000
 80061a4:	e007ffff 	.word	0xe007ffff
 80061a8:	1ff80000 	.word	0x1ff80000

080061ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	785b      	ldrb	r3, [r3, #1]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d14a      	bne.n	8006260 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061e2:	f040 8086 	bne.w	80062f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	7812      	ldrb	r2, [r2, #0]
 80061fa:	0151      	lsls	r1, r2, #5
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	440a      	add	r2, r1
 8006200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006204:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006208:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	7812      	ldrb	r2, [r2, #0]
 800621e:	0151      	lsls	r1, r2, #5
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	440a      	add	r2, r1
 8006224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006228:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800622c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3301      	adds	r3, #1
 8006232:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f242 7210 	movw	r2, #10000	; 0x2710
 800623a:	4293      	cmp	r3, r2
 800623c:	d902      	bls.n	8006244 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	75fb      	strb	r3, [r7, #23]
          break;
 8006242:	e056      	b.n	80062f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006258:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800625c:	d0e7      	beq.n	800622e <USB_EPStopXfer+0x82>
 800625e:	e048      	b.n	80062f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	4413      	add	r3, r2
 800626a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006278:	d13b      	bne.n	80062f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	7812      	ldrb	r2, [r2, #0]
 800628e:	0151      	lsls	r1, r2, #5
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	440a      	add	r2, r1
 8006294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006298:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800629c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	7812      	ldrb	r2, [r2, #0]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3301      	adds	r3, #1
 80062c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d902      	bls.n	80062d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	75fb      	strb	r3, [r7, #23]
          break;
 80062d6:	e00c      	b.n	80062f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062f0:	d0e7      	beq.n	80062c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	371c      	adds	r7, #28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006300:	b480      	push	{r7}
 8006302:	b089      	sub	sp, #36	; 0x24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	4611      	mov	r1, r2
 800630c:	461a      	mov	r2, r3
 800630e:	460b      	mov	r3, r1
 8006310:	71fb      	strb	r3, [r7, #7]
 8006312:	4613      	mov	r3, r2
 8006314:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800631e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006322:	2b00      	cmp	r3, #0
 8006324:	d123      	bne.n	800636e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006326:	88bb      	ldrh	r3, [r7, #4]
 8006328:	3303      	adds	r3, #3
 800632a:	089b      	lsrs	r3, r3, #2
 800632c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800632e:	2300      	movs	r3, #0
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	e018      	b.n	8006366 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006334:	79fb      	ldrb	r3, [r7, #7]
 8006336:	031a      	lsls	r2, r3, #12
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	4413      	add	r3, r2
 800633c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006340:	461a      	mov	r2, r3
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	3301      	adds	r3, #1
 800634c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	3301      	adds	r3, #1
 8006352:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	3301      	adds	r3, #1
 8006358:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	3301      	adds	r3, #1
 800635e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	3301      	adds	r3, #1
 8006364:	61bb      	str	r3, [r7, #24]
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	429a      	cmp	r2, r3
 800636c:	d3e2      	bcc.n	8006334 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3724      	adds	r7, #36	; 0x24
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800637c:	b480      	push	{r7}
 800637e:	b08b      	sub	sp, #44	; 0x2c
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	4613      	mov	r3, r2
 8006388:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	089b      	lsrs	r3, r3, #2
 8006396:	b29b      	uxth	r3, r3
 8006398:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	f003 0303 	and.w	r3, r3, #3
 80063a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80063a2:	2300      	movs	r3, #0
 80063a4:	623b      	str	r3, [r7, #32]
 80063a6:	e014      	b.n	80063d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	3301      	adds	r3, #1
 80063b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	3301      	adds	r3, #1
 80063be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	3301      	adds	r3, #1
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	3301      	adds	r3, #1
 80063ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	3301      	adds	r3, #1
 80063d0:	623b      	str	r3, [r7, #32]
 80063d2:	6a3a      	ldr	r2, [r7, #32]
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d3e6      	bcc.n	80063a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80063da:	8bfb      	ldrh	r3, [r7, #30]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d01e      	beq.n	800641e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ea:	461a      	mov	r2, r3
 80063ec:	f107 0310 	add.w	r3, r7, #16
 80063f0:	6812      	ldr	r2, [r2, #0]
 80063f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006400:	b2da      	uxtb	r2, r3
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	701a      	strb	r2, [r3, #0]
      i++;
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	3301      	adds	r3, #1
 800640a:	623b      	str	r3, [r7, #32]
      pDest++;
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	3301      	adds	r3, #1
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006412:	8bfb      	ldrh	r3, [r7, #30]
 8006414:	3b01      	subs	r3, #1
 8006416:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006418:	8bfb      	ldrh	r3, [r7, #30]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1ea      	bne.n	80063f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006420:	4618      	mov	r0, r3
 8006422:	372c      	adds	r7, #44	; 0x2c
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	785b      	ldrb	r3, [r3, #1]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d12c      	bne.n	80064a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	db12      	blt.n	8006480 <USB_EPSetStall+0x54>
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00f      	beq.n	8006480 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	0151      	lsls	r1, r2, #5
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	440a      	add	r2, r1
 8006476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800647a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800647e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	0151      	lsls	r1, r2, #5
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	440a      	add	r2, r1
 8006496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800649a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	e02b      	b.n	80064fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	db12      	blt.n	80064da <USB_EPSetStall+0xae>
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00f      	beq.n	80064da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	0151      	lsls	r1, r2, #5
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	440a      	add	r2, r1
 80064d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	0151      	lsls	r1, r2, #5
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	440a      	add	r2, r1
 80064f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	785b      	ldrb	r3, [r3, #1]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d128      	bne.n	8006576 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	0151      	lsls	r1, r2, #5
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	440a      	add	r2, r1
 800653a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800653e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006542:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	791b      	ldrb	r3, [r3, #4]
 8006548:	2b03      	cmp	r3, #3
 800654a:	d003      	beq.n	8006554 <USB_EPClearStall+0x4c>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	791b      	ldrb	r3, [r3, #4]
 8006550:	2b02      	cmp	r3, #2
 8006552:	d138      	bne.n	80065c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	0151      	lsls	r1, r2, #5
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	440a      	add	r2, r1
 800656a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	e027      	b.n	80065c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	0151      	lsls	r1, r2, #5
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	440a      	add	r2, r1
 800658c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006590:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006594:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	791b      	ldrb	r3, [r3, #4]
 800659a:	2b03      	cmp	r3, #3
 800659c:	d003      	beq.n	80065a6 <USB_EPClearStall+0x9e>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	791b      	ldrb	r3, [r3, #4]
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d10f      	bne.n	80065c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	0151      	lsls	r1, r2, #5
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	440a      	add	r2, r1
 80065bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80065f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	78fb      	ldrb	r3, [r7, #3]
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006608:	68f9      	ldr	r1, [r7, #12]
 800660a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800660e:	4313      	orrs	r3, r2
 8006610:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800663a:	f023 0303 	bic.w	r3, r3, #3
 800663e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800664e:	f023 0302 	bic.w	r3, r3, #2
 8006652:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006662:	b480      	push	{r7}
 8006664:	b085      	sub	sp, #20
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800667c:	f023 0303 	bic.w	r3, r3, #3
 8006680:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006690:	f043 0302 	orr.w	r3, r3, #2
 8006694:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4013      	ands	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066bc:	68fb      	ldr	r3, [r7, #12]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b085      	sub	sp, #20
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	4013      	ands	r3, r2
 80066ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	0c1b      	lsrs	r3, r3, #16
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	4013      	ands	r3, r2
 8006720:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	b29b      	uxth	r3, r3
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006732:	b480      	push	{r7}
 8006734:	b085      	sub	sp, #20
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	460b      	mov	r3, r1
 800673c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006742:	78fb      	ldrb	r3, [r7, #3]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	4013      	ands	r3, r2
 800675e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006760:	68bb      	ldr	r3, [r7, #8]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800676e:	b480      	push	{r7}
 8006770:	b087      	sub	sp, #28
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	460b      	mov	r3, r1
 8006778:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006790:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006792:	78fb      	ldrb	r3, [r7, #3]
 8006794:	f003 030f 	and.w	r3, r3, #15
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	fa22 f303 	lsr.w	r3, r2, r3
 800679e:	01db      	lsls	r3, r3, #7
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	4013      	ands	r3, r2
 80067ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067bc:	68bb      	ldr	r3, [r7, #8]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	371c      	adds	r7, #28
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	f003 0301 	and.w	r3, r3, #1
}
 80067da:	4618      	mov	r0, r3
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
	...

080067e8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006802:	4619      	mov	r1, r3
 8006804:	4b09      	ldr	r3, [pc, #36]	; (800682c <USB_ActivateSetup+0x44>)
 8006806:	4013      	ands	r3, r2
 8006808:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800681c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	fffff800 	.word	0xfffff800

08006830 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	460b      	mov	r3, r1
 800683a:	607a      	str	r2, [r7, #4]
 800683c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	333c      	adds	r3, #60	; 0x3c
 8006846:	3304      	adds	r3, #4
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	4a26      	ldr	r2, [pc, #152]	; (80068e8 <USB_EP0_OutStart+0xb8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d90a      	bls.n	800686a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006860:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006864:	d101      	bne.n	800686a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	e037      	b.n	80068da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006870:	461a      	mov	r2, r3
 8006872:	2300      	movs	r3, #0
 8006874:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006884:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006888:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006898:	f043 0318 	orr.w	r3, r3, #24
 800689c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80068b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80068b2:	7afb      	ldrb	r3, [r7, #11]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d10f      	bne.n	80068d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068be:	461a      	mov	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80068d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	371c      	adds	r7, #28
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	4f54300a 	.word	0x4f54300a

080068ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3301      	adds	r3, #1
 80068fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006904:	d901      	bls.n	800690a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e01b      	b.n	8006942 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	daf2      	bge.n	80068f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	f043 0201 	orr.w	r2, r3, #1
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3301      	adds	r3, #1
 8006926:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800692e:	d901      	bls.n	8006934 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e006      	b.n	8006942 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b01      	cmp	r3, #1
 800693e:	d0f0      	beq.n	8006922 <USB_CoreReset+0x36>

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
	...

08006950 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800695c:	f44f 701d 	mov.w	r0, #628	; 0x274
 8006960:	f004 f86a 	bl	800aa38 <USBD_static_malloc>
 8006964:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d109      	bne.n	8006980 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	32b0      	adds	r2, #176	; 0xb0
 8006976:	2100      	movs	r1, #0
 8006978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800697c:	2302      	movs	r3, #2
 800697e:	e06e      	b.n	8006a5e <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	32b0      	adds	r2, #176	; 0xb0
 800698a:	68f9      	ldr	r1, [r7, #12]
 800698c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	32b0      	adds	r2, #176	; 0xb0
 800699a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	7c1b      	ldrb	r3, [r3, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d12b      	bne.n	8006a04 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80069ac:	4b2e      	ldr	r3, [pc, #184]	; (8006a68 <USBD_MSC_Init+0x118>)
 80069ae:	7819      	ldrb	r1, [r3, #0]
 80069b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069b4:	2202      	movs	r2, #2
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f003 fefb 	bl	800a7b2 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80069bc:	4b2a      	ldr	r3, [pc, #168]	; (8006a68 <USBD_MSC_Init+0x118>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	f003 020f 	and.w	r2, r3, #15
 80069c4:	6879      	ldr	r1, [r7, #4]
 80069c6:	4613      	mov	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	440b      	add	r3, r1
 80069d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069d4:	2201      	movs	r2, #1
 80069d6:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80069d8:	4b24      	ldr	r3, [pc, #144]	; (8006a6c <USBD_MSC_Init+0x11c>)
 80069da:	7819      	ldrb	r1, [r3, #0]
 80069dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069e0:	2202      	movs	r2, #2
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f003 fee5 	bl	800a7b2 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80069e8:	4b20      	ldr	r3, [pc, #128]	; (8006a6c <USBD_MSC_Init+0x11c>)
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	f003 020f 	and.w	r2, r3, #15
 80069f0:	6879      	ldr	r1, [r7, #4]
 80069f2:	4613      	mov	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	440b      	add	r3, r1
 80069fc:	3324      	adds	r3, #36	; 0x24
 80069fe:	2201      	movs	r2, #1
 8006a00:	801a      	strh	r2, [r3, #0]
 8006a02:	e028      	b.n	8006a56 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006a04:	4b18      	ldr	r3, [pc, #96]	; (8006a68 <USBD_MSC_Init+0x118>)
 8006a06:	7819      	ldrb	r1, [r3, #0]
 8006a08:	2340      	movs	r3, #64	; 0x40
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f003 fed0 	bl	800a7b2 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8006a12:	4b15      	ldr	r3, [pc, #84]	; (8006a68 <USBD_MSC_Init+0x118>)
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	f003 020f 	and.w	r2, r3, #15
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	440b      	add	r3, r1
 8006a26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006a2e:	4b0f      	ldr	r3, [pc, #60]	; (8006a6c <USBD_MSC_Init+0x11c>)
 8006a30:	7819      	ldrb	r1, [r3, #0]
 8006a32:	2340      	movs	r3, #64	; 0x40
 8006a34:	2202      	movs	r2, #2
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f003 febb 	bl	800a7b2 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8006a3c:	4b0b      	ldr	r3, [pc, #44]	; (8006a6c <USBD_MSC_Init+0x11c>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	f003 020f 	and.w	r2, r3, #15
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	4613      	mov	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	440b      	add	r3, r1
 8006a50:	3324      	adds	r3, #36	; 0x24
 8006a52:	2201      	movs	r2, #1
 8006a54:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fa2c 	bl	8006eb4 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	24000073 	.word	0x24000073
 8006a6c:	24000072 	.word	0x24000072

08006a70 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8006a7c:	4b26      	ldr	r3, [pc, #152]	; (8006b18 <USBD_MSC_DeInit+0xa8>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	4619      	mov	r1, r3
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f003 febb 	bl	800a7fe <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8006a88:	4b23      	ldr	r3, [pc, #140]	; (8006b18 <USBD_MSC_DeInit+0xa8>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	f003 020f 	and.w	r2, r3, #15
 8006a90:	6879      	ldr	r1, [r7, #4]
 8006a92:	4613      	mov	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	440b      	add	r3, r1
 8006a9c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8006aa4:	4b1d      	ldr	r3, [pc, #116]	; (8006b1c <USBD_MSC_DeInit+0xac>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f003 fea7 	bl	800a7fe <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8006ab0:	4b1a      	ldr	r3, [pc, #104]	; (8006b1c <USBD_MSC_DeInit+0xac>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	f003 020f 	and.w	r2, r3, #15
 8006ab8:	6879      	ldr	r1, [r7, #4]
 8006aba:	4613      	mov	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	3324      	adds	r3, #36	; 0x24
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	32b0      	adds	r2, #176	; 0xb0
 8006ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d018      	beq.n	8006b0e <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fa67 	bl	8006fb0 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	32b0      	adds	r2, #176	; 0xb0
 8006aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f003 ffaf 	bl	800aa54 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	32b0      	adds	r2, #176	; 0xb0
 8006b00:	2100      	movs	r1, #0
 8006b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	24000073 	.word	0x24000073
 8006b1c:	24000072 	.word	0x24000072

08006b20 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	32b0      	adds	r2, #176	; 0xb0
 8006b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b38:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e0e1      	b.n	8006d10 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d053      	beq.n	8006c00 <USBD_MSC_Setup+0xe0>
 8006b58:	2b20      	cmp	r3, #32
 8006b5a:	f040 80d1 	bne.w	8006d00 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	785b      	ldrb	r3, [r3, #1]
 8006b62:	2bfe      	cmp	r3, #254	; 0xfe
 8006b64:	d002      	beq.n	8006b6c <USBD_MSC_Setup+0x4c>
 8006b66:	2bff      	cmp	r3, #255	; 0xff
 8006b68:	d02a      	beq.n	8006bc0 <USBD_MSC_Setup+0xa0>
 8006b6a:	e041      	b.n	8006bf0 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	885b      	ldrh	r3, [r3, #2]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d11e      	bne.n	8006bb2 <USBD_MSC_Setup+0x92>
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	88db      	ldrh	r3, [r3, #6]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d11a      	bne.n	8006bb2 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	da15      	bge.n	8006bb2 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	33b0      	adds	r3, #176	; 0xb0
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	4798      	blx	r3
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f003 f955 	bl	8009e58 <USBD_CtlSendData>
 8006bae:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bb0:	e025      	b.n	8006bfe <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f003 f8d2 	bl	8009d5e <USBD_CtlError>
            ret = USBD_FAIL;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	75fb      	strb	r3, [r7, #23]
          break;
 8006bbe:	e01e      	b.n	8006bfe <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	885b      	ldrh	r3, [r3, #2]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10c      	bne.n	8006be2 <USBD_MSC_Setup+0xc2>
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	88db      	ldrh	r3, [r3, #6]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d108      	bne.n	8006be2 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	db03      	blt.n	8006be2 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f9b4 	bl	8006f48 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006be0:	e00d      	b.n	8006bfe <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f003 f8ba 	bl	8009d5e <USBD_CtlError>
            ret = USBD_FAIL;
 8006bea:	2303      	movs	r3, #3
 8006bec:	75fb      	strb	r3, [r7, #23]
          break;
 8006bee:	e006      	b.n	8006bfe <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8006bf0:	6839      	ldr	r1, [r7, #0]
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f003 f8b3 	bl	8009d5e <USBD_CtlError>
          ret = USBD_FAIL;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	75fb      	strb	r3, [r7, #23]
          break;
 8006bfc:	bf00      	nop
      }
      break;
 8006bfe:	e086      	b.n	8006d0e <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	785b      	ldrb	r3, [r3, #1]
 8006c04:	2b0b      	cmp	r3, #11
 8006c06:	d872      	bhi.n	8006cee <USBD_MSC_Setup+0x1ce>
 8006c08:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <USBD_MSC_Setup+0xf0>)
 8006c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0e:	bf00      	nop
 8006c10:	08006c41 	.word	0x08006c41
 8006c14:	08006cbd 	.word	0x08006cbd
 8006c18:	08006cef 	.word	0x08006cef
 8006c1c:	08006cef 	.word	0x08006cef
 8006c20:	08006cef 	.word	0x08006cef
 8006c24:	08006cef 	.word	0x08006cef
 8006c28:	08006cef 	.word	0x08006cef
 8006c2c:	08006cef 	.word	0x08006cef
 8006c30:	08006cef 	.word	0x08006cef
 8006c34:	08006cef 	.word	0x08006cef
 8006c38:	08006c6b 	.word	0x08006c6b
 8006c3c:	08006c95 	.word	0x08006c95
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d107      	bne.n	8006c5c <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c4c:	f107 030e 	add.w	r3, r7, #14
 8006c50:	2202      	movs	r2, #2
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f003 f8ff 	bl	8009e58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c5a:	e050      	b.n	8006cfe <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f003 f87d 	bl	8009d5e <USBD_CtlError>
            ret = USBD_FAIL;
 8006c64:	2303      	movs	r3, #3
 8006c66:	75fb      	strb	r3, [r7, #23]
          break;
 8006c68:	e049      	b.n	8006cfe <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d107      	bne.n	8006c86 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	3304      	adds	r3, #4
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f003 f8ea 	bl	8009e58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c84:	e03b      	b.n	8006cfe <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f003 f868 	bl	8009d5e <USBD_CtlError>
            ret = USBD_FAIL;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	75fb      	strb	r3, [r7, #23]
          break;
 8006c92:	e034      	b.n	8006cfe <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d106      	bne.n	8006cae <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	885b      	ldrh	r3, [r3, #2]
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cac:	e027      	b.n	8006cfe <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f003 f854 	bl	8009d5e <USBD_CtlError>
            ret = USBD_FAIL;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	75fb      	strb	r3, [r7, #23]
          break;
 8006cba:	e020      	b.n	8006cfe <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	d119      	bne.n	8006cfc <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	885b      	ldrh	r3, [r3, #2]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d115      	bne.n	8006cfc <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	889b      	ldrh	r3, [r3, #4]
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f003 fdaf 	bl	800a83c <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	889b      	ldrh	r3, [r3, #4]
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fb2e 	bl	8007348 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8006cec:	e006      	b.n	8006cfc <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f003 f834 	bl	8009d5e <USBD_CtlError>
          ret = USBD_FAIL;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	75fb      	strb	r3, [r7, #23]
          break;
 8006cfa:	e000      	b.n	8006cfe <USBD_MSC_Setup+0x1de>
          break;
 8006cfc:	bf00      	nop
      }
      break;
 8006cfe:	e006      	b.n	8006d0e <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f003 f82b 	bl	8009d5e <USBD_CtlError>
      ret = USBD_FAIL;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d0c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	460b      	mov	r3, r1
 8006d22:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006d24:	78fb      	ldrb	r3, [r7, #3]
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f959 	bl	8006fe0 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006d44:	78fb      	ldrb	r3, [r7, #3]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f983 	bl	8007054 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8006d60:	2181      	movs	r1, #129	; 0x81
 8006d62:	4812      	ldr	r0, [pc, #72]	; (8006dac <USBD_MSC_GetHSCfgDesc+0x54>)
 8006d64:	f002 f9c3 	bl	80090ee <USBD_GetEpDesc>
 8006d68:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	480f      	ldr	r0, [pc, #60]	; (8006dac <USBD_MSC_GetHSCfgDesc+0x54>)
 8006d6e:	f002 f9be 	bl	80090ee <USBD_GetEpDesc>
 8006d72:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d006      	beq.n	8006d88 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	711a      	strb	r2, [r3, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f042 0202 	orr.w	r2, r2, #2
 8006d86:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d006      	beq.n	8006d9c <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2200      	movs	r2, #0
 8006d92:	711a      	strb	r2, [r3, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f042 0202 	orr.w	r2, r2, #2
 8006d9a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8006da2:	4b02      	ldr	r3, [pc, #8]	; (8006dac <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	24000048 	.word	0x24000048

08006db0 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8006db8:	2181      	movs	r1, #129	; 0x81
 8006dba:	4812      	ldr	r0, [pc, #72]	; (8006e04 <USBD_MSC_GetFSCfgDesc+0x54>)
 8006dbc:	f002 f997 	bl	80090ee <USBD_GetEpDesc>
 8006dc0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	480f      	ldr	r0, [pc, #60]	; (8006e04 <USBD_MSC_GetFSCfgDesc+0x54>)
 8006dc6:	f002 f992 	bl	80090ee <USBD_GetEpDesc>
 8006dca:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d006      	beq.n	8006de0 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dda:	711a      	strb	r2, [r3, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d006      	beq.n	8006df4 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dee:	711a      	strb	r2, [r3, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8006dfa:	4b02      	ldr	r3, [pc, #8]	; (8006e04 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	24000048 	.word	0x24000048

08006e08 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8006e10:	2181      	movs	r1, #129	; 0x81
 8006e12:	4812      	ldr	r0, [pc, #72]	; (8006e5c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8006e14:	f002 f96b 	bl	80090ee <USBD_GetEpDesc>
 8006e18:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	480f      	ldr	r0, [pc, #60]	; (8006e5c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8006e1e:	f002 f966 	bl	80090ee <USBD_GetEpDesc>
 8006e22:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d006      	beq.n	8006e38 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e32:	711a      	strb	r2, [r3, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d006      	beq.n	8006e4c <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e46:	711a      	strb	r2, [r3, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8006e52:	4b02      	ldr	r3, [pc, #8]	; (8006e5c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	24000048 	.word	0x24000048

08006e60 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	220a      	movs	r2, #10
 8006e6c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006e6e:	4b03      	ldr	r3, [pc, #12]	; (8006e7c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	24000068 	.word	0x24000068

08006e80 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e009      	b.n	8006ea8 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	33b0      	adds	r3, #176	; 0xb0
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	32b0      	adds	r2, #176	; 0xb0
 8006ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eca:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d032      	beq.n	8006f38 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	33b0      	adds	r3, #176	; 0xb0
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2000      	movs	r0, #0
 8006f0a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8006f0c:	4b0c      	ldr	r3, [pc, #48]	; (8006f40 <MSC_BOT_Init+0x8c>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	4619      	mov	r1, r3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f003 fc92 	bl	800a83c <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8006f18:	4b0a      	ldr	r3, [pc, #40]	; (8006f44 <MSC_BOT_Init+0x90>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f003 fc8c 	bl	800a83c <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8006f24:	4b06      	ldr	r3, [pc, #24]	; (8006f40 <MSC_BOT_Init+0x8c>)
 8006f26:	7819      	ldrb	r1, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006f2e:	231f      	movs	r3, #31
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f003 fd4c 	bl	800a9ce <USBD_LL_PrepareReceive>
 8006f36:	e000      	b.n	8006f3a <MSC_BOT_Init+0x86>
    return;
 8006f38:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	24000073 	.word	0x24000073
 8006f44:	24000072 	.word	0x24000072

08006f48 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	32b0      	adds	r2, #176	; 0xb0
 8006f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f5e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d01b      	beq.n	8006f9e <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8006f72:	4b0d      	ldr	r3, [pc, #52]	; (8006fa8 <MSC_BOT_Reset+0x60>)
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f003 fc9d 	bl	800a8b8 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8006f7e:	4b0b      	ldr	r3, [pc, #44]	; (8006fac <MSC_BOT_Reset+0x64>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f003 fc97 	bl	800a8b8 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8006f8a:	4b08      	ldr	r3, [pc, #32]	; (8006fac <MSC_BOT_Reset+0x64>)
 8006f8c:	7819      	ldrb	r1, [r3, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006f94:	231f      	movs	r3, #31
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f003 fd19 	bl	800a9ce <USBD_LL_PrepareReceive>
 8006f9c:	e000      	b.n	8006fa0 <MSC_BOT_Reset+0x58>
    return;
 8006f9e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	24000072 	.word	0x24000072
 8006fac:	24000073 	.word	0x24000073

08006fb0 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	32b0      	adds	r2, #176	; 0xb0
 8006fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc6:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	721a      	strb	r2, [r3, #8]
  }
}
 8006fd4:	bf00      	nop
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	32b0      	adds	r2, #176	; 0xb0
 8006ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d020      	beq.n	8007044 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	7a1b      	ldrb	r3, [r3, #8]
 8007006:	2b02      	cmp	r3, #2
 8007008:	d005      	beq.n	8007016 <MSC_BOT_DataIn+0x36>
 800700a:	2b02      	cmp	r3, #2
 800700c:	db1c      	blt.n	8007048 <MSC_BOT_DataIn+0x68>
 800700e:	3b03      	subs	r3, #3
 8007010:	2b01      	cmp	r3, #1
 8007012:	d819      	bhi.n	8007048 <MSC_BOT_DataIn+0x68>
 8007014:	e011      	b.n	800703a <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8007022:	461a      	mov	r2, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f9c9 	bl	80073bc <SCSI_ProcessCmd>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	da0d      	bge.n	800704c <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007030:	2101      	movs	r1, #1
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f90c 	bl	8007250 <MSC_BOT_SendCSW>
      }
      break;
 8007038:	e008      	b.n	800704c <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800703a:	2100      	movs	r1, #0
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f907 	bl	8007250 <MSC_BOT_SendCSW>
      break;
 8007042:	e004      	b.n	800704e <MSC_BOT_DataIn+0x6e>
    return;
 8007044:	bf00      	nop
 8007046:	e002      	b.n	800704e <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8007048:	bf00      	nop
 800704a:	e000      	b.n	800704e <MSC_BOT_DataIn+0x6e>
      break;
 800704c:	bf00      	nop
  }
}
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	32b0      	adds	r2, #176	; 0xb0
 800706a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d01c      	beq.n	80070b0 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	7a1b      	ldrb	r3, [r3, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <MSC_BOT_DataOut+0x30>
 800707e:	2b01      	cmp	r3, #1
 8007080:	d004      	beq.n	800708c <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8007082:	e018      	b.n	80070b6 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f819 	bl	80070bc <MSC_BOT_CBW_Decode>
      break;
 800708a:	e014      	b.n	80070b6 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8007098:	461a      	mov	r2, r3
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f98e 	bl	80073bc <SCSI_ProcessCmd>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	da06      	bge.n	80070b4 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80070a6:	2101      	movs	r1, #1
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f8d1 	bl	8007250 <MSC_BOT_SendCSW>
      break;
 80070ae:	e001      	b.n	80070b4 <MSC_BOT_DataOut+0x60>
    return;
 80070b0:	bf00      	nop
 80070b2:	e000      	b.n	80070b6 <MSC_BOT_DataOut+0x62>
      break;
 80070b4:	bf00      	nop
  }
}
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	32b0      	adds	r2, #176	; 0xb0
 80070ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d079      	beq.n	80071ce <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80070f2:	4b3a      	ldr	r3, [pc, #232]	; (80071dc <MSC_BOT_CBW_Decode+0x120>)
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f003 fc89 	bl	800aa10 <USBD_LL_GetRxDataSize>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b1f      	cmp	r3, #31
 8007102:	d114      	bne.n	800712e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800710a:	4a35      	ldr	r2, [pc, #212]	; (80071e0 <MSC_BOT_CBW_Decode+0x124>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d10e      	bne.n	800712e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007116:	2b01      	cmp	r3, #1
 8007118:	d809      	bhi.n	800712e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8007120:	2b00      	cmp	r3, #0
 8007122:	d004      	beq.n	800712e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800712a:	2b10      	cmp	r3, #16
 800712c:	d90e      	bls.n	800714c <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007134:	2320      	movs	r3, #32
 8007136:	2205      	movs	r2, #5
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fe56 	bl	8007dea <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2202      	movs	r2, #2
 8007142:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f8bd 	bl	80072c4 <MSC_BOT_Abort>
 800714a:	e043      	b.n	80071d4 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8007158:	461a      	mov	r2, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f92e 	bl	80073bc <SCSI_ProcessCmd>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	da0c      	bge.n	8007180 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	7a1b      	ldrb	r3, [r3, #8]
 800716a:	2b05      	cmp	r3, #5
 800716c:	d104      	bne.n	8007178 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800716e:	2101      	movs	r1, #1
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f86d 	bl	8007250 <MSC_BOT_SendCSW>
 8007176:	e02d      	b.n	80071d4 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f8a3 	bl	80072c4 <MSC_BOT_Abort>
 800717e:	e029      	b.n	80071d4 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	7a1b      	ldrb	r3, [r3, #8]
 8007184:	2b02      	cmp	r3, #2
 8007186:	d024      	beq.n	80071d2 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800718c:	2b01      	cmp	r3, #1
 800718e:	d020      	beq.n	80071d2 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007194:	2b03      	cmp	r3, #3
 8007196:	d01c      	beq.n	80071d2 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d009      	beq.n	80071b4 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f103 0110 	add.w	r1, r3, #16
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	461a      	mov	r2, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f819 	bl	80071e4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80071b2:	e00f      	b.n	80071d4 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d104      	bne.n	80071c6 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80071bc:	2100      	movs	r1, #0
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f846 	bl	8007250 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80071c4:	e006      	b.n	80071d4 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f87c 	bl	80072c4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80071cc:	e002      	b.n	80071d4 <MSC_BOT_CBW_Decode+0x118>
    return;
 80071ce:	bf00      	nop
 80071d0:	e000      	b.n	80071d4 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 80071d2:	bf00      	nop
    }
  }
}
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	24000073 	.word	0x24000073
 80071e0:	43425355 	.word	0x43425355

080071e4 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	32b0      	adds	r2, #176	; 0xb0
 80071fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071fe:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d01e      	beq.n	8007244 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	4293      	cmp	r3, r2
 8007210:	bf28      	it	cs
 8007212:	4613      	movcs	r3, r2
 8007214:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	1ad2      	subs	r2, r2, r3
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2204      	movs	r2, #4
 8007232:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8007234:	4b05      	ldr	r3, [pc, #20]	; (800724c <MSC_BOT_SendData+0x68>)
 8007236:	7819      	ldrb	r1, [r3, #0]
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f003 fba5 	bl	800a98c <USBD_LL_Transmit>
 8007242:	e000      	b.n	8007246 <MSC_BOT_SendData+0x62>
    return;
 8007244:	bf00      	nop
}
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	24000072 	.word	0x24000072

08007250 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	32b0      	adds	r2, #176	; 0xb0
 8007266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d01d      	beq.n	80072ae <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4a10      	ldr	r2, [pc, #64]	; (80072b8 <MSC_BOT_SendCSW+0x68>)
 8007276:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	78fa      	ldrb	r2, [r7, #3]
 800727e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8007288:	4b0c      	ldr	r3, [pc, #48]	; (80072bc <MSC_BOT_SendCSW+0x6c>)
 800728a:	7819      	ldrb	r1, [r3, #0]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8007292:	230d      	movs	r3, #13
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f003 fb79 	bl	800a98c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800729a:	4b09      	ldr	r3, [pc, #36]	; (80072c0 <MSC_BOT_SendCSW+0x70>)
 800729c:	7819      	ldrb	r1, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80072a4:	231f      	movs	r3, #31
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f003 fb91 	bl	800a9ce <USBD_LL_PrepareReceive>
 80072ac:	e000      	b.n	80072b0 <MSC_BOT_SendCSW+0x60>
    return;
 80072ae:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	53425355 	.word	0x53425355
 80072bc:	24000072 	.word	0x24000072
 80072c0:	24000073 	.word	0x24000073

080072c4 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	32b0      	adds	r2, #176	; 0xb0
 80072d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072da:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d02a      	beq.n	8007338 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10e      	bne.n	800730a <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d009      	beq.n	800730a <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d105      	bne.n	800730a <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80072fe:	4b10      	ldr	r3, [pc, #64]	; (8007340 <MSC_BOT_Abort+0x7c>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f003 fab8 	bl	800a87a <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800730a:	4b0e      	ldr	r3, [pc, #56]	; (8007344 <MSC_BOT_Abort+0x80>)
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f003 fab2 	bl	800a87a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	7a5b      	ldrb	r3, [r3, #9]
 800731a:	2b02      	cmp	r3, #2
 800731c:	d10d      	bne.n	800733a <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800731e:	4b09      	ldr	r3, [pc, #36]	; (8007344 <MSC_BOT_Abort+0x80>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f003 faa8 	bl	800a87a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800732a:	4b05      	ldr	r3, [pc, #20]	; (8007340 <MSC_BOT_Abort+0x7c>)
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f003 faa2 	bl	800a87a <USBD_LL_StallEP>
 8007336:	e000      	b.n	800733a <MSC_BOT_Abort+0x76>
    return;
 8007338:	bf00      	nop
  }
}
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	24000073 	.word	0x24000073
 8007344:	24000072 	.word	0x24000072

08007348 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	460b      	mov	r3, r1
 8007352:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	32b0      	adds	r2, #176	; 0xb0
 800735e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007362:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d01d      	beq.n	80073a6 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	7a5b      	ldrb	r3, [r3, #9]
 800736e:	2b02      	cmp	r3, #2
 8007370:	d10c      	bne.n	800738c <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8007372:	4b10      	ldr	r3, [pc, #64]	; (80073b4 <MSC_BOT_CplClrFeature+0x6c>)
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f003 fa7e 	bl	800a87a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800737e:	4b0e      	ldr	r3, [pc, #56]	; (80073b8 <MSC_BOT_CplClrFeature+0x70>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f003 fa78 	bl	800a87a <USBD_LL_StallEP>
 800738a:	e00f      	b.n	80073ac <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800738c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007390:	2b00      	cmp	r3, #0
 8007392:	da0a      	bge.n	80073aa <MSC_BOT_CplClrFeature+0x62>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	7a5b      	ldrb	r3, [r3, #9]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d006      	beq.n	80073aa <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800739c:	2101      	movs	r1, #1
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7ff ff56 	bl	8007250 <MSC_BOT_SendCSW>
 80073a4:	e002      	b.n	80073ac <MSC_BOT_CplClrFeature+0x64>
    return;
 80073a6:	bf00      	nop
 80073a8:	e000      	b.n	80073ac <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 80073aa:	bf00      	nop
  }
}
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	24000072 	.word	0x24000072
 80073b8:	24000073 	.word	0x24000073

080073bc <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	460b      	mov	r3, r1
 80073c6:	607a      	str	r2, [r7, #4]
 80073c8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	32b0      	adds	r2, #176	; 0xb0
 80073d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80073e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073e4:	e168      	b.n	80076b8 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	2baa      	cmp	r3, #170	; 0xaa
 80073ec:	f000 8144 	beq.w	8007678 <SCSI_ProcessCmd+0x2bc>
 80073f0:	2baa      	cmp	r3, #170	; 0xaa
 80073f2:	f300 8153 	bgt.w	800769c <SCSI_ProcessCmd+0x2e0>
 80073f6:	2ba8      	cmp	r3, #168	; 0xa8
 80073f8:	f000 812c 	beq.w	8007654 <SCSI_ProcessCmd+0x298>
 80073fc:	2ba8      	cmp	r3, #168	; 0xa8
 80073fe:	f300 814d 	bgt.w	800769c <SCSI_ProcessCmd+0x2e0>
 8007402:	2b5a      	cmp	r3, #90	; 0x5a
 8007404:	f300 80c0 	bgt.w	8007588 <SCSI_ProcessCmd+0x1cc>
 8007408:	2b00      	cmp	r3, #0
 800740a:	f2c0 8147 	blt.w	800769c <SCSI_ProcessCmd+0x2e0>
 800740e:	2b5a      	cmp	r3, #90	; 0x5a
 8007410:	f200 8144 	bhi.w	800769c <SCSI_ProcessCmd+0x2e0>
 8007414:	a201      	add	r2, pc, #4	; (adr r2, 800741c <SCSI_ProcessCmd+0x60>)
 8007416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741a:	bf00      	nop
 800741c:	0800758f 	.word	0x0800758f
 8007420:	0800769d 	.word	0x0800769d
 8007424:	0800769d 	.word	0x0800769d
 8007428:	080075a1 	.word	0x080075a1
 800742c:	0800769d 	.word	0x0800769d
 8007430:	0800769d 	.word	0x0800769d
 8007434:	0800769d 	.word	0x0800769d
 8007438:	0800769d 	.word	0x0800769d
 800743c:	0800769d 	.word	0x0800769d
 8007440:	0800769d 	.word	0x0800769d
 8007444:	0800769d 	.word	0x0800769d
 8007448:	0800769d 	.word	0x0800769d
 800744c:	0800769d 	.word	0x0800769d
 8007450:	0800769d 	.word	0x0800769d
 8007454:	0800769d 	.word	0x0800769d
 8007458:	0800769d 	.word	0x0800769d
 800745c:	0800769d 	.word	0x0800769d
 8007460:	0800769d 	.word	0x0800769d
 8007464:	080075b3 	.word	0x080075b3
 8007468:	0800769d 	.word	0x0800769d
 800746c:	0800769d 	.word	0x0800769d
 8007470:	0800769d 	.word	0x0800769d
 8007474:	0800769d 	.word	0x0800769d
 8007478:	0800769d 	.word	0x0800769d
 800747c:	0800769d 	.word	0x0800769d
 8007480:	0800769d 	.word	0x0800769d
 8007484:	080075e9 	.word	0x080075e9
 8007488:	080075c5 	.word	0x080075c5
 800748c:	0800769d 	.word	0x0800769d
 8007490:	0800769d 	.word	0x0800769d
 8007494:	080075d7 	.word	0x080075d7
 8007498:	0800769d 	.word	0x0800769d
 800749c:	0800769d 	.word	0x0800769d
 80074a0:	0800769d 	.word	0x0800769d
 80074a4:	0800769d 	.word	0x0800769d
 80074a8:	0800760d 	.word	0x0800760d
 80074ac:	0800769d 	.word	0x0800769d
 80074b0:	0800761f 	.word	0x0800761f
 80074b4:	0800769d 	.word	0x0800769d
 80074b8:	0800769d 	.word	0x0800769d
 80074bc:	08007643 	.word	0x08007643
 80074c0:	0800769d 	.word	0x0800769d
 80074c4:	08007667 	.word	0x08007667
 80074c8:	0800769d 	.word	0x0800769d
 80074cc:	0800769d 	.word	0x0800769d
 80074d0:	0800769d 	.word	0x0800769d
 80074d4:	0800769d 	.word	0x0800769d
 80074d8:	0800768b 	.word	0x0800768b
 80074dc:	0800769d 	.word	0x0800769d
 80074e0:	0800769d 	.word	0x0800769d
 80074e4:	0800769d 	.word	0x0800769d
 80074e8:	0800769d 	.word	0x0800769d
 80074ec:	0800769d 	.word	0x0800769d
 80074f0:	0800769d 	.word	0x0800769d
 80074f4:	0800769d 	.word	0x0800769d
 80074f8:	0800769d 	.word	0x0800769d
 80074fc:	0800769d 	.word	0x0800769d
 8007500:	0800769d 	.word	0x0800769d
 8007504:	0800769d 	.word	0x0800769d
 8007508:	0800769d 	.word	0x0800769d
 800750c:	0800769d 	.word	0x0800769d
 8007510:	0800769d 	.word	0x0800769d
 8007514:	0800769d 	.word	0x0800769d
 8007518:	0800769d 	.word	0x0800769d
 800751c:	0800769d 	.word	0x0800769d
 8007520:	0800769d 	.word	0x0800769d
 8007524:	0800769d 	.word	0x0800769d
 8007528:	0800769d 	.word	0x0800769d
 800752c:	0800769d 	.word	0x0800769d
 8007530:	0800769d 	.word	0x0800769d
 8007534:	0800769d 	.word	0x0800769d
 8007538:	0800769d 	.word	0x0800769d
 800753c:	0800769d 	.word	0x0800769d
 8007540:	0800769d 	.word	0x0800769d
 8007544:	0800769d 	.word	0x0800769d
 8007548:	0800769d 	.word	0x0800769d
 800754c:	0800769d 	.word	0x0800769d
 8007550:	0800769d 	.word	0x0800769d
 8007554:	0800769d 	.word	0x0800769d
 8007558:	0800769d 	.word	0x0800769d
 800755c:	0800769d 	.word	0x0800769d
 8007560:	0800769d 	.word	0x0800769d
 8007564:	0800769d 	.word	0x0800769d
 8007568:	0800769d 	.word	0x0800769d
 800756c:	0800769d 	.word	0x0800769d
 8007570:	0800769d 	.word	0x0800769d
 8007574:	0800769d 	.word	0x0800769d
 8007578:	0800769d 	.word	0x0800769d
 800757c:	0800769d 	.word	0x0800769d
 8007580:	0800769d 	.word	0x0800769d
 8007584:	080075fb 	.word	0x080075fb
 8007588:	2b9e      	cmp	r3, #158	; 0x9e
 800758a:	d051      	beq.n	8007630 <SCSI_ProcessCmd+0x274>
 800758c:	e086      	b.n	800769c <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800758e:	7afb      	ldrb	r3, [r7, #11]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	4619      	mov	r1, r3
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 f893 	bl	80076c0 <SCSI_TestUnitReady>
 800759a:	4603      	mov	r3, r0
 800759c:	75fb      	strb	r3, [r7, #23]
      break;
 800759e:	e089      	b.n	80076b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80075a0:	7afb      	ldrb	r3, [r7, #11]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	4619      	mov	r1, r3
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 fb9c 	bl	8007ce4 <SCSI_RequestSense>
 80075ac:	4603      	mov	r3, r0
 80075ae:	75fb      	strb	r3, [r7, #23]
      break;
 80075b0:	e080      	b.n	80076b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80075b2:	7afb      	ldrb	r3, [r7, #11]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	4619      	mov	r1, r3
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 f8db 	bl	8007774 <SCSI_Inquiry>
 80075be:	4603      	mov	r3, r0
 80075c0:	75fb      	strb	r3, [r7, #23]
      break;
 80075c2:	e077      	b.n	80076b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80075c4:	7afb      	ldrb	r3, [r7, #11]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	4619      	mov	r1, r3
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 fc58 	bl	8007e80 <SCSI_StartStopUnit>
 80075d0:	4603      	mov	r3, r0
 80075d2:	75fb      	strb	r3, [r7, #23]
      break;
 80075d4:	e06e      	b.n	80076b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80075d6:	7afb      	ldrb	r3, [r7, #11]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	4619      	mov	r1, r3
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f000 fca4 	bl	8007f2a <SCSI_AllowPreventRemovable>
 80075e2:	4603      	mov	r3, r0
 80075e4:	75fb      	strb	r3, [r7, #23]
      break;
 80075e6:	e065      	b.n	80076b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80075e8:	7afb      	ldrb	r3, [r7, #11]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	4619      	mov	r1, r3
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 faec 	bl	8007bcc <SCSI_ModeSense6>
 80075f4:	4603      	mov	r3, r0
 80075f6:	75fb      	strb	r3, [r7, #23]
      break;
 80075f8:	e05c      	b.n	80076b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80075fa:	7afb      	ldrb	r3, [r7, #11]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	4619      	mov	r1, r3
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 fb29 	bl	8007c58 <SCSI_ModeSense10>
 8007606:	4603      	mov	r3, r0
 8007608:	75fb      	strb	r3, [r7, #23]
      break;
 800760a:	e053      	b.n	80076b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800760c:	7afb      	ldrb	r3, [r7, #11]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	4619      	mov	r1, r3
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 fa5e 	bl	8007ad4 <SCSI_ReadFormatCapacity>
 8007618:	4603      	mov	r3, r0
 800761a:	75fb      	strb	r3, [r7, #23]
      break;
 800761c:	e04a      	b.n	80076b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800761e:	7afb      	ldrb	r3, [r7, #11]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	4619      	mov	r1, r3
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 f923 	bl	8007870 <SCSI_ReadCapacity10>
 800762a:	4603      	mov	r3, r0
 800762c:	75fb      	strb	r3, [r7, #23]
      break;
 800762e:	e041      	b.n	80076b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8007630:	7afb      	ldrb	r3, [r7, #11]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	4619      	mov	r1, r3
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f000 f998 	bl	800796c <SCSI_ReadCapacity16>
 800763c:	4603      	mov	r3, r0
 800763e:	75fb      	strb	r3, [r7, #23]
      break;
 8007640:	e038      	b.n	80076b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8007642:	7afb      	ldrb	r3, [r7, #11]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	4619      	mov	r1, r3
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 fc9b 	bl	8007f84 <SCSI_Read10>
 800764e:	4603      	mov	r3, r0
 8007650:	75fb      	strb	r3, [r7, #23]
      break;
 8007652:	e02f      	b.n	80076b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8007654:	7afb      	ldrb	r3, [r7, #11]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	4619      	mov	r1, r3
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f000 fd3c 	bl	80080d8 <SCSI_Read12>
 8007660:	4603      	mov	r3, r0
 8007662:	75fb      	strb	r3, [r7, #23]
      break;
 8007664:	e026      	b.n	80076b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8007666:	7afb      	ldrb	r3, [r7, #11]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	4619      	mov	r1, r3
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 fde7 	bl	8008240 <SCSI_Write10>
 8007672:	4603      	mov	r3, r0
 8007674:	75fb      	strb	r3, [r7, #23]
      break;
 8007676:	e01d      	b.n	80076b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8007678:	7afb      	ldrb	r3, [r7, #11]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	4619      	mov	r1, r3
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 feb4 	bl	80083ec <SCSI_Write12>
 8007684:	4603      	mov	r3, r0
 8007686:	75fb      	strb	r3, [r7, #23]
      break;
 8007688:	e014      	b.n	80076b4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800768a:	7afb      	ldrb	r3, [r7, #11]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	4619      	mov	r1, r3
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 ff91 	bl	80085b8 <SCSI_Verify10>
 8007696:	4603      	mov	r3, r0
 8007698:	75fb      	strb	r3, [r7, #23]
      break;
 800769a:	e00b      	b.n	80076b4 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800769c:	7af9      	ldrb	r1, [r7, #11]
 800769e:	2320      	movs	r3, #32
 80076a0:	2205      	movs	r2, #5
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 fba1 	bl	8007dea <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	2202      	movs	r2, #2
 80076ac:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80076ae:	23ff      	movs	r3, #255	; 0xff
 80076b0:	75fb      	strb	r3, [r7, #23]
      break;
 80076b2:	bf00      	nop
  }

  return ret;
 80076b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3718      	adds	r7, #24
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	460b      	mov	r3, r1
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	32b0      	adds	r2, #176	; 0xb0
 80076d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076dc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d102      	bne.n	80076ea <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 80076e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076e8:	e03f      	b.n	800776a <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00a      	beq.n	800770a <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80076fa:	2320      	movs	r3, #32
 80076fc:	2205      	movs	r2, #5
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f000 fb73 	bl	8007dea <SCSI_SenseCode>

    return -1;
 8007704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007708:	e02f      	b.n	800776a <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007710:	2b02      	cmp	r3, #2
 8007712:	d10b      	bne.n	800772c <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007714:	7af9      	ldrb	r1, [r7, #11]
 8007716:	233a      	movs	r3, #58	; 0x3a
 8007718:	2202      	movs	r2, #2
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f000 fb65 	bl	8007dea <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	2205      	movs	r2, #5
 8007724:	721a      	strb	r2, [r3, #8]
    return -1;
 8007726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800772a:	e01e      	b.n	800776a <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	33b0      	adds	r3, #176	; 0xb0
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4413      	add	r3, r2
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	7afa      	ldrb	r2, [r7, #11]
 8007740:	4610      	mov	r0, r2
 8007742:	4798      	blx	r3
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00b      	beq.n	8007762 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800774a:	7af9      	ldrb	r1, [r7, #11]
 800774c:	233a      	movs	r3, #58	; 0x3a
 800774e:	2202      	movs	r2, #2
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 fb4a 	bl	8007dea <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	2205      	movs	r2, #5
 800775a:	721a      	strb	r2, [r3, #8]

    return -1;
 800775c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007760:	e003      	b.n	800776a <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2200      	movs	r2, #0
 8007766:	60da      	str	r2, [r3, #12]

  return 0;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3718      	adds	r7, #24
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b088      	sub	sp, #32
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	460b      	mov	r3, r1
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	32b0      	adds	r2, #176	; 0xb0
 800778c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007790:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d102      	bne.n	800779e <SCSI_Inquiry+0x2a>
  {
    return -1;
 8007798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800779c:	e05f      	b.n	800785e <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10a      	bne.n	80077be <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80077ae:	2320      	movs	r3, #32
 80077b0:	2205      	movs	r2, #5
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f000 fb19 	bl	8007dea <SCSI_SenseCode>
    return -1;
 80077b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077bc:	e04f      	b.n	800785e <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	3301      	adds	r3, #1
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d020      	beq.n	800780e <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3302      	adds	r3, #2
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d105      	bne.n	80077e2 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80077d6:	2206      	movs	r2, #6
 80077d8:	4923      	ldr	r1, [pc, #140]	; (8007868 <SCSI_Inquiry+0xf4>)
 80077da:	69b8      	ldr	r0, [r7, #24]
 80077dc:	f001 f872 	bl	80088c4 <SCSI_UpdateBotData>
 80077e0:	e03c      	b.n	800785c <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	3302      	adds	r3, #2
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	2b80      	cmp	r3, #128	; 0x80
 80077ea:	d105      	bne.n	80077f8 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80077ec:	2208      	movs	r2, #8
 80077ee:	491f      	ldr	r1, [pc, #124]	; (800786c <SCSI_Inquiry+0xf8>)
 80077f0:	69b8      	ldr	r0, [r7, #24]
 80077f2:	f001 f867 	bl	80088c4 <SCSI_UpdateBotData>
 80077f6:	e031      	b.n	800785c <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80077fe:	2324      	movs	r3, #36	; 0x24
 8007800:	2205      	movs	r2, #5
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f000 faf1 	bl	8007dea <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8007808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800780c:	e027      	b.n	800785e <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	33b0      	adds	r3, #176	; 0xb0
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4413      	add	r3, r2
 800781c:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800781e:	69d9      	ldr	r1, [r3, #28]
 8007820:	7afa      	ldrb	r2, [r7, #11]
 8007822:	4613      	mov	r3, r2
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800782a:	440b      	add	r3, r1
 800782c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	3304      	adds	r3, #4
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	b29b      	uxth	r3, r3
 8007836:	3305      	adds	r3, #5
 8007838:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	3304      	adds	r3, #4
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	b29b      	uxth	r3, r3
 8007842:	8bfa      	ldrh	r2, [r7, #30]
 8007844:	429a      	cmp	r2, r3
 8007846:	d303      	bcc.n	8007850 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3304      	adds	r3, #4
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8007850:	8bfb      	ldrh	r3, [r7, #30]
 8007852:	461a      	mov	r2, r3
 8007854:	6979      	ldr	r1, [r7, #20]
 8007856:	69b8      	ldr	r0, [r7, #24]
 8007858:	f001 f834 	bl	80088c4 <SCSI_UpdateBotData>
  }

  return 0;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3720      	adds	r7, #32
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	24000074 	.word	0x24000074
 800786c:	2400007c 	.word	0x2400007c

08007870 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	460b      	mov	r3, r1
 800787a:	607a      	str	r2, [r7, #4]
 800787c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	32b0      	adds	r2, #176	; 0xb0
 8007888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800788c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d102      	bne.n	800789a <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8007894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007898:	e064      	b.n	8007964 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	33b0      	adds	r3, #176	; 0xb0
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80078b8:	7af8      	ldrb	r0, [r7, #11]
 80078ba:	4798      	blx	r3
 80078bc:	4603      	mov	r3, r0
 80078be:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80078c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d104      	bne.n	80078d2 <SCSI_ReadCapacity10+0x62>
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d108      	bne.n	80078e4 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80078d2:	7af9      	ldrb	r1, [r7, #11]
 80078d4:	233a      	movs	r3, #58	; 0x3a
 80078d6:	2202      	movs	r2, #2
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f000 fa86 	bl	8007dea <SCSI_SenseCode>
    return -1;
 80078de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078e2:	e03f      	b.n	8007964 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80078ea:	3b01      	subs	r3, #1
 80078ec:	0e1b      	lsrs	r3, r3, #24
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80078fa:	3b01      	subs	r3, #1
 80078fc:	0c1b      	lsrs	r3, r3, #16
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800790a:	3b01      	subs	r3, #1
 800790c:	0a1b      	lsrs	r3, r3, #8
 800790e:	b2da      	uxtb	r2, r3
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800791a:	b2db      	uxtb	r3, r3
 800791c:	3b01      	subs	r3, #1
 800791e:	b2da      	uxtb	r2, r3
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800792a:	161b      	asrs	r3, r3, #24
 800792c:	b2da      	uxtb	r2, r3
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007938:	141b      	asrs	r3, r3, #16
 800793a:	b2da      	uxtb	r2, r3
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007946:	0a1b      	lsrs	r3, r3, #8
 8007948:	b29b      	uxth	r3, r3
 800794a:	b2da      	uxtb	r2, r3
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007956:	b2da      	uxtb	r2, r3
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	2208      	movs	r2, #8
 8007960:	60da      	str	r2, [r3, #12]

  return 0;
 8007962:	2300      	movs	r3, #0

}
 8007964:	4618      	mov	r0, r3
 8007966:	3718      	adds	r7, #24
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b088      	sub	sp, #32
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	460b      	mov	r3, r1
 8007976:	607a      	str	r2, [r7, #4]
 8007978:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	32b0      	adds	r2, #176	; 0xb0
 8007984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007988:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d102      	bne.n	8007996 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8007990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007994:	e09a      	b.n	8007acc <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	33b0      	adds	r3, #176	; 0xb0
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80079ae:	69ba      	ldr	r2, [r7, #24]
 80079b0:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80079b4:	7af8      	ldrb	r0, [r7, #11]
 80079b6:	4798      	blx	r3
 80079b8:	4603      	mov	r3, r0
 80079ba:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80079bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d104      	bne.n	80079ce <SCSI_ReadCapacity16+0x62>
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d108      	bne.n	80079e0 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80079ce:	7af9      	ldrb	r1, [r7, #11]
 80079d0:	233a      	movs	r3, #58	; 0x3a
 80079d2:	2202      	movs	r2, #2
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 fa08 	bl	8007dea <SCSI_SenseCode>
    return -1;
 80079da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079de:	e075      	b.n	8007acc <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	330a      	adds	r3, #10
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	330b      	adds	r3, #11
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80079f0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	330c      	adds	r3, #12
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80079fa:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	320d      	adds	r2, #13
 8007a00:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8007a02:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61fb      	str	r3, [r7, #28]
 8007a0c:	e008      	b.n	8007a20 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 8007a0e:	69ba      	ldr	r2, [r7, #24]
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	4413      	add	r3, r2
 8007a14:	3310      	adds	r3, #16
 8007a16:	2200      	movs	r2, #0
 8007a18:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	61fb      	str	r3, [r7, #28]
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	69fa      	ldr	r2, [r7, #28]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d3f1      	bcc.n	8007a0e <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007a30:	3b01      	subs	r3, #1
 8007a32:	0e1b      	lsrs	r3, r3, #24
 8007a34:	b2da      	uxtb	r2, r3
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007a40:	3b01      	subs	r3, #1
 8007a42:	0c1b      	lsrs	r3, r3, #16
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007a50:	3b01      	subs	r3, #1
 8007a52:	0a1b      	lsrs	r3, r3, #8
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	3b01      	subs	r3, #1
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007a70:	161b      	asrs	r3, r3, #24
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007a7e:	141b      	asrs	r3, r3, #16
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007a8c:	0a1b      	lsrs	r3, r3, #8
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	330a      	adds	r3, #10
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	330b      	adds	r3, #11
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007ab2:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	330c      	adds	r3, #12
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8007abc:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	320d      	adds	r2, #13
 8007ac2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8007ac4:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	60da      	str	r2, [r3, #12]

  return 0;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3720      	adds	r7, #32
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b088      	sub	sp, #32
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	460b      	mov	r3, r1
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	32b0      	adds	r2, #176	; 0xb0
 8007aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d102      	bne.n	8007afe <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8007af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007afc:	e061      	b.n	8007bc2 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	33b0      	adds	r3, #176	; 0xb0
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f107 0214 	add.w	r2, r7, #20
 8007b14:	f107 0110 	add.w	r1, r7, #16
 8007b18:	7af8      	ldrb	r0, [r7, #11]
 8007b1a:	4798      	blx	r3
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007b20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d104      	bne.n	8007b32 <SCSI_ReadFormatCapacity+0x5e>
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d108      	bne.n	8007b44 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007b32:	7af9      	ldrb	r1, [r7, #11]
 8007b34:	233a      	movs	r3, #58	; 0x3a
 8007b36:	2202      	movs	r2, #2
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 f956 	bl	8007dea <SCSI_SenseCode>
    return -1;
 8007b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b42:	e03e      	b.n	8007bc2 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8007b44:	2300      	movs	r3, #0
 8007b46:	83fb      	strh	r3, [r7, #30]
 8007b48:	e007      	b.n	8007b5a <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8007b4a:	8bfb      	ldrh	r3, [r7, #30]
 8007b4c:	69ba      	ldr	r2, [r7, #24]
 8007b4e:	4413      	add	r3, r2
 8007b50:	2200      	movs	r2, #0
 8007b52:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8007b54:	8bfb      	ldrh	r3, [r7, #30]
 8007b56:	3301      	adds	r3, #1
 8007b58:	83fb      	strh	r3, [r7, #30]
 8007b5a:	8bfb      	ldrh	r3, [r7, #30]
 8007b5c:	2b0b      	cmp	r3, #11
 8007b5e:	d9f4      	bls.n	8007b4a <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	2208      	movs	r2, #8
 8007b64:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	0e1b      	lsrs	r3, r3, #24
 8007b6c:	b2da      	uxtb	r2, r3
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	3b01      	subs	r3, #1
 8007b76:	0c1b      	lsrs	r3, r3, #16
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	0a1b      	lsrs	r3, r3, #8
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	2202      	movs	r2, #2
 8007b9a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007b9c:	8abb      	ldrh	r3, [r7, #20]
 8007b9e:	141b      	asrs	r3, r3, #16
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007ba6:	8abb      	ldrh	r3, [r7, #20]
 8007ba8:	0a1b      	lsrs	r3, r3, #8
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007bb2:	8abb      	ldrh	r3, [r7, #20]
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	220c      	movs	r2, #12
 8007bbe:	60da      	str	r2, [r3, #12]

  return 0;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3720      	adds	r7, #32
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
	...

08007bcc <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	607a      	str	r2, [r7, #4]
 8007bd8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	32b0      	adds	r2, #176	; 0xb0
 8007be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8007bea:	2304      	movs	r3, #4
 8007bec:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d102      	bne.n	8007bfa <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8007bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bf8:	e027      	b.n	8007c4a <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	33b0      	adds	r3, #176	; 0xb0
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	7afa      	ldrb	r2, [r7, #11]
 8007c0e:	4610      	mov	r0, r2
 8007c10:	4798      	blx	r3
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d006      	beq.n	8007c26 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 8007c18:	4b0e      	ldr	r3, [pc, #56]	; (8007c54 <SCSI_ModeSense6+0x88>)
 8007c1a:	789b      	ldrb	r3, [r3, #2]
 8007c1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	4b0c      	ldr	r3, [pc, #48]	; (8007c54 <SCSI_ModeSense6+0x88>)
 8007c24:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	3304      	adds	r3, #4
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	8afa      	ldrh	r2, [r7, #22]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d303      	bcc.n	8007c3c <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3304      	adds	r3, #4
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8007c3c:	8afb      	ldrh	r3, [r7, #22]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	4904      	ldr	r1, [pc, #16]	; (8007c54 <SCSI_ModeSense6+0x88>)
 8007c42:	6938      	ldr	r0, [r7, #16]
 8007c44:	f000 fe3e 	bl	80088c4 <SCSI_UpdateBotData>

  return 0;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3718      	adds	r7, #24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	24000084 	.word	0x24000084

08007c58 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	460b      	mov	r3, r1
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	32b0      	adds	r2, #176	; 0xb0
 8007c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c74:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8007c76:	2308      	movs	r3, #8
 8007c78:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d102      	bne.n	8007c86 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8007c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c84:	e027      	b.n	8007cd6 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	33b0      	adds	r3, #176	; 0xb0
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	7afa      	ldrb	r2, [r7, #11]
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	4798      	blx	r3
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d006      	beq.n	8007cb2 <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 8007ca4:	4b0e      	ldr	r3, [pc, #56]	; (8007ce0 <SCSI_ModeSense10+0x88>)
 8007ca6:	78db      	ldrb	r3, [r3, #3]
 8007ca8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	4b0c      	ldr	r3, [pc, #48]	; (8007ce0 <SCSI_ModeSense10+0x88>)
 8007cb0:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	3308      	adds	r3, #8
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	8afa      	ldrh	r2, [r7, #22]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d303      	bcc.n	8007cc8 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	3308      	adds	r3, #8
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8007cc8:	8afb      	ldrh	r3, [r7, #22]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	4904      	ldr	r1, [pc, #16]	; (8007ce0 <SCSI_ModeSense10+0x88>)
 8007cce:	6938      	ldr	r0, [r7, #16]
 8007cd0:	f000 fdf8 	bl	80088c4 <SCSI_UpdateBotData>

  return 0;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	24000088 	.word	0x24000088

08007ce4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	460b      	mov	r3, r1
 8007cee:	607a      	str	r2, [r7, #4]
 8007cf0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	32b0      	adds	r2, #176	; 0xb0
 8007cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d00:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d102      	bne.n	8007d0e <SCSI_RequestSense+0x2a>
  {
    return -1;
 8007d08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d0c:	e069      	b.n	8007de2 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10a      	bne.n	8007d2e <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007d1e:	2320      	movs	r3, #32
 8007d20:	2205      	movs	r2, #5
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 f861 	bl	8007dea <SCSI_SenseCode>
    return -1;
 8007d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d2c:	e059      	b.n	8007de2 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8007d2e:	2300      	movs	r3, #0
 8007d30:	75fb      	strb	r3, [r7, #23]
 8007d32:	e007      	b.n	8007d44 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4413      	add	r3, r2
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8007d3e:	7dfb      	ldrb	r3, [r7, #23]
 8007d40:	3301      	adds	r3, #1
 8007d42:	75fb      	strb	r3, [r7, #23]
 8007d44:	7dfb      	ldrb	r3, [r7, #23]
 8007d46:	2b11      	cmp	r3, #17
 8007d48:	d9f4      	bls.n	8007d34 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	2270      	movs	r2, #112	; 0x70
 8007d4e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	220c      	movs	r2, #12
 8007d54:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d02e      	beq.n	8007dc4 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	3248      	adds	r2, #72	; 0x48
 8007d72:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	3348      	adds	r3, #72	; 0x48
 8007d84:	00db      	lsls	r3, r3, #3
 8007d86:	4413      	add	r3, r2
 8007d88:	791a      	ldrb	r2, [r3, #4]
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	3348      	adds	r3, #72	; 0x48
 8007d98:	00db      	lsls	r3, r3, #3
 8007d9a:	4413      	add	r3, r2
 8007d9c:	795a      	ldrb	r2, [r3, #5]
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007da8:	3301      	adds	r3, #1
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d103      	bne.n	8007dc4 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	2212      	movs	r2, #18
 8007dc8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	2b12      	cmp	r3, #18
 8007dd2:	d805      	bhi.n	8007de0 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3718      	adds	r7, #24
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b085      	sub	sp, #20
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	4608      	mov	r0, r1
 8007df4:	4611      	mov	r1, r2
 8007df6:	461a      	mov	r2, r3
 8007df8:	4603      	mov	r3, r0
 8007dfa:	70fb      	strb	r3, [r7, #3]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	70bb      	strb	r3, [r7, #2]
 8007e00:	4613      	mov	r3, r2
 8007e02:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	32b0      	adds	r2, #176	; 0xb0
 8007e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e12:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d02c      	beq.n	8007e74 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007e20:	461a      	mov	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	3248      	adds	r2, #72	; 0x48
 8007e26:	78b9      	ldrb	r1, [r7, #2]
 8007e28:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	3348      	adds	r3, #72	; 0x48
 8007e36:	00db      	lsls	r3, r3, #3
 8007e38:	4413      	add	r3, r2
 8007e3a:	787a      	ldrb	r2, [r7, #1]
 8007e3c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	3348      	adds	r3, #72	; 0x48
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	4413      	add	r3, r2
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007e56:	3301      	adds	r3, #1
 8007e58:	b2da      	uxtb	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007e66:	2b04      	cmp	r3, #4
 8007e68:	d105      	bne.n	8007e76 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8007e72:	e000      	b.n	8007e76 <SCSI_SenseCode+0x8c>
    return;
 8007e74:	bf00      	nop
  }
}
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	607a      	str	r2, [r7, #4]
 8007e8c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	32b0      	adds	r2, #176	; 0xb0
 8007e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d102      	bne.n	8007eaa <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8007ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ea8:	e03b      	b.n	8007f22 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d10f      	bne.n	8007ed4 <SCSI_StartStopUnit+0x54>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	f003 0303 	and.w	r3, r3, #3
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d108      	bne.n	8007ed4 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007ec2:	7af9      	ldrb	r1, [r7, #11]
 8007ec4:	2324      	movs	r3, #36	; 0x24
 8007ec6:	2205      	movs	r2, #5
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f7ff ff8e 	bl	8007dea <SCSI_SenseCode>

    return -1;
 8007ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ed2:	e026      	b.n	8007f22 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	f003 0303 	and.w	r3, r3, #3
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d104      	bne.n	8007eec <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8007eea:	e016      	b.n	8007f1a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	3304      	adds	r3, #4
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	f003 0303 	and.w	r3, r3, #3
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d104      	bne.n	8007f04 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2202      	movs	r2, #2
 8007efe:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8007f02:	e00a      	b.n	8007f1a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3304      	adds	r3, #4
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	f003 0303 	and.w	r3, r3, #3
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	d103      	bne.n	8007f1a <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	60da      	str	r2, [r3, #12]

  return 0;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b087      	sub	sp, #28
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	60f8      	str	r0, [r7, #12]
 8007f32:	460b      	mov	r3, r1
 8007f34:	607a      	str	r2, [r7, #4]
 8007f36:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	32b0      	adds	r2, #176	; 0xb0
 8007f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f46:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d102      	bne.n	8007f54 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8007f4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f52:	e011      	b.n	8007f78 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3304      	adds	r3, #4
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d104      	bne.n	8007f68 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8007f66:	e003      	b.n	8007f70 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	2200      	movs	r2, #0
 8007f74:	60da      	str	r2, [r3, #12]

  return 0;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	371c      	adds	r7, #28
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	607a      	str	r2, [r7, #4]
 8007f90:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	32b0      	adds	r2, #176	; 0xb0
 8007f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d102      	bne.n	8007fae <SCSI_Read10+0x2a>
  {
    return -1;
 8007fa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fac:	e090      	b.n	80080d0 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	7a1b      	ldrb	r3, [r3, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f040 8082 	bne.w	80080bc <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007fbe:	b25b      	sxtb	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	db0a      	blt.n	8007fda <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007fca:	2320      	movs	r3, #32
 8007fcc:	2205      	movs	r2, #5
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f7ff ff0b 	bl	8007dea <SCSI_SenseCode>
      return -1;
 8007fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fd8:	e07a      	b.n	80080d0 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d108      	bne.n	8007ff6 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007fe4:	7af9      	ldrb	r1, [r7, #11]
 8007fe6:	233a      	movs	r3, #58	; 0x3a
 8007fe8:	2202      	movs	r2, #2
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f7ff fefd 	bl	8007dea <SCSI_SenseCode>

      return -1;
 8007ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ff4:	e06c      	b.n	80080d0 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	33b0      	adds	r3, #176	; 0xb0
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	7afa      	ldrb	r2, [r7, #11]
 800800a:	4610      	mov	r0, r2
 800800c:	4798      	blx	r3
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d008      	beq.n	8008026 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008014:	7af9      	ldrb	r1, [r7, #11]
 8008016:	233a      	movs	r3, #58	; 0x3a
 8008018:	2202      	movs	r2, #2
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f7ff fee5 	bl	8007dea <SCSI_SenseCode>
      return -1;
 8008020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008024:	e054      	b.n	80080d0 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	3302      	adds	r3, #2
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	3303      	adds	r3, #3
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008036:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	3304      	adds	r3, #4
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008040:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	3205      	adds	r2, #5
 8008046:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8008048:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	3307      	adds	r3, #7
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	021b      	lsls	r3, r3, #8
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	3208      	adds	r2, #8
 800805c:	7812      	ldrb	r2, [r2, #0]
 800805e:	431a      	orrs	r2, r3
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008072:	7af9      	ldrb	r1, [r7, #11]
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 fadc 	bl	8008632 <SCSI_CheckAddressRange>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	da02      	bge.n	8008086 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008084:	e024      	b.n	80080d0 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008092:	6979      	ldr	r1, [r7, #20]
 8008094:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8008098:	fb01 f303 	mul.w	r3, r1, r3
 800809c:	429a      	cmp	r2, r3
 800809e:	d00a      	beq.n	80080b6 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80080a6:	2320      	movs	r3, #32
 80080a8:	2205      	movs	r2, #5
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f7ff fe9d 	bl	8007dea <SCSI_SenseCode>
      return -1;
 80080b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080b4:	e00c      	b.n	80080d0 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2202      	movs	r2, #2
 80080ba:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080c2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80080c4:	7afb      	ldrb	r3, [r7, #11]
 80080c6:	4619      	mov	r1, r3
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f000 fadf 	bl	800868c <SCSI_ProcessRead>
 80080ce:	4603      	mov	r3, r0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3718      	adds	r7, #24
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	460b      	mov	r3, r1
 80080e2:	607a      	str	r2, [r7, #4]
 80080e4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	32b0      	adds	r2, #176	; 0xb0
 80080f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d102      	bne.n	8008102 <SCSI_Read12+0x2a>
  {
    return -1;
 80080fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008100:	e09a      	b.n	8008238 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	7a1b      	ldrb	r3, [r3, #8]
 8008106:	2b00      	cmp	r3, #0
 8008108:	f040 808c 	bne.w	8008224 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8008112:	b25b      	sxtb	r3, r3
 8008114:	2b00      	cmp	r3, #0
 8008116:	db0a      	blt.n	800812e <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800811e:	2320      	movs	r3, #32
 8008120:	2205      	movs	r2, #5
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f7ff fe61 	bl	8007dea <SCSI_SenseCode>
      return -1;
 8008128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800812c:	e084      	b.n	8008238 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8008134:	2b02      	cmp	r3, #2
 8008136:	d108      	bne.n	800814a <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008138:	7af9      	ldrb	r1, [r7, #11]
 800813a:	233a      	movs	r3, #58	; 0x3a
 800813c:	2202      	movs	r2, #2
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f7ff fe53 	bl	8007dea <SCSI_SenseCode>
      return -1;
 8008144:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008148:	e076      	b.n	8008238 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	33b0      	adds	r3, #176	; 0xb0
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4413      	add	r3, r2
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	7afa      	ldrb	r2, [r7, #11]
 800815e:	4610      	mov	r0, r2
 8008160:	4798      	blx	r3
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d008      	beq.n	800817a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008168:	7af9      	ldrb	r1, [r7, #11]
 800816a:	233a      	movs	r3, #58	; 0x3a
 800816c:	2202      	movs	r2, #2
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f7ff fe3b 	bl	8007dea <SCSI_SenseCode>
      return -1;
 8008174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008178:	e05e      	b.n	8008238 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	3302      	adds	r3, #2
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	3303      	adds	r3, #3
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800818a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3304      	adds	r3, #4
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008194:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	3205      	adds	r2, #5
 800819a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800819c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3306      	adds	r3, #6
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3307      	adds	r3, #7
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80081b4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	3308      	adds	r3, #8
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80081be:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	3209      	adds	r2, #9
 80081c4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80081c6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80081da:	7af9      	ldrb	r1, [r7, #11]
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f000 fa28 	bl	8008632 <SCSI_CheckAddressRange>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	da02      	bge.n	80081ee <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80081e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081ec:	e024      	b.n	8008238 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80081fa:	6979      	ldr	r1, [r7, #20]
 80081fc:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8008200:	fb01 f303 	mul.w	r3, r1, r3
 8008204:	429a      	cmp	r2, r3
 8008206:	d00a      	beq.n	800821e <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800820e:	2320      	movs	r3, #32
 8008210:	2205      	movs	r2, #5
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f7ff fde9 	bl	8007dea <SCSI_SenseCode>
      return -1;
 8008218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800821c:	e00c      	b.n	8008238 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	2202      	movs	r2, #2
 8008222:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800822a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800822c:	7afb      	ldrb	r3, [r7, #11]
 800822e:	4619      	mov	r1, r3
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f000 fa2b 	bl	800868c <SCSI_ProcessRead>
 8008236:	4603      	mov	r3, r0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	460b      	mov	r3, r1
 800824a:	607a      	str	r2, [r7, #4]
 800824c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	32b0      	adds	r2, #176	; 0xb0
 8008258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800825c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d102      	bne.n	800826a <SCSI_Write10+0x2a>
  {
    return -1;
 8008264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008268:	e0ba      	b.n	80083e0 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	7a1b      	ldrb	r3, [r3, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	f040 80b0 	bne.w	80083d4 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008284:	2320      	movs	r3, #32
 8008286:	2205      	movs	r2, #5
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f7ff fdae 	bl	8007dea <SCSI_SenseCode>
      return -1;
 800828e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008292:	e0a5      	b.n	80083e0 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800829a:	b25b      	sxtb	r3, r3
 800829c:	2b00      	cmp	r3, #0
 800829e:	da0a      	bge.n	80082b6 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80082a6:	2320      	movs	r3, #32
 80082a8:	2205      	movs	r2, #5
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f7ff fd9d 	bl	8007dea <SCSI_SenseCode>
      return -1;
 80082b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082b4:	e094      	b.n	80083e0 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	33b0      	adds	r3, #176	; 0xb0
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	7afa      	ldrb	r2, [r7, #11]
 80082ca:	4610      	mov	r0, r2
 80082cc:	4798      	blx	r3
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d008      	beq.n	80082e6 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80082d4:	7af9      	ldrb	r1, [r7, #11]
 80082d6:	233a      	movs	r3, #58	; 0x3a
 80082d8:	2202      	movs	r2, #2
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f7ff fd85 	bl	8007dea <SCSI_SenseCode>
      return -1;
 80082e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082e4:	e07c      	b.n	80083e0 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	33b0      	adds	r3, #176	; 0xb0
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	7afa      	ldrb	r2, [r7, #11]
 80082fa:	4610      	mov	r0, r2
 80082fc:	4798      	blx	r3
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d008      	beq.n	8008316 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8008304:	7af9      	ldrb	r1, [r7, #11]
 8008306:	2327      	movs	r3, #39	; 0x27
 8008308:	2202      	movs	r2, #2
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f7ff fd6d 	bl	8007dea <SCSI_SenseCode>
      return -1;
 8008310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008314:	e064      	b.n	80083e0 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	3302      	adds	r3, #2
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	3303      	adds	r3, #3
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008326:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	3304      	adds	r3, #4
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008330:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	3205      	adds	r2, #5
 8008336:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8008338:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	3307      	adds	r3, #7
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	3208      	adds	r2, #8
 800834c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800834e:	431a      	orrs	r2, r3
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008362:	7af9      	ldrb	r1, [r7, #11]
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f000 f964 	bl	8008632 <SCSI_CheckAddressRange>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	da02      	bge.n	8008376 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008374:	e034      	b.n	80083e0 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008382:	fb02 f303 	mul.w	r3, r2, r3
 8008386:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	429a      	cmp	r2, r3
 8008392:	d00a      	beq.n	80083aa <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800839a:	2320      	movs	r3, #32
 800839c:	2205      	movs	r2, #5
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f7ff fd23 	bl	8007dea <SCSI_SenseCode>
      return -1;
 80083a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083a8:	e01a      	b.n	80083e0 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083b0:	bf28      	it	cs
 80083b2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80083b6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	2201      	movs	r2, #1
 80083bc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80083be:	4b0a      	ldr	r3, [pc, #40]	; (80083e8 <SCSI_Write10+0x1a8>)
 80083c0:	7819      	ldrb	r1, [r3, #0]
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f103 0210 	add.w	r2, r3, #16
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f002 faff 	bl	800a9ce <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80083d0:	2300      	movs	r3, #0
 80083d2:	e005      	b.n	80083e0 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 80083d4:	7afb      	ldrb	r3, [r7, #11]
 80083d6:	4619      	mov	r1, r3
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f000 f9dd 	bl	8008798 <SCSI_ProcessWrite>
 80083de:	4603      	mov	r3, r0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3718      	adds	r7, #24
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	24000073 	.word	0x24000073

080083ec <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	460b      	mov	r3, r1
 80083f6:	607a      	str	r2, [r7, #4]
 80083f8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	32b0      	adds	r2, #176	; 0xb0
 8008404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008408:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d102      	bne.n	8008416 <SCSI_Write12+0x2a>
  {
    return -1;
 8008410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008414:	e0ca      	b.n	80085ac <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	7a1b      	ldrb	r3, [r3, #8]
 800841a:	2b00      	cmp	r3, #0
 800841c:	f040 80c0 	bne.w	80085a0 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10a      	bne.n	8008440 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008430:	2320      	movs	r3, #32
 8008432:	2205      	movs	r2, #5
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f7ff fcd8 	bl	8007dea <SCSI_SenseCode>
      return -1;
 800843a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800843e:	e0b5      	b.n	80085ac <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8008446:	b25b      	sxtb	r3, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	da0a      	bge.n	8008462 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008452:	2320      	movs	r3, #32
 8008454:	2205      	movs	r2, #5
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f7ff fcc7 	bl	8007dea <SCSI_SenseCode>
      return -1;
 800845c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008460:	e0a4      	b.n	80085ac <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	33b0      	adds	r3, #176	; 0xb0
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	7afa      	ldrb	r2, [r7, #11]
 8008476:	4610      	mov	r0, r2
 8008478:	4798      	blx	r3
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00b      	beq.n	8008498 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008480:	7af9      	ldrb	r1, [r7, #11]
 8008482:	233a      	movs	r3, #58	; 0x3a
 8008484:	2202      	movs	r2, #2
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f7ff fcaf 	bl	8007dea <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	2205      	movs	r2, #5
 8008490:	721a      	strb	r2, [r3, #8]
      return -1;
 8008492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008496:	e089      	b.n	80085ac <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	33b0      	adds	r3, #176	; 0xb0
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	7afa      	ldrb	r2, [r7, #11]
 80084ac:	4610      	mov	r0, r2
 80084ae:	4798      	blx	r3
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00b      	beq.n	80084ce <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80084b6:	7af9      	ldrb	r1, [r7, #11]
 80084b8:	2327      	movs	r3, #39	; 0x27
 80084ba:	2202      	movs	r2, #2
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f7ff fc94 	bl	8007dea <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2205      	movs	r2, #5
 80084c6:	721a      	strb	r2, [r3, #8]
      return -1;
 80084c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084cc:	e06e      	b.n	80085ac <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	3302      	adds	r3, #2
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	3303      	adds	r3, #3
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80084de:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	3304      	adds	r3, #4
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80084e8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	3205      	adds	r2, #5
 80084ee:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80084f0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	3306      	adds	r3, #6
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	3307      	adds	r3, #7
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008508:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	3308      	adds	r3, #8
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8008512:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	3209      	adds	r2, #9
 8008518:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800851a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800852e:	7af9      	ldrb	r1, [r7, #11]
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 f87e 	bl	8008632 <SCSI_CheckAddressRange>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	da02      	bge.n	8008542 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800853c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008540:	e034      	b.n	80085ac <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800854e:	fb02 f303 	mul.w	r3, r2, r3
 8008552:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	429a      	cmp	r2, r3
 800855e:	d00a      	beq.n	8008576 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008566:	2320      	movs	r3, #32
 8008568:	2205      	movs	r2, #5
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f7ff fc3d 	bl	8007dea <SCSI_SenseCode>
      return -1;
 8008570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008574:	e01a      	b.n	80085ac <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800857c:	bf28      	it	cs
 800857e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008582:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	2201      	movs	r2, #1
 8008588:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800858a:	4b0a      	ldr	r3, [pc, #40]	; (80085b4 <SCSI_Write12+0x1c8>)
 800858c:	7819      	ldrb	r1, [r3, #0]
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f103 0210 	add.w	r2, r3, #16
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f002 fa19 	bl	800a9ce <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800859c:	2300      	movs	r3, #0
 800859e:	e005      	b.n	80085ac <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 80085a0:	7afb      	ldrb	r3, [r7, #11]
 80085a2:	4619      	mov	r1, r3
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f000 f8f7 	bl	8008798 <SCSI_ProcessWrite>
 80085aa:	4603      	mov	r3, r0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	24000073 	.word	0x24000073

080085b8 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	460b      	mov	r3, r1
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	32b0      	adds	r2, #176	; 0xb0
 80085d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d102      	bne.n	80085e2 <SCSI_Verify10+0x2a>
  {
    return -1;
 80085dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085e0:	e023      	b.n	800862a <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	3301      	adds	r3, #1
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	f003 0302 	and.w	r3, r3, #2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d008      	beq.n	8008602 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80085f0:	7af9      	ldrb	r1, [r7, #11]
 80085f2:	2324      	movs	r3, #36	; 0x24
 80085f4:	2205      	movs	r2, #5
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f7ff fbf7 	bl	8007dea <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80085fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008600:	e013      	b.n	800862a <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800860e:	7af9      	ldrb	r1, [r7, #11]
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f000 f80e 	bl	8008632 <SCSI_CheckAddressRange>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	da02      	bge.n	8008622 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800861c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008620:	e003      	b.n	800862a <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2200      	movs	r2, #0
 8008626:	60da      	str	r2, [r3, #12]

  return 0;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3718      	adds	r7, #24
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b086      	sub	sp, #24
 8008636:	af00      	add	r7, sp, #0
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	603b      	str	r3, [r7, #0]
 800863e:	460b      	mov	r3, r1
 8008640:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	32b0      	adds	r2, #176	; 0xb0
 800864c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008650:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d102      	bne.n	800865e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8008658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800865c:	e011      	b.n	8008682 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	441a      	add	r2, r3
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800866a:	429a      	cmp	r2, r3
 800866c:	d908      	bls.n	8008680 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800866e:	7af9      	ldrb	r1, [r7, #11]
 8008670:	2321      	movs	r3, #33	; 0x21
 8008672:	2205      	movs	r2, #5
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f7ff fbb8 	bl	8007dea <SCSI_SenseCode>
    return -1;
 800867a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800867e:	e000      	b.n	8008682 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3718      	adds	r7, #24
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
	...

0800868c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800868c:	b590      	push	{r4, r7, lr}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	460b      	mov	r3, r1
 8008696:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	32b0      	adds	r2, #176	; 0xb0
 80086a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d102      	bne.n	80086b4 <SCSI_ProcessRead+0x28>
  {
    return -1;
 80086ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086b2:	e06a      	b.n	800878a <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80086c0:	fb02 f303 	mul.w	r3, r2, r3
 80086c4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086cc:	bf28      	it	cs
 80086ce:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80086d2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	33b0      	adds	r3, #176	; 0xb0
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	691c      	ldr	r4, [r3, #16]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f103 0110 	add.w	r1, r3, #16
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80086f8:	4618      	mov	r0, r3
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8008700:	b29b      	uxth	r3, r3
 8008702:	78f8      	ldrb	r0, [r7, #3]
 8008704:	47a0      	blx	r4
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	da08      	bge.n	800871e <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800870c:	78f9      	ldrb	r1, [r7, #3]
 800870e:	2311      	movs	r3, #17
 8008710:	2204      	movs	r2, #4
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7ff fb69 	bl	8007dea <SCSI_SenseCode>
    return -1;
 8008718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800871c:	e035      	b.n	800878a <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800871e:	4b1d      	ldr	r3, [pc, #116]	; (8008794 <SCSI_ProcessRead+0x108>)
 8008720:	7819      	ldrb	r1, [r3, #0]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f103 0210 	add.w	r2, r3, #16
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f002 f92e 	bl	800a98c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800873c:	4619      	mov	r1, r3
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	fbb3 f3f1 	udiv	r3, r3, r1
 8008744:	441a      	add	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008758:	4619      	mov	r1, r3
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008760:	1ad2      	subs	r2, r2, r3
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	1ad2      	subs	r2, r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800877e:	2b00      	cmp	r3, #0
 8008780:	d102      	bne.n	8008788 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2203      	movs	r2, #3
 8008786:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	bd90      	pop	{r4, r7, pc}
 8008792:	bf00      	nop
 8008794:	24000072 	.word	0x24000072

08008798 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008798:	b590      	push	{r4, r7, lr}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	460b      	mov	r3, r1
 80087a2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	32b0      	adds	r2, #176	; 0xb0
 80087ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d102      	bne.n	80087c0 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 80087ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087be:	e07a      	b.n	80088b6 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80087cc:	fb02 f303 	mul.w	r3, r2, r3
 80087d0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087d8:	bf28      	it	cs
 80087da:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80087de:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	33b0      	adds	r3, #176	; 0xb0
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	695c      	ldr	r4, [r3, #20]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f103 0110 	add.w	r1, r3, #16
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008804:	4618      	mov	r0, r3
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800880c:	b29b      	uxth	r3, r3
 800880e:	78f8      	ldrb	r0, [r7, #3]
 8008810:	47a0      	blx	r4
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	da08      	bge.n	800882a <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8008818:	78f9      	ldrb	r1, [r7, #3]
 800881a:	2303      	movs	r3, #3
 800881c:	2204      	movs	r2, #4
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7ff fae3 	bl	8007dea <SCSI_SenseCode>
    return -1;
 8008824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008828:	e045      	b.n	80088b6 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008836:	4619      	mov	r1, r3
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	fbb3 f3f1 	udiv	r3, r3, r1
 800883e:	441a      	add	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008852:	4619      	mov	r1, r3
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	fbb3 f3f1 	udiv	r3, r3, r1
 800885a:	1ad2      	subs	r2, r2, r3
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	1ad2      	subs	r2, r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008878:	2b00      	cmp	r3, #0
 800887a:	d104      	bne.n	8008886 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800887c:	2100      	movs	r1, #0
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7fe fce6 	bl	8007250 <MSC_BOT_SendCSW>
 8008884:	e016      	b.n	80088b4 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008892:	fb02 f303 	mul.w	r3, r2, r3
 8008896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800889a:	bf28      	it	cs
 800889c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80088a0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80088a2:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <SCSI_ProcessWrite+0x128>)
 80088a4:	7819      	ldrb	r1, [r3, #0]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f103 0210 	add.w	r2, r3, #16
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f002 f88d 	bl	800a9ce <USBD_LL_PrepareReceive>
  }

  return 0;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd90      	pop	{r4, r7, pc}
 80088be:	bf00      	nop
 80088c0:	24000073 	.word	0x24000073

080088c4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	4613      	mov	r3, r2
 80088d0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80088d2:	88fb      	ldrh	r3, [r7, #6]
 80088d4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d102      	bne.n	80088e2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80088dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088e0:	e013      	b.n	800890a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80088e2:	8afa      	ldrh	r2, [r7, #22]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80088e8:	e00b      	b.n	8008902 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80088ea:	8afb      	ldrh	r3, [r7, #22]
 80088ec:	3b01      	subs	r3, #1
 80088ee:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80088f0:	8afb      	ldrh	r3, [r7, #22]
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	441a      	add	r2, r3
 80088f6:	8afb      	ldrh	r3, [r7, #22]
 80088f8:	7811      	ldrb	r1, [r2, #0]
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	4413      	add	r3, r2
 80088fe:	460a      	mov	r2, r1
 8008900:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8008902:	8afb      	ldrh	r3, [r7, #22]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1f0      	bne.n	80088ea <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
	...

08008918 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	4613      	mov	r3, r2
 8008924:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10a      	bne.n	8008942 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800892c:	4817      	ldr	r0, [pc, #92]	; (800898c <USBD_Init+0x74>)
 800892e:	f002 f977 	bl	800ac20 <iprintf>
 8008932:	4817      	ldr	r0, [pc, #92]	; (8008990 <USBD_Init+0x78>)
 8008934:	f002 f974 	bl	800ac20 <iprintf>
 8008938:	200a      	movs	r0, #10
 800893a:	f002 f983 	bl	800ac44 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800893e:	2303      	movs	r3, #3
 8008940:	e01f      	b.n	8008982 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d003      	beq.n	8008968 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	79fa      	ldrb	r2, [r7, #7]
 8008974:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f001 feae 	bl	800a6d8 <USBD_LL_Init>
 800897c:	4603      	mov	r3, r0
 800897e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008980:	7dfb      	ldrb	r3, [r7, #23]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3718      	adds	r7, #24
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	0800b9b4 	.word	0x0800b9b4
 8008990:	0800b9bc 	.word	0x0800b9bc

08008994 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10a      	bne.n	80089be <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80089a8:	481a      	ldr	r0, [pc, #104]	; (8008a14 <USBD_RegisterClass+0x80>)
 80089aa:	f002 f939 	bl	800ac20 <iprintf>
 80089ae:	481a      	ldr	r0, [pc, #104]	; (8008a18 <USBD_RegisterClass+0x84>)
 80089b0:	f002 f936 	bl	800ac20 <iprintf>
 80089b4:	200a      	movs	r0, #10
 80089b6:	f002 f945 	bl	800ac44 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e025      	b.n	8008a0a <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	32ae      	adds	r2, #174	; 0xae
 80089d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00f      	beq.n	80089fa <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	32ae      	adds	r2, #174	; 0xae
 80089e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ea:	f107 020e 	add.w	r2, r7, #14
 80089ee:	4610      	mov	r0, r2
 80089f0:	4798      	blx	r3
 80089f2:	4602      	mov	r2, r0
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008a00:	1c5a      	adds	r2, r3, #1
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	0800b9b4 	.word	0x0800b9b4
 8008a18:	0800b9d4 	.word	0x0800b9d4

08008a1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f001 fea9 	bl	800a77c <USBD_LL_Start>
 8008a2a:	4603      	mov	r3, r0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a3c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	370c      	adds	r7, #12
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b084      	sub	sp, #16
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	460b      	mov	r3, r1
 8008a54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d009      	beq.n	8008a78 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	78fa      	ldrb	r2, [r7, #3]
 8008a6e:	4611      	mov	r1, r2
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	4798      	blx	r3
 8008a74:	4603      	mov	r3, r0
 8008a76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	78fa      	ldrb	r2, [r7, #3]
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	4798      	blx	r3
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b084      	sub	sp, #16
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ac6:	6839      	ldr	r1, [r7, #0]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f001 f90e 	bl	8009cea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008adc:	461a      	mov	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008aea:	f003 031f 	and.w	r3, r3, #31
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d01a      	beq.n	8008b28 <USBD_LL_SetupStage+0x72>
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d822      	bhi.n	8008b3c <USBD_LL_SetupStage+0x86>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d002      	beq.n	8008b00 <USBD_LL_SetupStage+0x4a>
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d00a      	beq.n	8008b14 <USBD_LL_SetupStage+0x5e>
 8008afe:	e01d      	b.n	8008b3c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fb65 	bl	80091d8 <USBD_StdDevReq>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	73fb      	strb	r3, [r7, #15]
      break;
 8008b12:	e020      	b.n	8008b56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fbcd 	bl	80092bc <USBD_StdItfReq>
 8008b22:	4603      	mov	r3, r0
 8008b24:	73fb      	strb	r3, [r7, #15]
      break;
 8008b26:	e016      	b.n	8008b56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fc2f 	bl	8009394 <USBD_StdEPReq>
 8008b36:	4603      	mov	r3, r0
 8008b38:	73fb      	strb	r3, [r7, #15]
      break;
 8008b3a:	e00c      	b.n	8008b56 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f001 fe95 	bl	800a87a <USBD_LL_StallEP>
 8008b50:	4603      	mov	r3, r0
 8008b52:	73fb      	strb	r3, [r7, #15]
      break;
 8008b54:	bf00      	nop
  }

  return ret;
 8008b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	607a      	str	r2, [r7, #4]
 8008b6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008b72:	7afb      	ldrb	r3, [r7, #11]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d16e      	bne.n	8008c56 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008b7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	f040 8098 	bne.w	8008cbc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	689a      	ldr	r2, [r3, #8]
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d913      	bls.n	8008bc0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	689a      	ldr	r2, [r3, #8]
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	1ad2      	subs	r2, r2, r3
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	68da      	ldr	r2, [r3, #12]
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	bf28      	it	cs
 8008bb2:	4613      	movcs	r3, r2
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	6879      	ldr	r1, [r7, #4]
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f001 f979 	bl	8009eb0 <USBD_CtlContinueRx>
 8008bbe:	e07d      	b.n	8008cbc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008bc6:	f003 031f 	and.w	r3, r3, #31
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d014      	beq.n	8008bf8 <USBD_LL_DataOutStage+0x98>
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d81d      	bhi.n	8008c0e <USBD_LL_DataOutStage+0xae>
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d002      	beq.n	8008bdc <USBD_LL_DataOutStage+0x7c>
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d003      	beq.n	8008be2 <USBD_LL_DataOutStage+0x82>
 8008bda:	e018      	b.n	8008c0e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	75bb      	strb	r3, [r7, #22]
            break;
 8008be0:	e018      	b.n	8008c14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	4619      	mov	r1, r3
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 fa64 	bl	80090ba <USBD_CoreFindIF>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	75bb      	strb	r3, [r7, #22]
            break;
 8008bf6:	e00d      	b.n	8008c14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	4619      	mov	r1, r3
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 fa66 	bl	80090d4 <USBD_CoreFindEP>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	75bb      	strb	r3, [r7, #22]
            break;
 8008c0c:	e002      	b.n	8008c14 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	75bb      	strb	r3, [r7, #22]
            break;
 8008c12:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008c14:	7dbb      	ldrb	r3, [r7, #22]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d119      	bne.n	8008c4e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b03      	cmp	r3, #3
 8008c24:	d113      	bne.n	8008c4e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008c26:	7dba      	ldrb	r2, [r7, #22]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	32ae      	adds	r2, #174	; 0xae
 8008c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00b      	beq.n	8008c4e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008c36:	7dba      	ldrb	r2, [r7, #22]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008c3e:	7dba      	ldrb	r2, [r7, #22]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	32ae      	adds	r2, #174	; 0xae
 8008c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f001 f93f 	bl	8009ed2 <USBD_CtlSendStatus>
 8008c54:	e032      	b.n	8008cbc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008c56:	7afb      	ldrb	r3, [r7, #11]
 8008c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	4619      	mov	r1, r3
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f000 fa37 	bl	80090d4 <USBD_CoreFindEP>
 8008c66:	4603      	mov	r3, r0
 8008c68:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c6a:	7dbb      	ldrb	r3, [r7, #22]
 8008c6c:	2bff      	cmp	r3, #255	; 0xff
 8008c6e:	d025      	beq.n	8008cbc <USBD_LL_DataOutStage+0x15c>
 8008c70:	7dbb      	ldrb	r3, [r7, #22]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d122      	bne.n	8008cbc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b03      	cmp	r3, #3
 8008c80:	d117      	bne.n	8008cb2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008c82:	7dba      	ldrb	r2, [r7, #22]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	32ae      	adds	r2, #174	; 0xae
 8008c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c8c:	699b      	ldr	r3, [r3, #24]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00f      	beq.n	8008cb2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008c92:	7dba      	ldrb	r2, [r7, #22]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008c9a:	7dba      	ldrb	r2, [r7, #22]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	32ae      	adds	r2, #174	; 0xae
 8008ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	7afa      	ldrb	r2, [r7, #11]
 8008ca8:	4611      	mov	r1, r2
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	4798      	blx	r3
 8008cae:	4603      	mov	r3, r0
 8008cb0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008cb2:	7dfb      	ldrb	r3, [r7, #23]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008cb8:	7dfb      	ldrb	r3, [r7, #23]
 8008cba:	e000      	b.n	8008cbe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3718      	adds	r7, #24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b086      	sub	sp, #24
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	60f8      	str	r0, [r7, #12]
 8008cce:	460b      	mov	r3, r1
 8008cd0:	607a      	str	r2, [r7, #4]
 8008cd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008cd4:	7afb      	ldrb	r3, [r7, #11]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d16f      	bne.n	8008dba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	3314      	adds	r3, #20
 8008cde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d15a      	bne.n	8008da0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	689a      	ldr	r2, [r3, #8]
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d914      	bls.n	8008d20 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	689a      	ldr	r2, [r3, #8]
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	1ad2      	subs	r2, r2, r3
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	6879      	ldr	r1, [r7, #4]
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f001 f8be 	bl	8009e8e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d12:	2300      	movs	r3, #0
 8008d14:	2200      	movs	r2, #0
 8008d16:	2100      	movs	r1, #0
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f001 fe58 	bl	800a9ce <USBD_LL_PrepareReceive>
 8008d1e:	e03f      	b.n	8008da0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	68da      	ldr	r2, [r3, #12]
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d11c      	bne.n	8008d66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	685a      	ldr	r2, [r3, #4]
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d316      	bcc.n	8008d66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	685a      	ldr	r2, [r3, #4]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d20f      	bcs.n	8008d66 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d46:	2200      	movs	r2, #0
 8008d48:	2100      	movs	r1, #0
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f001 f89f 	bl	8009e8e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d58:	2300      	movs	r3, #0
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f001 fe35 	bl	800a9ce <USBD_LL_PrepareReceive>
 8008d64:	e01c      	b.n	8008da0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b03      	cmp	r3, #3
 8008d70:	d10f      	bne.n	8008d92 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d009      	beq.n	8008d92 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d92:	2180      	movs	r1, #128	; 0x80
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f001 fd70 	bl	800a87a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f001 f8ac 	bl	8009ef8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d03a      	beq.n	8008e20 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f7ff fe42 	bl	8008a34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008db8:	e032      	b.n	8008e20 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008dba:	7afb      	ldrb	r3, [r7, #11]
 8008dbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f000 f985 	bl	80090d4 <USBD_CoreFindEP>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008dce:	7dfb      	ldrb	r3, [r7, #23]
 8008dd0:	2bff      	cmp	r3, #255	; 0xff
 8008dd2:	d025      	beq.n	8008e20 <USBD_LL_DataInStage+0x15a>
 8008dd4:	7dfb      	ldrb	r3, [r7, #23]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d122      	bne.n	8008e20 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	d11c      	bne.n	8008e20 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008de6:	7dfa      	ldrb	r2, [r7, #23]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	32ae      	adds	r2, #174	; 0xae
 8008dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df0:	695b      	ldr	r3, [r3, #20]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d014      	beq.n	8008e20 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008df6:	7dfa      	ldrb	r2, [r7, #23]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008dfe:	7dfa      	ldrb	r2, [r7, #23]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	32ae      	adds	r2, #174	; 0xae
 8008e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	7afa      	ldrb	r2, [r7, #11]
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	4798      	blx	r3
 8008e12:	4603      	mov	r3, r0
 8008e14:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008e16:	7dbb      	ldrb	r3, [r7, #22]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008e1c:	7dbb      	ldrb	r3, [r7, #22]
 8008e1e:	e000      	b.n	8008e22 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3718      	adds	r7, #24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b084      	sub	sp, #16
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d014      	beq.n	8008e90 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00e      	beq.n	8008e90 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	6852      	ldr	r2, [r2, #4]
 8008e7e:	b2d2      	uxtb	r2, r2
 8008e80:	4611      	mov	r1, r2
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	4798      	blx	r3
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d001      	beq.n	8008e90 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e90:	2340      	movs	r3, #64	; 0x40
 8008e92:	2200      	movs	r2, #0
 8008e94:	2100      	movs	r1, #0
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f001 fc8b 	bl	800a7b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2240      	movs	r2, #64	; 0x40
 8008ea8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008eac:	2340      	movs	r3, #64	; 0x40
 8008eae:	2200      	movs	r2, #0
 8008eb0:	2180      	movs	r1, #128	; 0x80
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f001 fc7d 	bl	800a7b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2240      	movs	r2, #64	; 0x40
 8008ec2:	621a      	str	r2, [r3, #32]

  return ret;
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b083      	sub	sp, #12
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	78fa      	ldrb	r2, [r7, #3]
 8008ede:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b083      	sub	sp, #12
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b04      	cmp	r3, #4
 8008f00:	d006      	beq.n	8008f10 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f08:	b2da      	uxtb	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2204      	movs	r2, #4
 8008f14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	370c      	adds	r7, #12
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr

08008f26 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008f26:	b480      	push	{r7}
 8008f28:	b083      	sub	sp, #12
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	2b04      	cmp	r3, #4
 8008f38:	d106      	bne.n	8008f48 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b082      	sub	sp, #8
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b03      	cmp	r3, #3
 8008f68:	d110      	bne.n	8008f8c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00b      	beq.n	8008f8c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f7a:	69db      	ldr	r3, [r3, #28]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d005      	beq.n	8008f8c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b082      	sub	sp, #8
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	32ae      	adds	r2, #174	; 0xae
 8008fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	e01c      	b.n	8008ff2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	2b03      	cmp	r3, #3
 8008fc2:	d115      	bne.n	8008ff0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	32ae      	adds	r2, #174	; 0xae
 8008fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fd2:	6a1b      	ldr	r3, [r3, #32]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00b      	beq.n	8008ff0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	32ae      	adds	r2, #174	; 0xae
 8008fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe6:	6a1b      	ldr	r3, [r3, #32]
 8008fe8:	78fa      	ldrb	r2, [r7, #3]
 8008fea:	4611      	mov	r1, r2
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b082      	sub	sp, #8
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	460b      	mov	r3, r1
 8009004:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	32ae      	adds	r2, #174	; 0xae
 8009010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d101      	bne.n	800901c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009018:	2303      	movs	r3, #3
 800901a:	e01c      	b.n	8009056 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009022:	b2db      	uxtb	r3, r3
 8009024:	2b03      	cmp	r3, #3
 8009026:	d115      	bne.n	8009054 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	32ae      	adds	r2, #174	; 0xae
 8009032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00b      	beq.n	8009054 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	32ae      	adds	r2, #174	; 0xae
 8009046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800904a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904c:	78fa      	ldrb	r2, [r7, #3]
 800904e:	4611      	mov	r1, r2
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800905e:	b480      	push	{r7}
 8009060:	b083      	sub	sp, #12
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00e      	beq.n	80090b0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	6852      	ldr	r2, [r2, #4]
 800909e:	b2d2      	uxtb	r2, r2
 80090a0:	4611      	mov	r1, r2
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	4798      	blx	r3
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80090ac:	2303      	movs	r3, #3
 80090ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b083      	sub	sp, #12
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
 80090c2:	460b      	mov	r3, r1
 80090c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80090c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80090e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	370c      	adds	r7, #12
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b086      	sub	sp, #24
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	460b      	mov	r3, r1
 80090f8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009102:	2300      	movs	r3, #0
 8009104:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	885b      	ldrh	r3, [r3, #2]
 800910a:	b29a      	uxth	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	b29b      	uxth	r3, r3
 8009112:	429a      	cmp	r2, r3
 8009114:	d920      	bls.n	8009158 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	b29b      	uxth	r3, r3
 800911c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800911e:	e013      	b.n	8009148 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009120:	f107 030a 	add.w	r3, r7, #10
 8009124:	4619      	mov	r1, r3
 8009126:	6978      	ldr	r0, [r7, #20]
 8009128:	f000 f81b 	bl	8009162 <USBD_GetNextDesc>
 800912c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	785b      	ldrb	r3, [r3, #1]
 8009132:	2b05      	cmp	r3, #5
 8009134:	d108      	bne.n	8009148 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	789b      	ldrb	r3, [r3, #2]
 800913e:	78fa      	ldrb	r2, [r7, #3]
 8009140:	429a      	cmp	r2, r3
 8009142:	d008      	beq.n	8009156 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009144:	2300      	movs	r3, #0
 8009146:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	885b      	ldrh	r3, [r3, #2]
 800914c:	b29a      	uxth	r2, r3
 800914e:	897b      	ldrh	r3, [r7, #10]
 8009150:	429a      	cmp	r2, r3
 8009152:	d8e5      	bhi.n	8009120 <USBD_GetEpDesc+0x32>
 8009154:	e000      	b.n	8009158 <USBD_GetEpDesc+0x6a>
          break;
 8009156:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009158:	693b      	ldr	r3, [r7, #16]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3718      	adds	r7, #24
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009162:	b480      	push	{r7}
 8009164:	b085      	sub	sp, #20
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	881a      	ldrh	r2, [r3, #0]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	b29b      	uxth	r3, r3
 800917a:	4413      	add	r3, r2
 800917c:	b29a      	uxth	r2, r3
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4413      	add	r3, r2
 800918c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800918e:	68fb      	ldr	r3, [r7, #12]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3714      	adds	r7, #20
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800919c:	b480      	push	{r7}
 800919e:	b087      	sub	sp, #28
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	3301      	adds	r3, #1
 80091b2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80091ba:	8a3b      	ldrh	r3, [r7, #16]
 80091bc:	021b      	lsls	r3, r3, #8
 80091be:	b21a      	sxth	r2, r3
 80091c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	b21b      	sxth	r3, r3
 80091c8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80091ca:	89fb      	ldrh	r3, [r7, #14]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	371c      	adds	r7, #28
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091ee:	2b40      	cmp	r3, #64	; 0x40
 80091f0:	d005      	beq.n	80091fe <USBD_StdDevReq+0x26>
 80091f2:	2b40      	cmp	r3, #64	; 0x40
 80091f4:	d857      	bhi.n	80092a6 <USBD_StdDevReq+0xce>
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00f      	beq.n	800921a <USBD_StdDevReq+0x42>
 80091fa:	2b20      	cmp	r3, #32
 80091fc:	d153      	bne.n	80092a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	32ae      	adds	r2, #174	; 0xae
 8009208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	4798      	blx	r3
 8009214:	4603      	mov	r3, r0
 8009216:	73fb      	strb	r3, [r7, #15]
      break;
 8009218:	e04a      	b.n	80092b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	785b      	ldrb	r3, [r3, #1]
 800921e:	2b09      	cmp	r3, #9
 8009220:	d83b      	bhi.n	800929a <USBD_StdDevReq+0xc2>
 8009222:	a201      	add	r2, pc, #4	; (adr r2, 8009228 <USBD_StdDevReq+0x50>)
 8009224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009228:	0800927d 	.word	0x0800927d
 800922c:	08009291 	.word	0x08009291
 8009230:	0800929b 	.word	0x0800929b
 8009234:	08009287 	.word	0x08009287
 8009238:	0800929b 	.word	0x0800929b
 800923c:	0800925b 	.word	0x0800925b
 8009240:	08009251 	.word	0x08009251
 8009244:	0800929b 	.word	0x0800929b
 8009248:	08009273 	.word	0x08009273
 800924c:	08009265 	.word	0x08009265
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 fa3c 	bl	80096d0 <USBD_GetDescriptor>
          break;
 8009258:	e024      	b.n	80092a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fba1 	bl	80099a4 <USBD_SetAddress>
          break;
 8009262:	e01f      	b.n	80092a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fbe0 	bl	8009a2c <USBD_SetConfig>
 800926c:	4603      	mov	r3, r0
 800926e:	73fb      	strb	r3, [r7, #15]
          break;
 8009270:	e018      	b.n	80092a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009272:	6839      	ldr	r1, [r7, #0]
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fc83 	bl	8009b80 <USBD_GetConfig>
          break;
 800927a:	e013      	b.n	80092a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fcb4 	bl	8009bec <USBD_GetStatus>
          break;
 8009284:	e00e      	b.n	80092a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 fce3 	bl	8009c54 <USBD_SetFeature>
          break;
 800928e:	e009      	b.n	80092a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009290:	6839      	ldr	r1, [r7, #0]
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 fd07 	bl	8009ca6 <USBD_ClrFeature>
          break;
 8009298:	e004      	b.n	80092a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800929a:	6839      	ldr	r1, [r7, #0]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fd5e 	bl	8009d5e <USBD_CtlError>
          break;
 80092a2:	bf00      	nop
      }
      break;
 80092a4:	e004      	b.n	80092b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fd58 	bl	8009d5e <USBD_CtlError>
      break;
 80092ae:	bf00      	nop
  }

  return ret;
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop

080092bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092d2:	2b40      	cmp	r3, #64	; 0x40
 80092d4:	d005      	beq.n	80092e2 <USBD_StdItfReq+0x26>
 80092d6:	2b40      	cmp	r3, #64	; 0x40
 80092d8:	d852      	bhi.n	8009380 <USBD_StdItfReq+0xc4>
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d001      	beq.n	80092e2 <USBD_StdItfReq+0x26>
 80092de:	2b20      	cmp	r3, #32
 80092e0:	d14e      	bne.n	8009380 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	3b01      	subs	r3, #1
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d840      	bhi.n	8009372 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	889b      	ldrh	r3, [r3, #4]
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d836      	bhi.n	8009368 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	889b      	ldrh	r3, [r3, #4]
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7ff fed9 	bl	80090ba <USBD_CoreFindIF>
 8009308:	4603      	mov	r3, r0
 800930a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800930c:	7bbb      	ldrb	r3, [r7, #14]
 800930e:	2bff      	cmp	r3, #255	; 0xff
 8009310:	d01d      	beq.n	800934e <USBD_StdItfReq+0x92>
 8009312:	7bbb      	ldrb	r3, [r7, #14]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d11a      	bne.n	800934e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009318:	7bba      	ldrb	r2, [r7, #14]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	32ae      	adds	r2, #174	; 0xae
 800931e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00f      	beq.n	8009348 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009328:	7bba      	ldrb	r2, [r7, #14]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009330:	7bba      	ldrb	r2, [r7, #14]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	32ae      	adds	r2, #174	; 0xae
 8009336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	4798      	blx	r3
 8009342:	4603      	mov	r3, r0
 8009344:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009346:	e004      	b.n	8009352 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009348:	2303      	movs	r3, #3
 800934a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800934c:	e001      	b.n	8009352 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800934e:	2303      	movs	r3, #3
 8009350:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	88db      	ldrh	r3, [r3, #6]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d110      	bne.n	800937c <USBD_StdItfReq+0xc0>
 800935a:	7bfb      	ldrb	r3, [r7, #15]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10d      	bne.n	800937c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fdb6 	bl	8009ed2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009366:	e009      	b.n	800937c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fcf7 	bl	8009d5e <USBD_CtlError>
          break;
 8009370:	e004      	b.n	800937c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fcf2 	bl	8009d5e <USBD_CtlError>
          break;
 800937a:	e000      	b.n	800937e <USBD_StdItfReq+0xc2>
          break;
 800937c:	bf00      	nop
      }
      break;
 800937e:	e004      	b.n	800938a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fceb 	bl	8009d5e <USBD_CtlError>
      break;
 8009388:	bf00      	nop
  }

  return ret;
 800938a:	7bfb      	ldrb	r3, [r7, #15]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	889b      	ldrh	r3, [r3, #4]
 80093a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093b0:	2b40      	cmp	r3, #64	; 0x40
 80093b2:	d007      	beq.n	80093c4 <USBD_StdEPReq+0x30>
 80093b4:	2b40      	cmp	r3, #64	; 0x40
 80093b6:	f200 817f 	bhi.w	80096b8 <USBD_StdEPReq+0x324>
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d02a      	beq.n	8009414 <USBD_StdEPReq+0x80>
 80093be:	2b20      	cmp	r3, #32
 80093c0:	f040 817a 	bne.w	80096b8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80093c4:	7bbb      	ldrb	r3, [r7, #14]
 80093c6:	4619      	mov	r1, r3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7ff fe83 	bl	80090d4 <USBD_CoreFindEP>
 80093ce:	4603      	mov	r3, r0
 80093d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093d2:	7b7b      	ldrb	r3, [r7, #13]
 80093d4:	2bff      	cmp	r3, #255	; 0xff
 80093d6:	f000 8174 	beq.w	80096c2 <USBD_StdEPReq+0x32e>
 80093da:	7b7b      	ldrb	r3, [r7, #13]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f040 8170 	bne.w	80096c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80093e2:	7b7a      	ldrb	r2, [r7, #13]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80093ea:	7b7a      	ldrb	r2, [r7, #13]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	32ae      	adds	r2, #174	; 0xae
 80093f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 8163 	beq.w	80096c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80093fc:	7b7a      	ldrb	r2, [r7, #13]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	32ae      	adds	r2, #174	; 0xae
 8009402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	4798      	blx	r3
 800940e:	4603      	mov	r3, r0
 8009410:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009412:	e156      	b.n	80096c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	785b      	ldrb	r3, [r3, #1]
 8009418:	2b03      	cmp	r3, #3
 800941a:	d008      	beq.n	800942e <USBD_StdEPReq+0x9a>
 800941c:	2b03      	cmp	r3, #3
 800941e:	f300 8145 	bgt.w	80096ac <USBD_StdEPReq+0x318>
 8009422:	2b00      	cmp	r3, #0
 8009424:	f000 809b 	beq.w	800955e <USBD_StdEPReq+0x1ca>
 8009428:	2b01      	cmp	r3, #1
 800942a:	d03c      	beq.n	80094a6 <USBD_StdEPReq+0x112>
 800942c:	e13e      	b.n	80096ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009434:	b2db      	uxtb	r3, r3
 8009436:	2b02      	cmp	r3, #2
 8009438:	d002      	beq.n	8009440 <USBD_StdEPReq+0xac>
 800943a:	2b03      	cmp	r3, #3
 800943c:	d016      	beq.n	800946c <USBD_StdEPReq+0xd8>
 800943e:	e02c      	b.n	800949a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009440:	7bbb      	ldrb	r3, [r7, #14]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00d      	beq.n	8009462 <USBD_StdEPReq+0xce>
 8009446:	7bbb      	ldrb	r3, [r7, #14]
 8009448:	2b80      	cmp	r3, #128	; 0x80
 800944a:	d00a      	beq.n	8009462 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800944c:	7bbb      	ldrb	r3, [r7, #14]
 800944e:	4619      	mov	r1, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f001 fa12 	bl	800a87a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009456:	2180      	movs	r1, #128	; 0x80
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f001 fa0e 	bl	800a87a <USBD_LL_StallEP>
 800945e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009460:	e020      	b.n	80094a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009462:	6839      	ldr	r1, [r7, #0]
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fc7a 	bl	8009d5e <USBD_CtlError>
              break;
 800946a:	e01b      	b.n	80094a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	885b      	ldrh	r3, [r3, #2]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10e      	bne.n	8009492 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009474:	7bbb      	ldrb	r3, [r7, #14]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00b      	beq.n	8009492 <USBD_StdEPReq+0xfe>
 800947a:	7bbb      	ldrb	r3, [r7, #14]
 800947c:	2b80      	cmp	r3, #128	; 0x80
 800947e:	d008      	beq.n	8009492 <USBD_StdEPReq+0xfe>
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	88db      	ldrh	r3, [r3, #6]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d104      	bne.n	8009492 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009488:	7bbb      	ldrb	r3, [r7, #14]
 800948a:	4619      	mov	r1, r3
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f001 f9f4 	bl	800a87a <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fd1d 	bl	8009ed2 <USBD_CtlSendStatus>

              break;
 8009498:	e004      	b.n	80094a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800949a:	6839      	ldr	r1, [r7, #0]
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 fc5e 	bl	8009d5e <USBD_CtlError>
              break;
 80094a2:	bf00      	nop
          }
          break;
 80094a4:	e107      	b.n	80096b6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d002      	beq.n	80094b8 <USBD_StdEPReq+0x124>
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	d016      	beq.n	80094e4 <USBD_StdEPReq+0x150>
 80094b6:	e04b      	b.n	8009550 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094b8:	7bbb      	ldrb	r3, [r7, #14]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00d      	beq.n	80094da <USBD_StdEPReq+0x146>
 80094be:	7bbb      	ldrb	r3, [r7, #14]
 80094c0:	2b80      	cmp	r3, #128	; 0x80
 80094c2:	d00a      	beq.n	80094da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80094c4:	7bbb      	ldrb	r3, [r7, #14]
 80094c6:	4619      	mov	r1, r3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f001 f9d6 	bl	800a87a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80094ce:	2180      	movs	r1, #128	; 0x80
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f001 f9d2 	bl	800a87a <USBD_LL_StallEP>
 80094d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094d8:	e040      	b.n	800955c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 fc3e 	bl	8009d5e <USBD_CtlError>
              break;
 80094e2:	e03b      	b.n	800955c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	885b      	ldrh	r3, [r3, #2]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d136      	bne.n	800955a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
 80094ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d004      	beq.n	8009500 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80094f6:	7bbb      	ldrb	r3, [r7, #14]
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f001 f9dc 	bl	800a8b8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 fce6 	bl	8009ed2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009506:	7bbb      	ldrb	r3, [r7, #14]
 8009508:	4619      	mov	r1, r3
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f7ff fde2 	bl	80090d4 <USBD_CoreFindEP>
 8009510:	4603      	mov	r3, r0
 8009512:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009514:	7b7b      	ldrb	r3, [r7, #13]
 8009516:	2bff      	cmp	r3, #255	; 0xff
 8009518:	d01f      	beq.n	800955a <USBD_StdEPReq+0x1c6>
 800951a:	7b7b      	ldrb	r3, [r7, #13]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d11c      	bne.n	800955a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009520:	7b7a      	ldrb	r2, [r7, #13]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009528:	7b7a      	ldrb	r2, [r7, #13]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	32ae      	adds	r2, #174	; 0xae
 800952e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d010      	beq.n	800955a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009538:	7b7a      	ldrb	r2, [r7, #13]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	32ae      	adds	r2, #174	; 0xae
 800953e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	4798      	blx	r3
 800954a:	4603      	mov	r3, r0
 800954c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800954e:	e004      	b.n	800955a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009550:	6839      	ldr	r1, [r7, #0]
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 fc03 	bl	8009d5e <USBD_CtlError>
              break;
 8009558:	e000      	b.n	800955c <USBD_StdEPReq+0x1c8>
              break;
 800955a:	bf00      	nop
          }
          break;
 800955c:	e0ab      	b.n	80096b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b02      	cmp	r3, #2
 8009568:	d002      	beq.n	8009570 <USBD_StdEPReq+0x1dc>
 800956a:	2b03      	cmp	r3, #3
 800956c:	d032      	beq.n	80095d4 <USBD_StdEPReq+0x240>
 800956e:	e097      	b.n	80096a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009570:	7bbb      	ldrb	r3, [r7, #14]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d007      	beq.n	8009586 <USBD_StdEPReq+0x1f2>
 8009576:	7bbb      	ldrb	r3, [r7, #14]
 8009578:	2b80      	cmp	r3, #128	; 0x80
 800957a:	d004      	beq.n	8009586 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800957c:	6839      	ldr	r1, [r7, #0]
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 fbed 	bl	8009d5e <USBD_CtlError>
                break;
 8009584:	e091      	b.n	80096aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009586:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800958a:	2b00      	cmp	r3, #0
 800958c:	da0b      	bge.n	80095a6 <USBD_StdEPReq+0x212>
 800958e:	7bbb      	ldrb	r3, [r7, #14]
 8009590:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009594:	4613      	mov	r3, r2
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	4413      	add	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	3310      	adds	r3, #16
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	4413      	add	r3, r2
 80095a2:	3304      	adds	r3, #4
 80095a4:	e00b      	b.n	80095be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
 80095a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095ac:	4613      	mov	r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4413      	add	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	4413      	add	r3, r2
 80095bc:	3304      	adds	r3, #4
 80095be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	2200      	movs	r2, #0
 80095c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	2202      	movs	r2, #2
 80095ca:	4619      	mov	r1, r3
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fc43 	bl	8009e58 <USBD_CtlSendData>
              break;
 80095d2:	e06a      	b.n	80096aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80095d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	da11      	bge.n	8009600 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80095dc:	7bbb      	ldrb	r3, [r7, #14]
 80095de:	f003 020f 	and.w	r2, r3, #15
 80095e2:	6879      	ldr	r1, [r7, #4]
 80095e4:	4613      	mov	r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4413      	add	r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	440b      	add	r3, r1
 80095ee:	3324      	adds	r3, #36	; 0x24
 80095f0:	881b      	ldrh	r3, [r3, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d117      	bne.n	8009626 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fbb0 	bl	8009d5e <USBD_CtlError>
                  break;
 80095fe:	e054      	b.n	80096aa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009600:	7bbb      	ldrb	r3, [r7, #14]
 8009602:	f003 020f 	and.w	r2, r3, #15
 8009606:	6879      	ldr	r1, [r7, #4]
 8009608:	4613      	mov	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4413      	add	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	440b      	add	r3, r1
 8009612:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009616:	881b      	ldrh	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d104      	bne.n	8009626 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fb9d 	bl	8009d5e <USBD_CtlError>
                  break;
 8009624:	e041      	b.n	80096aa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009626:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800962a:	2b00      	cmp	r3, #0
 800962c:	da0b      	bge.n	8009646 <USBD_StdEPReq+0x2b2>
 800962e:	7bbb      	ldrb	r3, [r7, #14]
 8009630:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009634:	4613      	mov	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4413      	add	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	3310      	adds	r3, #16
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	4413      	add	r3, r2
 8009642:	3304      	adds	r3, #4
 8009644:	e00b      	b.n	800965e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009646:	7bbb      	ldrb	r3, [r7, #14]
 8009648:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800964c:	4613      	mov	r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4413      	add	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	4413      	add	r3, r2
 800965c:	3304      	adds	r3, #4
 800965e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009660:	7bbb      	ldrb	r3, [r7, #14]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d002      	beq.n	800966c <USBD_StdEPReq+0x2d8>
 8009666:	7bbb      	ldrb	r3, [r7, #14]
 8009668:	2b80      	cmp	r3, #128	; 0x80
 800966a:	d103      	bne.n	8009674 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	2200      	movs	r2, #0
 8009670:	601a      	str	r2, [r3, #0]
 8009672:	e00e      	b.n	8009692 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009674:	7bbb      	ldrb	r3, [r7, #14]
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f001 f93c 	bl	800a8f6 <USBD_LL_IsStallEP>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d003      	beq.n	800968c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	2201      	movs	r2, #1
 8009688:	601a      	str	r2, [r3, #0]
 800968a:	e002      	b.n	8009692 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	2200      	movs	r2, #0
 8009690:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	2202      	movs	r2, #2
 8009696:	4619      	mov	r1, r3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fbdd 	bl	8009e58 <USBD_CtlSendData>
              break;
 800969e:	e004      	b.n	80096aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fb5b 	bl	8009d5e <USBD_CtlError>
              break;
 80096a8:	bf00      	nop
          }
          break;
 80096aa:	e004      	b.n	80096b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fb55 	bl	8009d5e <USBD_CtlError>
          break;
 80096b4:	bf00      	nop
      }
      break;
 80096b6:	e005      	b.n	80096c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 fb4f 	bl	8009d5e <USBD_CtlError>
      break;
 80096c0:	e000      	b.n	80096c4 <USBD_StdEPReq+0x330>
      break;
 80096c2:	bf00      	nop
  }

  return ret;
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
	...

080096d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096da:	2300      	movs	r3, #0
 80096dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80096de:	2300      	movs	r3, #0
 80096e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80096e2:	2300      	movs	r3, #0
 80096e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	885b      	ldrh	r3, [r3, #2]
 80096ea:	0a1b      	lsrs	r3, r3, #8
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	3b01      	subs	r3, #1
 80096f0:	2b06      	cmp	r3, #6
 80096f2:	f200 8128 	bhi.w	8009946 <USBD_GetDescriptor+0x276>
 80096f6:	a201      	add	r2, pc, #4	; (adr r2, 80096fc <USBD_GetDescriptor+0x2c>)
 80096f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fc:	08009719 	.word	0x08009719
 8009700:	08009731 	.word	0x08009731
 8009704:	08009771 	.word	0x08009771
 8009708:	08009947 	.word	0x08009947
 800970c:	08009947 	.word	0x08009947
 8009710:	080098e7 	.word	0x080098e7
 8009714:	08009913 	.word	0x08009913
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	7c12      	ldrb	r2, [r2, #16]
 8009724:	f107 0108 	add.w	r1, r7, #8
 8009728:	4610      	mov	r0, r2
 800972a:	4798      	blx	r3
 800972c:	60f8      	str	r0, [r7, #12]
      break;
 800972e:	e112      	b.n	8009956 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	7c1b      	ldrb	r3, [r3, #16]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10d      	bne.n	8009754 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800973e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009740:	f107 0208 	add.w	r2, r7, #8
 8009744:	4610      	mov	r0, r2
 8009746:	4798      	blx	r3
 8009748:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	3301      	adds	r3, #1
 800974e:	2202      	movs	r2, #2
 8009750:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009752:	e100      	b.n	8009956 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800975a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975c:	f107 0208 	add.w	r2, r7, #8
 8009760:	4610      	mov	r0, r2
 8009762:	4798      	blx	r3
 8009764:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3301      	adds	r3, #1
 800976a:	2202      	movs	r2, #2
 800976c:	701a      	strb	r2, [r3, #0]
      break;
 800976e:	e0f2      	b.n	8009956 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	885b      	ldrh	r3, [r3, #2]
 8009774:	b2db      	uxtb	r3, r3
 8009776:	2b05      	cmp	r3, #5
 8009778:	f200 80ac 	bhi.w	80098d4 <USBD_GetDescriptor+0x204>
 800977c:	a201      	add	r2, pc, #4	; (adr r2, 8009784 <USBD_GetDescriptor+0xb4>)
 800977e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009782:	bf00      	nop
 8009784:	0800979d 	.word	0x0800979d
 8009788:	080097d1 	.word	0x080097d1
 800978c:	08009805 	.word	0x08009805
 8009790:	08009839 	.word	0x08009839
 8009794:	0800986d 	.word	0x0800986d
 8009798:	080098a1 	.word	0x080098a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00b      	beq.n	80097c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	7c12      	ldrb	r2, [r2, #16]
 80097b4:	f107 0108 	add.w	r1, r7, #8
 80097b8:	4610      	mov	r0, r2
 80097ba:	4798      	blx	r3
 80097bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097be:	e091      	b.n	80098e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097c0:	6839      	ldr	r1, [r7, #0]
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 facb 	bl	8009d5e <USBD_CtlError>
            err++;
 80097c8:	7afb      	ldrb	r3, [r7, #11]
 80097ca:	3301      	adds	r3, #1
 80097cc:	72fb      	strb	r3, [r7, #11]
          break;
 80097ce:	e089      	b.n	80098e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00b      	beq.n	80097f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	7c12      	ldrb	r2, [r2, #16]
 80097e8:	f107 0108 	add.w	r1, r7, #8
 80097ec:	4610      	mov	r0, r2
 80097ee:	4798      	blx	r3
 80097f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097f2:	e077      	b.n	80098e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097f4:	6839      	ldr	r1, [r7, #0]
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fab1 	bl	8009d5e <USBD_CtlError>
            err++;
 80097fc:	7afb      	ldrb	r3, [r7, #11]
 80097fe:	3301      	adds	r3, #1
 8009800:	72fb      	strb	r3, [r7, #11]
          break;
 8009802:	e06f      	b.n	80098e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00b      	beq.n	8009828 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	7c12      	ldrb	r2, [r2, #16]
 800981c:	f107 0108 	add.w	r1, r7, #8
 8009820:	4610      	mov	r0, r2
 8009822:	4798      	blx	r3
 8009824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009826:	e05d      	b.n	80098e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fa97 	bl	8009d5e <USBD_CtlError>
            err++;
 8009830:	7afb      	ldrb	r3, [r7, #11]
 8009832:	3301      	adds	r3, #1
 8009834:	72fb      	strb	r3, [r7, #11]
          break;
 8009836:	e055      	b.n	80098e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00b      	beq.n	800985c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	7c12      	ldrb	r2, [r2, #16]
 8009850:	f107 0108 	add.w	r1, r7, #8
 8009854:	4610      	mov	r0, r2
 8009856:	4798      	blx	r3
 8009858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800985a:	e043      	b.n	80098e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fa7d 	bl	8009d5e <USBD_CtlError>
            err++;
 8009864:	7afb      	ldrb	r3, [r7, #11]
 8009866:	3301      	adds	r3, #1
 8009868:	72fb      	strb	r3, [r7, #11]
          break;
 800986a:	e03b      	b.n	80098e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009872:	695b      	ldr	r3, [r3, #20]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00b      	beq.n	8009890 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800987e:	695b      	ldr	r3, [r3, #20]
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	7c12      	ldrb	r2, [r2, #16]
 8009884:	f107 0108 	add.w	r1, r7, #8
 8009888:	4610      	mov	r0, r2
 800988a:	4798      	blx	r3
 800988c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800988e:	e029      	b.n	80098e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009890:	6839      	ldr	r1, [r7, #0]
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fa63 	bl	8009d5e <USBD_CtlError>
            err++;
 8009898:	7afb      	ldrb	r3, [r7, #11]
 800989a:	3301      	adds	r3, #1
 800989c:	72fb      	strb	r3, [r7, #11]
          break;
 800989e:	e021      	b.n	80098e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00b      	beq.n	80098c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	7c12      	ldrb	r2, [r2, #16]
 80098b8:	f107 0108 	add.w	r1, r7, #8
 80098bc:	4610      	mov	r0, r2
 80098be:	4798      	blx	r3
 80098c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098c2:	e00f      	b.n	80098e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098c4:	6839      	ldr	r1, [r7, #0]
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fa49 	bl	8009d5e <USBD_CtlError>
            err++;
 80098cc:	7afb      	ldrb	r3, [r7, #11]
 80098ce:	3301      	adds	r3, #1
 80098d0:	72fb      	strb	r3, [r7, #11]
          break;
 80098d2:	e007      	b.n	80098e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80098d4:	6839      	ldr	r1, [r7, #0]
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 fa41 	bl	8009d5e <USBD_CtlError>
          err++;
 80098dc:	7afb      	ldrb	r3, [r7, #11]
 80098de:	3301      	adds	r3, #1
 80098e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80098e2:	bf00      	nop
      }
      break;
 80098e4:	e037      	b.n	8009956 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	7c1b      	ldrb	r3, [r3, #16]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d109      	bne.n	8009902 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098f6:	f107 0208 	add.w	r2, r7, #8
 80098fa:	4610      	mov	r0, r2
 80098fc:	4798      	blx	r3
 80098fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009900:	e029      	b.n	8009956 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009902:	6839      	ldr	r1, [r7, #0]
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fa2a 	bl	8009d5e <USBD_CtlError>
        err++;
 800990a:	7afb      	ldrb	r3, [r7, #11]
 800990c:	3301      	adds	r3, #1
 800990e:	72fb      	strb	r3, [r7, #11]
      break;
 8009910:	e021      	b.n	8009956 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	7c1b      	ldrb	r3, [r3, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10d      	bne.n	8009936 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009922:	f107 0208 	add.w	r2, r7, #8
 8009926:	4610      	mov	r0, r2
 8009928:	4798      	blx	r3
 800992a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	3301      	adds	r3, #1
 8009930:	2207      	movs	r2, #7
 8009932:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009934:	e00f      	b.n	8009956 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009936:	6839      	ldr	r1, [r7, #0]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fa10 	bl	8009d5e <USBD_CtlError>
        err++;
 800993e:	7afb      	ldrb	r3, [r7, #11]
 8009940:	3301      	adds	r3, #1
 8009942:	72fb      	strb	r3, [r7, #11]
      break;
 8009944:	e007      	b.n	8009956 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fa08 	bl	8009d5e <USBD_CtlError>
      err++;
 800994e:	7afb      	ldrb	r3, [r7, #11]
 8009950:	3301      	adds	r3, #1
 8009952:	72fb      	strb	r3, [r7, #11]
      break;
 8009954:	bf00      	nop
  }

  if (err != 0U)
 8009956:	7afb      	ldrb	r3, [r7, #11]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d11e      	bne.n	800999a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	88db      	ldrh	r3, [r3, #6]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d016      	beq.n	8009992 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009964:	893b      	ldrh	r3, [r7, #8]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00e      	beq.n	8009988 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	88da      	ldrh	r2, [r3, #6]
 800996e:	893b      	ldrh	r3, [r7, #8]
 8009970:	4293      	cmp	r3, r2
 8009972:	bf28      	it	cs
 8009974:	4613      	movcs	r3, r2
 8009976:	b29b      	uxth	r3, r3
 8009978:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800997a:	893b      	ldrh	r3, [r7, #8]
 800997c:	461a      	mov	r2, r3
 800997e:	68f9      	ldr	r1, [r7, #12]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 fa69 	bl	8009e58 <USBD_CtlSendData>
 8009986:	e009      	b.n	800999c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009988:	6839      	ldr	r1, [r7, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f9e7 	bl	8009d5e <USBD_CtlError>
 8009990:	e004      	b.n	800999c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fa9d 	bl	8009ed2 <USBD_CtlSendStatus>
 8009998:	e000      	b.n	800999c <USBD_GetDescriptor+0x2cc>
    return;
 800999a:	bf00      	nop
  }
}
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop

080099a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	889b      	ldrh	r3, [r3, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d131      	bne.n	8009a1a <USBD_SetAddress+0x76>
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	88db      	ldrh	r3, [r3, #6]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d12d      	bne.n	8009a1a <USBD_SetAddress+0x76>
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	885b      	ldrh	r3, [r3, #2]
 80099c2:	2b7f      	cmp	r3, #127	; 0x7f
 80099c4:	d829      	bhi.n	8009a1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	885b      	ldrh	r3, [r3, #2]
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b03      	cmp	r3, #3
 80099dc:	d104      	bne.n	80099e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80099de:	6839      	ldr	r1, [r7, #0]
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f9bc 	bl	8009d5e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099e6:	e01d      	b.n	8009a24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	7bfa      	ldrb	r2, [r7, #15]
 80099ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
 80099f2:	4619      	mov	r1, r3
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 ffaa 	bl	800a94e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fa69 	bl	8009ed2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d004      	beq.n	8009a10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2202      	movs	r2, #2
 8009a0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a0e:	e009      	b.n	8009a24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2201      	movs	r2, #1
 8009a14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a18:	e004      	b.n	8009a24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a1a:	6839      	ldr	r1, [r7, #0]
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f99e 	bl	8009d5e <USBD_CtlError>
  }
}
 8009a22:	bf00      	nop
 8009a24:	bf00      	nop
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	885b      	ldrh	r3, [r3, #2]
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	4b4e      	ldr	r3, [pc, #312]	; (8009b7c <USBD_SetConfig+0x150>)
 8009a42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a44:	4b4d      	ldr	r3, [pc, #308]	; (8009b7c <USBD_SetConfig+0x150>)
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d905      	bls.n	8009a58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009a4c:	6839      	ldr	r1, [r7, #0]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f985 	bl	8009d5e <USBD_CtlError>
    return USBD_FAIL;
 8009a54:	2303      	movs	r3, #3
 8009a56:	e08c      	b.n	8009b72 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d002      	beq.n	8009a6a <USBD_SetConfig+0x3e>
 8009a64:	2b03      	cmp	r3, #3
 8009a66:	d029      	beq.n	8009abc <USBD_SetConfig+0x90>
 8009a68:	e075      	b.n	8009b56 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009a6a:	4b44      	ldr	r3, [pc, #272]	; (8009b7c <USBD_SetConfig+0x150>)
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d020      	beq.n	8009ab4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009a72:	4b42      	ldr	r3, [pc, #264]	; (8009b7c <USBD_SetConfig+0x150>)
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a7c:	4b3f      	ldr	r3, [pc, #252]	; (8009b7c <USBD_SetConfig+0x150>)
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	4619      	mov	r1, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f7fe ffe1 	bl	8008a4a <USBD_SetClassConfig>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d008      	beq.n	8009aa4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 f962 	bl	8009d5e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2202      	movs	r2, #2
 8009a9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009aa2:	e065      	b.n	8009b70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fa14 	bl	8009ed2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2203      	movs	r2, #3
 8009aae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009ab2:	e05d      	b.n	8009b70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fa0c 	bl	8009ed2 <USBD_CtlSendStatus>
      break;
 8009aba:	e059      	b.n	8009b70 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009abc:	4b2f      	ldr	r3, [pc, #188]	; (8009b7c <USBD_SetConfig+0x150>)
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d112      	bne.n	8009aea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009acc:	4b2b      	ldr	r3, [pc, #172]	; (8009b7c <USBD_SetConfig+0x150>)
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ad6:	4b29      	ldr	r3, [pc, #164]	; (8009b7c <USBD_SetConfig+0x150>)
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	4619      	mov	r1, r3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f7fe ffd0 	bl	8008a82 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f9f5 	bl	8009ed2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ae8:	e042      	b.n	8009b70 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009aea:	4b24      	ldr	r3, [pc, #144]	; (8009b7c <USBD_SetConfig+0x150>)
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	461a      	mov	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d02a      	beq.n	8009b4e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7fe ffbe 	bl	8008a82 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009b06:	4b1d      	ldr	r3, [pc, #116]	; (8009b7c <USBD_SetConfig+0x150>)
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b10:	4b1a      	ldr	r3, [pc, #104]	; (8009b7c <USBD_SetConfig+0x150>)
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7fe ff97 	bl	8008a4a <USBD_SetClassConfig>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009b20:	7bfb      	ldrb	r3, [r7, #15]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00f      	beq.n	8009b46 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f918 	bl	8009d5e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7fe ffa3 	bl	8008a82 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2202      	movs	r2, #2
 8009b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009b44:	e014      	b.n	8009b70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f9c3 	bl	8009ed2 <USBD_CtlSendStatus>
      break;
 8009b4c:	e010      	b.n	8009b70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f9bf 	bl	8009ed2 <USBD_CtlSendStatus>
      break;
 8009b54:	e00c      	b.n	8009b70 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f900 	bl	8009d5e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b5e:	4b07      	ldr	r3, [pc, #28]	; (8009b7c <USBD_SetConfig+0x150>)
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	4619      	mov	r1, r3
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f7fe ff8c 	bl	8008a82 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8009b6e:	bf00      	nop
  }

  return ret;
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	24000180 	.word	0x24000180

08009b80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	88db      	ldrh	r3, [r3, #6]
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d004      	beq.n	8009b9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b92:	6839      	ldr	r1, [r7, #0]
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f8e2 	bl	8009d5e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b9a:	e023      	b.n	8009be4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	dc02      	bgt.n	8009bae <USBD_GetConfig+0x2e>
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	dc03      	bgt.n	8009bb4 <USBD_GetConfig+0x34>
 8009bac:	e015      	b.n	8009bda <USBD_GetConfig+0x5a>
 8009bae:	2b03      	cmp	r3, #3
 8009bb0:	d00b      	beq.n	8009bca <USBD_GetConfig+0x4a>
 8009bb2:	e012      	b.n	8009bda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	3308      	adds	r3, #8
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 f948 	bl	8009e58 <USBD_CtlSendData>
        break;
 8009bc8:	e00c      	b.n	8009be4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	3304      	adds	r3, #4
 8009bce:	2201      	movs	r2, #1
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f940 	bl	8009e58 <USBD_CtlSendData>
        break;
 8009bd8:	e004      	b.n	8009be4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f8be 	bl	8009d5e <USBD_CtlError>
        break;
 8009be2:	bf00      	nop
}
 8009be4:	bf00      	nop
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	d81e      	bhi.n	8009c42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	88db      	ldrh	r3, [r3, #6]
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d004      	beq.n	8009c16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009c0c:	6839      	ldr	r1, [r7, #0]
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f8a5 	bl	8009d5e <USBD_CtlError>
        break;
 8009c14:	e01a      	b.n	8009c4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d005      	beq.n	8009c32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	f043 0202 	orr.w	r2, r3, #2
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	330c      	adds	r3, #12
 8009c36:	2202      	movs	r2, #2
 8009c38:	4619      	mov	r1, r3
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 f90c 	bl	8009e58 <USBD_CtlSendData>
      break;
 8009c40:	e004      	b.n	8009c4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009c42:	6839      	ldr	r1, [r7, #0]
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 f88a 	bl	8009d5e <USBD_CtlError>
      break;
 8009c4a:	bf00      	nop
  }
}
 8009c4c:	bf00      	nop
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	885b      	ldrh	r3, [r3, #2]
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d107      	bne.n	8009c76 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f92f 	bl	8009ed2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009c74:	e013      	b.n	8009c9e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	885b      	ldrh	r3, [r3, #2]
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d10b      	bne.n	8009c96 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	889b      	ldrh	r3, [r3, #4]
 8009c82:	0a1b      	lsrs	r3, r3, #8
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	b2da      	uxtb	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 f91f 	bl	8009ed2 <USBD_CtlSendStatus>
}
 8009c94:	e003      	b.n	8009c9e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f860 	bl	8009d5e <USBD_CtlError>
}
 8009c9e:	bf00      	nop
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b082      	sub	sp, #8
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d80b      	bhi.n	8009cd6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	885b      	ldrh	r3, [r3, #2]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d10c      	bne.n	8009ce0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f8ff 	bl	8009ed2 <USBD_CtlSendStatus>
      }
      break;
 8009cd4:	e004      	b.n	8009ce0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009cd6:	6839      	ldr	r1, [r7, #0]
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 f840 	bl	8009d5e <USBD_CtlError>
      break;
 8009cde:	e000      	b.n	8009ce2 <USBD_ClrFeature+0x3c>
      break;
 8009ce0:	bf00      	nop
  }
}
 8009ce2:	bf00      	nop
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b084      	sub	sp, #16
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	781a      	ldrb	r2, [r3, #0]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	3301      	adds	r3, #1
 8009d04:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	781a      	ldrb	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	3301      	adds	r3, #1
 8009d12:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f7ff fa41 	bl	800919c <SWAPBYTE>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	3301      	adds	r3, #1
 8009d26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f7ff fa34 	bl	800919c <SWAPBYTE>
 8009d34:	4603      	mov	r3, r0
 8009d36:	461a      	mov	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	3301      	adds	r3, #1
 8009d46:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f7ff fa27 	bl	800919c <SWAPBYTE>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	461a      	mov	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	80da      	strh	r2, [r3, #6]
}
 8009d56:	bf00      	nop
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b082      	sub	sp, #8
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
 8009d66:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d68:	2180      	movs	r1, #128	; 0x80
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fd85 	bl	800a87a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009d70:	2100      	movs	r1, #0
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fd81 	bl	800a87a <USBD_LL_StallEP>
}
 8009d78:	bf00      	nop
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d042      	beq.n	8009e1c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009d9a:	6938      	ldr	r0, [r7, #16]
 8009d9c:	f000 f842 	bl	8009e24 <USBD_GetLen>
 8009da0:	4603      	mov	r3, r0
 8009da2:	3301      	adds	r3, #1
 8009da4:	005b      	lsls	r3, r3, #1
 8009da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009daa:	d808      	bhi.n	8009dbe <USBD_GetString+0x3e>
 8009dac:	6938      	ldr	r0, [r7, #16]
 8009dae:	f000 f839 	bl	8009e24 <USBD_GetLen>
 8009db2:	4603      	mov	r3, r0
 8009db4:	3301      	adds	r3, #1
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	005b      	lsls	r3, r3, #1
 8009dba:	b29a      	uxth	r2, r3
 8009dbc:	e001      	b.n	8009dc2 <USBD_GetString+0x42>
 8009dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	4413      	add	r3, r2
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	7812      	ldrb	r2, [r2, #0]
 8009dd0:	701a      	strb	r2, [r3, #0]
  idx++;
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009dd8:	7dfb      	ldrb	r3, [r7, #23]
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	4413      	add	r3, r2
 8009dde:	2203      	movs	r2, #3
 8009de0:	701a      	strb	r2, [r3, #0]
  idx++;
 8009de2:	7dfb      	ldrb	r3, [r7, #23]
 8009de4:	3301      	adds	r3, #1
 8009de6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009de8:	e013      	b.n	8009e12 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	4413      	add	r3, r2
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	7812      	ldrb	r2, [r2, #0]
 8009df4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	613b      	str	r3, [r7, #16]
    idx++;
 8009dfc:	7dfb      	ldrb	r3, [r7, #23]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009e02:	7dfb      	ldrb	r3, [r7, #23]
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	4413      	add	r3, r2
 8009e08:	2200      	movs	r2, #0
 8009e0a:	701a      	strb	r2, [r3, #0]
    idx++;
 8009e0c:	7dfb      	ldrb	r3, [r7, #23]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1e7      	bne.n	8009dea <USBD_GetString+0x6a>
 8009e1a:	e000      	b.n	8009e1e <USBD_GetString+0x9e>
    return;
 8009e1c:	bf00      	nop
  }
}
 8009e1e:	3718      	adds	r7, #24
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009e34:	e005      	b.n	8009e42 <USBD_GetLen+0x1e>
  {
    len++;
 8009e36:	7bfb      	ldrb	r3, [r7, #15]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1f5      	bne.n	8009e36 <USBD_GetLen+0x12>
  }

  return len;
 8009e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3714      	adds	r7, #20
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2202      	movs	r2, #2
 8009e68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f000 fd84 	bl	800a98c <USBD_LL_Transmit>

  return USBD_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b084      	sub	sp, #16
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	60f8      	str	r0, [r7, #12]
 8009e96:	60b9      	str	r1, [r7, #8]
 8009e98:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	f000 fd73 	bl	800a98c <USBD_LL_Transmit>

  return USBD_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f000 fd83 	bl	800a9ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2204      	movs	r2, #4
 8009ede:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fd4f 	bl	800a98c <USBD_LL_Transmit>

  return USBD_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2205      	movs	r2, #5
 8009f04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f08:	2300      	movs	r3, #0
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 fd5d 	bl	800a9ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
	...

08009f20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	af00      	add	r7, sp, #0
*/ //The above section is probably not necessary, as it is probably doing the exact
	//same thing as the below code, and the problem is elsewhere.
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8009f24:	2201      	movs	r2, #1
 8009f26:	4913      	ldr	r1, [pc, #76]	; (8009f74 <MX_USB_DEVICE_Init+0x54>)
 8009f28:	4813      	ldr	r0, [pc, #76]	; (8009f78 <MX_USB_DEVICE_Init+0x58>)
 8009f2a:	f7fe fcf5 	bl	8008918 <USBD_Init>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d001      	beq.n	8009f38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f34:	f7f6 fdda 	bl	8000aec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_MSC) != USBD_OK)
 8009f38:	4910      	ldr	r1, [pc, #64]	; (8009f7c <MX_USB_DEVICE_Init+0x5c>)
 8009f3a:	480f      	ldr	r0, [pc, #60]	; (8009f78 <MX_USB_DEVICE_Init+0x58>)
 8009f3c:	f7fe fd2a 	bl	8008994 <USBD_RegisterClass>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d001      	beq.n	8009f4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f46:	f7f6 fdd1 	bl	8000aec <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceHS, &USBD_Storage_Interface_fops_HS) != USBD_OK)
 8009f4a:	490d      	ldr	r1, [pc, #52]	; (8009f80 <MX_USB_DEVICE_Init+0x60>)
 8009f4c:	480a      	ldr	r0, [pc, #40]	; (8009f78 <MX_USB_DEVICE_Init+0x58>)
 8009f4e:	f7fc ff97 	bl	8006e80 <USBD_MSC_RegisterStorage>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d001      	beq.n	8009f5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f58:	f7f6 fdc8 	bl	8000aec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8009f5c:	4806      	ldr	r0, [pc, #24]	; (8009f78 <MX_USB_DEVICE_Init+0x58>)
 8009f5e:	f7fe fd5d 	bl	8008a1c <USBD_Start>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d001      	beq.n	8009f6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f68:	f7f6 fdc0 	bl	8000aec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8009f6c:	f7f8 fe18 	bl	8002ba0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f70:	bf00      	nop
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	24000090 	.word	0x24000090
 8009f78:	24000184 	.word	0x24000184
 8009f7c:	24000010 	.word	0x24000010
 8009f80:	240000e0 	.word	0x240000e0

08009f84 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	6039      	str	r1, [r7, #0]
 8009f8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	2212      	movs	r2, #18
 8009f94:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8009f96:	4b03      	ldr	r3, [pc, #12]	; (8009fa4 <USBD_HS_DeviceDescriptor+0x20>)
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr
 8009fa4:	240000ac 	.word	0x240000ac

08009fa8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	4603      	mov	r3, r0
 8009fb0:	6039      	str	r1, [r7, #0]
 8009fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	2204      	movs	r2, #4
 8009fb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009fba:	4b03      	ldr	r3, [pc, #12]	; (8009fc8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	240000c0 	.word	0x240000c0

08009fcc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	6039      	str	r1, [r7, #0]
 8009fd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fd8:	79fb      	ldrb	r3, [r7, #7]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d105      	bne.n	8009fea <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	4907      	ldr	r1, [pc, #28]	; (800a000 <USBD_HS_ProductStrDescriptor+0x34>)
 8009fe2:	4808      	ldr	r0, [pc, #32]	; (800a004 <USBD_HS_ProductStrDescriptor+0x38>)
 8009fe4:	f7ff fecc 	bl	8009d80 <USBD_GetString>
 8009fe8:	e004      	b.n	8009ff4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009fea:	683a      	ldr	r2, [r7, #0]
 8009fec:	4904      	ldr	r1, [pc, #16]	; (800a000 <USBD_HS_ProductStrDescriptor+0x34>)
 8009fee:	4805      	ldr	r0, [pc, #20]	; (800a004 <USBD_HS_ProductStrDescriptor+0x38>)
 8009ff0:	f7ff fec6 	bl	8009d80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ff4:	4b02      	ldr	r3, [pc, #8]	; (800a000 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	24000460 	.word	0x24000460
 800a004:	0800b9ec 	.word	0x0800b9ec

0800a008 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	4603      	mov	r3, r0
 800a010:	6039      	str	r1, [r7, #0]
 800a012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a014:	683a      	ldr	r2, [r7, #0]
 800a016:	4904      	ldr	r1, [pc, #16]	; (800a028 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800a018:	4804      	ldr	r0, [pc, #16]	; (800a02c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800a01a:	f7ff feb1 	bl	8009d80 <USBD_GetString>
  return USBD_StrDesc;
 800a01e:	4b02      	ldr	r3, [pc, #8]	; (800a028 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800a020:	4618      	mov	r0, r3
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	24000460 	.word	0x24000460
 800a02c:	0800ba00 	.word	0x0800ba00

0800a030 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	6039      	str	r1, [r7, #0]
 800a03a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	221a      	movs	r2, #26
 800a040:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a042:	f000 f843 	bl	800a0cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a046:	4b02      	ldr	r3, [pc, #8]	; (800a050 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3708      	adds	r7, #8
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	240000c4 	.word	0x240000c4

0800a054 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	4603      	mov	r3, r0
 800a05c:	6039      	str	r1, [r7, #0]
 800a05e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a060:	79fb      	ldrb	r3, [r7, #7]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d105      	bne.n	800a072 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a066:	683a      	ldr	r2, [r7, #0]
 800a068:	4907      	ldr	r1, [pc, #28]	; (800a088 <USBD_HS_ConfigStrDescriptor+0x34>)
 800a06a:	4808      	ldr	r0, [pc, #32]	; (800a08c <USBD_HS_ConfigStrDescriptor+0x38>)
 800a06c:	f7ff fe88 	bl	8009d80 <USBD_GetString>
 800a070:	e004      	b.n	800a07c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	4904      	ldr	r1, [pc, #16]	; (800a088 <USBD_HS_ConfigStrDescriptor+0x34>)
 800a076:	4805      	ldr	r0, [pc, #20]	; (800a08c <USBD_HS_ConfigStrDescriptor+0x38>)
 800a078:	f7ff fe82 	bl	8009d80 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a07c:	4b02      	ldr	r3, [pc, #8]	; (800a088 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3708      	adds	r7, #8
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	24000460 	.word	0x24000460
 800a08c:	0800ba14 	.word	0x0800ba14

0800a090 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	4603      	mov	r3, r0
 800a098:	6039      	str	r1, [r7, #0]
 800a09a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a09c:	79fb      	ldrb	r3, [r7, #7]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d105      	bne.n	800a0ae <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	4907      	ldr	r1, [pc, #28]	; (800a0c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a0a6:	4808      	ldr	r0, [pc, #32]	; (800a0c8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a0a8:	f7ff fe6a 	bl	8009d80 <USBD_GetString>
 800a0ac:	e004      	b.n	800a0b8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a0ae:	683a      	ldr	r2, [r7, #0]
 800a0b0:	4904      	ldr	r1, [pc, #16]	; (800a0c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a0b2:	4805      	ldr	r0, [pc, #20]	; (800a0c8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a0b4:	f7ff fe64 	bl	8009d80 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0b8:	4b02      	ldr	r3, [pc, #8]	; (800a0c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3708      	adds	r7, #8
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	24000460 	.word	0x24000460
 800a0c8:	0800ba20 	.word	0x0800ba20

0800a0cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a0d2:	4b0f      	ldr	r3, [pc, #60]	; (800a110 <Get_SerialNum+0x44>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a0d8:	4b0e      	ldr	r3, [pc, #56]	; (800a114 <Get_SerialNum+0x48>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a0de:	4b0e      	ldr	r3, [pc, #56]	; (800a118 <Get_SerialNum+0x4c>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d009      	beq.n	800a106 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a0f2:	2208      	movs	r2, #8
 800a0f4:	4909      	ldr	r1, [pc, #36]	; (800a11c <Get_SerialNum+0x50>)
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f000 f814 	bl	800a124 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a0fc:	2204      	movs	r2, #4
 800a0fe:	4908      	ldr	r1, [pc, #32]	; (800a120 <Get_SerialNum+0x54>)
 800a100:	68b8      	ldr	r0, [r7, #8]
 800a102:	f000 f80f 	bl	800a124 <IntToUnicode>
  }
}
 800a106:	bf00      	nop
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	08fff800 	.word	0x08fff800
 800a114:	08fff804 	.word	0x08fff804
 800a118:	08fff808 	.word	0x08fff808
 800a11c:	240000c6 	.word	0x240000c6
 800a120:	240000d6 	.word	0x240000d6

0800a124 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a124:	b480      	push	{r7}
 800a126:	b087      	sub	sp, #28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	4613      	mov	r3, r2
 800a130:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a132:	2300      	movs	r3, #0
 800a134:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a136:	2300      	movs	r3, #0
 800a138:	75fb      	strb	r3, [r7, #23]
 800a13a:	e027      	b.n	800a18c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	0f1b      	lsrs	r3, r3, #28
 800a140:	2b09      	cmp	r3, #9
 800a142:	d80b      	bhi.n	800a15c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	0f1b      	lsrs	r3, r3, #28
 800a148:	b2da      	uxtb	r2, r3
 800a14a:	7dfb      	ldrb	r3, [r7, #23]
 800a14c:	005b      	lsls	r3, r3, #1
 800a14e:	4619      	mov	r1, r3
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	440b      	add	r3, r1
 800a154:	3230      	adds	r2, #48	; 0x30
 800a156:	b2d2      	uxtb	r2, r2
 800a158:	701a      	strb	r2, [r3, #0]
 800a15a:	e00a      	b.n	800a172 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	0f1b      	lsrs	r3, r3, #28
 800a160:	b2da      	uxtb	r2, r3
 800a162:	7dfb      	ldrb	r3, [r7, #23]
 800a164:	005b      	lsls	r3, r3, #1
 800a166:	4619      	mov	r1, r3
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	440b      	add	r3, r1
 800a16c:	3237      	adds	r2, #55	; 0x37
 800a16e:	b2d2      	uxtb	r2, r2
 800a170:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	011b      	lsls	r3, r3, #4
 800a176:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a178:	7dfb      	ldrb	r3, [r7, #23]
 800a17a:	005b      	lsls	r3, r3, #1
 800a17c:	3301      	adds	r3, #1
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	4413      	add	r3, r2
 800a182:	2200      	movs	r2, #0
 800a184:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a186:	7dfb      	ldrb	r3, [r7, #23]
 800a188:	3301      	adds	r3, #1
 800a18a:	75fb      	strb	r3, [r7, #23]
 800a18c:	7dfa      	ldrb	r2, [r7, #23]
 800a18e:	79fb      	ldrb	r3, [r7, #7]
 800a190:	429a      	cmp	r2, r3
 800a192:	d3d3      	bcc.n	800a13c <IntToUnicode+0x18>
  }
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop
 800a198:	371c      	adds	r7, #28
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr

0800a1a2 <STORAGE_Init_HS>:
  * @brief  Initializes the storage unit (medium).
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_HS(uint8_t lun)
{
 800a1a2:	b480      	push	{r7}
 800a1a4:	b083      	sub	sp, #12
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 9 */
  UNUSED(lun);

  return (USBD_OK);
 800a1ac:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <STORAGE_GetCapacity_HS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_HS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800a1ba:	b480      	push	{r7}
 800a1bc:	b085      	sub	sp, #20
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	60b9      	str	r1, [r7, #8]
 800a1c4:	607a      	str	r2, [r7, #4]
 800a1c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 10 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a1ce:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1d6:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800a1d8:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3714      	adds	r7, #20
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <STORAGE_IsReady_HS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_HS(uint8_t lun)
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	b083      	sub	sp, #12
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 11 */
  UNUSED(lun);

  return (USBD_OK);
 800a1f0:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	370c      	adds	r7, #12
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr

0800a1fe <STORAGE_IsWriteProtected_HS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_HS(uint8_t lun)
{
 800a1fe:	b480      	push	{r7}
 800a200:	b083      	sub	sp, #12
 800a202:	af00      	add	r7, sp, #0
 800a204:	4603      	mov	r3, r0
 800a206:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 12 */
  return (USBD_OK);
 800a208:	2300      	movs	r3, #0
  /* USER CODE END 12 */
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	370c      	adds	r7, #12
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
	...

0800a218 <STORAGE_Read_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60b9      	str	r1, [r7, #8]
 800a220:	607a      	str	r2, [r7, #4]
 800a222:	461a      	mov	r2, r3
 800a224:	4603      	mov	r3, r0
 800a226:	73fb      	strb	r3, [r7, #15]
 800a228:	4613      	mov	r3, r2
 800a22a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 13 */
  UNUSED(lun);
  memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	025b      	lsls	r3, r3, #9
 800a230:	4a06      	ldr	r2, [pc, #24]	; (800a24c <STORAGE_Read_HS+0x34>)
 800a232:	1899      	adds	r1, r3, r2
 800a234:	89bb      	ldrh	r3, [r7, #12]
 800a236:	025b      	lsls	r3, r3, #9
 800a238:	461a      	mov	r2, r3
 800a23a:	68b8      	ldr	r0, [r7, #8]
 800a23c:	f000 fdc8 	bl	800add0 <memcpy>

  return (USBD_OK);
 800a240:	2300      	movs	r3, #0
  /* USER CODE END 13 */
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	24000660 	.word	0x24000660

0800a250 <STORAGE_Write_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	60b9      	str	r1, [r7, #8]
 800a258:	607a      	str	r2, [r7, #4]
 800a25a:	461a      	mov	r2, r3
 800a25c:	4603      	mov	r3, r0
 800a25e:	73fb      	strb	r3, [r7, #15]
 800a260:	4613      	mov	r3, r2
 800a262:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 14 */
  UNUSED(lun);
  memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	025b      	lsls	r3, r3, #9
 800a268:	4a06      	ldr	r2, [pc, #24]	; (800a284 <STORAGE_Write_HS+0x34>)
 800a26a:	1898      	adds	r0, r3, r2
 800a26c:	89bb      	ldrh	r3, [r7, #12]
 800a26e:	025b      	lsls	r3, r3, #9
 800a270:	461a      	mov	r2, r3
 800a272:	68b9      	ldr	r1, [r7, #8]
 800a274:	f000 fdac 	bl	800add0 <memcpy>

  return (USBD_OK);
 800a278:	2300      	movs	r3, #0
  /* USER CODE END 14 */
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	24000660 	.word	0x24000660

0800a288 <STORAGE_GetMaxLun_HS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_HS(void)
{
 800a288:	b480      	push	{r7}
 800a28a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 15 */
  return (STORAGE_LUN_NBR - 1);
 800a28c:	2300      	movs	r3, #0
  /* USER CODE END 15 */
}
 800a28e:	4618      	mov	r0, r3
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b0c0      	sub	sp, #256	; 0x100
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	601a      	str	r2, [r3, #0]
 800a2a8:	605a      	str	r2, [r3, #4]
 800a2aa:	609a      	str	r2, [r3, #8]
 800a2ac:	60da      	str	r2, [r3, #12]
 800a2ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a2b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a2b4:	22c0      	movs	r2, #192	; 0xc0
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f000 fd0e 	bl	800acda <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a85      	ldr	r2, [pc, #532]	; (800a4d8 <HAL_PCD_MspInit+0x240>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	f040 8102 	bne.w	800a4ce <HAL_PCD_MspInit+0x236>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a2ca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a2ce:	f04f 0300 	mov.w	r3, #0
 800a2d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 800a2d6:	2318      	movs	r3, #24
 800a2d8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 800a2da:	23c0      	movs	r3, #192	; 0xc0
 800a2dc:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 800a2de:	2311      	movs	r3, #17
 800a2e0:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800a2e2:	2304      	movs	r3, #4
 800a2e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800a2f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a2fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a2fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a302:	4618      	mov	r0, r3
 800a304:	f7f9 fc58 	bl	8003bb8 <HAL_RCCEx_PeriphCLKConfig>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <HAL_PCD_MspInit+0x7a>
    {
      Error_Handler();
 800a30e:	f7f6 fbed 	bl	8000aec <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800a312:	f7f8 fc45 	bl	8002ba0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a316:	4b71      	ldr	r3, [pc, #452]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a318:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a31c:	4a6f      	ldr	r2, [pc, #444]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a31e:	f043 0302 	orr.w	r3, r3, #2
 800a322:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a326:	4b6d      	ldr	r3, [pc, #436]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a328:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a32c:	f003 0302 	and.w	r3, r3, #2
 800a330:	627b      	str	r3, [r7, #36]	; 0x24
 800a332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800a334:	4b69      	ldr	r3, [pc, #420]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a336:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a33a:	4a68      	ldr	r2, [pc, #416]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a33c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a340:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a344:	4b65      	ldr	r3, [pc, #404]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a346:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a34a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a34e:	623b      	str	r3, [r7, #32]
 800a350:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a352:	4b62      	ldr	r3, [pc, #392]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a354:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a358:	4a60      	ldr	r2, [pc, #384]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a35a:	f043 0304 	orr.w	r3, r3, #4
 800a35e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a362:	4b5e      	ldr	r3, [pc, #376]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a364:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a368:	f003 0304 	and.w	r3, r3, #4
 800a36c:	61fb      	str	r3, [r7, #28]
 800a36e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800a370:	4b5a      	ldr	r3, [pc, #360]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a372:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a376:	4a59      	ldr	r2, [pc, #356]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a37c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a380:	4b56      	ldr	r3, [pc, #344]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a382:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a38a:	61bb      	str	r3, [r7, #24]
 800a38c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a38e:	4b53      	ldr	r3, [pc, #332]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a390:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a394:	4a51      	ldr	r2, [pc, #324]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a396:	f043 0301 	orr.w	r3, r3, #1
 800a39a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a39e:	4b4f      	ldr	r3, [pc, #316]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a3a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a3a4:	f003 0301 	and.w	r3, r3, #1
 800a3a8:	617b      	str	r3, [r7, #20]
 800a3aa:	697b      	ldr	r3, [r7, #20]
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB10     ------> USB_OTG_HS_ULPI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_12
 800a3ac:	f643 4323 	movw	r3, #15395	; 0x3c23
 800a3b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                          |GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3b4:	2302      	movs	r3, #2
 800a3b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a3c6:	230a      	movs	r3, #10
 800a3c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3cc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	4843      	ldr	r0, [pc, #268]	; (800a4e0 <HAL_PCD_MspInit+0x248>)
 800a3d4:	f7f6 fef6 	bl	80011c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800a3d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a3dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a3ec:	2302      	movs	r3, #2
 800a3ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a3f2:	230a      	movs	r3, #10
 800a3f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a3f8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	4839      	ldr	r0, [pc, #228]	; (800a4e4 <HAL_PCD_MspInit+0x24c>)
 800a400:	f7f6 fee0 	bl	80011c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a404:	2301      	movs	r3, #1
 800a406:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a40a:	2302      	movs	r3, #2
 800a40c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a410:	2300      	movs	r3, #0
 800a412:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a416:	2302      	movs	r3, #2
 800a418:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a41c:	230a      	movs	r3, #10
 800a41e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a422:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800a426:	4619      	mov	r1, r3
 800a428:	482f      	ldr	r0, [pc, #188]	; (800a4e8 <HAL_PCD_MspInit+0x250>)
 800a42a:	f7f6 fecb 	bl	80011c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a42e:	2310      	movs	r3, #16
 800a430:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a434:	2302      	movs	r3, #2
 800a436:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a43a:	2300      	movs	r3, #0
 800a43c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a440:	2302      	movs	r3, #2
 800a442:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a446:	230a      	movs	r3, #10
 800a448:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a44c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800a450:	4619      	mov	r1, r3
 800a452:	4826      	ldr	r0, [pc, #152]	; (800a4ec <HAL_PCD_MspInit+0x254>)
 800a454:	f7f6 feb6 	bl	80011c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 800a458:	2328      	movs	r3, #40	; 0x28
 800a45a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a45e:	2302      	movs	r3, #2
 800a460:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a464:	2300      	movs	r3, #0
 800a466:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a46a:	2302      	movs	r3, #2
 800a46c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a470:	230a      	movs	r3, #10
 800a472:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a476:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800a47a:	4619      	mov	r1, r3
 800a47c:	481c      	ldr	r0, [pc, #112]	; (800a4f0 <HAL_PCD_MspInit+0x258>)
 800a47e:	f7f6 fea1 	bl	80011c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a482:	4b16      	ldr	r3, [pc, #88]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a484:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800a488:	4a14      	ldr	r2, [pc, #80]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a48a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a48e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800a492:	4b12      	ldr	r3, [pc, #72]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a494:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800a498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a49c:	613b      	str	r3, [r7, #16]
 800a49e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800a4a0:	4b0e      	ldr	r3, [pc, #56]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a4a2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800a4a6:	4a0d      	ldr	r2, [pc, #52]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a4a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a4ac:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800a4b0:	4b0a      	ldr	r3, [pc, #40]	; (800a4dc <HAL_PCD_MspInit+0x244>)
 800a4b2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800a4b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a4ba:	60fb      	str	r3, [r7, #12]
 800a4bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800a4be:	2200      	movs	r2, #0
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	204d      	movs	r0, #77	; 0x4d
 800a4c4:	f7f6 fe49 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a4c8:	204d      	movs	r0, #77	; 0x4d
 800a4ca:	f7f6 fe60 	bl	800118e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a4ce:	bf00      	nop
 800a4d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	40040000 	.word	0x40040000
 800a4dc:	58024400 	.word	0x58024400
 800a4e0:	58020400 	.word	0x58020400
 800a4e4:	58022000 	.word	0x58022000
 800a4e8:	58020800 	.word	0x58020800
 800a4ec:	58021c00 	.word	0x58021c00
 800a4f0:	58020000 	.word	0x58020000

0800a4f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800a508:	4619      	mov	r1, r3
 800a50a:	4610      	mov	r0, r2
 800a50c:	f7fe fad3 	bl	8008ab6 <USBD_LL_SetupStage>
}
 800a510:	bf00      	nop
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	460b      	mov	r3, r1
 800a522:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a52a:	78fa      	ldrb	r2, [r7, #3]
 800a52c:	6879      	ldr	r1, [r7, #4]
 800a52e:	4613      	mov	r3, r2
 800a530:	00db      	lsls	r3, r3, #3
 800a532:	4413      	add	r3, r2
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	440b      	add	r3, r1
 800a538:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	78fb      	ldrb	r3, [r7, #3]
 800a540:	4619      	mov	r1, r3
 800a542:	f7fe fb0d 	bl	8008b60 <USBD_LL_DataOutStage>
}
 800a546:	bf00      	nop
 800a548:	3708      	adds	r7, #8
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b082      	sub	sp, #8
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	460b      	mov	r3, r1
 800a558:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a560:	78fa      	ldrb	r2, [r7, #3]
 800a562:	6879      	ldr	r1, [r7, #4]
 800a564:	4613      	mov	r3, r2
 800a566:	00db      	lsls	r3, r3, #3
 800a568:	4413      	add	r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	440b      	add	r3, r1
 800a56e:	3320      	adds	r3, #32
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	78fb      	ldrb	r3, [r7, #3]
 800a574:	4619      	mov	r1, r3
 800a576:	f7fe fba6 	bl	8008cc6 <USBD_LL_DataInStage>
}
 800a57a:	bf00      	nop
 800a57c:	3708      	adds	r7, #8
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b082      	sub	sp, #8
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a590:	4618      	mov	r0, r3
 800a592:	f7fe fce0 	bl	8008f56 <USBD_LL_SOF>
}
 800a596:	bf00      	nop
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b084      	sub	sp, #16
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	79db      	ldrb	r3, [r3, #7]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d102      	bne.n	800a5b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	73fb      	strb	r3, [r7, #15]
 800a5b6:	e008      	b.n	800a5ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	79db      	ldrb	r3, [r3, #7]
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d102      	bne.n	800a5c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	73fb      	strb	r3, [r7, #15]
 800a5c4:	e001      	b.n	800a5ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a5c6:	f7f6 fa91 	bl	8000aec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a5d0:	7bfa      	ldrb	r2, [r7, #15]
 800a5d2:	4611      	mov	r1, r2
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7fe fc7a 	bl	8008ece <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7fe fc22 	bl	8008e2a <USBD_LL_Reset>
}
 800a5e6:	bf00      	nop
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
	...

0800a5f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fe fc75 	bl	8008eee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	6812      	ldr	r2, [r2, #0]
 800a612:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a616:	f043 0301 	orr.w	r3, r3, #1
 800a61a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	7adb      	ldrb	r3, [r3, #11]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d005      	beq.n	800a630 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a624:	4b04      	ldr	r3, [pc, #16]	; (800a638 <HAL_PCD_SuspendCallback+0x48>)
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	4a03      	ldr	r2, [pc, #12]	; (800a638 <HAL_PCD_SuspendCallback+0x48>)
 800a62a:	f043 0306 	orr.w	r3, r3, #6
 800a62e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a630:	bf00      	nop
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	e000ed00 	.word	0xe000ed00

0800a63c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fe fc6b 	bl	8008f26 <USBD_LL_Resume>
}
 800a650:	bf00      	nop
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	460b      	mov	r3, r1
 800a662:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a66a:	78fa      	ldrb	r2, [r7, #3]
 800a66c:	4611      	mov	r1, r2
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fe fcc3 	bl	8008ffa <USBD_LL_IsoOUTIncomplete>
}
 800a674:	bf00      	nop
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	460b      	mov	r3, r1
 800a686:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a68e:	78fa      	ldrb	r2, [r7, #3]
 800a690:	4611      	mov	r1, r2
 800a692:	4618      	mov	r0, r3
 800a694:	f7fe fc7f 	bl	8008f96 <USBD_LL_IsoINIncomplete>
}
 800a698:	bf00      	nop
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7fe fcd5 	bl	800905e <USBD_LL_DevConnected>
}
 800a6b4:	bf00      	nop
 800a6b6:	3708      	adds	r7, #8
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fe fcd2 	bl	8009074 <USBD_LL_DevDisconnected>
}
 800a6d0:	bf00      	nop
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d140      	bne.n	800a76a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800a6e8:	4a22      	ldr	r2, [pc, #136]	; (800a774 <USBD_LL_Init+0x9c>)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	4a20      	ldr	r2, [pc, #128]	; (800a774 <USBD_LL_Init+0x9c>)
 800a6f4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a6f8:	4b1e      	ldr	r3, [pc, #120]	; (800a774 <USBD_LL_Init+0x9c>)
 800a6fa:	4a1f      	ldr	r2, [pc, #124]	; (800a778 <USBD_LL_Init+0xa0>)
 800a6fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800a6fe:	4b1d      	ldr	r3, [pc, #116]	; (800a774 <USBD_LL_Init+0x9c>)
 800a700:	2209      	movs	r2, #9
 800a702:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800a704:	4b1b      	ldr	r3, [pc, #108]	; (800a774 <USBD_LL_Init+0x9c>)
 800a706:	2200      	movs	r2, #0
 800a708:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a70a:	4b1a      	ldr	r3, [pc, #104]	; (800a774 <USBD_LL_Init+0x9c>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800a710:	4b18      	ldr	r3, [pc, #96]	; (800a774 <USBD_LL_Init+0x9c>)
 800a712:	2201      	movs	r2, #1
 800a714:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a716:	4b17      	ldr	r3, [pc, #92]	; (800a774 <USBD_LL_Init+0x9c>)
 800a718:	2200      	movs	r2, #0
 800a71a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a71c:	4b15      	ldr	r3, [pc, #84]	; (800a774 <USBD_LL_Init+0x9c>)
 800a71e:	2200      	movs	r2, #0
 800a720:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800a722:	4b14      	ldr	r3, [pc, #80]	; (800a774 <USBD_LL_Init+0x9c>)
 800a724:	2200      	movs	r2, #0
 800a726:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a728:	4b12      	ldr	r3, [pc, #72]	; (800a774 <USBD_LL_Init+0x9c>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800a72e:	4b11      	ldr	r3, [pc, #68]	; (800a774 <USBD_LL_Init+0x9c>)
 800a730:	2200      	movs	r2, #0
 800a732:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a734:	4b0f      	ldr	r3, [pc, #60]	; (800a774 <USBD_LL_Init+0x9c>)
 800a736:	2200      	movs	r2, #0
 800a738:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800a73a:	480e      	ldr	r0, [pc, #56]	; (800a774 <USBD_LL_Init+0x9c>)
 800a73c:	f7f6 ff0b 	bl	8001556 <HAL_PCD_Init>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d001      	beq.n	800a74a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a746:	f7f6 f9d1 	bl	8000aec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800a74a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a74e:	4809      	ldr	r0, [pc, #36]	; (800a774 <USBD_LL_Init+0x9c>)
 800a750:	f7f8 f98b 	bl	8002a6a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800a754:	2280      	movs	r2, #128	; 0x80
 800a756:	2100      	movs	r1, #0
 800a758:	4806      	ldr	r0, [pc, #24]	; (800a774 <USBD_LL_Init+0x9c>)
 800a75a:	f7f8 f93f 	bl	80029dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800a75e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800a762:	2101      	movs	r1, #1
 800a764:	4803      	ldr	r0, [pc, #12]	; (800a774 <USBD_LL_Init+0x9c>)
 800a766:	f7f8 f939 	bl	80029dc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3708      	adds	r7, #8
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}
 800a774:	240fa660 	.word	0x240fa660
 800a778:	40040000 	.word	0x40040000

0800a77c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a784:	2300      	movs	r3, #0
 800a786:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a788:	2300      	movs	r3, #0
 800a78a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a792:	4618      	mov	r0, r3
 800a794:	f7f6 ffeb 	bl	800176e <HAL_PCD_Start>
 800a798:	4603      	mov	r3, r0
 800a79a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a79c:	7bfb      	ldrb	r3, [r7, #15]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f000 f962 	bl	800aa68 <USBD_Get_USB_Status>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b084      	sub	sp, #16
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
 800a7ba:	4608      	mov	r0, r1
 800a7bc:	4611      	mov	r1, r2
 800a7be:	461a      	mov	r2, r3
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	70fb      	strb	r3, [r7, #3]
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	70bb      	strb	r3, [r7, #2]
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a7da:	78bb      	ldrb	r3, [r7, #2]
 800a7dc:	883a      	ldrh	r2, [r7, #0]
 800a7de:	78f9      	ldrb	r1, [r7, #3]
 800a7e0:	f7f7 fcec 	bl	80021bc <HAL_PCD_EP_Open>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f000 f93c 	bl	800aa68 <USBD_Get_USB_Status>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b084      	sub	sp, #16
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	460b      	mov	r3, r1
 800a808:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a80a:	2300      	movs	r3, #0
 800a80c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a80e:	2300      	movs	r3, #0
 800a810:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a818:	78fa      	ldrb	r2, [r7, #3]
 800a81a:	4611      	mov	r1, r2
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7f7 fd35 	bl	800228c <HAL_PCD_EP_Close>
 800a822:	4603      	mov	r3, r0
 800a824:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a826:	7bfb      	ldrb	r3, [r7, #15]
 800a828:	4618      	mov	r0, r3
 800a82a:	f000 f91d 	bl	800aa68 <USBD_Get_USB_Status>
 800a82e:	4603      	mov	r3, r0
 800a830:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a832:	7bbb      	ldrb	r3, [r7, #14]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	460b      	mov	r3, r1
 800a846:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a848:	2300      	movs	r3, #0
 800a84a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a84c:	2300      	movs	r3, #0
 800a84e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a856:	78fa      	ldrb	r2, [r7, #3]
 800a858:	4611      	mov	r1, r2
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7f7 fed7 	bl	800260e <HAL_PCD_EP_Flush>
 800a860:	4603      	mov	r3, r0
 800a862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a864:	7bfb      	ldrb	r3, [r7, #15]
 800a866:	4618      	mov	r0, r3
 800a868:	f000 f8fe 	bl	800aa68 <USBD_Get_USB_Status>
 800a86c:	4603      	mov	r3, r0
 800a86e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a870:	7bbb      	ldrb	r3, [r7, #14]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b084      	sub	sp, #16
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	460b      	mov	r3, r1
 800a884:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a886:	2300      	movs	r3, #0
 800a888:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a88a:	2300      	movs	r3, #0
 800a88c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a894:	78fa      	ldrb	r2, [r7, #3]
 800a896:	4611      	mov	r1, r2
 800a898:	4618      	mov	r0, r3
 800a89a:	f7f7 fdce 	bl	800243a <HAL_PCD_EP_SetStall>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8a2:	7bfb      	ldrb	r3, [r7, #15]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f000 f8df 	bl	800aa68 <USBD_Get_USB_Status>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8d2:	78fa      	ldrb	r2, [r7, #3]
 800a8d4:	4611      	mov	r1, r2
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7f7 fe12 	bl	8002500 <HAL_PCD_EP_ClrStall>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8e0:	7bfb      	ldrb	r3, [r7, #15]
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f000 f8c0 	bl	800aa68 <USBD_Get_USB_Status>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8f6:	b480      	push	{r7}
 800a8f8:	b085      	sub	sp, #20
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
 800a8fe:	460b      	mov	r3, r1
 800a900:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a908:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a90a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	da0b      	bge.n	800a92a <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a912:	78fb      	ldrb	r3, [r7, #3]
 800a914:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a918:	68f9      	ldr	r1, [r7, #12]
 800a91a:	4613      	mov	r3, r2
 800a91c:	00db      	lsls	r3, r3, #3
 800a91e:	4413      	add	r3, r2
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	440b      	add	r3, r1
 800a924:	3316      	adds	r3, #22
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	e00b      	b.n	800a942 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a92a:	78fb      	ldrb	r3, [r7, #3]
 800a92c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a930:	68f9      	ldr	r1, [r7, #12]
 800a932:	4613      	mov	r3, r2
 800a934:	00db      	lsls	r3, r3, #3
 800a936:	4413      	add	r3, r2
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	440b      	add	r3, r1
 800a93c:	f203 2356 	addw	r3, r3, #598	; 0x256
 800a940:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a942:	4618      	mov	r0, r3
 800a944:	3714      	adds	r7, #20
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr

0800a94e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b084      	sub	sp, #16
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
 800a956:	460b      	mov	r3, r1
 800a958:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a95e:	2300      	movs	r3, #0
 800a960:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a968:	78fa      	ldrb	r2, [r7, #3]
 800a96a:	4611      	mov	r1, r2
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7f7 fc01 	bl	8002174 <HAL_PCD_SetAddress>
 800a972:	4603      	mov	r3, r0
 800a974:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a976:	7bfb      	ldrb	r3, [r7, #15]
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 f875 	bl	800aa68 <USBD_Get_USB_Status>
 800a97e:	4603      	mov	r3, r0
 800a980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a982:	7bbb      	ldrb	r3, [r7, #14]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b086      	sub	sp, #24
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	607a      	str	r2, [r7, #4]
 800a996:	603b      	str	r3, [r7, #0]
 800a998:	460b      	mov	r3, r1
 800a99a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a99c:	2300      	movs	r3, #0
 800a99e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a9aa:	7af9      	ldrb	r1, [r7, #11]
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	f7f7 fd09 	bl	80023c6 <HAL_PCD_EP_Transmit>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9b8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f000 f854 	bl	800aa68 <USBD_Get_USB_Status>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9c4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3718      	adds	r7, #24
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b086      	sub	sp, #24
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	60f8      	str	r0, [r7, #12]
 800a9d6:	607a      	str	r2, [r7, #4]
 800a9d8:	603b      	str	r3, [r7, #0]
 800a9da:	460b      	mov	r3, r1
 800a9dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a9ec:	7af9      	ldrb	r1, [r7, #11]
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	f7f7 fc95 	bl	8002320 <HAL_PCD_EP_Receive>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9fa:	7dfb      	ldrb	r3, [r7, #23]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f000 f833 	bl	800aa68 <USBD_Get_USB_Status>
 800aa02:	4603      	mov	r3, r0
 800aa04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa06:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3718      	adds	r7, #24
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa22:	78fa      	ldrb	r2, [r7, #3]
 800aa24:	4611      	mov	r1, r2
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7f7 fcb5 	bl	8002396 <HAL_PCD_EP_GetRxCount>
 800aa2c:	4603      	mov	r3, r0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3708      	adds	r7, #8
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
	...

0800aa38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aa40:	4b03      	ldr	r3, [pc, #12]	; (800aa50 <USBD_static_malloc+0x18>)
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	370c      	adds	r7, #12
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	240fab44 	.word	0x240fab44

0800aa54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800aa5c:	bf00      	nop
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	4603      	mov	r3, r0
 800aa70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa72:	2300      	movs	r3, #0
 800aa74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa76:	79fb      	ldrb	r3, [r7, #7]
 800aa78:	2b03      	cmp	r3, #3
 800aa7a:	d817      	bhi.n	800aaac <USBD_Get_USB_Status+0x44>
 800aa7c:	a201      	add	r2, pc, #4	; (adr r2, 800aa84 <USBD_Get_USB_Status+0x1c>)
 800aa7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa82:	bf00      	nop
 800aa84:	0800aa95 	.word	0x0800aa95
 800aa88:	0800aa9b 	.word	0x0800aa9b
 800aa8c:	0800aaa1 	.word	0x0800aaa1
 800aa90:	0800aaa7 	.word	0x0800aaa7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aa94:	2300      	movs	r3, #0
 800aa96:	73fb      	strb	r3, [r7, #15]
    break;
 800aa98:	e00b      	b.n	800aab2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	73fb      	strb	r3, [r7, #15]
    break;
 800aa9e:	e008      	b.n	800aab2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	73fb      	strb	r3, [r7, #15]
    break;
 800aaa4:	e005      	b.n	800aab2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	73fb      	strb	r3, [r7, #15]
    break;
 800aaaa:	e002      	b.n	800aab2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aaac:	2303      	movs	r3, #3
 800aaae:	73fb      	strb	r3, [r7, #15]
    break;
 800aab0:	bf00      	nop
  }
  return usb_status;
 800aab2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3714      	adds	r7, #20
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <std>:
 800aac0:	2300      	movs	r3, #0
 800aac2:	b510      	push	{r4, lr}
 800aac4:	4604      	mov	r4, r0
 800aac6:	e9c0 3300 	strd	r3, r3, [r0]
 800aaca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aace:	6083      	str	r3, [r0, #8]
 800aad0:	8181      	strh	r1, [r0, #12]
 800aad2:	6643      	str	r3, [r0, #100]	; 0x64
 800aad4:	81c2      	strh	r2, [r0, #14]
 800aad6:	6183      	str	r3, [r0, #24]
 800aad8:	4619      	mov	r1, r3
 800aada:	2208      	movs	r2, #8
 800aadc:	305c      	adds	r0, #92	; 0x5c
 800aade:	f000 f8fc 	bl	800acda <memset>
 800aae2:	4b05      	ldr	r3, [pc, #20]	; (800aaf8 <std+0x38>)
 800aae4:	6263      	str	r3, [r4, #36]	; 0x24
 800aae6:	4b05      	ldr	r3, [pc, #20]	; (800aafc <std+0x3c>)
 800aae8:	62a3      	str	r3, [r4, #40]	; 0x28
 800aaea:	4b05      	ldr	r3, [pc, #20]	; (800ab00 <std+0x40>)
 800aaec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aaee:	4b05      	ldr	r3, [pc, #20]	; (800ab04 <std+0x44>)
 800aaf0:	6224      	str	r4, [r4, #32]
 800aaf2:	6323      	str	r3, [r4, #48]	; 0x30
 800aaf4:	bd10      	pop	{r4, pc}
 800aaf6:	bf00      	nop
 800aaf8:	0800ac55 	.word	0x0800ac55
 800aafc:	0800ac77 	.word	0x0800ac77
 800ab00:	0800acaf 	.word	0x0800acaf
 800ab04:	0800acd3 	.word	0x0800acd3

0800ab08 <stdio_exit_handler>:
 800ab08:	4a02      	ldr	r2, [pc, #8]	; (800ab14 <stdio_exit_handler+0xc>)
 800ab0a:	4903      	ldr	r1, [pc, #12]	; (800ab18 <stdio_exit_handler+0x10>)
 800ab0c:	4803      	ldr	r0, [pc, #12]	; (800ab1c <stdio_exit_handler+0x14>)
 800ab0e:	f000 b869 	b.w	800abe4 <_fwalk_sglue>
 800ab12:	bf00      	nop
 800ab14:	24000100 	.word	0x24000100
 800ab18:	0800b691 	.word	0x0800b691
 800ab1c:	2400010c 	.word	0x2400010c

0800ab20 <cleanup_stdio>:
 800ab20:	6841      	ldr	r1, [r0, #4]
 800ab22:	4b0c      	ldr	r3, [pc, #48]	; (800ab54 <cleanup_stdio+0x34>)
 800ab24:	4299      	cmp	r1, r3
 800ab26:	b510      	push	{r4, lr}
 800ab28:	4604      	mov	r4, r0
 800ab2a:	d001      	beq.n	800ab30 <cleanup_stdio+0x10>
 800ab2c:	f000 fdb0 	bl	800b690 <_fflush_r>
 800ab30:	68a1      	ldr	r1, [r4, #8]
 800ab32:	4b09      	ldr	r3, [pc, #36]	; (800ab58 <cleanup_stdio+0x38>)
 800ab34:	4299      	cmp	r1, r3
 800ab36:	d002      	beq.n	800ab3e <cleanup_stdio+0x1e>
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f000 fda9 	bl	800b690 <_fflush_r>
 800ab3e:	68e1      	ldr	r1, [r4, #12]
 800ab40:	4b06      	ldr	r3, [pc, #24]	; (800ab5c <cleanup_stdio+0x3c>)
 800ab42:	4299      	cmp	r1, r3
 800ab44:	d004      	beq.n	800ab50 <cleanup_stdio+0x30>
 800ab46:	4620      	mov	r0, r4
 800ab48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab4c:	f000 bda0 	b.w	800b690 <_fflush_r>
 800ab50:	bd10      	pop	{r4, pc}
 800ab52:	bf00      	nop
 800ab54:	240fadbc 	.word	0x240fadbc
 800ab58:	240fae24 	.word	0x240fae24
 800ab5c:	240fae8c 	.word	0x240fae8c

0800ab60 <global_stdio_init.part.0>:
 800ab60:	b510      	push	{r4, lr}
 800ab62:	4b0b      	ldr	r3, [pc, #44]	; (800ab90 <global_stdio_init.part.0+0x30>)
 800ab64:	4c0b      	ldr	r4, [pc, #44]	; (800ab94 <global_stdio_init.part.0+0x34>)
 800ab66:	4a0c      	ldr	r2, [pc, #48]	; (800ab98 <global_stdio_init.part.0+0x38>)
 800ab68:	601a      	str	r2, [r3, #0]
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	2104      	movs	r1, #4
 800ab70:	f7ff ffa6 	bl	800aac0 <std>
 800ab74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ab78:	2201      	movs	r2, #1
 800ab7a:	2109      	movs	r1, #9
 800ab7c:	f7ff ffa0 	bl	800aac0 <std>
 800ab80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ab84:	2202      	movs	r2, #2
 800ab86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab8a:	2112      	movs	r1, #18
 800ab8c:	f7ff bf98 	b.w	800aac0 <std>
 800ab90:	240faef4 	.word	0x240faef4
 800ab94:	240fadbc 	.word	0x240fadbc
 800ab98:	0800ab09 	.word	0x0800ab09

0800ab9c <__sfp_lock_acquire>:
 800ab9c:	4801      	ldr	r0, [pc, #4]	; (800aba4 <__sfp_lock_acquire+0x8>)
 800ab9e:	f000 b915 	b.w	800adcc <__retarget_lock_acquire_recursive>
 800aba2:	bf00      	nop
 800aba4:	240faefd 	.word	0x240faefd

0800aba8 <__sfp_lock_release>:
 800aba8:	4801      	ldr	r0, [pc, #4]	; (800abb0 <__sfp_lock_release+0x8>)
 800abaa:	f000 b910 	b.w	800adce <__retarget_lock_release_recursive>
 800abae:	bf00      	nop
 800abb0:	240faefd 	.word	0x240faefd

0800abb4 <__sinit>:
 800abb4:	b510      	push	{r4, lr}
 800abb6:	4604      	mov	r4, r0
 800abb8:	f7ff fff0 	bl	800ab9c <__sfp_lock_acquire>
 800abbc:	6a23      	ldr	r3, [r4, #32]
 800abbe:	b11b      	cbz	r3, 800abc8 <__sinit+0x14>
 800abc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abc4:	f7ff bff0 	b.w	800aba8 <__sfp_lock_release>
 800abc8:	4b04      	ldr	r3, [pc, #16]	; (800abdc <__sinit+0x28>)
 800abca:	6223      	str	r3, [r4, #32]
 800abcc:	4b04      	ldr	r3, [pc, #16]	; (800abe0 <__sinit+0x2c>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1f5      	bne.n	800abc0 <__sinit+0xc>
 800abd4:	f7ff ffc4 	bl	800ab60 <global_stdio_init.part.0>
 800abd8:	e7f2      	b.n	800abc0 <__sinit+0xc>
 800abda:	bf00      	nop
 800abdc:	0800ab21 	.word	0x0800ab21
 800abe0:	240faef4 	.word	0x240faef4

0800abe4 <_fwalk_sglue>:
 800abe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abe8:	4607      	mov	r7, r0
 800abea:	4688      	mov	r8, r1
 800abec:	4614      	mov	r4, r2
 800abee:	2600      	movs	r6, #0
 800abf0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abf4:	f1b9 0901 	subs.w	r9, r9, #1
 800abf8:	d505      	bpl.n	800ac06 <_fwalk_sglue+0x22>
 800abfa:	6824      	ldr	r4, [r4, #0]
 800abfc:	2c00      	cmp	r4, #0
 800abfe:	d1f7      	bne.n	800abf0 <_fwalk_sglue+0xc>
 800ac00:	4630      	mov	r0, r6
 800ac02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac06:	89ab      	ldrh	r3, [r5, #12]
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d907      	bls.n	800ac1c <_fwalk_sglue+0x38>
 800ac0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac10:	3301      	adds	r3, #1
 800ac12:	d003      	beq.n	800ac1c <_fwalk_sglue+0x38>
 800ac14:	4629      	mov	r1, r5
 800ac16:	4638      	mov	r0, r7
 800ac18:	47c0      	blx	r8
 800ac1a:	4306      	orrs	r6, r0
 800ac1c:	3568      	adds	r5, #104	; 0x68
 800ac1e:	e7e9      	b.n	800abf4 <_fwalk_sglue+0x10>

0800ac20 <iprintf>:
 800ac20:	b40f      	push	{r0, r1, r2, r3}
 800ac22:	b507      	push	{r0, r1, r2, lr}
 800ac24:	4906      	ldr	r1, [pc, #24]	; (800ac40 <iprintf+0x20>)
 800ac26:	ab04      	add	r3, sp, #16
 800ac28:	6808      	ldr	r0, [r1, #0]
 800ac2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac2e:	6881      	ldr	r1, [r0, #8]
 800ac30:	9301      	str	r3, [sp, #4]
 800ac32:	f000 f9fd 	bl	800b030 <_vfiprintf_r>
 800ac36:	b003      	add	sp, #12
 800ac38:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac3c:	b004      	add	sp, #16
 800ac3e:	4770      	bx	lr
 800ac40:	24000158 	.word	0x24000158

0800ac44 <putchar>:
 800ac44:	4b02      	ldr	r3, [pc, #8]	; (800ac50 <putchar+0xc>)
 800ac46:	4601      	mov	r1, r0
 800ac48:	6818      	ldr	r0, [r3, #0]
 800ac4a:	6882      	ldr	r2, [r0, #8]
 800ac4c:	f000 bd48 	b.w	800b6e0 <_putc_r>
 800ac50:	24000158 	.word	0x24000158

0800ac54 <__sread>:
 800ac54:	b510      	push	{r4, lr}
 800ac56:	460c      	mov	r4, r1
 800ac58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac5c:	f000 f868 	bl	800ad30 <_read_r>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	bfab      	itete	ge
 800ac64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac66:	89a3      	ldrhlt	r3, [r4, #12]
 800ac68:	181b      	addge	r3, r3, r0
 800ac6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac6e:	bfac      	ite	ge
 800ac70:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac72:	81a3      	strhlt	r3, [r4, #12]
 800ac74:	bd10      	pop	{r4, pc}

0800ac76 <__swrite>:
 800ac76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac7a:	461f      	mov	r7, r3
 800ac7c:	898b      	ldrh	r3, [r1, #12]
 800ac7e:	05db      	lsls	r3, r3, #23
 800ac80:	4605      	mov	r5, r0
 800ac82:	460c      	mov	r4, r1
 800ac84:	4616      	mov	r6, r2
 800ac86:	d505      	bpl.n	800ac94 <__swrite+0x1e>
 800ac88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f000 f83c 	bl	800ad0c <_lseek_r>
 800ac94:	89a3      	ldrh	r3, [r4, #12]
 800ac96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac9e:	81a3      	strh	r3, [r4, #12]
 800aca0:	4632      	mov	r2, r6
 800aca2:	463b      	mov	r3, r7
 800aca4:	4628      	mov	r0, r5
 800aca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acaa:	f000 b853 	b.w	800ad54 <_write_r>

0800acae <__sseek>:
 800acae:	b510      	push	{r4, lr}
 800acb0:	460c      	mov	r4, r1
 800acb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb6:	f000 f829 	bl	800ad0c <_lseek_r>
 800acba:	1c43      	adds	r3, r0, #1
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	bf15      	itete	ne
 800acc0:	6560      	strne	r0, [r4, #84]	; 0x54
 800acc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acca:	81a3      	strheq	r3, [r4, #12]
 800accc:	bf18      	it	ne
 800acce:	81a3      	strhne	r3, [r4, #12]
 800acd0:	bd10      	pop	{r4, pc}

0800acd2 <__sclose>:
 800acd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd6:	f000 b809 	b.w	800acec <_close_r>

0800acda <memset>:
 800acda:	4402      	add	r2, r0
 800acdc:	4603      	mov	r3, r0
 800acde:	4293      	cmp	r3, r2
 800ace0:	d100      	bne.n	800ace4 <memset+0xa>
 800ace2:	4770      	bx	lr
 800ace4:	f803 1b01 	strb.w	r1, [r3], #1
 800ace8:	e7f9      	b.n	800acde <memset+0x4>
	...

0800acec <_close_r>:
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	4d06      	ldr	r5, [pc, #24]	; (800ad08 <_close_r+0x1c>)
 800acf0:	2300      	movs	r3, #0
 800acf2:	4604      	mov	r4, r0
 800acf4:	4608      	mov	r0, r1
 800acf6:	602b      	str	r3, [r5, #0]
 800acf8:	f7f5 ff85 	bl	8000c06 <_close>
 800acfc:	1c43      	adds	r3, r0, #1
 800acfe:	d102      	bne.n	800ad06 <_close_r+0x1a>
 800ad00:	682b      	ldr	r3, [r5, #0]
 800ad02:	b103      	cbz	r3, 800ad06 <_close_r+0x1a>
 800ad04:	6023      	str	r3, [r4, #0]
 800ad06:	bd38      	pop	{r3, r4, r5, pc}
 800ad08:	240faef8 	.word	0x240faef8

0800ad0c <_lseek_r>:
 800ad0c:	b538      	push	{r3, r4, r5, lr}
 800ad0e:	4d07      	ldr	r5, [pc, #28]	; (800ad2c <_lseek_r+0x20>)
 800ad10:	4604      	mov	r4, r0
 800ad12:	4608      	mov	r0, r1
 800ad14:	4611      	mov	r1, r2
 800ad16:	2200      	movs	r2, #0
 800ad18:	602a      	str	r2, [r5, #0]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	f7f5 ff9a 	bl	8000c54 <_lseek>
 800ad20:	1c43      	adds	r3, r0, #1
 800ad22:	d102      	bne.n	800ad2a <_lseek_r+0x1e>
 800ad24:	682b      	ldr	r3, [r5, #0]
 800ad26:	b103      	cbz	r3, 800ad2a <_lseek_r+0x1e>
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	bd38      	pop	{r3, r4, r5, pc}
 800ad2c:	240faef8 	.word	0x240faef8

0800ad30 <_read_r>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	4d07      	ldr	r5, [pc, #28]	; (800ad50 <_read_r+0x20>)
 800ad34:	4604      	mov	r4, r0
 800ad36:	4608      	mov	r0, r1
 800ad38:	4611      	mov	r1, r2
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	602a      	str	r2, [r5, #0]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	f7f5 ff28 	bl	8000b94 <_read>
 800ad44:	1c43      	adds	r3, r0, #1
 800ad46:	d102      	bne.n	800ad4e <_read_r+0x1e>
 800ad48:	682b      	ldr	r3, [r5, #0]
 800ad4a:	b103      	cbz	r3, 800ad4e <_read_r+0x1e>
 800ad4c:	6023      	str	r3, [r4, #0]
 800ad4e:	bd38      	pop	{r3, r4, r5, pc}
 800ad50:	240faef8 	.word	0x240faef8

0800ad54 <_write_r>:
 800ad54:	b538      	push	{r3, r4, r5, lr}
 800ad56:	4d07      	ldr	r5, [pc, #28]	; (800ad74 <_write_r+0x20>)
 800ad58:	4604      	mov	r4, r0
 800ad5a:	4608      	mov	r0, r1
 800ad5c:	4611      	mov	r1, r2
 800ad5e:	2200      	movs	r2, #0
 800ad60:	602a      	str	r2, [r5, #0]
 800ad62:	461a      	mov	r2, r3
 800ad64:	f7f5 ff33 	bl	8000bce <_write>
 800ad68:	1c43      	adds	r3, r0, #1
 800ad6a:	d102      	bne.n	800ad72 <_write_r+0x1e>
 800ad6c:	682b      	ldr	r3, [r5, #0]
 800ad6e:	b103      	cbz	r3, 800ad72 <_write_r+0x1e>
 800ad70:	6023      	str	r3, [r4, #0]
 800ad72:	bd38      	pop	{r3, r4, r5, pc}
 800ad74:	240faef8 	.word	0x240faef8

0800ad78 <__errno>:
 800ad78:	4b01      	ldr	r3, [pc, #4]	; (800ad80 <__errno+0x8>)
 800ad7a:	6818      	ldr	r0, [r3, #0]
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	24000158 	.word	0x24000158

0800ad84 <__libc_init_array>:
 800ad84:	b570      	push	{r4, r5, r6, lr}
 800ad86:	4d0d      	ldr	r5, [pc, #52]	; (800adbc <__libc_init_array+0x38>)
 800ad88:	4c0d      	ldr	r4, [pc, #52]	; (800adc0 <__libc_init_array+0x3c>)
 800ad8a:	1b64      	subs	r4, r4, r5
 800ad8c:	10a4      	asrs	r4, r4, #2
 800ad8e:	2600      	movs	r6, #0
 800ad90:	42a6      	cmp	r6, r4
 800ad92:	d109      	bne.n	800ada8 <__libc_init_array+0x24>
 800ad94:	4d0b      	ldr	r5, [pc, #44]	; (800adc4 <__libc_init_array+0x40>)
 800ad96:	4c0c      	ldr	r4, [pc, #48]	; (800adc8 <__libc_init_array+0x44>)
 800ad98:	f000 fe00 	bl	800b99c <_init>
 800ad9c:	1b64      	subs	r4, r4, r5
 800ad9e:	10a4      	asrs	r4, r4, #2
 800ada0:	2600      	movs	r6, #0
 800ada2:	42a6      	cmp	r6, r4
 800ada4:	d105      	bne.n	800adb2 <__libc_init_array+0x2e>
 800ada6:	bd70      	pop	{r4, r5, r6, pc}
 800ada8:	f855 3b04 	ldr.w	r3, [r5], #4
 800adac:	4798      	blx	r3
 800adae:	3601      	adds	r6, #1
 800adb0:	e7ee      	b.n	800ad90 <__libc_init_array+0xc>
 800adb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800adb6:	4798      	blx	r3
 800adb8:	3601      	adds	r6, #1
 800adba:	e7f2      	b.n	800ada2 <__libc_init_array+0x1e>
 800adbc:	0800ba98 	.word	0x0800ba98
 800adc0:	0800ba98 	.word	0x0800ba98
 800adc4:	0800ba98 	.word	0x0800ba98
 800adc8:	0800ba9c 	.word	0x0800ba9c

0800adcc <__retarget_lock_acquire_recursive>:
 800adcc:	4770      	bx	lr

0800adce <__retarget_lock_release_recursive>:
 800adce:	4770      	bx	lr

0800add0 <memcpy>:
 800add0:	440a      	add	r2, r1
 800add2:	4291      	cmp	r1, r2
 800add4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800add8:	d100      	bne.n	800addc <memcpy+0xc>
 800adda:	4770      	bx	lr
 800addc:	b510      	push	{r4, lr}
 800adde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ade2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ade6:	4291      	cmp	r1, r2
 800ade8:	d1f9      	bne.n	800adde <memcpy+0xe>
 800adea:	bd10      	pop	{r4, pc}

0800adec <_free_r>:
 800adec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adee:	2900      	cmp	r1, #0
 800adf0:	d044      	beq.n	800ae7c <_free_r+0x90>
 800adf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adf6:	9001      	str	r0, [sp, #4]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f1a1 0404 	sub.w	r4, r1, #4
 800adfe:	bfb8      	it	lt
 800ae00:	18e4      	addlt	r4, r4, r3
 800ae02:	f000 f8df 	bl	800afc4 <__malloc_lock>
 800ae06:	4a1e      	ldr	r2, [pc, #120]	; (800ae80 <_free_r+0x94>)
 800ae08:	9801      	ldr	r0, [sp, #4]
 800ae0a:	6813      	ldr	r3, [r2, #0]
 800ae0c:	b933      	cbnz	r3, 800ae1c <_free_r+0x30>
 800ae0e:	6063      	str	r3, [r4, #4]
 800ae10:	6014      	str	r4, [r2, #0]
 800ae12:	b003      	add	sp, #12
 800ae14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae18:	f000 b8da 	b.w	800afd0 <__malloc_unlock>
 800ae1c:	42a3      	cmp	r3, r4
 800ae1e:	d908      	bls.n	800ae32 <_free_r+0x46>
 800ae20:	6825      	ldr	r5, [r4, #0]
 800ae22:	1961      	adds	r1, r4, r5
 800ae24:	428b      	cmp	r3, r1
 800ae26:	bf01      	itttt	eq
 800ae28:	6819      	ldreq	r1, [r3, #0]
 800ae2a:	685b      	ldreq	r3, [r3, #4]
 800ae2c:	1949      	addeq	r1, r1, r5
 800ae2e:	6021      	streq	r1, [r4, #0]
 800ae30:	e7ed      	b.n	800ae0e <_free_r+0x22>
 800ae32:	461a      	mov	r2, r3
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	b10b      	cbz	r3, 800ae3c <_free_r+0x50>
 800ae38:	42a3      	cmp	r3, r4
 800ae3a:	d9fa      	bls.n	800ae32 <_free_r+0x46>
 800ae3c:	6811      	ldr	r1, [r2, #0]
 800ae3e:	1855      	adds	r5, r2, r1
 800ae40:	42a5      	cmp	r5, r4
 800ae42:	d10b      	bne.n	800ae5c <_free_r+0x70>
 800ae44:	6824      	ldr	r4, [r4, #0]
 800ae46:	4421      	add	r1, r4
 800ae48:	1854      	adds	r4, r2, r1
 800ae4a:	42a3      	cmp	r3, r4
 800ae4c:	6011      	str	r1, [r2, #0]
 800ae4e:	d1e0      	bne.n	800ae12 <_free_r+0x26>
 800ae50:	681c      	ldr	r4, [r3, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	6053      	str	r3, [r2, #4]
 800ae56:	440c      	add	r4, r1
 800ae58:	6014      	str	r4, [r2, #0]
 800ae5a:	e7da      	b.n	800ae12 <_free_r+0x26>
 800ae5c:	d902      	bls.n	800ae64 <_free_r+0x78>
 800ae5e:	230c      	movs	r3, #12
 800ae60:	6003      	str	r3, [r0, #0]
 800ae62:	e7d6      	b.n	800ae12 <_free_r+0x26>
 800ae64:	6825      	ldr	r5, [r4, #0]
 800ae66:	1961      	adds	r1, r4, r5
 800ae68:	428b      	cmp	r3, r1
 800ae6a:	bf04      	itt	eq
 800ae6c:	6819      	ldreq	r1, [r3, #0]
 800ae6e:	685b      	ldreq	r3, [r3, #4]
 800ae70:	6063      	str	r3, [r4, #4]
 800ae72:	bf04      	itt	eq
 800ae74:	1949      	addeq	r1, r1, r5
 800ae76:	6021      	streq	r1, [r4, #0]
 800ae78:	6054      	str	r4, [r2, #4]
 800ae7a:	e7ca      	b.n	800ae12 <_free_r+0x26>
 800ae7c:	b003      	add	sp, #12
 800ae7e:	bd30      	pop	{r4, r5, pc}
 800ae80:	240faf00 	.word	0x240faf00

0800ae84 <sbrk_aligned>:
 800ae84:	b570      	push	{r4, r5, r6, lr}
 800ae86:	4e0e      	ldr	r6, [pc, #56]	; (800aec0 <sbrk_aligned+0x3c>)
 800ae88:	460c      	mov	r4, r1
 800ae8a:	6831      	ldr	r1, [r6, #0]
 800ae8c:	4605      	mov	r5, r0
 800ae8e:	b911      	cbnz	r1, 800ae96 <sbrk_aligned+0x12>
 800ae90:	f000 fcf0 	bl	800b874 <_sbrk_r>
 800ae94:	6030      	str	r0, [r6, #0]
 800ae96:	4621      	mov	r1, r4
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f000 fceb 	bl	800b874 <_sbrk_r>
 800ae9e:	1c43      	adds	r3, r0, #1
 800aea0:	d00a      	beq.n	800aeb8 <sbrk_aligned+0x34>
 800aea2:	1cc4      	adds	r4, r0, #3
 800aea4:	f024 0403 	bic.w	r4, r4, #3
 800aea8:	42a0      	cmp	r0, r4
 800aeaa:	d007      	beq.n	800aebc <sbrk_aligned+0x38>
 800aeac:	1a21      	subs	r1, r4, r0
 800aeae:	4628      	mov	r0, r5
 800aeb0:	f000 fce0 	bl	800b874 <_sbrk_r>
 800aeb4:	3001      	adds	r0, #1
 800aeb6:	d101      	bne.n	800aebc <sbrk_aligned+0x38>
 800aeb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800aebc:	4620      	mov	r0, r4
 800aebe:	bd70      	pop	{r4, r5, r6, pc}
 800aec0:	240faf04 	.word	0x240faf04

0800aec4 <_malloc_r>:
 800aec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aec8:	1ccd      	adds	r5, r1, #3
 800aeca:	f025 0503 	bic.w	r5, r5, #3
 800aece:	3508      	adds	r5, #8
 800aed0:	2d0c      	cmp	r5, #12
 800aed2:	bf38      	it	cc
 800aed4:	250c      	movcc	r5, #12
 800aed6:	2d00      	cmp	r5, #0
 800aed8:	4607      	mov	r7, r0
 800aeda:	db01      	blt.n	800aee0 <_malloc_r+0x1c>
 800aedc:	42a9      	cmp	r1, r5
 800aede:	d905      	bls.n	800aeec <_malloc_r+0x28>
 800aee0:	230c      	movs	r3, #12
 800aee2:	603b      	str	r3, [r7, #0]
 800aee4:	2600      	movs	r6, #0
 800aee6:	4630      	mov	r0, r6
 800aee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800afc0 <_malloc_r+0xfc>
 800aef0:	f000 f868 	bl	800afc4 <__malloc_lock>
 800aef4:	f8d8 3000 	ldr.w	r3, [r8]
 800aef8:	461c      	mov	r4, r3
 800aefa:	bb5c      	cbnz	r4, 800af54 <_malloc_r+0x90>
 800aefc:	4629      	mov	r1, r5
 800aefe:	4638      	mov	r0, r7
 800af00:	f7ff ffc0 	bl	800ae84 <sbrk_aligned>
 800af04:	1c43      	adds	r3, r0, #1
 800af06:	4604      	mov	r4, r0
 800af08:	d155      	bne.n	800afb6 <_malloc_r+0xf2>
 800af0a:	f8d8 4000 	ldr.w	r4, [r8]
 800af0e:	4626      	mov	r6, r4
 800af10:	2e00      	cmp	r6, #0
 800af12:	d145      	bne.n	800afa0 <_malloc_r+0xdc>
 800af14:	2c00      	cmp	r4, #0
 800af16:	d048      	beq.n	800afaa <_malloc_r+0xe6>
 800af18:	6823      	ldr	r3, [r4, #0]
 800af1a:	4631      	mov	r1, r6
 800af1c:	4638      	mov	r0, r7
 800af1e:	eb04 0903 	add.w	r9, r4, r3
 800af22:	f000 fca7 	bl	800b874 <_sbrk_r>
 800af26:	4581      	cmp	r9, r0
 800af28:	d13f      	bne.n	800afaa <_malloc_r+0xe6>
 800af2a:	6821      	ldr	r1, [r4, #0]
 800af2c:	1a6d      	subs	r5, r5, r1
 800af2e:	4629      	mov	r1, r5
 800af30:	4638      	mov	r0, r7
 800af32:	f7ff ffa7 	bl	800ae84 <sbrk_aligned>
 800af36:	3001      	adds	r0, #1
 800af38:	d037      	beq.n	800afaa <_malloc_r+0xe6>
 800af3a:	6823      	ldr	r3, [r4, #0]
 800af3c:	442b      	add	r3, r5
 800af3e:	6023      	str	r3, [r4, #0]
 800af40:	f8d8 3000 	ldr.w	r3, [r8]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d038      	beq.n	800afba <_malloc_r+0xf6>
 800af48:	685a      	ldr	r2, [r3, #4]
 800af4a:	42a2      	cmp	r2, r4
 800af4c:	d12b      	bne.n	800afa6 <_malloc_r+0xe2>
 800af4e:	2200      	movs	r2, #0
 800af50:	605a      	str	r2, [r3, #4]
 800af52:	e00f      	b.n	800af74 <_malloc_r+0xb0>
 800af54:	6822      	ldr	r2, [r4, #0]
 800af56:	1b52      	subs	r2, r2, r5
 800af58:	d41f      	bmi.n	800af9a <_malloc_r+0xd6>
 800af5a:	2a0b      	cmp	r2, #11
 800af5c:	d917      	bls.n	800af8e <_malloc_r+0xca>
 800af5e:	1961      	adds	r1, r4, r5
 800af60:	42a3      	cmp	r3, r4
 800af62:	6025      	str	r5, [r4, #0]
 800af64:	bf18      	it	ne
 800af66:	6059      	strne	r1, [r3, #4]
 800af68:	6863      	ldr	r3, [r4, #4]
 800af6a:	bf08      	it	eq
 800af6c:	f8c8 1000 	streq.w	r1, [r8]
 800af70:	5162      	str	r2, [r4, r5]
 800af72:	604b      	str	r3, [r1, #4]
 800af74:	4638      	mov	r0, r7
 800af76:	f104 060b 	add.w	r6, r4, #11
 800af7a:	f000 f829 	bl	800afd0 <__malloc_unlock>
 800af7e:	f026 0607 	bic.w	r6, r6, #7
 800af82:	1d23      	adds	r3, r4, #4
 800af84:	1af2      	subs	r2, r6, r3
 800af86:	d0ae      	beq.n	800aee6 <_malloc_r+0x22>
 800af88:	1b9b      	subs	r3, r3, r6
 800af8a:	50a3      	str	r3, [r4, r2]
 800af8c:	e7ab      	b.n	800aee6 <_malloc_r+0x22>
 800af8e:	42a3      	cmp	r3, r4
 800af90:	6862      	ldr	r2, [r4, #4]
 800af92:	d1dd      	bne.n	800af50 <_malloc_r+0x8c>
 800af94:	f8c8 2000 	str.w	r2, [r8]
 800af98:	e7ec      	b.n	800af74 <_malloc_r+0xb0>
 800af9a:	4623      	mov	r3, r4
 800af9c:	6864      	ldr	r4, [r4, #4]
 800af9e:	e7ac      	b.n	800aefa <_malloc_r+0x36>
 800afa0:	4634      	mov	r4, r6
 800afa2:	6876      	ldr	r6, [r6, #4]
 800afa4:	e7b4      	b.n	800af10 <_malloc_r+0x4c>
 800afa6:	4613      	mov	r3, r2
 800afa8:	e7cc      	b.n	800af44 <_malloc_r+0x80>
 800afaa:	230c      	movs	r3, #12
 800afac:	603b      	str	r3, [r7, #0]
 800afae:	4638      	mov	r0, r7
 800afb0:	f000 f80e 	bl	800afd0 <__malloc_unlock>
 800afb4:	e797      	b.n	800aee6 <_malloc_r+0x22>
 800afb6:	6025      	str	r5, [r4, #0]
 800afb8:	e7dc      	b.n	800af74 <_malloc_r+0xb0>
 800afba:	605b      	str	r3, [r3, #4]
 800afbc:	deff      	udf	#255	; 0xff
 800afbe:	bf00      	nop
 800afc0:	240faf00 	.word	0x240faf00

0800afc4 <__malloc_lock>:
 800afc4:	4801      	ldr	r0, [pc, #4]	; (800afcc <__malloc_lock+0x8>)
 800afc6:	f7ff bf01 	b.w	800adcc <__retarget_lock_acquire_recursive>
 800afca:	bf00      	nop
 800afcc:	240faefc 	.word	0x240faefc

0800afd0 <__malloc_unlock>:
 800afd0:	4801      	ldr	r0, [pc, #4]	; (800afd8 <__malloc_unlock+0x8>)
 800afd2:	f7ff befc 	b.w	800adce <__retarget_lock_release_recursive>
 800afd6:	bf00      	nop
 800afd8:	240faefc 	.word	0x240faefc

0800afdc <__sfputc_r>:
 800afdc:	6893      	ldr	r3, [r2, #8]
 800afde:	3b01      	subs	r3, #1
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	b410      	push	{r4}
 800afe4:	6093      	str	r3, [r2, #8]
 800afe6:	da08      	bge.n	800affa <__sfputc_r+0x1e>
 800afe8:	6994      	ldr	r4, [r2, #24]
 800afea:	42a3      	cmp	r3, r4
 800afec:	db01      	blt.n	800aff2 <__sfputc_r+0x16>
 800afee:	290a      	cmp	r1, #10
 800aff0:	d103      	bne.n	800affa <__sfputc_r+0x1e>
 800aff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aff6:	f000 bba7 	b.w	800b748 <__swbuf_r>
 800affa:	6813      	ldr	r3, [r2, #0]
 800affc:	1c58      	adds	r0, r3, #1
 800affe:	6010      	str	r0, [r2, #0]
 800b000:	7019      	strb	r1, [r3, #0]
 800b002:	4608      	mov	r0, r1
 800b004:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b008:	4770      	bx	lr

0800b00a <__sfputs_r>:
 800b00a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00c:	4606      	mov	r6, r0
 800b00e:	460f      	mov	r7, r1
 800b010:	4614      	mov	r4, r2
 800b012:	18d5      	adds	r5, r2, r3
 800b014:	42ac      	cmp	r4, r5
 800b016:	d101      	bne.n	800b01c <__sfputs_r+0x12>
 800b018:	2000      	movs	r0, #0
 800b01a:	e007      	b.n	800b02c <__sfputs_r+0x22>
 800b01c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b020:	463a      	mov	r2, r7
 800b022:	4630      	mov	r0, r6
 800b024:	f7ff ffda 	bl	800afdc <__sfputc_r>
 800b028:	1c43      	adds	r3, r0, #1
 800b02a:	d1f3      	bne.n	800b014 <__sfputs_r+0xa>
 800b02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b030 <_vfiprintf_r>:
 800b030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b034:	460d      	mov	r5, r1
 800b036:	b09d      	sub	sp, #116	; 0x74
 800b038:	4614      	mov	r4, r2
 800b03a:	4698      	mov	r8, r3
 800b03c:	4606      	mov	r6, r0
 800b03e:	b118      	cbz	r0, 800b048 <_vfiprintf_r+0x18>
 800b040:	6a03      	ldr	r3, [r0, #32]
 800b042:	b90b      	cbnz	r3, 800b048 <_vfiprintf_r+0x18>
 800b044:	f7ff fdb6 	bl	800abb4 <__sinit>
 800b048:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b04a:	07d9      	lsls	r1, r3, #31
 800b04c:	d405      	bmi.n	800b05a <_vfiprintf_r+0x2a>
 800b04e:	89ab      	ldrh	r3, [r5, #12]
 800b050:	059a      	lsls	r2, r3, #22
 800b052:	d402      	bmi.n	800b05a <_vfiprintf_r+0x2a>
 800b054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b056:	f7ff feb9 	bl	800adcc <__retarget_lock_acquire_recursive>
 800b05a:	89ab      	ldrh	r3, [r5, #12]
 800b05c:	071b      	lsls	r3, r3, #28
 800b05e:	d501      	bpl.n	800b064 <_vfiprintf_r+0x34>
 800b060:	692b      	ldr	r3, [r5, #16]
 800b062:	b99b      	cbnz	r3, 800b08c <_vfiprintf_r+0x5c>
 800b064:	4629      	mov	r1, r5
 800b066:	4630      	mov	r0, r6
 800b068:	f000 fbac 	bl	800b7c4 <__swsetup_r>
 800b06c:	b170      	cbz	r0, 800b08c <_vfiprintf_r+0x5c>
 800b06e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b070:	07dc      	lsls	r4, r3, #31
 800b072:	d504      	bpl.n	800b07e <_vfiprintf_r+0x4e>
 800b074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b078:	b01d      	add	sp, #116	; 0x74
 800b07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b07e:	89ab      	ldrh	r3, [r5, #12]
 800b080:	0598      	lsls	r0, r3, #22
 800b082:	d4f7      	bmi.n	800b074 <_vfiprintf_r+0x44>
 800b084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b086:	f7ff fea2 	bl	800adce <__retarget_lock_release_recursive>
 800b08a:	e7f3      	b.n	800b074 <_vfiprintf_r+0x44>
 800b08c:	2300      	movs	r3, #0
 800b08e:	9309      	str	r3, [sp, #36]	; 0x24
 800b090:	2320      	movs	r3, #32
 800b092:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b096:	f8cd 800c 	str.w	r8, [sp, #12]
 800b09a:	2330      	movs	r3, #48	; 0x30
 800b09c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b250 <_vfiprintf_r+0x220>
 800b0a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0a4:	f04f 0901 	mov.w	r9, #1
 800b0a8:	4623      	mov	r3, r4
 800b0aa:	469a      	mov	sl, r3
 800b0ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0b0:	b10a      	cbz	r2, 800b0b6 <_vfiprintf_r+0x86>
 800b0b2:	2a25      	cmp	r2, #37	; 0x25
 800b0b4:	d1f9      	bne.n	800b0aa <_vfiprintf_r+0x7a>
 800b0b6:	ebba 0b04 	subs.w	fp, sl, r4
 800b0ba:	d00b      	beq.n	800b0d4 <_vfiprintf_r+0xa4>
 800b0bc:	465b      	mov	r3, fp
 800b0be:	4622      	mov	r2, r4
 800b0c0:	4629      	mov	r1, r5
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	f7ff ffa1 	bl	800b00a <__sfputs_r>
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	f000 80a9 	beq.w	800b220 <_vfiprintf_r+0x1f0>
 800b0ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0d0:	445a      	add	r2, fp
 800b0d2:	9209      	str	r2, [sp, #36]	; 0x24
 800b0d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f000 80a1 	beq.w	800b220 <_vfiprintf_r+0x1f0>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0e8:	f10a 0a01 	add.w	sl, sl, #1
 800b0ec:	9304      	str	r3, [sp, #16]
 800b0ee:	9307      	str	r3, [sp, #28]
 800b0f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0f4:	931a      	str	r3, [sp, #104]	; 0x68
 800b0f6:	4654      	mov	r4, sl
 800b0f8:	2205      	movs	r2, #5
 800b0fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0fe:	4854      	ldr	r0, [pc, #336]	; (800b250 <_vfiprintf_r+0x220>)
 800b100:	f7f5 f8f6 	bl	80002f0 <memchr>
 800b104:	9a04      	ldr	r2, [sp, #16]
 800b106:	b9d8      	cbnz	r0, 800b140 <_vfiprintf_r+0x110>
 800b108:	06d1      	lsls	r1, r2, #27
 800b10a:	bf44      	itt	mi
 800b10c:	2320      	movmi	r3, #32
 800b10e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b112:	0713      	lsls	r3, r2, #28
 800b114:	bf44      	itt	mi
 800b116:	232b      	movmi	r3, #43	; 0x2b
 800b118:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b11c:	f89a 3000 	ldrb.w	r3, [sl]
 800b120:	2b2a      	cmp	r3, #42	; 0x2a
 800b122:	d015      	beq.n	800b150 <_vfiprintf_r+0x120>
 800b124:	9a07      	ldr	r2, [sp, #28]
 800b126:	4654      	mov	r4, sl
 800b128:	2000      	movs	r0, #0
 800b12a:	f04f 0c0a 	mov.w	ip, #10
 800b12e:	4621      	mov	r1, r4
 800b130:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b134:	3b30      	subs	r3, #48	; 0x30
 800b136:	2b09      	cmp	r3, #9
 800b138:	d94d      	bls.n	800b1d6 <_vfiprintf_r+0x1a6>
 800b13a:	b1b0      	cbz	r0, 800b16a <_vfiprintf_r+0x13a>
 800b13c:	9207      	str	r2, [sp, #28]
 800b13e:	e014      	b.n	800b16a <_vfiprintf_r+0x13a>
 800b140:	eba0 0308 	sub.w	r3, r0, r8
 800b144:	fa09 f303 	lsl.w	r3, r9, r3
 800b148:	4313      	orrs	r3, r2
 800b14a:	9304      	str	r3, [sp, #16]
 800b14c:	46a2      	mov	sl, r4
 800b14e:	e7d2      	b.n	800b0f6 <_vfiprintf_r+0xc6>
 800b150:	9b03      	ldr	r3, [sp, #12]
 800b152:	1d19      	adds	r1, r3, #4
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	9103      	str	r1, [sp, #12]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	bfbb      	ittet	lt
 800b15c:	425b      	neglt	r3, r3
 800b15e:	f042 0202 	orrlt.w	r2, r2, #2
 800b162:	9307      	strge	r3, [sp, #28]
 800b164:	9307      	strlt	r3, [sp, #28]
 800b166:	bfb8      	it	lt
 800b168:	9204      	strlt	r2, [sp, #16]
 800b16a:	7823      	ldrb	r3, [r4, #0]
 800b16c:	2b2e      	cmp	r3, #46	; 0x2e
 800b16e:	d10c      	bne.n	800b18a <_vfiprintf_r+0x15a>
 800b170:	7863      	ldrb	r3, [r4, #1]
 800b172:	2b2a      	cmp	r3, #42	; 0x2a
 800b174:	d134      	bne.n	800b1e0 <_vfiprintf_r+0x1b0>
 800b176:	9b03      	ldr	r3, [sp, #12]
 800b178:	1d1a      	adds	r2, r3, #4
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	9203      	str	r2, [sp, #12]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	bfb8      	it	lt
 800b182:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b186:	3402      	adds	r4, #2
 800b188:	9305      	str	r3, [sp, #20]
 800b18a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b260 <_vfiprintf_r+0x230>
 800b18e:	7821      	ldrb	r1, [r4, #0]
 800b190:	2203      	movs	r2, #3
 800b192:	4650      	mov	r0, sl
 800b194:	f7f5 f8ac 	bl	80002f0 <memchr>
 800b198:	b138      	cbz	r0, 800b1aa <_vfiprintf_r+0x17a>
 800b19a:	9b04      	ldr	r3, [sp, #16]
 800b19c:	eba0 000a 	sub.w	r0, r0, sl
 800b1a0:	2240      	movs	r2, #64	; 0x40
 800b1a2:	4082      	lsls	r2, r0
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	3401      	adds	r4, #1
 800b1a8:	9304      	str	r3, [sp, #16]
 800b1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1ae:	4829      	ldr	r0, [pc, #164]	; (800b254 <_vfiprintf_r+0x224>)
 800b1b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1b4:	2206      	movs	r2, #6
 800b1b6:	f7f5 f89b 	bl	80002f0 <memchr>
 800b1ba:	2800      	cmp	r0, #0
 800b1bc:	d03f      	beq.n	800b23e <_vfiprintf_r+0x20e>
 800b1be:	4b26      	ldr	r3, [pc, #152]	; (800b258 <_vfiprintf_r+0x228>)
 800b1c0:	bb1b      	cbnz	r3, 800b20a <_vfiprintf_r+0x1da>
 800b1c2:	9b03      	ldr	r3, [sp, #12]
 800b1c4:	3307      	adds	r3, #7
 800b1c6:	f023 0307 	bic.w	r3, r3, #7
 800b1ca:	3308      	adds	r3, #8
 800b1cc:	9303      	str	r3, [sp, #12]
 800b1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1d0:	443b      	add	r3, r7
 800b1d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1d4:	e768      	b.n	800b0a8 <_vfiprintf_r+0x78>
 800b1d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1da:	460c      	mov	r4, r1
 800b1dc:	2001      	movs	r0, #1
 800b1de:	e7a6      	b.n	800b12e <_vfiprintf_r+0xfe>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	3401      	adds	r4, #1
 800b1e4:	9305      	str	r3, [sp, #20]
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	f04f 0c0a 	mov.w	ip, #10
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1f2:	3a30      	subs	r2, #48	; 0x30
 800b1f4:	2a09      	cmp	r2, #9
 800b1f6:	d903      	bls.n	800b200 <_vfiprintf_r+0x1d0>
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d0c6      	beq.n	800b18a <_vfiprintf_r+0x15a>
 800b1fc:	9105      	str	r1, [sp, #20]
 800b1fe:	e7c4      	b.n	800b18a <_vfiprintf_r+0x15a>
 800b200:	fb0c 2101 	mla	r1, ip, r1, r2
 800b204:	4604      	mov	r4, r0
 800b206:	2301      	movs	r3, #1
 800b208:	e7f0      	b.n	800b1ec <_vfiprintf_r+0x1bc>
 800b20a:	ab03      	add	r3, sp, #12
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	462a      	mov	r2, r5
 800b210:	4b12      	ldr	r3, [pc, #72]	; (800b25c <_vfiprintf_r+0x22c>)
 800b212:	a904      	add	r1, sp, #16
 800b214:	4630      	mov	r0, r6
 800b216:	f3af 8000 	nop.w
 800b21a:	4607      	mov	r7, r0
 800b21c:	1c78      	adds	r0, r7, #1
 800b21e:	d1d6      	bne.n	800b1ce <_vfiprintf_r+0x19e>
 800b220:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b222:	07d9      	lsls	r1, r3, #31
 800b224:	d405      	bmi.n	800b232 <_vfiprintf_r+0x202>
 800b226:	89ab      	ldrh	r3, [r5, #12]
 800b228:	059a      	lsls	r2, r3, #22
 800b22a:	d402      	bmi.n	800b232 <_vfiprintf_r+0x202>
 800b22c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b22e:	f7ff fdce 	bl	800adce <__retarget_lock_release_recursive>
 800b232:	89ab      	ldrh	r3, [r5, #12]
 800b234:	065b      	lsls	r3, r3, #25
 800b236:	f53f af1d 	bmi.w	800b074 <_vfiprintf_r+0x44>
 800b23a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b23c:	e71c      	b.n	800b078 <_vfiprintf_r+0x48>
 800b23e:	ab03      	add	r3, sp, #12
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	462a      	mov	r2, r5
 800b244:	4b05      	ldr	r3, [pc, #20]	; (800b25c <_vfiprintf_r+0x22c>)
 800b246:	a904      	add	r1, sp, #16
 800b248:	4630      	mov	r0, r6
 800b24a:	f000 f879 	bl	800b340 <_printf_i>
 800b24e:	e7e4      	b.n	800b21a <_vfiprintf_r+0x1ea>
 800b250:	0800ba64 	.word	0x0800ba64
 800b254:	0800ba6e 	.word	0x0800ba6e
 800b258:	00000000 	.word	0x00000000
 800b25c:	0800b00b 	.word	0x0800b00b
 800b260:	0800ba6a 	.word	0x0800ba6a

0800b264 <_printf_common>:
 800b264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b268:	4616      	mov	r6, r2
 800b26a:	4699      	mov	r9, r3
 800b26c:	688a      	ldr	r2, [r1, #8]
 800b26e:	690b      	ldr	r3, [r1, #16]
 800b270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b274:	4293      	cmp	r3, r2
 800b276:	bfb8      	it	lt
 800b278:	4613      	movlt	r3, r2
 800b27a:	6033      	str	r3, [r6, #0]
 800b27c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b280:	4607      	mov	r7, r0
 800b282:	460c      	mov	r4, r1
 800b284:	b10a      	cbz	r2, 800b28a <_printf_common+0x26>
 800b286:	3301      	adds	r3, #1
 800b288:	6033      	str	r3, [r6, #0]
 800b28a:	6823      	ldr	r3, [r4, #0]
 800b28c:	0699      	lsls	r1, r3, #26
 800b28e:	bf42      	ittt	mi
 800b290:	6833      	ldrmi	r3, [r6, #0]
 800b292:	3302      	addmi	r3, #2
 800b294:	6033      	strmi	r3, [r6, #0]
 800b296:	6825      	ldr	r5, [r4, #0]
 800b298:	f015 0506 	ands.w	r5, r5, #6
 800b29c:	d106      	bne.n	800b2ac <_printf_common+0x48>
 800b29e:	f104 0a19 	add.w	sl, r4, #25
 800b2a2:	68e3      	ldr	r3, [r4, #12]
 800b2a4:	6832      	ldr	r2, [r6, #0]
 800b2a6:	1a9b      	subs	r3, r3, r2
 800b2a8:	42ab      	cmp	r3, r5
 800b2aa:	dc26      	bgt.n	800b2fa <_printf_common+0x96>
 800b2ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b2b0:	1e13      	subs	r3, r2, #0
 800b2b2:	6822      	ldr	r2, [r4, #0]
 800b2b4:	bf18      	it	ne
 800b2b6:	2301      	movne	r3, #1
 800b2b8:	0692      	lsls	r2, r2, #26
 800b2ba:	d42b      	bmi.n	800b314 <_printf_common+0xb0>
 800b2bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2c0:	4649      	mov	r1, r9
 800b2c2:	4638      	mov	r0, r7
 800b2c4:	47c0      	blx	r8
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	d01e      	beq.n	800b308 <_printf_common+0xa4>
 800b2ca:	6823      	ldr	r3, [r4, #0]
 800b2cc:	6922      	ldr	r2, [r4, #16]
 800b2ce:	f003 0306 	and.w	r3, r3, #6
 800b2d2:	2b04      	cmp	r3, #4
 800b2d4:	bf02      	ittt	eq
 800b2d6:	68e5      	ldreq	r5, [r4, #12]
 800b2d8:	6833      	ldreq	r3, [r6, #0]
 800b2da:	1aed      	subeq	r5, r5, r3
 800b2dc:	68a3      	ldr	r3, [r4, #8]
 800b2de:	bf0c      	ite	eq
 800b2e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2e4:	2500      	movne	r5, #0
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	bfc4      	itt	gt
 800b2ea:	1a9b      	subgt	r3, r3, r2
 800b2ec:	18ed      	addgt	r5, r5, r3
 800b2ee:	2600      	movs	r6, #0
 800b2f0:	341a      	adds	r4, #26
 800b2f2:	42b5      	cmp	r5, r6
 800b2f4:	d11a      	bne.n	800b32c <_printf_common+0xc8>
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	e008      	b.n	800b30c <_printf_common+0xa8>
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	4652      	mov	r2, sl
 800b2fe:	4649      	mov	r1, r9
 800b300:	4638      	mov	r0, r7
 800b302:	47c0      	blx	r8
 800b304:	3001      	adds	r0, #1
 800b306:	d103      	bne.n	800b310 <_printf_common+0xac>
 800b308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b30c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b310:	3501      	adds	r5, #1
 800b312:	e7c6      	b.n	800b2a2 <_printf_common+0x3e>
 800b314:	18e1      	adds	r1, r4, r3
 800b316:	1c5a      	adds	r2, r3, #1
 800b318:	2030      	movs	r0, #48	; 0x30
 800b31a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b31e:	4422      	add	r2, r4
 800b320:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b324:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b328:	3302      	adds	r3, #2
 800b32a:	e7c7      	b.n	800b2bc <_printf_common+0x58>
 800b32c:	2301      	movs	r3, #1
 800b32e:	4622      	mov	r2, r4
 800b330:	4649      	mov	r1, r9
 800b332:	4638      	mov	r0, r7
 800b334:	47c0      	blx	r8
 800b336:	3001      	adds	r0, #1
 800b338:	d0e6      	beq.n	800b308 <_printf_common+0xa4>
 800b33a:	3601      	adds	r6, #1
 800b33c:	e7d9      	b.n	800b2f2 <_printf_common+0x8e>
	...

0800b340 <_printf_i>:
 800b340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b344:	7e0f      	ldrb	r7, [r1, #24]
 800b346:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b348:	2f78      	cmp	r7, #120	; 0x78
 800b34a:	4691      	mov	r9, r2
 800b34c:	4680      	mov	r8, r0
 800b34e:	460c      	mov	r4, r1
 800b350:	469a      	mov	sl, r3
 800b352:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b356:	d807      	bhi.n	800b368 <_printf_i+0x28>
 800b358:	2f62      	cmp	r7, #98	; 0x62
 800b35a:	d80a      	bhi.n	800b372 <_printf_i+0x32>
 800b35c:	2f00      	cmp	r7, #0
 800b35e:	f000 80d4 	beq.w	800b50a <_printf_i+0x1ca>
 800b362:	2f58      	cmp	r7, #88	; 0x58
 800b364:	f000 80c0 	beq.w	800b4e8 <_printf_i+0x1a8>
 800b368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b36c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b370:	e03a      	b.n	800b3e8 <_printf_i+0xa8>
 800b372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b376:	2b15      	cmp	r3, #21
 800b378:	d8f6      	bhi.n	800b368 <_printf_i+0x28>
 800b37a:	a101      	add	r1, pc, #4	; (adr r1, 800b380 <_printf_i+0x40>)
 800b37c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b380:	0800b3d9 	.word	0x0800b3d9
 800b384:	0800b3ed 	.word	0x0800b3ed
 800b388:	0800b369 	.word	0x0800b369
 800b38c:	0800b369 	.word	0x0800b369
 800b390:	0800b369 	.word	0x0800b369
 800b394:	0800b369 	.word	0x0800b369
 800b398:	0800b3ed 	.word	0x0800b3ed
 800b39c:	0800b369 	.word	0x0800b369
 800b3a0:	0800b369 	.word	0x0800b369
 800b3a4:	0800b369 	.word	0x0800b369
 800b3a8:	0800b369 	.word	0x0800b369
 800b3ac:	0800b4f1 	.word	0x0800b4f1
 800b3b0:	0800b419 	.word	0x0800b419
 800b3b4:	0800b4ab 	.word	0x0800b4ab
 800b3b8:	0800b369 	.word	0x0800b369
 800b3bc:	0800b369 	.word	0x0800b369
 800b3c0:	0800b513 	.word	0x0800b513
 800b3c4:	0800b369 	.word	0x0800b369
 800b3c8:	0800b419 	.word	0x0800b419
 800b3cc:	0800b369 	.word	0x0800b369
 800b3d0:	0800b369 	.word	0x0800b369
 800b3d4:	0800b4b3 	.word	0x0800b4b3
 800b3d8:	682b      	ldr	r3, [r5, #0]
 800b3da:	1d1a      	adds	r2, r3, #4
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	602a      	str	r2, [r5, #0]
 800b3e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	e09f      	b.n	800b52c <_printf_i+0x1ec>
 800b3ec:	6820      	ldr	r0, [r4, #0]
 800b3ee:	682b      	ldr	r3, [r5, #0]
 800b3f0:	0607      	lsls	r7, r0, #24
 800b3f2:	f103 0104 	add.w	r1, r3, #4
 800b3f6:	6029      	str	r1, [r5, #0]
 800b3f8:	d501      	bpl.n	800b3fe <_printf_i+0xbe>
 800b3fa:	681e      	ldr	r6, [r3, #0]
 800b3fc:	e003      	b.n	800b406 <_printf_i+0xc6>
 800b3fe:	0646      	lsls	r6, r0, #25
 800b400:	d5fb      	bpl.n	800b3fa <_printf_i+0xba>
 800b402:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b406:	2e00      	cmp	r6, #0
 800b408:	da03      	bge.n	800b412 <_printf_i+0xd2>
 800b40a:	232d      	movs	r3, #45	; 0x2d
 800b40c:	4276      	negs	r6, r6
 800b40e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b412:	485a      	ldr	r0, [pc, #360]	; (800b57c <_printf_i+0x23c>)
 800b414:	230a      	movs	r3, #10
 800b416:	e012      	b.n	800b43e <_printf_i+0xfe>
 800b418:	682b      	ldr	r3, [r5, #0]
 800b41a:	6820      	ldr	r0, [r4, #0]
 800b41c:	1d19      	adds	r1, r3, #4
 800b41e:	6029      	str	r1, [r5, #0]
 800b420:	0605      	lsls	r5, r0, #24
 800b422:	d501      	bpl.n	800b428 <_printf_i+0xe8>
 800b424:	681e      	ldr	r6, [r3, #0]
 800b426:	e002      	b.n	800b42e <_printf_i+0xee>
 800b428:	0641      	lsls	r1, r0, #25
 800b42a:	d5fb      	bpl.n	800b424 <_printf_i+0xe4>
 800b42c:	881e      	ldrh	r6, [r3, #0]
 800b42e:	4853      	ldr	r0, [pc, #332]	; (800b57c <_printf_i+0x23c>)
 800b430:	2f6f      	cmp	r7, #111	; 0x6f
 800b432:	bf0c      	ite	eq
 800b434:	2308      	moveq	r3, #8
 800b436:	230a      	movne	r3, #10
 800b438:	2100      	movs	r1, #0
 800b43a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b43e:	6865      	ldr	r5, [r4, #4]
 800b440:	60a5      	str	r5, [r4, #8]
 800b442:	2d00      	cmp	r5, #0
 800b444:	bfa2      	ittt	ge
 800b446:	6821      	ldrge	r1, [r4, #0]
 800b448:	f021 0104 	bicge.w	r1, r1, #4
 800b44c:	6021      	strge	r1, [r4, #0]
 800b44e:	b90e      	cbnz	r6, 800b454 <_printf_i+0x114>
 800b450:	2d00      	cmp	r5, #0
 800b452:	d04b      	beq.n	800b4ec <_printf_i+0x1ac>
 800b454:	4615      	mov	r5, r2
 800b456:	fbb6 f1f3 	udiv	r1, r6, r3
 800b45a:	fb03 6711 	mls	r7, r3, r1, r6
 800b45e:	5dc7      	ldrb	r7, [r0, r7]
 800b460:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b464:	4637      	mov	r7, r6
 800b466:	42bb      	cmp	r3, r7
 800b468:	460e      	mov	r6, r1
 800b46a:	d9f4      	bls.n	800b456 <_printf_i+0x116>
 800b46c:	2b08      	cmp	r3, #8
 800b46e:	d10b      	bne.n	800b488 <_printf_i+0x148>
 800b470:	6823      	ldr	r3, [r4, #0]
 800b472:	07de      	lsls	r6, r3, #31
 800b474:	d508      	bpl.n	800b488 <_printf_i+0x148>
 800b476:	6923      	ldr	r3, [r4, #16]
 800b478:	6861      	ldr	r1, [r4, #4]
 800b47a:	4299      	cmp	r1, r3
 800b47c:	bfde      	ittt	le
 800b47e:	2330      	movle	r3, #48	; 0x30
 800b480:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b484:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b488:	1b52      	subs	r2, r2, r5
 800b48a:	6122      	str	r2, [r4, #16]
 800b48c:	f8cd a000 	str.w	sl, [sp]
 800b490:	464b      	mov	r3, r9
 800b492:	aa03      	add	r2, sp, #12
 800b494:	4621      	mov	r1, r4
 800b496:	4640      	mov	r0, r8
 800b498:	f7ff fee4 	bl	800b264 <_printf_common>
 800b49c:	3001      	adds	r0, #1
 800b49e:	d14a      	bne.n	800b536 <_printf_i+0x1f6>
 800b4a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4a4:	b004      	add	sp, #16
 800b4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	f043 0320 	orr.w	r3, r3, #32
 800b4b0:	6023      	str	r3, [r4, #0]
 800b4b2:	4833      	ldr	r0, [pc, #204]	; (800b580 <_printf_i+0x240>)
 800b4b4:	2778      	movs	r7, #120	; 0x78
 800b4b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b4ba:	6823      	ldr	r3, [r4, #0]
 800b4bc:	6829      	ldr	r1, [r5, #0]
 800b4be:	061f      	lsls	r7, r3, #24
 800b4c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b4c4:	d402      	bmi.n	800b4cc <_printf_i+0x18c>
 800b4c6:	065f      	lsls	r7, r3, #25
 800b4c8:	bf48      	it	mi
 800b4ca:	b2b6      	uxthmi	r6, r6
 800b4cc:	07df      	lsls	r7, r3, #31
 800b4ce:	bf48      	it	mi
 800b4d0:	f043 0320 	orrmi.w	r3, r3, #32
 800b4d4:	6029      	str	r1, [r5, #0]
 800b4d6:	bf48      	it	mi
 800b4d8:	6023      	strmi	r3, [r4, #0]
 800b4da:	b91e      	cbnz	r6, 800b4e4 <_printf_i+0x1a4>
 800b4dc:	6823      	ldr	r3, [r4, #0]
 800b4de:	f023 0320 	bic.w	r3, r3, #32
 800b4e2:	6023      	str	r3, [r4, #0]
 800b4e4:	2310      	movs	r3, #16
 800b4e6:	e7a7      	b.n	800b438 <_printf_i+0xf8>
 800b4e8:	4824      	ldr	r0, [pc, #144]	; (800b57c <_printf_i+0x23c>)
 800b4ea:	e7e4      	b.n	800b4b6 <_printf_i+0x176>
 800b4ec:	4615      	mov	r5, r2
 800b4ee:	e7bd      	b.n	800b46c <_printf_i+0x12c>
 800b4f0:	682b      	ldr	r3, [r5, #0]
 800b4f2:	6826      	ldr	r6, [r4, #0]
 800b4f4:	6961      	ldr	r1, [r4, #20]
 800b4f6:	1d18      	adds	r0, r3, #4
 800b4f8:	6028      	str	r0, [r5, #0]
 800b4fa:	0635      	lsls	r5, r6, #24
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	d501      	bpl.n	800b504 <_printf_i+0x1c4>
 800b500:	6019      	str	r1, [r3, #0]
 800b502:	e002      	b.n	800b50a <_printf_i+0x1ca>
 800b504:	0670      	lsls	r0, r6, #25
 800b506:	d5fb      	bpl.n	800b500 <_printf_i+0x1c0>
 800b508:	8019      	strh	r1, [r3, #0]
 800b50a:	2300      	movs	r3, #0
 800b50c:	6123      	str	r3, [r4, #16]
 800b50e:	4615      	mov	r5, r2
 800b510:	e7bc      	b.n	800b48c <_printf_i+0x14c>
 800b512:	682b      	ldr	r3, [r5, #0]
 800b514:	1d1a      	adds	r2, r3, #4
 800b516:	602a      	str	r2, [r5, #0]
 800b518:	681d      	ldr	r5, [r3, #0]
 800b51a:	6862      	ldr	r2, [r4, #4]
 800b51c:	2100      	movs	r1, #0
 800b51e:	4628      	mov	r0, r5
 800b520:	f7f4 fee6 	bl	80002f0 <memchr>
 800b524:	b108      	cbz	r0, 800b52a <_printf_i+0x1ea>
 800b526:	1b40      	subs	r0, r0, r5
 800b528:	6060      	str	r0, [r4, #4]
 800b52a:	6863      	ldr	r3, [r4, #4]
 800b52c:	6123      	str	r3, [r4, #16]
 800b52e:	2300      	movs	r3, #0
 800b530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b534:	e7aa      	b.n	800b48c <_printf_i+0x14c>
 800b536:	6923      	ldr	r3, [r4, #16]
 800b538:	462a      	mov	r2, r5
 800b53a:	4649      	mov	r1, r9
 800b53c:	4640      	mov	r0, r8
 800b53e:	47d0      	blx	sl
 800b540:	3001      	adds	r0, #1
 800b542:	d0ad      	beq.n	800b4a0 <_printf_i+0x160>
 800b544:	6823      	ldr	r3, [r4, #0]
 800b546:	079b      	lsls	r3, r3, #30
 800b548:	d413      	bmi.n	800b572 <_printf_i+0x232>
 800b54a:	68e0      	ldr	r0, [r4, #12]
 800b54c:	9b03      	ldr	r3, [sp, #12]
 800b54e:	4298      	cmp	r0, r3
 800b550:	bfb8      	it	lt
 800b552:	4618      	movlt	r0, r3
 800b554:	e7a6      	b.n	800b4a4 <_printf_i+0x164>
 800b556:	2301      	movs	r3, #1
 800b558:	4632      	mov	r2, r6
 800b55a:	4649      	mov	r1, r9
 800b55c:	4640      	mov	r0, r8
 800b55e:	47d0      	blx	sl
 800b560:	3001      	adds	r0, #1
 800b562:	d09d      	beq.n	800b4a0 <_printf_i+0x160>
 800b564:	3501      	adds	r5, #1
 800b566:	68e3      	ldr	r3, [r4, #12]
 800b568:	9903      	ldr	r1, [sp, #12]
 800b56a:	1a5b      	subs	r3, r3, r1
 800b56c:	42ab      	cmp	r3, r5
 800b56e:	dcf2      	bgt.n	800b556 <_printf_i+0x216>
 800b570:	e7eb      	b.n	800b54a <_printf_i+0x20a>
 800b572:	2500      	movs	r5, #0
 800b574:	f104 0619 	add.w	r6, r4, #25
 800b578:	e7f5      	b.n	800b566 <_printf_i+0x226>
 800b57a:	bf00      	nop
 800b57c:	0800ba75 	.word	0x0800ba75
 800b580:	0800ba86 	.word	0x0800ba86

0800b584 <__sflush_r>:
 800b584:	898a      	ldrh	r2, [r1, #12]
 800b586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b58a:	4605      	mov	r5, r0
 800b58c:	0710      	lsls	r0, r2, #28
 800b58e:	460c      	mov	r4, r1
 800b590:	d458      	bmi.n	800b644 <__sflush_r+0xc0>
 800b592:	684b      	ldr	r3, [r1, #4]
 800b594:	2b00      	cmp	r3, #0
 800b596:	dc05      	bgt.n	800b5a4 <__sflush_r+0x20>
 800b598:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	dc02      	bgt.n	800b5a4 <__sflush_r+0x20>
 800b59e:	2000      	movs	r0, #0
 800b5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5a6:	2e00      	cmp	r6, #0
 800b5a8:	d0f9      	beq.n	800b59e <__sflush_r+0x1a>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5b0:	682f      	ldr	r7, [r5, #0]
 800b5b2:	6a21      	ldr	r1, [r4, #32]
 800b5b4:	602b      	str	r3, [r5, #0]
 800b5b6:	d032      	beq.n	800b61e <__sflush_r+0x9a>
 800b5b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5ba:	89a3      	ldrh	r3, [r4, #12]
 800b5bc:	075a      	lsls	r2, r3, #29
 800b5be:	d505      	bpl.n	800b5cc <__sflush_r+0x48>
 800b5c0:	6863      	ldr	r3, [r4, #4]
 800b5c2:	1ac0      	subs	r0, r0, r3
 800b5c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5c6:	b10b      	cbz	r3, 800b5cc <__sflush_r+0x48>
 800b5c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5ca:	1ac0      	subs	r0, r0, r3
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5d2:	6a21      	ldr	r1, [r4, #32]
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	47b0      	blx	r6
 800b5d8:	1c43      	adds	r3, r0, #1
 800b5da:	89a3      	ldrh	r3, [r4, #12]
 800b5dc:	d106      	bne.n	800b5ec <__sflush_r+0x68>
 800b5de:	6829      	ldr	r1, [r5, #0]
 800b5e0:	291d      	cmp	r1, #29
 800b5e2:	d82b      	bhi.n	800b63c <__sflush_r+0xb8>
 800b5e4:	4a29      	ldr	r2, [pc, #164]	; (800b68c <__sflush_r+0x108>)
 800b5e6:	410a      	asrs	r2, r1
 800b5e8:	07d6      	lsls	r6, r2, #31
 800b5ea:	d427      	bmi.n	800b63c <__sflush_r+0xb8>
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	6062      	str	r2, [r4, #4]
 800b5f0:	04d9      	lsls	r1, r3, #19
 800b5f2:	6922      	ldr	r2, [r4, #16]
 800b5f4:	6022      	str	r2, [r4, #0]
 800b5f6:	d504      	bpl.n	800b602 <__sflush_r+0x7e>
 800b5f8:	1c42      	adds	r2, r0, #1
 800b5fa:	d101      	bne.n	800b600 <__sflush_r+0x7c>
 800b5fc:	682b      	ldr	r3, [r5, #0]
 800b5fe:	b903      	cbnz	r3, 800b602 <__sflush_r+0x7e>
 800b600:	6560      	str	r0, [r4, #84]	; 0x54
 800b602:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b604:	602f      	str	r7, [r5, #0]
 800b606:	2900      	cmp	r1, #0
 800b608:	d0c9      	beq.n	800b59e <__sflush_r+0x1a>
 800b60a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b60e:	4299      	cmp	r1, r3
 800b610:	d002      	beq.n	800b618 <__sflush_r+0x94>
 800b612:	4628      	mov	r0, r5
 800b614:	f7ff fbea 	bl	800adec <_free_r>
 800b618:	2000      	movs	r0, #0
 800b61a:	6360      	str	r0, [r4, #52]	; 0x34
 800b61c:	e7c0      	b.n	800b5a0 <__sflush_r+0x1c>
 800b61e:	2301      	movs	r3, #1
 800b620:	4628      	mov	r0, r5
 800b622:	47b0      	blx	r6
 800b624:	1c41      	adds	r1, r0, #1
 800b626:	d1c8      	bne.n	800b5ba <__sflush_r+0x36>
 800b628:	682b      	ldr	r3, [r5, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d0c5      	beq.n	800b5ba <__sflush_r+0x36>
 800b62e:	2b1d      	cmp	r3, #29
 800b630:	d001      	beq.n	800b636 <__sflush_r+0xb2>
 800b632:	2b16      	cmp	r3, #22
 800b634:	d101      	bne.n	800b63a <__sflush_r+0xb6>
 800b636:	602f      	str	r7, [r5, #0]
 800b638:	e7b1      	b.n	800b59e <__sflush_r+0x1a>
 800b63a:	89a3      	ldrh	r3, [r4, #12]
 800b63c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b640:	81a3      	strh	r3, [r4, #12]
 800b642:	e7ad      	b.n	800b5a0 <__sflush_r+0x1c>
 800b644:	690f      	ldr	r7, [r1, #16]
 800b646:	2f00      	cmp	r7, #0
 800b648:	d0a9      	beq.n	800b59e <__sflush_r+0x1a>
 800b64a:	0793      	lsls	r3, r2, #30
 800b64c:	680e      	ldr	r6, [r1, #0]
 800b64e:	bf08      	it	eq
 800b650:	694b      	ldreq	r3, [r1, #20]
 800b652:	600f      	str	r7, [r1, #0]
 800b654:	bf18      	it	ne
 800b656:	2300      	movne	r3, #0
 800b658:	eba6 0807 	sub.w	r8, r6, r7
 800b65c:	608b      	str	r3, [r1, #8]
 800b65e:	f1b8 0f00 	cmp.w	r8, #0
 800b662:	dd9c      	ble.n	800b59e <__sflush_r+0x1a>
 800b664:	6a21      	ldr	r1, [r4, #32]
 800b666:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b668:	4643      	mov	r3, r8
 800b66a:	463a      	mov	r2, r7
 800b66c:	4628      	mov	r0, r5
 800b66e:	47b0      	blx	r6
 800b670:	2800      	cmp	r0, #0
 800b672:	dc06      	bgt.n	800b682 <__sflush_r+0xfe>
 800b674:	89a3      	ldrh	r3, [r4, #12]
 800b676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b67a:	81a3      	strh	r3, [r4, #12]
 800b67c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b680:	e78e      	b.n	800b5a0 <__sflush_r+0x1c>
 800b682:	4407      	add	r7, r0
 800b684:	eba8 0800 	sub.w	r8, r8, r0
 800b688:	e7e9      	b.n	800b65e <__sflush_r+0xda>
 800b68a:	bf00      	nop
 800b68c:	dfbffffe 	.word	0xdfbffffe

0800b690 <_fflush_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	690b      	ldr	r3, [r1, #16]
 800b694:	4605      	mov	r5, r0
 800b696:	460c      	mov	r4, r1
 800b698:	b913      	cbnz	r3, 800b6a0 <_fflush_r+0x10>
 800b69a:	2500      	movs	r5, #0
 800b69c:	4628      	mov	r0, r5
 800b69e:	bd38      	pop	{r3, r4, r5, pc}
 800b6a0:	b118      	cbz	r0, 800b6aa <_fflush_r+0x1a>
 800b6a2:	6a03      	ldr	r3, [r0, #32]
 800b6a4:	b90b      	cbnz	r3, 800b6aa <_fflush_r+0x1a>
 800b6a6:	f7ff fa85 	bl	800abb4 <__sinit>
 800b6aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d0f3      	beq.n	800b69a <_fflush_r+0xa>
 800b6b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6b4:	07d0      	lsls	r0, r2, #31
 800b6b6:	d404      	bmi.n	800b6c2 <_fflush_r+0x32>
 800b6b8:	0599      	lsls	r1, r3, #22
 800b6ba:	d402      	bmi.n	800b6c2 <_fflush_r+0x32>
 800b6bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6be:	f7ff fb85 	bl	800adcc <__retarget_lock_acquire_recursive>
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	4621      	mov	r1, r4
 800b6c6:	f7ff ff5d 	bl	800b584 <__sflush_r>
 800b6ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6cc:	07da      	lsls	r2, r3, #31
 800b6ce:	4605      	mov	r5, r0
 800b6d0:	d4e4      	bmi.n	800b69c <_fflush_r+0xc>
 800b6d2:	89a3      	ldrh	r3, [r4, #12]
 800b6d4:	059b      	lsls	r3, r3, #22
 800b6d6:	d4e1      	bmi.n	800b69c <_fflush_r+0xc>
 800b6d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6da:	f7ff fb78 	bl	800adce <__retarget_lock_release_recursive>
 800b6de:	e7dd      	b.n	800b69c <_fflush_r+0xc>

0800b6e0 <_putc_r>:
 800b6e0:	b570      	push	{r4, r5, r6, lr}
 800b6e2:	460d      	mov	r5, r1
 800b6e4:	4614      	mov	r4, r2
 800b6e6:	4606      	mov	r6, r0
 800b6e8:	b118      	cbz	r0, 800b6f2 <_putc_r+0x12>
 800b6ea:	6a03      	ldr	r3, [r0, #32]
 800b6ec:	b90b      	cbnz	r3, 800b6f2 <_putc_r+0x12>
 800b6ee:	f7ff fa61 	bl	800abb4 <__sinit>
 800b6f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6f4:	07d8      	lsls	r0, r3, #31
 800b6f6:	d405      	bmi.n	800b704 <_putc_r+0x24>
 800b6f8:	89a3      	ldrh	r3, [r4, #12]
 800b6fa:	0599      	lsls	r1, r3, #22
 800b6fc:	d402      	bmi.n	800b704 <_putc_r+0x24>
 800b6fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b700:	f7ff fb64 	bl	800adcc <__retarget_lock_acquire_recursive>
 800b704:	68a3      	ldr	r3, [r4, #8]
 800b706:	3b01      	subs	r3, #1
 800b708:	2b00      	cmp	r3, #0
 800b70a:	60a3      	str	r3, [r4, #8]
 800b70c:	da05      	bge.n	800b71a <_putc_r+0x3a>
 800b70e:	69a2      	ldr	r2, [r4, #24]
 800b710:	4293      	cmp	r3, r2
 800b712:	db12      	blt.n	800b73a <_putc_r+0x5a>
 800b714:	b2eb      	uxtb	r3, r5
 800b716:	2b0a      	cmp	r3, #10
 800b718:	d00f      	beq.n	800b73a <_putc_r+0x5a>
 800b71a:	6823      	ldr	r3, [r4, #0]
 800b71c:	1c5a      	adds	r2, r3, #1
 800b71e:	6022      	str	r2, [r4, #0]
 800b720:	701d      	strb	r5, [r3, #0]
 800b722:	b2ed      	uxtb	r5, r5
 800b724:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b726:	07da      	lsls	r2, r3, #31
 800b728:	d405      	bmi.n	800b736 <_putc_r+0x56>
 800b72a:	89a3      	ldrh	r3, [r4, #12]
 800b72c:	059b      	lsls	r3, r3, #22
 800b72e:	d402      	bmi.n	800b736 <_putc_r+0x56>
 800b730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b732:	f7ff fb4c 	bl	800adce <__retarget_lock_release_recursive>
 800b736:	4628      	mov	r0, r5
 800b738:	bd70      	pop	{r4, r5, r6, pc}
 800b73a:	4629      	mov	r1, r5
 800b73c:	4622      	mov	r2, r4
 800b73e:	4630      	mov	r0, r6
 800b740:	f000 f802 	bl	800b748 <__swbuf_r>
 800b744:	4605      	mov	r5, r0
 800b746:	e7ed      	b.n	800b724 <_putc_r+0x44>

0800b748 <__swbuf_r>:
 800b748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74a:	460e      	mov	r6, r1
 800b74c:	4614      	mov	r4, r2
 800b74e:	4605      	mov	r5, r0
 800b750:	b118      	cbz	r0, 800b75a <__swbuf_r+0x12>
 800b752:	6a03      	ldr	r3, [r0, #32]
 800b754:	b90b      	cbnz	r3, 800b75a <__swbuf_r+0x12>
 800b756:	f7ff fa2d 	bl	800abb4 <__sinit>
 800b75a:	69a3      	ldr	r3, [r4, #24]
 800b75c:	60a3      	str	r3, [r4, #8]
 800b75e:	89a3      	ldrh	r3, [r4, #12]
 800b760:	071a      	lsls	r2, r3, #28
 800b762:	d525      	bpl.n	800b7b0 <__swbuf_r+0x68>
 800b764:	6923      	ldr	r3, [r4, #16]
 800b766:	b31b      	cbz	r3, 800b7b0 <__swbuf_r+0x68>
 800b768:	6823      	ldr	r3, [r4, #0]
 800b76a:	6922      	ldr	r2, [r4, #16]
 800b76c:	1a98      	subs	r0, r3, r2
 800b76e:	6963      	ldr	r3, [r4, #20]
 800b770:	b2f6      	uxtb	r6, r6
 800b772:	4283      	cmp	r3, r0
 800b774:	4637      	mov	r7, r6
 800b776:	dc04      	bgt.n	800b782 <__swbuf_r+0x3a>
 800b778:	4621      	mov	r1, r4
 800b77a:	4628      	mov	r0, r5
 800b77c:	f7ff ff88 	bl	800b690 <_fflush_r>
 800b780:	b9e0      	cbnz	r0, 800b7bc <__swbuf_r+0x74>
 800b782:	68a3      	ldr	r3, [r4, #8]
 800b784:	3b01      	subs	r3, #1
 800b786:	60a3      	str	r3, [r4, #8]
 800b788:	6823      	ldr	r3, [r4, #0]
 800b78a:	1c5a      	adds	r2, r3, #1
 800b78c:	6022      	str	r2, [r4, #0]
 800b78e:	701e      	strb	r6, [r3, #0]
 800b790:	6962      	ldr	r2, [r4, #20]
 800b792:	1c43      	adds	r3, r0, #1
 800b794:	429a      	cmp	r2, r3
 800b796:	d004      	beq.n	800b7a2 <__swbuf_r+0x5a>
 800b798:	89a3      	ldrh	r3, [r4, #12]
 800b79a:	07db      	lsls	r3, r3, #31
 800b79c:	d506      	bpl.n	800b7ac <__swbuf_r+0x64>
 800b79e:	2e0a      	cmp	r6, #10
 800b7a0:	d104      	bne.n	800b7ac <__swbuf_r+0x64>
 800b7a2:	4621      	mov	r1, r4
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	f7ff ff73 	bl	800b690 <_fflush_r>
 800b7aa:	b938      	cbnz	r0, 800b7bc <__swbuf_r+0x74>
 800b7ac:	4638      	mov	r0, r7
 800b7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7b0:	4621      	mov	r1, r4
 800b7b2:	4628      	mov	r0, r5
 800b7b4:	f000 f806 	bl	800b7c4 <__swsetup_r>
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	d0d5      	beq.n	800b768 <__swbuf_r+0x20>
 800b7bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b7c0:	e7f4      	b.n	800b7ac <__swbuf_r+0x64>
	...

0800b7c4 <__swsetup_r>:
 800b7c4:	b538      	push	{r3, r4, r5, lr}
 800b7c6:	4b2a      	ldr	r3, [pc, #168]	; (800b870 <__swsetup_r+0xac>)
 800b7c8:	4605      	mov	r5, r0
 800b7ca:	6818      	ldr	r0, [r3, #0]
 800b7cc:	460c      	mov	r4, r1
 800b7ce:	b118      	cbz	r0, 800b7d8 <__swsetup_r+0x14>
 800b7d0:	6a03      	ldr	r3, [r0, #32]
 800b7d2:	b90b      	cbnz	r3, 800b7d8 <__swsetup_r+0x14>
 800b7d4:	f7ff f9ee 	bl	800abb4 <__sinit>
 800b7d8:	89a3      	ldrh	r3, [r4, #12]
 800b7da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7de:	0718      	lsls	r0, r3, #28
 800b7e0:	d422      	bmi.n	800b828 <__swsetup_r+0x64>
 800b7e2:	06d9      	lsls	r1, r3, #27
 800b7e4:	d407      	bmi.n	800b7f6 <__swsetup_r+0x32>
 800b7e6:	2309      	movs	r3, #9
 800b7e8:	602b      	str	r3, [r5, #0]
 800b7ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7ee:	81a3      	strh	r3, [r4, #12]
 800b7f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7f4:	e034      	b.n	800b860 <__swsetup_r+0x9c>
 800b7f6:	0758      	lsls	r0, r3, #29
 800b7f8:	d512      	bpl.n	800b820 <__swsetup_r+0x5c>
 800b7fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7fc:	b141      	cbz	r1, 800b810 <__swsetup_r+0x4c>
 800b7fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b802:	4299      	cmp	r1, r3
 800b804:	d002      	beq.n	800b80c <__swsetup_r+0x48>
 800b806:	4628      	mov	r0, r5
 800b808:	f7ff faf0 	bl	800adec <_free_r>
 800b80c:	2300      	movs	r3, #0
 800b80e:	6363      	str	r3, [r4, #52]	; 0x34
 800b810:	89a3      	ldrh	r3, [r4, #12]
 800b812:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b816:	81a3      	strh	r3, [r4, #12]
 800b818:	2300      	movs	r3, #0
 800b81a:	6063      	str	r3, [r4, #4]
 800b81c:	6923      	ldr	r3, [r4, #16]
 800b81e:	6023      	str	r3, [r4, #0]
 800b820:	89a3      	ldrh	r3, [r4, #12]
 800b822:	f043 0308 	orr.w	r3, r3, #8
 800b826:	81a3      	strh	r3, [r4, #12]
 800b828:	6923      	ldr	r3, [r4, #16]
 800b82a:	b94b      	cbnz	r3, 800b840 <__swsetup_r+0x7c>
 800b82c:	89a3      	ldrh	r3, [r4, #12]
 800b82e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b836:	d003      	beq.n	800b840 <__swsetup_r+0x7c>
 800b838:	4621      	mov	r1, r4
 800b83a:	4628      	mov	r0, r5
 800b83c:	f000 f850 	bl	800b8e0 <__smakebuf_r>
 800b840:	89a0      	ldrh	r0, [r4, #12]
 800b842:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b846:	f010 0301 	ands.w	r3, r0, #1
 800b84a:	d00a      	beq.n	800b862 <__swsetup_r+0x9e>
 800b84c:	2300      	movs	r3, #0
 800b84e:	60a3      	str	r3, [r4, #8]
 800b850:	6963      	ldr	r3, [r4, #20]
 800b852:	425b      	negs	r3, r3
 800b854:	61a3      	str	r3, [r4, #24]
 800b856:	6923      	ldr	r3, [r4, #16]
 800b858:	b943      	cbnz	r3, 800b86c <__swsetup_r+0xa8>
 800b85a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b85e:	d1c4      	bne.n	800b7ea <__swsetup_r+0x26>
 800b860:	bd38      	pop	{r3, r4, r5, pc}
 800b862:	0781      	lsls	r1, r0, #30
 800b864:	bf58      	it	pl
 800b866:	6963      	ldrpl	r3, [r4, #20]
 800b868:	60a3      	str	r3, [r4, #8]
 800b86a:	e7f4      	b.n	800b856 <__swsetup_r+0x92>
 800b86c:	2000      	movs	r0, #0
 800b86e:	e7f7      	b.n	800b860 <__swsetup_r+0x9c>
 800b870:	24000158 	.word	0x24000158

0800b874 <_sbrk_r>:
 800b874:	b538      	push	{r3, r4, r5, lr}
 800b876:	4d06      	ldr	r5, [pc, #24]	; (800b890 <_sbrk_r+0x1c>)
 800b878:	2300      	movs	r3, #0
 800b87a:	4604      	mov	r4, r0
 800b87c:	4608      	mov	r0, r1
 800b87e:	602b      	str	r3, [r5, #0]
 800b880:	f7f5 f9f6 	bl	8000c70 <_sbrk>
 800b884:	1c43      	adds	r3, r0, #1
 800b886:	d102      	bne.n	800b88e <_sbrk_r+0x1a>
 800b888:	682b      	ldr	r3, [r5, #0]
 800b88a:	b103      	cbz	r3, 800b88e <_sbrk_r+0x1a>
 800b88c:	6023      	str	r3, [r4, #0]
 800b88e:	bd38      	pop	{r3, r4, r5, pc}
 800b890:	240faef8 	.word	0x240faef8

0800b894 <__swhatbuf_r>:
 800b894:	b570      	push	{r4, r5, r6, lr}
 800b896:	460c      	mov	r4, r1
 800b898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b89c:	2900      	cmp	r1, #0
 800b89e:	b096      	sub	sp, #88	; 0x58
 800b8a0:	4615      	mov	r5, r2
 800b8a2:	461e      	mov	r6, r3
 800b8a4:	da0d      	bge.n	800b8c2 <__swhatbuf_r+0x2e>
 800b8a6:	89a3      	ldrh	r3, [r4, #12]
 800b8a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b8ac:	f04f 0100 	mov.w	r1, #0
 800b8b0:	bf0c      	ite	eq
 800b8b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b8b6:	2340      	movne	r3, #64	; 0x40
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	6031      	str	r1, [r6, #0]
 800b8bc:	602b      	str	r3, [r5, #0]
 800b8be:	b016      	add	sp, #88	; 0x58
 800b8c0:	bd70      	pop	{r4, r5, r6, pc}
 800b8c2:	466a      	mov	r2, sp
 800b8c4:	f000 f848 	bl	800b958 <_fstat_r>
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	dbec      	blt.n	800b8a6 <__swhatbuf_r+0x12>
 800b8cc:	9901      	ldr	r1, [sp, #4]
 800b8ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b8d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b8d6:	4259      	negs	r1, r3
 800b8d8:	4159      	adcs	r1, r3
 800b8da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8de:	e7eb      	b.n	800b8b8 <__swhatbuf_r+0x24>

0800b8e0 <__smakebuf_r>:
 800b8e0:	898b      	ldrh	r3, [r1, #12]
 800b8e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8e4:	079d      	lsls	r5, r3, #30
 800b8e6:	4606      	mov	r6, r0
 800b8e8:	460c      	mov	r4, r1
 800b8ea:	d507      	bpl.n	800b8fc <__smakebuf_r+0x1c>
 800b8ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8f0:	6023      	str	r3, [r4, #0]
 800b8f2:	6123      	str	r3, [r4, #16]
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	6163      	str	r3, [r4, #20]
 800b8f8:	b002      	add	sp, #8
 800b8fa:	bd70      	pop	{r4, r5, r6, pc}
 800b8fc:	ab01      	add	r3, sp, #4
 800b8fe:	466a      	mov	r2, sp
 800b900:	f7ff ffc8 	bl	800b894 <__swhatbuf_r>
 800b904:	9900      	ldr	r1, [sp, #0]
 800b906:	4605      	mov	r5, r0
 800b908:	4630      	mov	r0, r6
 800b90a:	f7ff fadb 	bl	800aec4 <_malloc_r>
 800b90e:	b948      	cbnz	r0, 800b924 <__smakebuf_r+0x44>
 800b910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b914:	059a      	lsls	r2, r3, #22
 800b916:	d4ef      	bmi.n	800b8f8 <__smakebuf_r+0x18>
 800b918:	f023 0303 	bic.w	r3, r3, #3
 800b91c:	f043 0302 	orr.w	r3, r3, #2
 800b920:	81a3      	strh	r3, [r4, #12]
 800b922:	e7e3      	b.n	800b8ec <__smakebuf_r+0xc>
 800b924:	89a3      	ldrh	r3, [r4, #12]
 800b926:	6020      	str	r0, [r4, #0]
 800b928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b92c:	81a3      	strh	r3, [r4, #12]
 800b92e:	9b00      	ldr	r3, [sp, #0]
 800b930:	6163      	str	r3, [r4, #20]
 800b932:	9b01      	ldr	r3, [sp, #4]
 800b934:	6120      	str	r0, [r4, #16]
 800b936:	b15b      	cbz	r3, 800b950 <__smakebuf_r+0x70>
 800b938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b93c:	4630      	mov	r0, r6
 800b93e:	f000 f81d 	bl	800b97c <_isatty_r>
 800b942:	b128      	cbz	r0, 800b950 <__smakebuf_r+0x70>
 800b944:	89a3      	ldrh	r3, [r4, #12]
 800b946:	f023 0303 	bic.w	r3, r3, #3
 800b94a:	f043 0301 	orr.w	r3, r3, #1
 800b94e:	81a3      	strh	r3, [r4, #12]
 800b950:	89a3      	ldrh	r3, [r4, #12]
 800b952:	431d      	orrs	r5, r3
 800b954:	81a5      	strh	r5, [r4, #12]
 800b956:	e7cf      	b.n	800b8f8 <__smakebuf_r+0x18>

0800b958 <_fstat_r>:
 800b958:	b538      	push	{r3, r4, r5, lr}
 800b95a:	4d07      	ldr	r5, [pc, #28]	; (800b978 <_fstat_r+0x20>)
 800b95c:	2300      	movs	r3, #0
 800b95e:	4604      	mov	r4, r0
 800b960:	4608      	mov	r0, r1
 800b962:	4611      	mov	r1, r2
 800b964:	602b      	str	r3, [r5, #0]
 800b966:	f7f5 f95a 	bl	8000c1e <_fstat>
 800b96a:	1c43      	adds	r3, r0, #1
 800b96c:	d102      	bne.n	800b974 <_fstat_r+0x1c>
 800b96e:	682b      	ldr	r3, [r5, #0]
 800b970:	b103      	cbz	r3, 800b974 <_fstat_r+0x1c>
 800b972:	6023      	str	r3, [r4, #0]
 800b974:	bd38      	pop	{r3, r4, r5, pc}
 800b976:	bf00      	nop
 800b978:	240faef8 	.word	0x240faef8

0800b97c <_isatty_r>:
 800b97c:	b538      	push	{r3, r4, r5, lr}
 800b97e:	4d06      	ldr	r5, [pc, #24]	; (800b998 <_isatty_r+0x1c>)
 800b980:	2300      	movs	r3, #0
 800b982:	4604      	mov	r4, r0
 800b984:	4608      	mov	r0, r1
 800b986:	602b      	str	r3, [r5, #0]
 800b988:	f7f5 f959 	bl	8000c3e <_isatty>
 800b98c:	1c43      	adds	r3, r0, #1
 800b98e:	d102      	bne.n	800b996 <_isatty_r+0x1a>
 800b990:	682b      	ldr	r3, [r5, #0]
 800b992:	b103      	cbz	r3, 800b996 <_isatty_r+0x1a>
 800b994:	6023      	str	r3, [r4, #0]
 800b996:	bd38      	pop	{r3, r4, r5, pc}
 800b998:	240faef8 	.word	0x240faef8

0800b99c <_init>:
 800b99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99e:	bf00      	nop
 800b9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9a2:	bc08      	pop	{r3}
 800b9a4:	469e      	mov	lr, r3
 800b9a6:	4770      	bx	lr

0800b9a8 <_fini>:
 800b9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9aa:	bf00      	nop
 800b9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ae:	bc08      	pop	{r3}
 800b9b0:	469e      	mov	lr, r3
 800b9b2:	4770      	bx	lr
