
USB_MSC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed10  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800efc0  0800efc0  0001efc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800f0a4  0800f0a4  0001f0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800f0a8  0800f0a8  0001f0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000015c  24000000  0800f0ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000e28  2400015c  0800f208  0002015c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000f84  0800f208  00020f84  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002018a  2**0
                  CONTENTS, READONLY
 10 .debug_info   000184a4  00000000  00000000  000201cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f6e  00000000  00000000  00038671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013a8  00000000  00000000  0003c5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ea7  00000000  00000000  0003d988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035ae5  00000000  00000000  0003e82f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c162  00000000  00000000  00074314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013d4b4  00000000  00000000  00090476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000578c  00000000  00000000  001cd92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000007f  00000000  00000000  001d30b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400015c 	.word	0x2400015c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800efa8 	.word	0x0800efa8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000160 	.word	0x24000160
 80002ec:	0800efa8 	.word	0x0800efa8

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000394:	f000 fdec 	bl	8000f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000398:	f000 f808 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039c:	f000 f8da 	bl	8000554 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80003a0:	f00d f8e0 	bl	800d564 <MX_USB_DEVICE_Init>
  MX_SDMMC1_SD_Init();
 80003a4:	f000 f8b0 	bl	8000508 <MX_SDMMC1_SD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a8:	e7fe      	b.n	80003a8 <main+0x18>
	...

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b0a4      	sub	sp, #144	; 0x90
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003b6:	224c      	movs	r2, #76	; 0x4c
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f00d ffa1 	bl	800e302 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003c4:	2220      	movs	r2, #32
 80003c6:	2100      	movs	r1, #0
 80003c8:	4618      	mov	r0, r3
 80003ca:	f00d ff9a 	bl	800e302 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80003ce:	f107 030c 	add.w	r3, r7, #12
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
 80003dc:	611a      	str	r2, [r3, #16]
 80003de:	615a      	str	r2, [r3, #20]

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80003e0:	4b47      	ldr	r3, [pc, #284]	; (8000500 <SystemClock_Config+0x154>)
 80003e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80003ea:	2004      	movs	r0, #4
 80003ec:	f002 fc26 	bl	8002c3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003f0:	2300      	movs	r3, #0
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	4b43      	ldr	r3, [pc, #268]	; (8000504 <SystemClock_Config+0x158>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a42      	ldr	r2, [pc, #264]	; (8000504 <SystemClock_Config+0x158>)
 80003fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b40      	ldr	r3, [pc, #256]	; (8000504 <SystemClock_Config+0x158>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800040c:	bf00      	nop
 800040e:	4b3d      	ldr	r3, [pc, #244]	; (8000504 <SystemClock_Config+0x158>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800041a:	d1f8      	bne.n	800040e <SystemClock_Config+0x62>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800041c:	2321      	movs	r3, #33	; 0x21
 800041e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000420:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000424:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000426:	2301      	movs	r3, #1
 8000428:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042a:	2302      	movs	r3, #2
 800042c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800042e:	2302      	movs	r3, #2
 8000430:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000432:	2302      	movs	r3, #2
 8000434:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000436:	232c      	movs	r3, #44	; 0x2c
 8000438:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 800043a:	2302      	movs	r3, #2
 800043c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 11;
 800043e:	230b      	movs	r3, #11
 8000440:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000442:	2304      	movs	r3, #4
 8000444:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000448:	230c      	movs	r3, #12
 800044a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800044e:	2300      	movs	r3, #0
 8000450:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800045e:	4618      	mov	r0, r3
 8000460:	f002 fc56 	bl	8002d10 <HAL_RCC_OscConfig>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800046a:	f000 fb59 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800046e:	233f      	movs	r3, #63	; 0x3f
 8000470:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000472:	2303      	movs	r3, #3
 8000474:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000476:	2300      	movs	r3, #0
 8000478:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800047e:	2340      	movs	r3, #64	; 0x40
 8000480:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000482:	2340      	movs	r3, #64	; 0x40
 8000484:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800048a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800048c:	2340      	movs	r3, #64	; 0x40
 800048e:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000494:	2107      	movs	r1, #7
 8000496:	4618      	mov	r0, r3
 8000498:	f003 f86c 	bl	8003574 <HAL_RCC_ClockConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80004a2:	f000 fb3d 	bl	8000b20 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80004a6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80004aa:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80004ae:	2000      	movs	r0, #0
 80004b0:	f003 fa16 	bl	80038e0 <HAL_RCC_MCOConfig>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <SystemClock_Config+0x154>)
 80004b6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80004ba:	4a11      	ldr	r2, [pc, #68]	; (8000500 <SystemClock_Config+0x154>)
 80004bc:	f043 0302 	orr.w	r3, r3, #2
 80004c0:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 80004c4:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <SystemClock_Config+0x154>)
 80004c6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80004ca:	f003 0302 	and.w	r3, r3, #2
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB2;
 80004d6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80004da:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 80004e0:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 80004e4:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80004e6:	2322      	movs	r3, #34	; 0x22
 80004e8:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80004ea:	2320      	movs	r3, #32
 80004ec:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80004ee:	f107 030c 	add.w	r3, r7, #12
 80004f2:	4618      	mov	r0, r3
 80004f4:	f005 fec4 	bl	8006280 <HAL_RCCEx_CRSConfig>
}
 80004f8:	bf00      	nop
 80004fa:	3790      	adds	r7, #144	; 0x90
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	58024400 	.word	0x58024400
 8000504:	58024800 	.word	0x58024800

08000508 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800050c:	4b0f      	ldr	r3, [pc, #60]	; (800054c <MX_SDMMC1_SD_Init+0x44>)
 800050e:	4a10      	ldr	r2, [pc, #64]	; (8000550 <MX_SDMMC1_SD_Init+0x48>)
 8000510:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <MX_SDMMC1_SD_Init+0x44>)
 8000514:	2200      	movs	r2, #0
 8000516:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <MX_SDMMC1_SD_Init+0x44>)
 800051a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800051e:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <MX_SDMMC1_SD_Init+0x44>)
 8000522:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000526:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000528:	4b08      	ldr	r3, [pc, #32]	; (800054c <MX_SDMMC1_SD_Init+0x44>)
 800052a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800052e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <MX_SDMMC1_SD_Init+0x44>)
 8000532:	2200      	movs	r2, #0
 8000534:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000536:	4805      	ldr	r0, [pc, #20]	; (800054c <MX_SDMMC1_SD_Init+0x44>)
 8000538:	f006 f85c 	bl	80065f4 <HAL_SD_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8000542:	f000 faed 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	24000178 	.word	0x24000178
 8000550:	52007000 	.word	0x52007000

08000554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b090      	sub	sp, #64	; 0x40
 8000558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800056a:	4bbf      	ldr	r3, [pc, #764]	; (8000868 <MX_GPIO_Init+0x314>)
 800056c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000570:	4abd      	ldr	r2, [pc, #756]	; (8000868 <MX_GPIO_Init+0x314>)
 8000572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000576:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800057a:	4bbb      	ldr	r3, [pc, #748]	; (8000868 <MX_GPIO_Init+0x314>)
 800057c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000584:	62bb      	str	r3, [r7, #40]	; 0x28
 8000586:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000588:	4bb7      	ldr	r3, [pc, #732]	; (8000868 <MX_GPIO_Init+0x314>)
 800058a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800058e:	4ab6      	ldr	r2, [pc, #728]	; (8000868 <MX_GPIO_Init+0x314>)
 8000590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000594:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000598:	4bb3      	ldr	r3, [pc, #716]	; (8000868 <MX_GPIO_Init+0x314>)
 800059a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800059e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
 80005a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80005a6:	4bb0      	ldr	r3, [pc, #704]	; (8000868 <MX_GPIO_Init+0x314>)
 80005a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005ac:	4aae      	ldr	r2, [pc, #696]	; (8000868 <MX_GPIO_Init+0x314>)
 80005ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005b2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80005b6:	4bac      	ldr	r3, [pc, #688]	; (8000868 <MX_GPIO_Init+0x314>)
 80005b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005c0:	623b      	str	r3, [r7, #32]
 80005c2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c4:	4ba8      	ldr	r3, [pc, #672]	; (8000868 <MX_GPIO_Init+0x314>)
 80005c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005ca:	4aa7      	ldr	r2, [pc, #668]	; (8000868 <MX_GPIO_Init+0x314>)
 80005cc:	f043 0308 	orr.w	r3, r3, #8
 80005d0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80005d4:	4ba4      	ldr	r3, [pc, #656]	; (8000868 <MX_GPIO_Init+0x314>)
 80005d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005da:	f003 0308 	and.w	r3, r3, #8
 80005de:	61fb      	str	r3, [r7, #28]
 80005e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	4ba1      	ldr	r3, [pc, #644]	; (8000868 <MX_GPIO_Init+0x314>)
 80005e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005e8:	4a9f      	ldr	r2, [pc, #636]	; (8000868 <MX_GPIO_Init+0x314>)
 80005ea:	f043 0304 	orr.w	r3, r3, #4
 80005ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80005f2:	4b9d      	ldr	r3, [pc, #628]	; (8000868 <MX_GPIO_Init+0x314>)
 80005f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	61bb      	str	r3, [r7, #24]
 80005fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000600:	4b99      	ldr	r3, [pc, #612]	; (8000868 <MX_GPIO_Init+0x314>)
 8000602:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000606:	4a98      	ldr	r2, [pc, #608]	; (8000868 <MX_GPIO_Init+0x314>)
 8000608:	f043 0310 	orr.w	r3, r3, #16
 800060c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000610:	4b95      	ldr	r3, [pc, #596]	; (8000868 <MX_GPIO_Init+0x314>)
 8000612:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000616:	f003 0310 	and.w	r3, r3, #16
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b92      	ldr	r3, [pc, #584]	; (8000868 <MX_GPIO_Init+0x314>)
 8000620:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000624:	4a90      	ldr	r2, [pc, #576]	; (8000868 <MX_GPIO_Init+0x314>)
 8000626:	f043 0302 	orr.w	r3, r3, #2
 800062a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800062e:	4b8e      	ldr	r3, [pc, #568]	; (8000868 <MX_GPIO_Init+0x314>)
 8000630:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000634:	f003 0302 	and.w	r3, r3, #2
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800063c:	4b8a      	ldr	r3, [pc, #552]	; (8000868 <MX_GPIO_Init+0x314>)
 800063e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000642:	4a89      	ldr	r2, [pc, #548]	; (8000868 <MX_GPIO_Init+0x314>)
 8000644:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000648:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800064c:	4b86      	ldr	r3, [pc, #536]	; (8000868 <MX_GPIO_Init+0x314>)
 800064e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b83      	ldr	r3, [pc, #524]	; (8000868 <MX_GPIO_Init+0x314>)
 800065c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000660:	4a81      	ldr	r2, [pc, #516]	; (8000868 <MX_GPIO_Init+0x314>)
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800066a:	4b7f      	ldr	r3, [pc, #508]	; (8000868 <MX_GPIO_Init+0x314>)
 800066c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000678:	4b7b      	ldr	r3, [pc, #492]	; (8000868 <MX_GPIO_Init+0x314>)
 800067a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800067e:	4a7a      	ldr	r2, [pc, #488]	; (8000868 <MX_GPIO_Init+0x314>)
 8000680:	f043 0320 	orr.w	r3, r3, #32
 8000684:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000688:	4b77      	ldr	r3, [pc, #476]	; (8000868 <MX_GPIO_Init+0x314>)
 800068a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800068e:	f003 0320 	and.w	r3, r3, #32
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000696:	4b74      	ldr	r3, [pc, #464]	; (8000868 <MX_GPIO_Init+0x314>)
 8000698:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800069c:	4a72      	ldr	r2, [pc, #456]	; (8000868 <MX_GPIO_Init+0x314>)
 800069e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006a6:	4b70      	ldr	r3, [pc, #448]	; (8000868 <MX_GPIO_Init+0x314>)
 80006a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	210e      	movs	r1, #14
 80006b8:	486c      	ldr	r0, [pc, #432]	; (800086c <MX_GPIO_Init+0x318>)
 80006ba:	f000 ffdb 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f640 0104 	movw	r1, #2052	; 0x804
 80006c4:	486a      	ldr	r0, [pc, #424]	; (8000870 <MX_GPIO_Init+0x31c>)
 80006c6:	f000 ffd5 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d0:	4868      	ldr	r0, [pc, #416]	; (8000874 <MX_GPIO_Init+0x320>)
 80006d2:	f000 ffcf 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2108      	movs	r1, #8
 80006da:	4865      	ldr	r0, [pc, #404]	; (8000870 <MX_GPIO_Init+0x31c>)
 80006dc:	f000 ffca 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e6:	4864      	ldr	r0, [pc, #400]	; (8000878 <MX_GPIO_Init+0x324>)
 80006e8:	f000 ffc4 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2106      	movs	r1, #6
 80006f0:	4860      	ldr	r0, [pc, #384]	; (8000874 <MX_GPIO_Init+0x320>)
 80006f2:	f000 ffbf 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_GPIO_Pin WIFI_DATRDY_Pin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 80006f6:	2330      	movs	r3, #48	; 0x30
 80006f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000704:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000708:	4619      	mov	r1, r3
 800070a:	4858      	ldr	r0, [pc, #352]	; (800086c <MX_GPIO_Init+0x318>)
 800070c:	f000 fe02 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNCAS_Pin SDCLK_Pin A15_Pin A14_Pin
                           A11_Pin A10_Pin */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000710:	f248 1333 	movw	r3, #33075	; 0x8133
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071e:	2303      	movs	r3, #3
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000722:	230c      	movs	r3, #12
 8000724:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000726:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800072a:	4619      	mov	r1, r3
 800072c:	4850      	ldr	r0, [pc, #320]	; (8000870 <MX_GPIO_Init+0x31c>)
 800072e:	f000 fdf1 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B6_Pin LCD_B7_Pin LCD_B4_Pin LCD_B5_Pin
                           LCD_DE_Pin LCD_G7_Pin LCD_G6_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 8000732:	23ff      	movs	r3, #255	; 0xff
 8000734:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000742:	230e      	movs	r3, #14
 8000744:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800074a:	4619      	mov	r1, r3
 800074c:	484b      	ldr	r0, [pc, #300]	; (800087c <MX_GPIO_Init+0x328>)
 800074e:	f000 fde1 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S6_SDO_Pin I2S6_SDI_Pin I2S6_CK_Pin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 8000752:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000764:	2305      	movs	r3, #5
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800076c:	4619      	mov	r1, r3
 800076e:	4840      	ldr	r0, [pc, #256]	; (8000870 <MX_GPIO_Init+0x31c>)
 8000770:	f000 fdd0 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO6_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8000774:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000786:	2309      	movs	r3, #9
 8000788:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 800078a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800078e:	4619      	mov	r1, r3
 8000790:	4837      	ldr	r0, [pc, #220]	; (8000870 <MX_GPIO_Init+0x31c>)
 8000792:	f000 fdbf 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO7_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 8000796:	2380      	movs	r3, #128	; 0x80
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80007a6:	230a      	movs	r3, #10
 80007a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ae:	4619      	mov	r1, r3
 80007b0:	4831      	ldr	r0, [pc, #196]	; (8000878 <MX_GPIO_Init+0x324>)
 80007b2:	f000 fdaf 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D2_Pin D1_Pin D13_Pin
                           D15_Pin D14_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D1_Pin|D13_Pin
 80007b6:	f248 7303 	movw	r3, #34563	; 0x8703
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007c8:	230c      	movs	r3, #12
 80007ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d0:	4619      	mov	r1, r3
 80007d2:	4829      	ldr	r0, [pc, #164]	; (8000878 <MX_GPIO_Init+0x324>)
 80007d4:	f000 fd9e 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_BOOT_Pin WIFI_WKUP_Pin WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 80007d8:	230e      	movs	r3, #14
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ec:	4619      	mov	r1, r3
 80007ee:	481f      	ldr	r0, [pc, #124]	; (800086c <MX_GPIO_Init+0x318>)
 80007f0:	f000 fd90 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL0_Pin FMC_NBL1_Pin D9_Pin D4_Pin
                           D10_Pin D11_Pin D7_Pin D6_Pin
                           D12_Pin D5_Pin D8_Pin */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 80007f4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000806:	230c      	movs	r3, #12
 8000808:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800080a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800080e:	4619      	mov	r1, r3
 8000810:	481b      	ldr	r0, [pc, #108]	; (8000880 <MX_GPIO_Init+0x32c>)
 8000812:	f000 fd7f 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED1_Pin AUDIO_NRST_Pin USER_LED2_Pin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8000816:	f640 030c 	movw	r3, #2060	; 0x80c
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000828:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800082c:	4619      	mov	r1, r3
 800082e:	4810      	ldr	r0, [pc, #64]	; (8000870 <MX_GPIO_Init+0x31c>)
 8000830:	f000 fd70 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B3_Pin LCD_B2_Pin LCD_B1_Pin LCD_B0_Pin
                           LCD_G4_Pin LCD_G3_Pin LCD_G2_Pin LCD_G1_Pin
                           LCD_R7_Pin LCD_G0_Pin LCD_R1_Pin LCD_R6_Pin
                           LCD_R2_Pin LCD_R5_Pin LCD_R3_Pin LCD_R4_Pin */
  GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 8000834:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000846:	230e      	movs	r3, #14
 8000848:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800084a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800084e:	4619      	mov	r1, r3
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_GPIO_Init+0x330>)
 8000852:	f000 fd5f 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000860:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000862:	2301      	movs	r3, #1
 8000864:	637b      	str	r3, [r7, #52]	; 0x34
 8000866:	e00f      	b.n	8000888 <MX_GPIO_Init+0x334>
 8000868:	58024400 	.word	0x58024400
 800086c:	58022000 	.word	0x58022000
 8000870:	58021800 	.word	0x58021800
 8000874:	58020000 	.word	0x58020000
 8000878:	58020c00 	.word	0x58020c00
 800087c:	58022800 	.word	0x58022800
 8000880:	58021000 	.word	0x58021000
 8000884:	58022400 	.word	0x58022400
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800088c:	4619      	mov	r1, r3
 800088e:	489c      	ldr	r0, [pc, #624]	; (8000b00 <MX_GPIO_Init+0x5ac>)
 8000890:	f000 fd40 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8000894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a6:	2305      	movs	r3, #5
 80008a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ae:	4619      	mov	r1, r3
 80008b0:	4894      	ldr	r0, [pc, #592]	; (8000b04 <MX_GPIO_Init+0x5b0>)
 80008b2:	f000 fd2f 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LCD_BL_CTRL_Pin LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 80008b6:	f640 0306 	movw	r3, #2054	; 0x806
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008cc:	4619      	mov	r1, r3
 80008ce:	488d      	ldr	r0, [pc, #564]	; (8000b04 <MX_GPIO_Init+0x5b0>)
 80008d0:	f000 fd20 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_RX_Pin VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80008d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008e6:	2307      	movs	r3, #7
 80008e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ee:	4619      	mov	r1, r3
 80008f0:	4884      	ldr	r0, [pc, #528]	; (8000b04 <MX_GPIO_Init+0x5b0>)
 80008f2:	f000 fd0f 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKEUP_Pin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 80008f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000900:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800090a:	4619      	mov	r1, r3
 800090c:	487e      	ldr	r0, [pc, #504]	; (8000b08 <MX_GPIO_Init+0x5b4>)
 800090e:	f000 fd01 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin A0_Pin A2_Pin A4_Pin
                           A3_Pin A5_Pin A7_Pin SDNRAS_Pin
                           A9_Pin A8_Pin A6_Pin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000912:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000920:	2303      	movs	r3, #3
 8000922:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000924:	230c      	movs	r3, #12
 8000926:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000928:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800092c:	4619      	mov	r1, r3
 800092e:	4877      	ldr	r0, [pc, #476]	; (8000b0c <MX_GPIO_Init+0x5b8>)
 8000930:	f000 fcf0 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000934:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000946:	2300      	movs	r3, #0
 8000948:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800094e:	4619      	mov	r1, r3
 8000950:	486c      	ldr	r0, [pc, #432]	; (8000b04 <MX_GPIO_Init+0x5b0>)
 8000952:	f000 fcdf 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8000956:	2340      	movs	r3, #64	; 0x40
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000966:	230a      	movs	r3, #10
 8000968:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800096e:	4619      	mov	r1, r3
 8000970:	4867      	ldr	r0, [pc, #412]	; (8000b10 <MX_GPIO_Init+0x5bc>)
 8000972:	f000 fccf 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_CLK_Pin LCD_VSYNC_Pin LCD_R0_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 8000976:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000988:	230e      	movs	r3, #14
 800098a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800098c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000990:	4619      	mov	r1, r3
 8000992:	485b      	ldr	r0, [pc, #364]	; (8000b00 <MX_GPIO_Init+0x5ac>)
 8000994:	f000 fcbe 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO3_Pin OCSPI1_IO2_Pin OCSPI1_IO1_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO3_Pin|OCSPI1_IO2_Pin|OCSPI1_IO1_Pin;
 8000998:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80009aa:	230a      	movs	r3, #10
 80009ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009b2:	4619      	mov	r1, r3
 80009b4:	4855      	ldr	r0, [pc, #340]	; (8000b0c <MX_GPIO_Init+0x5b8>)
 80009b6:	f000 fcad 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 80009ba:	230c      	movs	r3, #12
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ca:	2305      	movs	r3, #5
 80009cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d2:	4619      	mov	r1, r3
 80009d4:	484c      	ldr	r0, [pc, #304]	; (8000b08 <MX_GPIO_Init+0x5b4>)
 80009d6:	f000 fc9d 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C4_SDA_Pin I2C4_SCL_Pin */
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 80009da:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e0:	2312      	movs	r3, #18
 80009e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80009ec:	2304      	movs	r3, #4
 80009ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009f4:	4619      	mov	r1, r3
 80009f6:	4847      	ldr	r0, [pc, #284]	; (8000b14 <MX_GPIO_Init+0x5c0>)
 80009f8:	f000 fc8c 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80009fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a12:	4619      	mov	r1, r3
 8000a14:	483f      	ldr	r0, [pc, #252]	; (8000b14 <MX_GPIO_Init+0x5c0>)
 8000a16:	f000 fc7d 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO0_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO0_Pin;
 8000a1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000a2c:	2309      	movs	r3, #9
 8000a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO0_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a34:	4619      	mov	r1, r3
 8000a36:	4837      	ldr	r0, [pc, #220]	; (8000b14 <MX_GPIO_Init+0x5c0>)
 8000a38:	f000 fc6c 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO4_Pin OCSPI1_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 8000a3c:	2322      	movs	r3, #34	; 0x22
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000a4c:	230a      	movs	r3, #10
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a54:	4619      	mov	r1, r3
 8000a56:	482c      	ldr	r0, [pc, #176]	; (8000b08 <MX_GPIO_Init+0x5b4>)
 8000a58:	f000 fc5c 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4829      	ldr	r0, [pc, #164]	; (8000b18 <MX_GPIO_Init+0x5c4>)
 8000a72:	f000 fc4f 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNE1_Pin SDNWE_Pin SDCKE1_Pin */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000a76:	23e0      	movs	r3, #224	; 0xe0
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a86:	230c      	movs	r3, #12
 8000a88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4821      	ldr	r0, [pc, #132]	; (8000b18 <MX_GPIO_Init+0x5c4>)
 8000a92:	f000 fc3f 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO5_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 8000a96:	2308      	movs	r3, #8
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000aa6:	2309      	movs	r3, #9
 8000aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4819      	ldr	r0, [pc, #100]	; (8000b18 <MX_GPIO_Init+0x5c4>)
 8000ab2:	f000 fc2f 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S6_WS_Pin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S6_WS_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <MX_GPIO_Init+0x5b0>)
 8000ad2:	f000 fc1f 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_CLK_Pin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000ae6:	2309      	movs	r3, #9
 8000ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aee:	4619      	mov	r1, r3
 8000af0:	480a      	ldr	r0, [pc, #40]	; (8000b1c <MX_GPIO_Init+0x5c8>)
 8000af2:	f000 fc0f 	bl	8001314 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af6:	bf00      	nop
 8000af8:	3740      	adds	r7, #64	; 0x40
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	58022000 	.word	0x58022000
 8000b04:	58020000 	.word	0x58020000
 8000b08:	58020800 	.word	0x58020800
 8000b0c:	58021400 	.word	0x58021400
 8000b10:	58021800 	.word	0x58021800
 8000b14:	58020c00 	.word	0x58020c00
 8000b18:	58021c00 	.word	0x58021c00
 8000b1c:	58020400 	.word	0x58020400

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_MspInit+0x30>)
 8000b34:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b38:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <HAL_MspInit+0x30>)
 8000b3a:	f043 0302 	orr.w	r3, r3, #2
 8000b3e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_MspInit+0x30>)
 8000b44:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	58024400 	.word	0x58024400

08000b60 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b0bc      	sub	sp, #240	; 0xf0
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b78:	f107 0318 	add.w	r3, r7, #24
 8000b7c:	22c0      	movs	r2, #192	; 0xc0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f00d fbbe 	bl	800e302 <memset>
  if(hsd->Instance==SDMMC1)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a38      	ldr	r2, [pc, #224]	; (8000c6c <HAL_SD_MspInit+0x10c>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d169      	bne.n	8000c64 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000b90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba0:	f107 0318 	add.w	r3, r7, #24
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f003 f8c5 	bl	8003d34 <HAL_RCCEx_PeriphCLKConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000bb0:	f7ff ffb6 	bl	8000b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <HAL_SD_MspInit+0x110>)
 8000bb6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000bba:	4a2d      	ldr	r2, [pc, #180]	; (8000c70 <HAL_SD_MspInit+0x110>)
 8000bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc0:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <HAL_SD_MspInit+0x110>)
 8000bc6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <HAL_SD_MspInit+0x110>)
 8000bd4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bd8:	4a25      	ldr	r2, [pc, #148]	; (8000c70 <HAL_SD_MspInit+0x110>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000be2:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <HAL_SD_MspInit+0x110>)
 8000be4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <HAL_SD_MspInit+0x110>)
 8000bf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bf6:	4a1e      	ldr	r2, [pc, #120]	; (8000c70 <HAL_SD_MspInit+0x110>)
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <HAL_SD_MspInit+0x110>)
 8000c02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c06:	f003 0308 	and.w	r3, r3, #8
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PC11     ------> SDMMC1_D3
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D1_Pin
 8000c0e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000c12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |SDIO1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c28:	230c      	movs	r3, #12
 8000c2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c32:	4619      	mov	r1, r3
 8000c34:	480f      	ldr	r0, [pc, #60]	; (8000c74 <HAL_SD_MspInit+0x114>)
 8000c36:	f000 fb6d 	bl	8001314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c52:	230c      	movs	r3, #12
 8000c54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4806      	ldr	r0, [pc, #24]	; (8000c78 <HAL_SD_MspInit+0x118>)
 8000c60:	f000 fb58 	bl	8001314 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000c64:	bf00      	nop
 8000c66:	37f0      	adds	r7, #240	; 0xf0
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	52007000 	.word	0x52007000
 8000c70:	58024400 	.word	0x58024400
 8000c74:	58020800 	.word	0x58020800
 8000c78:	58020c00 	.word	0x58020c00

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 f9c4 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <OTG_HS_IRQHandler+0x10>)
 8000cd6:	f000 fe27 	bl	8001928 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	240006dc 	.word	0x240006dc

08000ce4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	e00a      	b.n	8000d0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cf6:	f3af 8000 	nop.w
 8000cfa:	4601      	mov	r1, r0
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	60ba      	str	r2, [r7, #8]
 8000d02:	b2ca      	uxtb	r2, r1
 8000d04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dbf0      	blt.n	8000cf6 <_read+0x12>
  }

  return len;
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	60f8      	str	r0, [r7, #12]
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	e009      	b.n	8000d44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	60ba      	str	r2, [r7, #8]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	dbf1      	blt.n	8000d30 <_write+0x12>
  }
  return len;
 8000d4c:	687b      	ldr	r3, [r7, #4]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_close>:

int _close(int file)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d7e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_isatty>:

int _isatty(int file)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc8:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <_sbrk+0x5c>)
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <_sbrk+0x60>)
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <_sbrk+0x64>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <_sbrk+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d207      	bcs.n	8000e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df0:	f00d fad6 	bl	800e3a0 <__errno>
 8000df4:	4603      	mov	r3, r0
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dfe:	e009      	b.n	8000e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <_sbrk+0x64>)
 8000e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	24100000 	.word	0x24100000
 8000e20:	00000400 	.word	0x00000400
 8000e24:	240001f4 	.word	0x240001f4
 8000e28:	24000f88 	.word	0x24000f88

08000e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e30:	4b32      	ldr	r3, [pc, #200]	; (8000efc <SystemInit+0xd0>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a31      	ldr	r2, [pc, #196]	; (8000efc <SystemInit+0xd0>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e40:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <SystemInit+0xd4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 030f 	and.w	r3, r3, #15
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d807      	bhi.n	8000e5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e4c:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <SystemInit+0xd4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f023 030f 	bic.w	r3, r3, #15
 8000e54:	4a2a      	ldr	r2, [pc, #168]	; (8000f00 <SystemInit+0xd4>)
 8000e56:	f043 0303 	orr.w	r3, r3, #3
 8000e5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <SystemInit+0xd8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a28      	ldr	r2, [pc, #160]	; (8000f04 <SystemInit+0xd8>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e68:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <SystemInit+0xd8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e6e:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <SystemInit+0xd8>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4924      	ldr	r1, [pc, #144]	; (8000f04 <SystemInit+0xd8>)
 8000e74:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <SystemInit+0xdc>)
 8000e76:	4013      	ands	r3, r2
 8000e78:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <SystemInit+0xd4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 030c 	and.w	r3, r3, #12
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d007      	beq.n	8000e96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <SystemInit+0xd4>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f023 030f 	bic.w	r3, r3, #15
 8000e8e:	4a1c      	ldr	r2, [pc, #112]	; (8000f00 <SystemInit+0xd4>)
 8000e90:	f043 0303 	orr.w	r3, r3, #3
 8000e94:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <SystemInit+0xd8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <SystemInit+0xd8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <SystemInit+0xd8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <SystemInit+0xd8>)
 8000eaa:	4a18      	ldr	r2, [pc, #96]	; (8000f0c <SystemInit+0xe0>)
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <SystemInit+0xd8>)
 8000eb0:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <SystemInit+0xe4>)
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <SystemInit+0xd8>)
 8000eb6:	4a17      	ldr	r2, [pc, #92]	; (8000f14 <SystemInit+0xe8>)
 8000eb8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <SystemInit+0xd8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ec0:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <SystemInit+0xd8>)
 8000ec2:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <SystemInit+0xe8>)
 8000ec4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <SystemInit+0xd8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <SystemInit+0xd8>)
 8000ece:	4a11      	ldr	r2, [pc, #68]	; (8000f14 <SystemInit+0xe8>)
 8000ed0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <SystemInit+0xd8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <SystemInit+0xd8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a09      	ldr	r2, [pc, #36]	; (8000f04 <SystemInit+0xd8>)
 8000ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <SystemInit+0xd8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <SystemInit+0xec>)
 8000eec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ef0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00
 8000f00:	52002000 	.word	0x52002000
 8000f04:	58024400 	.word	0x58024400
 8000f08:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f0c:	02020200 	.word	0x02020200
 8000f10:	01ff0000 	.word	0x01ff0000
 8000f14:	01010280 	.word	0x01010280
 8000f18:	52004000 	.word	0x52004000

08000f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f20:	f7ff ff84 	bl	8000e2c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f26:	490d      	ldr	r1, [pc, #52]	; (8000f5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f2c:	e002      	b.n	8000f34 <LoopCopyDataInit>

08000f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f32:	3304      	adds	r3, #4

08000f34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f38:	d3f9      	bcc.n	8000f2e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f3c:	4c0a      	ldr	r4, [pc, #40]	; (8000f68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f40:	e001      	b.n	8000f46 <LoopFillZerobss>

08000f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f44:	3204      	adds	r2, #4

08000f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f48:	d3fb      	bcc.n	8000f42 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f00d fa2f 	bl	800e3ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4e:	f7ff fa1f 	bl	8000390 <main>
  bx  lr
 8000f52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f54:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000f58:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f5c:	2400015c 	.word	0x2400015c
  ldr r2, =_sidata
 8000f60:	0800f0ac 	.word	0x0800f0ac
  ldr r2, =_sbss
 8000f64:	2400015c 	.word	0x2400015c
  ldr r4, =_ebss
 8000f68:	24000f84 	.word	0x24000f84

08000f6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC_IRQHandler>
	...

08000f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f76:	2003      	movs	r0, #3
 8000f78:	f000 f98c 	bl	8001294 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000f7c:	f002 fd1a 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8000f80:	4602      	mov	r2, r0
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_Init+0x68>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	0a1b      	lsrs	r3, r3, #8
 8000f88:	f003 030f 	and.w	r3, r3, #15
 8000f8c:	4913      	ldr	r1, [pc, #76]	; (8000fdc <HAL_Init+0x6c>)
 8000f8e:	5ccb      	ldrb	r3, [r1, r3]
 8000f90:	f003 031f 	and.w	r3, r3, #31
 8000f94:	fa22 f303 	lsr.w	r3, r2, r3
 8000f98:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <HAL_Init+0x68>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_Init+0x6c>)
 8000fa4:	5cd3      	ldrb	r3, [r2, r3]
 8000fa6:	f003 031f 	and.w	r3, r3, #31
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb0:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <HAL_Init+0x70>)
 8000fb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <HAL_Init+0x74>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f814 	bl	8000fe8 <HAL_InitTick>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e002      	b.n	8000fd0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fca:	f7ff fdaf 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	58024400 	.word	0x58024400
 8000fdc:	0800f03c 	.word	0x0800f03c
 8000fe0:	24000004 	.word	0x24000004
 8000fe4:	24000000 	.word	0x24000000

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_InitTick+0x60>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e021      	b.n	8001040 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <HAL_InitTick+0x64>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_InitTick+0x60>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100a:	fbb3 f3f1 	udiv	r3, r3, r1
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f971 	bl	80012fa <HAL_SYSTICK_Config>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e00e      	b.n	8001040 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d80a      	bhi.n	800103e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001030:	f000 f93b 	bl	80012aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <HAL_InitTick+0x68>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2400000c 	.word	0x2400000c
 800104c:	24000000 	.word	0x24000000
 8001050:	24000008 	.word	0x24000008

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	2400000c 	.word	0x2400000c
 8001078:	240001f8 	.word	0x240001f8

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	240001f8 	.word	0x240001f8

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_Delay+0x44>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2400000c 	.word	0x2400000c

080010dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_GetREVID+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	0c1b      	lsrs	r3, r3, #16
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	5c001000 	.word	0x5c001000

080010f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <__NVIC_SetPriorityGrouping+0x40>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	4313      	orrs	r3, r2
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	; (8001134 <__NVIC_SetPriorityGrouping+0x40>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00
 8001138:	05fa0000 	.word	0x05fa0000

0800113c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <__NVIC_GetPriorityGrouping+0x18>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	f003 0307 	and.w	r3, r3, #7
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db0b      	blt.n	8001182 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	4907      	ldr	r1, [pc, #28]	; (8001190 <__NVIC_EnableIRQ+0x38>)
 8001172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000e100 	.word	0xe000e100

08001194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db0a      	blt.n	80011be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	490c      	ldr	r1, [pc, #48]	; (80011e0 <__NVIC_SetPriority+0x4c>)
 80011ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	440b      	add	r3, r1
 80011b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011bc:	e00a      	b.n	80011d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4908      	ldr	r1, [pc, #32]	; (80011e4 <__NVIC_SetPriority+0x50>)
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	3b04      	subs	r3, #4
 80011cc:	0112      	lsls	r2, r2, #4
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	440b      	add	r3, r1
 80011d2:	761a      	strb	r2, [r3, #24]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f1c3 0307 	rsb	r3, r3, #7
 8001202:	2b04      	cmp	r3, #4
 8001204:	bf28      	it	cs
 8001206:	2304      	movcs	r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3304      	adds	r3, #4
 800120e:	2b06      	cmp	r3, #6
 8001210:	d902      	bls.n	8001218 <NVIC_EncodePriority+0x30>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3b03      	subs	r3, #3
 8001216:	e000      	b.n	800121a <NVIC_EncodePriority+0x32>
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	401a      	ands	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001230:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43d9      	mvns	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	4313      	orrs	r3, r2
         );
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001260:	d301      	bcc.n	8001266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001262:	2301      	movs	r3, #1
 8001264:	e00f      	b.n	8001286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <SysTick_Config+0x40>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126e:	210f      	movs	r1, #15
 8001270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001274:	f7ff ff8e 	bl	8001194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <SysTick_Config+0x40>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <SysTick_Config+0x40>)
 8001280:	2207      	movs	r2, #7
 8001282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	e000e010 	.word	0xe000e010

08001294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff29 	bl	80010f4 <__NVIC_SetPriorityGrouping>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012b8:	f7ff ff40 	bl	800113c <__NVIC_GetPriorityGrouping>
 80012bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	68b9      	ldr	r1, [r7, #8]
 80012c2:	6978      	ldr	r0, [r7, #20]
 80012c4:	f7ff ff90 	bl	80011e8 <NVIC_EncodePriority>
 80012c8:	4602      	mov	r2, r0
 80012ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff5f 	bl	8001194 <__NVIC_SetPriority>
}
 80012d6:	bf00      	nop
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff33 	bl	8001158 <__NVIC_EnableIRQ>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffa4 	bl	8001250 <SysTick_Config>
 8001308:	4603      	mov	r3, r0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001322:	4b89      	ldr	r3, [pc, #548]	; (8001548 <HAL_GPIO_Init+0x234>)
 8001324:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001326:	e194      	b.n	8001652 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	2101      	movs	r1, #1
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 8186 	beq.w	800164c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b01      	cmp	r3, #1
 800134a:	d005      	beq.n	8001358 <HAL_GPIO_Init+0x44>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d130      	bne.n	80013ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800138e:	2201      	movs	r2, #1
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	f003 0201 	and.w	r2, r3, #1
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d017      	beq.n	80013f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	2203      	movs	r2, #3
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d123      	bne.n	800144a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	08da      	lsrs	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3208      	adds	r2, #8
 800140a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	220f      	movs	r2, #15
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	691a      	ldr	r2, [r3, #16]
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	08da      	lsrs	r2, r3, #3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3208      	adds	r2, #8
 8001444:	69b9      	ldr	r1, [r7, #24]
 8001446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0203 	and.w	r2, r3, #3
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 80e0 	beq.w	800164c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148c:	4b2f      	ldr	r3, [pc, #188]	; (800154c <HAL_GPIO_Init+0x238>)
 800148e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001492:	4a2e      	ldr	r2, [pc, #184]	; (800154c <HAL_GPIO_Init+0x238>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800149c:	4b2b      	ldr	r3, [pc, #172]	; (800154c <HAL_GPIO_Init+0x238>)
 800149e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014aa:	4a29      	ldr	r2, [pc, #164]	; (8001550 <HAL_GPIO_Init+0x23c>)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	3302      	adds	r3, #2
 80014b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	220f      	movs	r2, #15
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a20      	ldr	r2, [pc, #128]	; (8001554 <HAL_GPIO_Init+0x240>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d052      	beq.n	800157c <HAL_GPIO_Init+0x268>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a1f      	ldr	r2, [pc, #124]	; (8001558 <HAL_GPIO_Init+0x244>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d031      	beq.n	8001542 <HAL_GPIO_Init+0x22e>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a1e      	ldr	r2, [pc, #120]	; (800155c <HAL_GPIO_Init+0x248>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d02b      	beq.n	800153e <HAL_GPIO_Init+0x22a>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <HAL_GPIO_Init+0x24c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d025      	beq.n	800153a <HAL_GPIO_Init+0x226>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <HAL_GPIO_Init+0x250>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d01f      	beq.n	8001536 <HAL_GPIO_Init+0x222>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a1b      	ldr	r2, [pc, #108]	; (8001568 <HAL_GPIO_Init+0x254>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d019      	beq.n	8001532 <HAL_GPIO_Init+0x21e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a1a      	ldr	r2, [pc, #104]	; (800156c <HAL_GPIO_Init+0x258>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d013      	beq.n	800152e <HAL_GPIO_Init+0x21a>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a19      	ldr	r2, [pc, #100]	; (8001570 <HAL_GPIO_Init+0x25c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d00d      	beq.n	800152a <HAL_GPIO_Init+0x216>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a18      	ldr	r2, [pc, #96]	; (8001574 <HAL_GPIO_Init+0x260>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d007      	beq.n	8001526 <HAL_GPIO_Init+0x212>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a17      	ldr	r2, [pc, #92]	; (8001578 <HAL_GPIO_Init+0x264>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d101      	bne.n	8001522 <HAL_GPIO_Init+0x20e>
 800151e:	2309      	movs	r3, #9
 8001520:	e02d      	b.n	800157e <HAL_GPIO_Init+0x26a>
 8001522:	230a      	movs	r3, #10
 8001524:	e02b      	b.n	800157e <HAL_GPIO_Init+0x26a>
 8001526:	2308      	movs	r3, #8
 8001528:	e029      	b.n	800157e <HAL_GPIO_Init+0x26a>
 800152a:	2307      	movs	r3, #7
 800152c:	e027      	b.n	800157e <HAL_GPIO_Init+0x26a>
 800152e:	2306      	movs	r3, #6
 8001530:	e025      	b.n	800157e <HAL_GPIO_Init+0x26a>
 8001532:	2305      	movs	r3, #5
 8001534:	e023      	b.n	800157e <HAL_GPIO_Init+0x26a>
 8001536:	2304      	movs	r3, #4
 8001538:	e021      	b.n	800157e <HAL_GPIO_Init+0x26a>
 800153a:	2303      	movs	r3, #3
 800153c:	e01f      	b.n	800157e <HAL_GPIO_Init+0x26a>
 800153e:	2302      	movs	r3, #2
 8001540:	e01d      	b.n	800157e <HAL_GPIO_Init+0x26a>
 8001542:	2301      	movs	r3, #1
 8001544:	e01b      	b.n	800157e <HAL_GPIO_Init+0x26a>
 8001546:	bf00      	nop
 8001548:	58000080 	.word	0x58000080
 800154c:	58024400 	.word	0x58024400
 8001550:	58000400 	.word	0x58000400
 8001554:	58020000 	.word	0x58020000
 8001558:	58020400 	.word	0x58020400
 800155c:	58020800 	.word	0x58020800
 8001560:	58020c00 	.word	0x58020c00
 8001564:	58021000 	.word	0x58021000
 8001568:	58021400 	.word	0x58021400
 800156c:	58021800 	.word	0x58021800
 8001570:	58021c00 	.word	0x58021c00
 8001574:	58022000 	.word	0x58022000
 8001578:	58022400 	.word	0x58022400
 800157c:	2300      	movs	r3, #0
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	f002 0203 	and.w	r2, r2, #3
 8001584:	0092      	lsls	r2, r2, #2
 8001586:	4093      	lsls	r3, r2
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800158e:	4938      	ldr	r1, [pc, #224]	; (8001670 <HAL_GPIO_Init+0x35c>)
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800159c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80015c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	3301      	adds	r3, #1
 8001650:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	fa22 f303 	lsr.w	r3, r2, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	f47f ae63 	bne.w	8001328 <HAL_GPIO_Init+0x14>
  }
}
 8001662:	bf00      	nop
 8001664:	bf00      	nop
 8001666:	3724      	adds	r7, #36	; 0x24
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	58000400 	.word	0x58000400

08001674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
 8001680:	4613      	mov	r3, r2
 8001682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001684:	787b      	ldrb	r3, [r7, #1]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001690:	e003      	b.n	800169a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001692:	887b      	ldrh	r3, [r7, #2]
 8001694:	041a      	lsls	r2, r3, #16
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	619a      	str	r2, [r3, #24]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af02      	add	r7, sp, #8
 80016ac:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0fe      	b.n	80018b6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d106      	bne.n	80016d2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f00c f907 	bl	800d8e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2203      	movs	r2, #3
 80016d6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f007 fa29 	bl	8008b36 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	7c1a      	ldrb	r2, [r3, #16]
 80016ec:	f88d 2000 	strb.w	r2, [sp]
 80016f0:	3304      	adds	r3, #4
 80016f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f4:	f007 f8fa 	bl	80088ec <USB_CoreInit>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2202      	movs	r2, #2
 8001702:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e0d5      	b.n	80018b6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f007 fa21 	bl	8008b58 <USB_SetCurrentMode>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2202      	movs	r2, #2
 8001720:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0c6      	b.n	80018b6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001728:	2300      	movs	r3, #0
 800172a:	73fb      	strb	r3, [r7, #15]
 800172c:	e04a      	b.n	80017c4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	3315      	adds	r3, #21
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001742:	7bfa      	ldrb	r2, [r7, #15]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4413      	add	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	3314      	adds	r3, #20
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	b298      	uxth	r0, r3
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	332e      	adds	r3, #46	; 0x2e
 800176a:	4602      	mov	r2, r0
 800176c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800176e:	7bfa      	ldrb	r2, [r7, #15]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4413      	add	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	3318      	adds	r3, #24
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001782:	7bfa      	ldrb	r2, [r7, #15]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4413      	add	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	331c      	adds	r3, #28
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001796:	7bfa      	ldrb	r2, [r7, #15]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4413      	add	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	440b      	add	r3, r1
 80017a4:	3320      	adds	r3, #32
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017aa:	7bfa      	ldrb	r2, [r7, #15]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4413      	add	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	3324      	adds	r3, #36	; 0x24
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	3301      	adds	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	791b      	ldrb	r3, [r3, #4]
 80017c8:	7bfa      	ldrb	r2, [r7, #15]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d3af      	bcc.n	800172e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	73fb      	strb	r3, [r7, #15]
 80017d2:	e044      	b.n	800185e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017d4:	7bfa      	ldrb	r2, [r7, #15]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	f203 2355 	addw	r3, r3, #597	; 0x255
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017ea:	7bfa      	ldrb	r2, [r7, #15]
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	4413      	add	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	440b      	add	r3, r1
 80017f8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80017fc:	7bfa      	ldrb	r2, [r7, #15]
 80017fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001816:	7bfa      	ldrb	r2, [r7, #15]
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4413      	add	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800182c:	7bfa      	ldrb	r2, [r7, #15]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	3301      	adds	r3, #1
 800185c:	73fb      	strb	r3, [r7, #15]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	791b      	ldrb	r3, [r3, #4]
 8001862:	7bfa      	ldrb	r2, [r7, #15]
 8001864:	429a      	cmp	r2, r3
 8001866:	d3b5      	bcc.n	80017d4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7c1a      	ldrb	r2, [r3, #16]
 8001870:	f88d 2000 	strb.w	r2, [sp]
 8001874:	3304      	adds	r3, #4
 8001876:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001878:	f007 f9ba 	bl	8008bf0 <USB_DevInit>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d005      	beq.n	800188e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2202      	movs	r2, #2
 8001886:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e013      	b.n	80018b6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7b1b      	ldrb	r3, [r3, #12]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d102      	bne.n	80018aa <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f001 f999 	bl	8002bdc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f008 f9f9 	bl	8009ca6 <USB_DevDisconnect>

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b084      	sub	sp, #16
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_PCD_Start+0x1c>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e022      	b.n	8001920 <HAL_PCD_Start+0x62>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d009      	beq.n	8001902 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d105      	bne.n	8001902 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f007 f904 	bl	8008b14 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f008 f9a7 	bl	8009c64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b08d      	sub	sp, #52	; 0x34
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f008 fa65 	bl	8009e0e <USB_GetMode>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	f040 84b9 	bne.w	80022be <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f008 f9c9 	bl	8009ce8 <USB_ReadInterrupts>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 84af 	beq.w	80022bc <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	0a1b      	lsrs	r3, r3, #8
 8001968:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f008 f9b6 	bl	8009ce8 <USB_ReadInterrupts>
 800197c:	4603      	mov	r3, r0
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b02      	cmp	r3, #2
 8001984:	d107      	bne.n	8001996 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695a      	ldr	r2, [r3, #20]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f002 0202 	and.w	r2, r2, #2
 8001994:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f008 f9a4 	bl	8009ce8 <USB_ReadInterrupts>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f003 0310 	and.w	r3, r3, #16
 80019a6:	2b10      	cmp	r3, #16
 80019a8:	d161      	bne.n	8001a6e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	699a      	ldr	r2, [r3, #24]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0210 	bic.w	r2, r2, #16
 80019b8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	f003 020f 	and.w	r2, r3, #15
 80019c6:	4613      	mov	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	3304      	adds	r3, #4
 80019d8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	0c5b      	lsrs	r3, r3, #17
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d124      	bne.n	8001a30 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d035      	beq.n	8001a5e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	6a38      	ldr	r0, [r7, #32]
 8001a06:	f007 ffdb 	bl	80099c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	091b      	lsrs	r3, r3, #4
 8001a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a16:	441a      	add	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	695a      	ldr	r2, [r3, #20]
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a28:	441a      	add	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	615a      	str	r2, [r3, #20]
 8001a2e:	e016      	b.n	8001a5e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	0c5b      	lsrs	r3, r3, #17
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	2b06      	cmp	r3, #6
 8001a3a:	d110      	bne.n	8001a5e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001a42:	2208      	movs	r2, #8
 8001a44:	4619      	mov	r1, r3
 8001a46:	6a38      	ldr	r0, [r7, #32]
 8001a48:	f007 ffba 	bl	80099c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	695a      	ldr	r2, [r3, #20]
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	091b      	lsrs	r3, r3, #4
 8001a54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a58:	441a      	add	r2, r3
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	699a      	ldr	r2, [r3, #24]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 0210 	orr.w	r2, r2, #16
 8001a6c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f008 f938 	bl	8009ce8 <USB_ReadInterrupts>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001a82:	f040 80a7 	bne.w	8001bd4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f008 f93d 	bl	8009d0e <USB_ReadDevAllOutEpInterrupt>
 8001a94:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001a96:	e099      	b.n	8001bcc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 808e 	beq.w	8001bc0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	4611      	mov	r1, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f008 f961 	bl	8009d76 <USB_ReadDevOutEPInterrupt>
 8001ab4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00c      	beq.n	8001ada <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	015a      	lsls	r2, r3, #5
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001acc:	461a      	mov	r2, r3
 8001ace:	2301      	movs	r3, #1
 8001ad0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ad2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fefb 	bl	80028d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00c      	beq.n	8001afe <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	015a      	lsls	r2, r3, #5
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	4413      	add	r3, r2
 8001aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001af0:	461a      	mov	r2, r3
 8001af2:	2308      	movs	r3, #8
 8001af4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001af6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 ffd1 	bl	8002aa0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	015a      	lsls	r2, r3, #5
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	4413      	add	r3, r2
 8001b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b14:	461a      	mov	r2, r3
 8001b16:	2310      	movs	r3, #16
 8001b18:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d030      	beq.n	8001b86 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2c:	2b80      	cmp	r3, #128	; 0x80
 8001b2e:	d109      	bne.n	8001b44 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b42:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b46:	4613      	mov	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	3304      	adds	r3, #4
 8001b58:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	78db      	ldrb	r3, [r3, #3]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d108      	bne.n	8001b74 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2200      	movs	r2, #0
 8001b66:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f00c f886 	bl	800dc80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	015a      	lsls	r2, r3, #5
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b80:	461a      	mov	r2, r3
 8001b82:	2302      	movs	r3, #2
 8001b84:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	f003 0320 	and.w	r3, r3, #32
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2320      	movs	r3, #32
 8001ba0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d009      	beq.n	8001bc0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	015a      	lsls	r2, r3, #5
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bb8:	461a      	mov	r2, r3
 8001bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bbe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc8:	085b      	lsrs	r3, r3, #1
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f47f af62 	bne.w	8001a98 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f008 f885 	bl	8009ce8 <USB_ReadInterrupts>
 8001bde:	4603      	mov	r3, r0
 8001be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001be8:	f040 80db 	bne.w	8001da2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f008 f8a6 	bl	8009d42 <USB_ReadDevAllInEpInterrupt>
 8001bf6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001bfc:	e0cd      	b.n	8001d9a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80c2 	beq.w	8001d8e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f008 f8cc 	bl	8009db2 <USB_ReadDevInEPInterrupt>
 8001c1a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d057      	beq.n	8001cd6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69f9      	ldr	r1, [r7, #28]
 8001c42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c46:	4013      	ands	r3, r2
 8001c48:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	015a      	lsls	r2, r3, #5
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	4413      	add	r3, r2
 8001c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c56:	461a      	mov	r2, r3
 8001c58:	2301      	movs	r3, #1
 8001c5a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	799b      	ldrb	r3, [r3, #6]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d132      	bne.n	8001cca <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	3320      	adds	r3, #32
 8001c74:	6819      	ldr	r1, [r3, #0]
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4403      	add	r3, r0
 8001c84:	331c      	adds	r3, #28
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4419      	add	r1, r3
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8e:	4613      	mov	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4403      	add	r3, r0
 8001c98:	3320      	adds	r3, #32
 8001c9a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d113      	bne.n	8001cca <HAL_PCD_IRQHandler+0x3a2>
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	3324      	adds	r3, #36	; 0x24
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d108      	bne.n	8001cca <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6818      	ldr	r0, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	f008 f8d5 	bl	8009e74 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	4619      	mov	r1, r3
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f00b ff50 	bl	800db76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	015a      	lsls	r2, r3, #5
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cec:	461a      	mov	r2, r3
 8001cee:	2308      	movs	r3, #8
 8001cf0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	f003 0310 	and.w	r3, r3, #16
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	015a      	lsls	r2, r3, #5
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	4413      	add	r3, r2
 8001d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d08:	461a      	mov	r2, r3
 8001d0a:	2310      	movs	r3, #16
 8001d0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d008      	beq.n	8001d2a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	015a      	lsls	r2, r3, #5
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	4413      	add	r3, r2
 8001d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d24:	461a      	mov	r2, r3
 8001d26:	2340      	movs	r3, #64	; 0x40
 8001d28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d023      	beq.n	8001d7c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d36:	6a38      	ldr	r0, [r7, #32]
 8001d38:	f007 f8b8 	bl	8008eac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	3310      	adds	r3, #16
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	78db      	ldrb	r3, [r3, #3]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d108      	bne.n	8001d6a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	4619      	mov	r1, r3
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f00b ff9d 	bl	800dca4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d76:	461a      	mov	r2, r3
 8001d78:	2302      	movs	r3, #2
 8001d7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 fd15 	bl	80027b8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	3301      	adds	r3, #1
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d96:	085b      	lsrs	r3, r3, #1
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f47f af2e 	bne.w	8001bfe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f007 ff9e 	bl	8009ce8 <USB_ReadInterrupts>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001db2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001db6:	d122      	bne.n	8001dfe <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dc6:	f023 0301 	bic.w	r3, r3, #1
 8001dca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d108      	bne.n	8001de8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001dde:	2100      	movs	r1, #0
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 ff1f 	bl	8002c24 <HAL_PCDEx_LPM_Callback>
 8001de6:	e002      	b.n	8001dee <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f00b ff3b 	bl	800dc64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695a      	ldr	r2, [r3, #20]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f007 ff70 	bl	8009ce8 <USB_ReadInterrupts>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e12:	d112      	bne.n	8001e3a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d102      	bne.n	8001e2a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f00b fef7 	bl	800dc18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e38:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f007 ff52 	bl	8009ce8 <USB_ReadInterrupts>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e4e:	d121      	bne.n	8001e94 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695a      	ldr	r2, [r3, #20]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001e5e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d111      	bne.n	8001e8e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	f003 020f 	and.w	r2, r3, #15
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001e84:	2101      	movs	r1, #1
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fecc 	bl	8002c24 <HAL_PCDEx_LPM_Callback>
 8001e8c:	e002      	b.n	8001e94 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f00b fec2 	bl	800dc18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f007 ff25 	bl	8009ce8 <USB_ReadInterrupts>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea8:	f040 80b7 	bne.w	800201a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eba:	f023 0301 	bic.w	r3, r3, #1
 8001ebe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2110      	movs	r1, #16
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f006 fff0 	bl	8008eac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ed0:	e046      	b.n	8001f60 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed4:	015a      	lsls	r2, r3, #5
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ee4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ef6:	0151      	lsls	r1, r2, #5
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	440a      	add	r2, r1
 8001efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f12:	461a      	mov	r2, r3
 8001f14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f18:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f2a:	0151      	lsls	r1, r2, #5
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	440a      	add	r2, r1
 8001f30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f4a:	0151      	lsls	r1, r2, #5
 8001f4c:	69fa      	ldr	r2, [r7, #28]
 8001f4e:	440a      	add	r2, r1
 8001f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f58:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	791b      	ldrb	r3, [r3, #4]
 8001f64:	461a      	mov	r2, r3
 8001f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d3b2      	bcc.n	8001ed2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f7a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f7e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	7bdb      	ldrb	r3, [r3, #15]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d016      	beq.n	8001fb6 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f98:	f043 030b 	orr.w	r3, r3, #11
 8001f9c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fae:	f043 030b 	orr.w	r3, r3, #11
 8001fb2:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb4:	e015      	b.n	8001fe2 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f242 032b 	movw	r3, #8235	; 0x202b
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	69fa      	ldr	r2, [r7, #28]
 8001fd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fdc:	f043 030b 	orr.w	r3, r3, #11
 8001fe0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ff0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ff4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6818      	ldr	r0, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002004:	461a      	mov	r2, r3
 8002006:	f007 ff35 	bl	8009e74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695a      	ldr	r2, [r3, #20]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002018:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f007 fe62 	bl	8009ce8 <USB_ReadInterrupts>
 8002024:	4603      	mov	r3, r0
 8002026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800202a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800202e:	d123      	bne.n	8002078 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f007 fef9 	bl	8009e2c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f006 ffad 	bl	8008f9e <USB_GetDevSpeed>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681c      	ldr	r4, [r3, #0]
 8002050:	f001 fe2a 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8002054:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800205a:	461a      	mov	r2, r3
 800205c:	4620      	mov	r0, r4
 800205e:	f006 fcb7 	bl	80089d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f00b fdaf 	bl	800dbc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002076:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f007 fe33 	bl	8009ce8 <USB_ReadInterrupts>
 8002082:	4603      	mov	r3, r0
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	2b08      	cmp	r3, #8
 800208a:	d10a      	bne.n	80020a2 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f00b fd8c 	bl	800dbaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f002 0208 	and.w	r2, r2, #8
 80020a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f007 fe1e 	bl	8009ce8 <USB_ReadInterrupts>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b2:	2b80      	cmp	r3, #128	; 0x80
 80020b4:	d123      	bne.n	80020fe <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020c2:	2301      	movs	r3, #1
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
 80020c6:	e014      	b.n	80020f2 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	f203 2357 	addw	r3, r3, #599	; 0x257
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d105      	bne.n	80020ec <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	4619      	mov	r1, r3
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 fb08 	bl	80026fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	3301      	adds	r3, #1
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	791b      	ldrb	r3, [r3, #4]
 80020f6:	461a      	mov	r2, r3
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d3e4      	bcc.n	80020c8 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f007 fdf0 	bl	8009ce8 <USB_ReadInterrupts>
 8002108:	4603      	mov	r3, r0
 800210a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800210e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002112:	d13c      	bne.n	800218e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002114:	2301      	movs	r3, #1
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
 8002118:	e02b      	b.n	8002172 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	015a      	lsls	r2, r3, #5
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	4413      	add	r3, r2
 8002122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	3318      	adds	r3, #24
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d115      	bne.n	800216c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002140:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002142:	2b00      	cmp	r3, #0
 8002144:	da12      	bge.n	800216c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	3317      	adds	r3, #23
 8002156:	2201      	movs	r2, #1
 8002158:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002162:	b2db      	uxtb	r3, r3
 8002164:	4619      	mov	r1, r3
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fac8 	bl	80026fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	3301      	adds	r3, #1
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	791b      	ldrb	r3, [r3, #4]
 8002176:	461a      	mov	r2, r3
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	4293      	cmp	r3, r2
 800217c:	d3cd      	bcc.n	800211a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695a      	ldr	r2, [r3, #20]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800218c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f007 fda8 	bl	8009ce8 <USB_ReadInterrupts>
 8002198:	4603      	mov	r3, r0
 800219a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800219e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021a2:	d156      	bne.n	8002252 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021a4:	2301      	movs	r3, #1
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
 80021a8:	e045      	b.n	8002236 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021be:	4613      	mov	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d12e      	bne.n	8002230 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80021d2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	da2b      	bge.n	8002230 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80021e4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d121      	bne.n	8002230 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	f203 2357 	addw	r3, r3, #599	; 0x257
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10a      	bne.n	8002230 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002228:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800222c:	6053      	str	r3, [r2, #4]
            break;
 800222e:	e008      	b.n	8002242 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	3301      	adds	r3, #1
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	791b      	ldrb	r3, [r3, #4]
 800223a:	461a      	mov	r2, r3
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	4293      	cmp	r3, r2
 8002240:	d3b3      	bcc.n	80021aa <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695a      	ldr	r2, [r3, #20]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002250:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f007 fd46 	bl	8009ce8 <USB_ReadInterrupts>
 800225c:	4603      	mov	r3, r0
 800225e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002266:	d10a      	bne.n	800227e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f00b fd2d 	bl	800dcc8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800227c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f007 fd30 	bl	8009ce8 <USB_ReadInterrupts>
 8002288:	4603      	mov	r3, r0
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	2b04      	cmp	r3, #4
 8002290:	d115      	bne.n	80022be <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f00b fd1d 	bl	800dce4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	e000      	b.n	80022be <HAL_PCD_IRQHandler+0x996>
      return;
 80022bc:	bf00      	nop
    }
  }
}
 80022be:	3734      	adds	r7, #52	; 0x34
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd90      	pop	{r4, r7, pc}

080022c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_PCD_SetAddress+0x1a>
 80022da:	2302      	movs	r3, #2
 80022dc:	e012      	b.n	8002304 <HAL_PCD_SetAddress+0x40>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f007 fc8f 	bl	8009c18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	4608      	mov	r0, r1
 8002316:	4611      	mov	r1, r2
 8002318:	461a      	mov	r2, r3
 800231a:	4603      	mov	r3, r0
 800231c:	70fb      	strb	r3, [r7, #3]
 800231e:	460b      	mov	r3, r1
 8002320:	803b      	strh	r3, [r7, #0]
 8002322:	4613      	mov	r3, r2
 8002324:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800232a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800232e:	2b00      	cmp	r3, #0
 8002330:	da0f      	bge.n	8002352 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	f003 020f 	and.w	r2, r3, #15
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	3310      	adds	r3, #16
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	3304      	adds	r3, #4
 8002348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	705a      	strb	r2, [r3, #1]
 8002350:	e00f      	b.n	8002372 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	f003 020f 	and.w	r2, r3, #15
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	4413      	add	r3, r2
 8002368:	3304      	adds	r3, #4
 800236a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	b2da      	uxtb	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800237e:	883a      	ldrh	r2, [r7, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	78ba      	ldrb	r2, [r7, #2]
 8002388:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	785b      	ldrb	r3, [r3, #1]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d004      	beq.n	800239c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800239c:	78bb      	ldrb	r3, [r7, #2]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d102      	bne.n	80023a8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_PCD_EP_Open+0xaa>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e00e      	b.n	80023d4 <HAL_PCD_EP_Open+0xc8>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68f9      	ldr	r1, [r7, #12]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f006 fe0f 	bl	8008fe8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80023d2:	7afb      	ldrb	r3, [r7, #11]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	da0f      	bge.n	8002410 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	f003 020f 	and.w	r2, r3, #15
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	3310      	adds	r3, #16
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	4413      	add	r3, r2
 8002404:	3304      	adds	r3, #4
 8002406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2201      	movs	r2, #1
 800240c:	705a      	strb	r2, [r3, #1]
 800240e:	e00f      	b.n	8002430 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	f003 020f 	and.w	r2, r3, #15
 8002416:	4613      	mov	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	3304      	adds	r3, #4
 8002428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	b2da      	uxtb	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_PCD_EP_Close+0x6e>
 8002446:	2302      	movs	r3, #2
 8002448:	e00e      	b.n	8002468 <HAL_PCD_EP_Close+0x8c>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68f9      	ldr	r1, [r7, #12]
 8002458:	4618      	mov	r0, r3
 800245a:	f006 fe4d 	bl	80090f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	460b      	mov	r3, r1
 800247e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002480:	7afb      	ldrb	r3, [r7, #11]
 8002482:	f003 020f 	and.w	r2, r3, #15
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	4413      	add	r3, r2
 8002496:	3304      	adds	r3, #4
 8002498:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2200      	movs	r2, #0
 80024aa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2200      	movs	r2, #0
 80024b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024b2:	7afb      	ldrb	r3, [r7, #11]
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	799b      	ldrb	r3, [r3, #6]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d102      	bne.n	80024cc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	799b      	ldrb	r3, [r3, #6]
 80024d4:	461a      	mov	r2, r3
 80024d6:	6979      	ldr	r1, [r7, #20]
 80024d8:	f006 feea 	bl	80092b0 <USB_EPStartXfer>

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	f003 020f 	and.w	r2, r3, #15
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002508:	681b      	ldr	r3, [r3, #0]
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	460b      	mov	r3, r1
 8002524:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002526:	7afb      	ldrb	r3, [r7, #11]
 8002528:	f003 020f 	and.w	r2, r3, #15
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	3310      	adds	r3, #16
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4413      	add	r3, r2
 800253a:	3304      	adds	r3, #4
 800253c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2200      	movs	r2, #0
 800254e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2201      	movs	r2, #1
 8002554:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002556:	7afb      	ldrb	r3, [r7, #11]
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	b2da      	uxtb	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	799b      	ldrb	r3, [r3, #6]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d102      	bne.n	8002570 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	799b      	ldrb	r3, [r3, #6]
 8002578:	461a      	mov	r2, r3
 800257a:	6979      	ldr	r1, [r7, #20]
 800257c:	f006 fe98 	bl	80092b0 <USB_EPStartXfer>

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	460b      	mov	r3, r1
 8002594:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	7912      	ldrb	r2, [r2, #4]
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e04f      	b.n	8002648 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	da0f      	bge.n	80025d0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	f003 020f 	and.w	r2, r3, #15
 80025b6:	4613      	mov	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	3310      	adds	r3, #16
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	4413      	add	r3, r2
 80025c4:	3304      	adds	r3, #4
 80025c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2201      	movs	r2, #1
 80025cc:	705a      	strb	r2, [r3, #1]
 80025ce:	e00d      	b.n	80025ec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	4613      	mov	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	3304      	adds	r3, #4
 80025e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025f2:	78fb      	ldrb	r3, [r7, #3]
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_PCD_EP_SetStall+0x82>
 8002608:	2302      	movs	r3, #2
 800260a:	e01d      	b.n	8002648 <HAL_PCD_EP_SetStall+0xbe>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68f9      	ldr	r1, [r7, #12]
 800261a:	4618      	mov	r0, r3
 800261c:	f007 fa28 	bl	8009a70 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	7999      	ldrb	r1, [r3, #6]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002638:	461a      	mov	r2, r3
 800263a:	f007 fc1b 	bl	8009e74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800265c:	78fb      	ldrb	r3, [r7, #3]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	7912      	ldrb	r2, [r2, #4]
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e042      	b.n	80026f4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800266e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002672:	2b00      	cmp	r3, #0
 8002674:	da0f      	bge.n	8002696 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	f003 020f 	and.w	r2, r3, #15
 800267c:	4613      	mov	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	3310      	adds	r3, #16
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	3304      	adds	r3, #4
 800268c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2201      	movs	r2, #1
 8002692:	705a      	strb	r2, [r3, #1]
 8002694:	e00f      	b.n	80026b6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002696:	78fb      	ldrb	r3, [r7, #3]
 8002698:	f003 020f 	and.w	r2, r3, #15
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	4413      	add	r3, r2
 80026ac:	3304      	adds	r3, #4
 80026ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_PCD_EP_ClrStall+0x86>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e00e      	b.n	80026f4 <HAL_PCD_EP_ClrStall+0xa4>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68f9      	ldr	r1, [r7, #12]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f007 fa31 	bl	8009b4c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800270c:	2b00      	cmp	r3, #0
 800270e:	da0c      	bge.n	800272a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	f003 020f 	and.w	r2, r3, #15
 8002716:	4613      	mov	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	3310      	adds	r3, #16
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	4413      	add	r3, r2
 8002724:	3304      	adds	r3, #4
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	e00c      	b.n	8002744 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800272a:	78fb      	ldrb	r3, [r7, #3]
 800272c:	f003 020f 	and.w	r2, r3, #15
 8002730:	4613      	mov	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	4413      	add	r3, r2
 8002740:	3304      	adds	r3, #4
 8002742:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68f9      	ldr	r1, [r7, #12]
 800274a:	4618      	mov	r0, r3
 800274c:	f007 f850 	bl	80097f0 <USB_EPStopXfer>
 8002750:	4603      	mov	r3, r0
 8002752:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002754:	7afb      	ldrb	r3, [r7, #11]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_PCD_EP_Flush+0x1a>
 8002774:	2302      	movs	r3, #2
 8002776:	e01b      	b.n	80027b0 <HAL_PCD_EP_Flush+0x52>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8002780:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002784:	2b00      	cmp	r3, #0
 8002786:	da09      	bge.n	800279c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	4619      	mov	r1, r3
 8002794:	4610      	mov	r0, r2
 8002796:	f006 fb89 	bl	8008eac <USB_FlushTxFifo>
 800279a:	e004      	b.n	80027a6 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f006 fbb5 	bl	8008f10 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08a      	sub	sp, #40	; 0x28
 80027bc:	af02      	add	r7, sp, #8
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	3310      	adds	r3, #16
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	4413      	add	r3, r2
 80027dc:	3304      	adds	r3, #4
 80027de:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d901      	bls.n	80027f0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e06b      	b.n	80028c8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	429a      	cmp	r2, r3
 8002804:	d902      	bls.n	800280c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	3303      	adds	r3, #3
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002814:	e02a      	b.n	800286c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	429a      	cmp	r2, r3
 800282a:	d902      	bls.n	8002832 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3303      	adds	r3, #3
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	68d9      	ldr	r1, [r3, #12]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	4603      	mov	r3, r0
 800284e:	6978      	ldr	r0, [r7, #20]
 8002850:	f007 f878 	bl	8009944 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	441a      	add	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	441a      	add	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4413      	add	r3, r2
 8002874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	429a      	cmp	r2, r3
 8002880:	d809      	bhi.n	8002896 <PCD_WriteEmptyTxFifo+0xde>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800288a:	429a      	cmp	r2, r3
 800288c:	d203      	bcs.n	8002896 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1bf      	bne.n	8002816 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d811      	bhi.n	80028c6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	2201      	movs	r2, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	6939      	ldr	r1, [r7, #16]
 80028be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028c2:	4013      	ands	r3, r2
 80028c4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3720      	adds	r7, #32
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	333c      	adds	r3, #60	; 0x3c
 80028e8:	3304      	adds	r3, #4
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	799b      	ldrb	r3, [r3, #6]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d17b      	bne.n	80029fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b00      	cmp	r3, #0
 800290e:	d015      	beq.n	800293c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	4a61      	ldr	r2, [pc, #388]	; (8002a98 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	f240 80b9 	bls.w	8002a8c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80b3 	beq.w	8002a8c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	4413      	add	r3, r2
 800292e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002932:	461a      	mov	r2, r3
 8002934:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002938:	6093      	str	r3, [r2, #8]
 800293a:	e0a7      	b.n	8002a8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f003 0320 	and.w	r3, r3, #32
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	4413      	add	r3, r2
 800294e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002952:	461a      	mov	r2, r3
 8002954:	2320      	movs	r3, #32
 8002956:	6093      	str	r3, [r2, #8]
 8002958:	e098      	b.n	8002a8c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	f040 8093 	bne.w	8002a8c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	4a4b      	ldr	r2, [pc, #300]	; (8002a98 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d90f      	bls.n	800298e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	4413      	add	r3, r2
 8002980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002984:	461a      	mov	r2, r3
 8002986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800298a:	6093      	str	r3, [r2, #8]
 800298c:	e07e      	b.n	8002a8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	4413      	add	r3, r2
 80029a0:	3304      	adds	r3, #4
 80029a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a1a      	ldr	r2, [r3, #32]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	0159      	lsls	r1, r3, #5
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	440b      	add	r3, r1
 80029b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ba:	1ad2      	subs	r2, r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d114      	bne.n	80029f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80029d8:	461a      	mov	r2, r3
 80029da:	2101      	movs	r1, #1
 80029dc:	f007 fa4a 	bl	8009e74 <USB_EP0_OutStart>
 80029e0:	e006      	b.n	80029f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	441a      	add	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	4619      	mov	r1, r3
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f00b f8a2 	bl	800db40 <HAL_PCD_DataOutStageCallback>
 80029fc:	e046      	b.n	8002a8c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	4a26      	ldr	r2, [pc, #152]	; (8002a9c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d124      	bne.n	8002a50 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00a      	beq.n	8002a26 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a22:	6093      	str	r3, [r2, #8]
 8002a24:	e032      	b.n	8002a8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2320      	movs	r3, #32
 8002a40:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	4619      	mov	r1, r3
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f00b f879 	bl	800db40 <HAL_PCD_DataOutStageCallback>
 8002a4e:	e01d      	b.n	8002a8c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d114      	bne.n	8002a80 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d108      	bne.n	8002a80 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	f007 f9fa 	bl	8009e74 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	4619      	mov	r1, r3
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f00b f85a 	bl	800db40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3720      	adds	r7, #32
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	4f54300a 	.word	0x4f54300a
 8002a9c:	4f54310a 	.word	0x4f54310a

08002aa0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	333c      	adds	r3, #60	; 0x3c
 8002ab8:	3304      	adds	r3, #4
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4a15      	ldr	r2, [pc, #84]	; (8002b28 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d90e      	bls.n	8002af4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d009      	beq.n	8002af4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aec:	461a      	mov	r2, r3
 8002aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002af2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f00b f811 	bl	800db1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <PCD_EP_OutSetupPacket_int+0x88>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d90c      	bls.n	8002b1c <PCD_EP_OutSetupPacket_int+0x7c>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	799b      	ldrb	r3, [r3, #6]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d108      	bne.n	8002b1c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002b14:	461a      	mov	r2, r3
 8002b16:	2101      	movs	r1, #1
 8002b18:	f007 f9ac 	bl	8009e74 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	4f54300a 	.word	0x4f54300a

08002b2c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	70fb      	strb	r3, [r7, #3]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d107      	bne.n	8002b5a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b4a:	883b      	ldrh	r3, [r7, #0]
 8002b4c:	0419      	lsls	r1, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
 8002b58:	e028      	b.n	8002bac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	0c1b      	lsrs	r3, r3, #16
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	4413      	add	r3, r2
 8002b66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b68:	2300      	movs	r3, #0
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	e00d      	b.n	8002b8a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	3340      	adds	r3, #64	; 0x40
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	0c1b      	lsrs	r3, r3, #16
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	4413      	add	r3, r2
 8002b82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	3301      	adds	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d3ec      	bcc.n	8002b6e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b94:	883b      	ldrh	r3, [r7, #0]
 8002b96:	0418      	lsls	r0, r3, #16
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6819      	ldr	r1, [r3, #0]
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	4302      	orrs	r2, r0
 8002ba4:	3340      	adds	r3, #64	; 0x40
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <HAL_PCDEx_ActivateLPM+0x44>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	10000003 	.word	0x10000003

08002c24 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002c44:	4b29      	ldr	r3, [pc, #164]	; (8002cec <HAL_PWREx_ConfigSupply+0xb0>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	2b06      	cmp	r3, #6
 8002c4e:	d00a      	beq.n	8002c66 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c50:	4b26      	ldr	r3, [pc, #152]	; (8002cec <HAL_PWREx_ConfigSupply+0xb0>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d001      	beq.n	8002c62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e040      	b.n	8002ce4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e03e      	b.n	8002ce4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c66:	4b21      	ldr	r3, [pc, #132]	; (8002cec <HAL_PWREx_ConfigSupply+0xb0>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002c6e:	491f      	ldr	r1, [pc, #124]	; (8002cec <HAL_PWREx_ConfigSupply+0xb0>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c76:	f7fe fa01 	bl	800107c <HAL_GetTick>
 8002c7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c7c:	e009      	b.n	8002c92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c7e:	f7fe f9fd 	bl	800107c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c8c:	d901      	bls.n	8002c92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e028      	b.n	8002ce4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <HAL_PWREx_ConfigSupply+0xb0>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c9e:	d1ee      	bne.n	8002c7e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b1e      	cmp	r3, #30
 8002ca4:	d008      	beq.n	8002cb8 <HAL_PWREx_ConfigSupply+0x7c>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b2e      	cmp	r3, #46	; 0x2e
 8002caa:	d005      	beq.n	8002cb8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b1d      	cmp	r3, #29
 8002cb0:	d002      	beq.n	8002cb8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b2d      	cmp	r3, #45	; 0x2d
 8002cb6:	d114      	bne.n	8002ce2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002cb8:	f7fe f9e0 	bl	800107c <HAL_GetTick>
 8002cbc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002cbe:	e009      	b.n	8002cd4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002cc0:	f7fe f9dc 	bl	800107c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cce:	d901      	bls.n	8002cd4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e007      	b.n	8002ce4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_PWREx_ConfigSupply+0xb0>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce0:	d1ee      	bne.n	8002cc0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	58024800 	.word	0x58024800

08002cf0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cfe:	60d3      	str	r3, [r2, #12]
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	58024800 	.word	0x58024800

08002d10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	; 0x30
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d102      	bne.n	8002d24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f000 bc1f 	b.w	8003562 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80b3 	beq.w	8002e98 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d32:	4b95      	ldr	r3, [pc, #596]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d3c:	4b92      	ldr	r3, [pc, #584]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	2b10      	cmp	r3, #16
 8002d46:	d007      	beq.n	8002d58 <HAL_RCC_OscConfig+0x48>
 8002d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4a:	2b18      	cmp	r3, #24
 8002d4c:	d112      	bne.n	8002d74 <HAL_RCC_OscConfig+0x64>
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d10d      	bne.n	8002d74 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d58:	4b8b      	ldr	r3, [pc, #556]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 8098 	beq.w	8002e96 <HAL_RCC_OscConfig+0x186>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 8093 	bne.w	8002e96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e3f6      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7c:	d106      	bne.n	8002d8c <HAL_RCC_OscConfig+0x7c>
 8002d7e:	4b82      	ldr	r3, [pc, #520]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a81      	ldr	r2, [pc, #516]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	e058      	b.n	8002e3e <HAL_RCC_OscConfig+0x12e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d112      	bne.n	8002dba <HAL_RCC_OscConfig+0xaa>
 8002d94:	4b7c      	ldr	r3, [pc, #496]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a7b      	ldr	r2, [pc, #492]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	4b79      	ldr	r3, [pc, #484]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a78      	ldr	r2, [pc, #480]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002da6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4b76      	ldr	r3, [pc, #472]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a75      	ldr	r2, [pc, #468]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	e041      	b.n	8002e3e <HAL_RCC_OscConfig+0x12e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc2:	d112      	bne.n	8002dea <HAL_RCC_OscConfig+0xda>
 8002dc4:	4b70      	ldr	r3, [pc, #448]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a6f      	ldr	r2, [pc, #444]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002dca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	4b6d      	ldr	r3, [pc, #436]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a6c      	ldr	r2, [pc, #432]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002dd6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b6a      	ldr	r3, [pc, #424]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a69      	ldr	r2, [pc, #420]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	e029      	b.n	8002e3e <HAL_RCC_OscConfig+0x12e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002df2:	d112      	bne.n	8002e1a <HAL_RCC_OscConfig+0x10a>
 8002df4:	4b64      	ldr	r3, [pc, #400]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a63      	ldr	r2, [pc, #396]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002dfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	4b61      	ldr	r3, [pc, #388]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a60      	ldr	r2, [pc, #384]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b5e      	ldr	r3, [pc, #376]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a5d      	ldr	r2, [pc, #372]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	e011      	b.n	8002e3e <HAL_RCC_OscConfig+0x12e>
 8002e1a:	4b5b      	ldr	r3, [pc, #364]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a5a      	ldr	r2, [pc, #360]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	4b58      	ldr	r3, [pc, #352]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a57      	ldr	r2, [pc, #348]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	4b55      	ldr	r3, [pc, #340]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a54      	ldr	r2, [pc, #336]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002e38:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002e3c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d013      	beq.n	8002e6e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e46:	f7fe f919 	bl	800107c <HAL_GetTick>
 8002e4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e4e:	f7fe f915 	bl	800107c <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b64      	cmp	r3, #100	; 0x64
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e380      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e60:	4b49      	ldr	r3, [pc, #292]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x13e>
 8002e6c:	e014      	b.n	8002e98 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6e:	f7fe f905 	bl	800107c <HAL_GetTick>
 8002e72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e76:	f7fe f901 	bl	800107c <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b64      	cmp	r3, #100	; 0x64
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e36c      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e88:	4b3f      	ldr	r3, [pc, #252]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f0      	bne.n	8002e76 <HAL_RCC_OscConfig+0x166>
 8002e94:	e000      	b.n	8002e98 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e96:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 808c 	beq.w	8002fbe <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ea6:	4b38      	ldr	r3, [pc, #224]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eae:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002eb0:	4b35      	ldr	r3, [pc, #212]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d007      	beq.n	8002ecc <HAL_RCC_OscConfig+0x1bc>
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	2b18      	cmp	r3, #24
 8002ec0:	d137      	bne.n	8002f32 <HAL_RCC_OscConfig+0x222>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d132      	bne.n	8002f32 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ecc:	4b2e      	ldr	r3, [pc, #184]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x1d4>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e33e      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ee4:	4b28      	ldr	r3, [pc, #160]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f023 0219 	bic.w	r2, r3, #25
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4925      	ldr	r1, [pc, #148]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef6:	f7fe f8c1 	bl	800107c <HAL_GetTick>
 8002efa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002efe:	f7fe f8bd 	bl	800107c <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e328      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f10:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1c:	4b1a      	ldr	r3, [pc, #104]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	061b      	lsls	r3, r3, #24
 8002f2a:	4917      	ldr	r1, [pc, #92]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f30:	e045      	b.n	8002fbe <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d028      	beq.n	8002f8c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f3a:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 0219 	bic.w	r2, r3, #25
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	4910      	ldr	r1, [pc, #64]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fe f896 	bl	800107c <HAL_GetTick>
 8002f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f54:	f7fe f892 	bl	800107c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e2fd      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	061b      	lsls	r3, r3, #24
 8002f80:	4901      	ldr	r1, [pc, #4]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	604b      	str	r3, [r1, #4]
 8002f86:	e01a      	b.n	8002fbe <HAL_RCC_OscConfig+0x2ae>
 8002f88:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f8c:	4b97      	ldr	r3, [pc, #604]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a96      	ldr	r2, [pc, #600]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fe f870 	bl	800107c <HAL_GetTick>
 8002f9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa0:	f7fe f86c 	bl	800107c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e2d7      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fb2:	4b8e      	ldr	r3, [pc, #568]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d06a      	beq.n	80030a0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fca:	4b88      	ldr	r3, [pc, #544]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fd2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fd4:	4b85      	ldr	r3, [pc, #532]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d007      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x2e0>
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	2b18      	cmp	r3, #24
 8002fe4:	d11b      	bne.n	800301e <HAL_RCC_OscConfig+0x30e>
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d116      	bne.n	800301e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ff0:	4b7e      	ldr	r3, [pc, #504]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_OscConfig+0x2f8>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	2b80      	cmp	r3, #128	; 0x80
 8003002:	d001      	beq.n	8003008 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e2ac      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003008:	4b78      	ldr	r3, [pc, #480]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	4975      	ldr	r1, [pc, #468]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 8003018:	4313      	orrs	r3, r2
 800301a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800301c:	e040      	b.n	80030a0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d023      	beq.n	800306e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003026:	4b71      	ldr	r3, [pc, #452]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a70      	ldr	r2, [pc, #448]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 800302c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003032:	f7fe f823 	bl	800107c <HAL_GetTick>
 8003036:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800303a:	f7fe f81f 	bl	800107c <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e28a      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800304c:	4b67      	ldr	r3, [pc, #412]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003058:	4b64      	ldr	r3, [pc, #400]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	061b      	lsls	r3, r3, #24
 8003066:	4961      	ldr	r1, [pc, #388]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 8003068:	4313      	orrs	r3, r2
 800306a:	60cb      	str	r3, [r1, #12]
 800306c:	e018      	b.n	80030a0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800306e:	4b5f      	ldr	r3, [pc, #380]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a5e      	ldr	r2, [pc, #376]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 8003074:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fd ffff 	bl	800107c <HAL_GetTick>
 800307e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003082:	f7fd fffb 	bl	800107c <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e266      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003094:	4b55      	ldr	r3, [pc, #340]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d036      	beq.n	800311a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d019      	beq.n	80030e8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b4:	4b4d      	ldr	r3, [pc, #308]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 80030b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b8:	4a4c      	ldr	r2, [pc, #304]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c0:	f7fd ffdc 	bl	800107c <HAL_GetTick>
 80030c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c8:	f7fd ffd8 	bl	800107c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e243      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030da:	4b44      	ldr	r3, [pc, #272]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 80030dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x3b8>
 80030e6:	e018      	b.n	800311a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e8:	4b40      	ldr	r3, [pc, #256]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 80030ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ec:	4a3f      	ldr	r2, [pc, #252]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 80030ee:	f023 0301 	bic.w	r3, r3, #1
 80030f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7fd ffc2 	bl	800107c <HAL_GetTick>
 80030f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030fc:	f7fd ffbe 	bl	800107c <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e229      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800310e:	4b37      	ldr	r3, [pc, #220]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 8003110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b00      	cmp	r3, #0
 8003124:	d036      	beq.n	8003194 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d019      	beq.n	8003162 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800312e:	4b2f      	ldr	r3, [pc, #188]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a2e      	ldr	r2, [pc, #184]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 8003134:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003138:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800313a:	f7fd ff9f 	bl	800107c <HAL_GetTick>
 800313e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003142:	f7fd ff9b 	bl	800107c <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e206      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003154:	4b25      	ldr	r3, [pc, #148]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x432>
 8003160:	e018      	b.n	8003194 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003162:	4b22      	ldr	r3, [pc, #136]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a21      	ldr	r2, [pc, #132]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 8003168:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800316c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800316e:	f7fd ff85 	bl	800107c <HAL_GetTick>
 8003172:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003176:	f7fd ff81 	bl	800107c <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e1ec      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003188:	4b18      	ldr	r3, [pc, #96]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f0      	bne.n	8003176 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80af 	beq.w	8003300 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031a2:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <HAL_RCC_OscConfig+0x4e0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a12      	ldr	r2, [pc, #72]	; (80031f0 <HAL_RCC_OscConfig+0x4e0>)
 80031a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031ae:	f7fd ff65 	bl	800107c <HAL_GetTick>
 80031b2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b6:	f7fd ff61 	bl	800107c <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b64      	cmp	r3, #100	; 0x64
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e1cc      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031c8:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <HAL_RCC_OscConfig+0x4e0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d10b      	bne.n	80031f4 <HAL_RCC_OscConfig+0x4e4>
 80031dc:	4b03      	ldr	r3, [pc, #12]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	4a02      	ldr	r2, [pc, #8]	; (80031ec <HAL_RCC_OscConfig+0x4dc>)
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	6713      	str	r3, [r2, #112]	; 0x70
 80031e8:	e05b      	b.n	80032a2 <HAL_RCC_OscConfig+0x592>
 80031ea:	bf00      	nop
 80031ec:	58024400 	.word	0x58024400
 80031f0:	58024800 	.word	0x58024800
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d112      	bne.n	8003222 <HAL_RCC_OscConfig+0x512>
 80031fc:	4b9d      	ldr	r3, [pc, #628]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	4a9c      	ldr	r2, [pc, #624]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003202:	f023 0301 	bic.w	r3, r3, #1
 8003206:	6713      	str	r3, [r2, #112]	; 0x70
 8003208:	4b9a      	ldr	r3, [pc, #616]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	4a99      	ldr	r2, [pc, #612]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 800320e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003212:	6713      	str	r3, [r2, #112]	; 0x70
 8003214:	4b97      	ldr	r3, [pc, #604]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	4a96      	ldr	r2, [pc, #600]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 800321a:	f023 0304 	bic.w	r3, r3, #4
 800321e:	6713      	str	r3, [r2, #112]	; 0x70
 8003220:	e03f      	b.n	80032a2 <HAL_RCC_OscConfig+0x592>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b05      	cmp	r3, #5
 8003228:	d112      	bne.n	8003250 <HAL_RCC_OscConfig+0x540>
 800322a:	4b92      	ldr	r3, [pc, #584]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	4a91      	ldr	r2, [pc, #580]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003230:	f043 0304 	orr.w	r3, r3, #4
 8003234:	6713      	str	r3, [r2, #112]	; 0x70
 8003236:	4b8f      	ldr	r3, [pc, #572]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	4a8e      	ldr	r2, [pc, #568]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 800323c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003240:	6713      	str	r3, [r2, #112]	; 0x70
 8003242:	4b8c      	ldr	r3, [pc, #560]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	4a8b      	ldr	r2, [pc, #556]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	6713      	str	r3, [r2, #112]	; 0x70
 800324e:	e028      	b.n	80032a2 <HAL_RCC_OscConfig+0x592>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b85      	cmp	r3, #133	; 0x85
 8003256:	d112      	bne.n	800327e <HAL_RCC_OscConfig+0x56e>
 8003258:	4b86      	ldr	r3, [pc, #536]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 800325a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325c:	4a85      	ldr	r2, [pc, #532]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 800325e:	f043 0304 	orr.w	r3, r3, #4
 8003262:	6713      	str	r3, [r2, #112]	; 0x70
 8003264:	4b83      	ldr	r3, [pc, #524]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	4a82      	ldr	r2, [pc, #520]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 800326a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326e:	6713      	str	r3, [r2, #112]	; 0x70
 8003270:	4b80      	ldr	r3, [pc, #512]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003274:	4a7f      	ldr	r2, [pc, #508]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6713      	str	r3, [r2, #112]	; 0x70
 800327c:	e011      	b.n	80032a2 <HAL_RCC_OscConfig+0x592>
 800327e:	4b7d      	ldr	r3, [pc, #500]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	4a7c      	ldr	r2, [pc, #496]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	6713      	str	r3, [r2, #112]	; 0x70
 800328a:	4b7a      	ldr	r3, [pc, #488]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4a79      	ldr	r2, [pc, #484]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003290:	f023 0304 	bic.w	r3, r3, #4
 8003294:	6713      	str	r3, [r2, #112]	; 0x70
 8003296:	4b77      	ldr	r3, [pc, #476]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	4a76      	ldr	r2, [pc, #472]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 800329c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d015      	beq.n	80032d6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032aa:	f7fd fee7 	bl	800107c <HAL_GetTick>
 80032ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032b0:	e00a      	b.n	80032c8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b2:	f7fd fee3 	bl	800107c <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e14c      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032c8:	4b6a      	ldr	r3, [pc, #424]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0ee      	beq.n	80032b2 <HAL_RCC_OscConfig+0x5a2>
 80032d4:	e014      	b.n	8003300 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d6:	f7fd fed1 	bl	800107c <HAL_GetTick>
 80032da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032dc:	e00a      	b.n	80032f4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fd fecd 	bl	800107c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e136      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032f4:	4b5f      	ldr	r3, [pc, #380]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1ee      	bne.n	80032de <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 812b 	beq.w	8003560 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800330a:	4b5a      	ldr	r3, [pc, #360]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003312:	2b18      	cmp	r3, #24
 8003314:	f000 80bb 	beq.w	800348e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	2b02      	cmp	r3, #2
 800331e:	f040 8095 	bne.w	800344c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003322:	4b54      	ldr	r3, [pc, #336]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a53      	ldr	r2, [pc, #332]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003328:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800332c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332e:	f7fd fea5 	bl	800107c <HAL_GetTick>
 8003332:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003336:	f7fd fea1 	bl	800107c <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e10c      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003348:	4b4a      	ldr	r3, [pc, #296]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f0      	bne.n	8003336 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003354:	4b47      	ldr	r3, [pc, #284]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003356:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003358:	4b47      	ldr	r3, [pc, #284]	; (8003478 <HAL_RCC_OscConfig+0x768>)
 800335a:	4013      	ands	r3, r2
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003364:	0112      	lsls	r2, r2, #4
 8003366:	430a      	orrs	r2, r1
 8003368:	4942      	ldr	r1, [pc, #264]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 800336a:	4313      	orrs	r3, r2
 800336c:	628b      	str	r3, [r1, #40]	; 0x28
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	3b01      	subs	r3, #1
 8003374:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337c:	3b01      	subs	r3, #1
 800337e:	025b      	lsls	r3, r3, #9
 8003380:	b29b      	uxth	r3, r3
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	3b01      	subs	r3, #1
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003396:	3b01      	subs	r3, #1
 8003398:	061b      	lsls	r3, r3, #24
 800339a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800339e:	4935      	ldr	r1, [pc, #212]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80033a4:	4b33      	ldr	r3, [pc, #204]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	4a32      	ldr	r2, [pc, #200]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033b0:	4b30      	ldr	r3, [pc, #192]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 80033b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b4:	4b31      	ldr	r3, [pc, #196]	; (800347c <HAL_RCC_OscConfig+0x76c>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033bc:	00d2      	lsls	r2, r2, #3
 80033be:	492d      	ldr	r1, [pc, #180]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80033c4:	4b2b      	ldr	r3, [pc, #172]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	f023 020c 	bic.w	r2, r3, #12
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	4928      	ldr	r1, [pc, #160]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80033d6:	4b27      	ldr	r3, [pc, #156]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	f023 0202 	bic.w	r2, r3, #2
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	4924      	ldr	r1, [pc, #144]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80033e8:	4b22      	ldr	r3, [pc, #136]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	4a21      	ldr	r2, [pc, #132]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 80033ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f4:	4b1f      	ldr	r3, [pc, #124]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	4a1e      	ldr	r2, [pc, #120]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 80033fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003400:	4b1c      	ldr	r3, [pc, #112]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	4a1b      	ldr	r2, [pc, #108]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003406:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800340a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800340c:	4b19      	ldr	r3, [pc, #100]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	4a18      	ldr	r2, [pc, #96]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003418:	4b16      	ldr	r3, [pc, #88]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a15      	ldr	r2, [pc, #84]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 800341e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fd fe2a 	bl	800107c <HAL_GetTick>
 8003428:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342c:	f7fd fe26 	bl	800107c <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e091      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800343e:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x71c>
 800344a:	e089      	b.n	8003560 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344c:	4b09      	ldr	r3, [pc, #36]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a08      	ldr	r2, [pc, #32]	; (8003474 <HAL_RCC_OscConfig+0x764>)
 8003452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fd fe10 	bl	800107c <HAL_GetTick>
 800345c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800345e:	e00f      	b.n	8003480 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003460:	f7fd fe0c 	bl	800107c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d908      	bls.n	8003480 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e077      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
 8003472:	bf00      	nop
 8003474:	58024400 	.word	0x58024400
 8003478:	fffffc0c 	.word	0xfffffc0c
 800347c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003480:	4b3a      	ldr	r3, [pc, #232]	; (800356c <HAL_RCC_OscConfig+0x85c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e9      	bne.n	8003460 <HAL_RCC_OscConfig+0x750>
 800348c:	e068      	b.n	8003560 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800348e:	4b37      	ldr	r3, [pc, #220]	; (800356c <HAL_RCC_OscConfig+0x85c>)
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003494:	4b35      	ldr	r3, [pc, #212]	; (800356c <HAL_RCC_OscConfig+0x85c>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d031      	beq.n	8003506 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f003 0203 	and.w	r2, r3, #3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d12a      	bne.n	8003506 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d122      	bne.n	8003506 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d11a      	bne.n	8003506 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	0a5b      	lsrs	r3, r3, #9
 80034d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034dc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034de:	429a      	cmp	r2, r3
 80034e0:	d111      	bne.n	8003506 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	0c1b      	lsrs	r3, r3, #16
 80034e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d108      	bne.n	8003506 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	0e1b      	lsrs	r3, r3, #24
 80034f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003500:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003502:	429a      	cmp	r2, r3
 8003504:	d001      	beq.n	800350a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e02b      	b.n	8003562 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800350a:	4b18      	ldr	r3, [pc, #96]	; (800356c <HAL_RCC_OscConfig+0x85c>)
 800350c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350e:	08db      	lsrs	r3, r3, #3
 8003510:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003514:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	429a      	cmp	r2, r3
 800351e:	d01f      	beq.n	8003560 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003520:	4b12      	ldr	r3, [pc, #72]	; (800356c <HAL_RCC_OscConfig+0x85c>)
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	4a11      	ldr	r2, [pc, #68]	; (800356c <HAL_RCC_OscConfig+0x85c>)
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800352c:	f7fd fda6 	bl	800107c <HAL_GetTick>
 8003530:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003532:	bf00      	nop
 8003534:	f7fd fda2 	bl	800107c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	4293      	cmp	r3, r2
 800353e:	d0f9      	beq.n	8003534 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003540:	4b0a      	ldr	r3, [pc, #40]	; (800356c <HAL_RCC_OscConfig+0x85c>)
 8003542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003544:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <HAL_RCC_OscConfig+0x860>)
 8003546:	4013      	ands	r3, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800354c:	00d2      	lsls	r2, r2, #3
 800354e:	4907      	ldr	r1, [pc, #28]	; (800356c <HAL_RCC_OscConfig+0x85c>)
 8003550:	4313      	orrs	r3, r2
 8003552:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <HAL_RCC_OscConfig+0x85c>)
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	4a04      	ldr	r2, [pc, #16]	; (800356c <HAL_RCC_OscConfig+0x85c>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3730      	adds	r7, #48	; 0x30
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	58024400 	.word	0x58024400
 8003570:	ffff0007 	.word	0xffff0007

08003574 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e19c      	b.n	80038c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003588:	4b8a      	ldr	r3, [pc, #552]	; (80037b4 <HAL_RCC_ClockConfig+0x240>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d910      	bls.n	80035b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003596:	4b87      	ldr	r3, [pc, #540]	; (80037b4 <HAL_RCC_ClockConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 020f 	bic.w	r2, r3, #15
 800359e:	4985      	ldr	r1, [pc, #532]	; (80037b4 <HAL_RCC_ClockConfig+0x240>)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a6:	4b83      	ldr	r3, [pc, #524]	; (80037b4 <HAL_RCC_ClockConfig+0x240>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e184      	b.n	80038c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d010      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	4b7b      	ldr	r3, [pc, #492]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d908      	bls.n	80035e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035d4:	4b78      	ldr	r3, [pc, #480]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	4975      	ldr	r1, [pc, #468]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d010      	beq.n	8003614 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695a      	ldr	r2, [r3, #20]
 80035f6:	4b70      	ldr	r3, [pc, #448]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035fe:	429a      	cmp	r2, r3
 8003600:	d908      	bls.n	8003614 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003602:	4b6d      	ldr	r3, [pc, #436]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	496a      	ldr	r1, [pc, #424]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003610:	4313      	orrs	r3, r2
 8003612:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b00      	cmp	r3, #0
 800361e:	d010      	beq.n	8003642 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699a      	ldr	r2, [r3, #24]
 8003624:	4b64      	ldr	r3, [pc, #400]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800362c:	429a      	cmp	r2, r3
 800362e:	d908      	bls.n	8003642 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003630:	4b61      	ldr	r3, [pc, #388]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	495e      	ldr	r1, [pc, #376]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 800363e:	4313      	orrs	r3, r2
 8003640:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b00      	cmp	r3, #0
 800364c:	d010      	beq.n	8003670 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69da      	ldr	r2, [r3, #28]
 8003652:	4b59      	ldr	r3, [pc, #356]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800365a:	429a      	cmp	r2, r3
 800365c:	d908      	bls.n	8003670 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800365e:	4b56      	ldr	r3, [pc, #344]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	4953      	ldr	r1, [pc, #332]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 800366c:	4313      	orrs	r3, r2
 800366e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	4b4d      	ldr	r3, [pc, #308]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	429a      	cmp	r2, r3
 800368a:	d908      	bls.n	800369e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800368c:	4b4a      	ldr	r3, [pc, #296]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	f023 020f 	bic.w	r2, r3, #15
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4947      	ldr	r1, [pc, #284]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 800369a:	4313      	orrs	r3, r2
 800369c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d055      	beq.n	8003756 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80036aa:	4b43      	ldr	r3, [pc, #268]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	4940      	ldr	r1, [pc, #256]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d107      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036c4:	4b3c      	ldr	r3, [pc, #240]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d121      	bne.n	8003714 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0f6      	b.n	80038c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d107      	bne.n	80036ec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036dc:	4b36      	ldr	r3, [pc, #216]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d115      	bne.n	8003714 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0ea      	b.n	80038c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d107      	bne.n	8003704 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036f4:	4b30      	ldr	r3, [pc, #192]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d109      	bne.n	8003714 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0de      	b.n	80038c2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003704:	4b2c      	ldr	r3, [pc, #176]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0d6      	b.n	80038c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003714:	4b28      	ldr	r3, [pc, #160]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f023 0207 	bic.w	r2, r3, #7
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4925      	ldr	r1, [pc, #148]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003722:	4313      	orrs	r3, r2
 8003724:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003726:	f7fd fca9 	bl	800107c <HAL_GetTick>
 800372a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372c:	e00a      	b.n	8003744 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800372e:	f7fd fca5 	bl	800107c <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	f241 3288 	movw	r2, #5000	; 0x1388
 800373c:	4293      	cmp	r3, r2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e0be      	b.n	80038c2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003744:	4b1c      	ldr	r3, [pc, #112]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	429a      	cmp	r2, r3
 8003754:	d1eb      	bne.n	800372e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d010      	beq.n	8003784 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	429a      	cmp	r2, r3
 8003770:	d208      	bcs.n	8003784 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003772:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f023 020f 	bic.w	r2, r3, #15
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	490e      	ldr	r1, [pc, #56]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003780:	4313      	orrs	r3, r2
 8003782:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <HAL_RCC_ClockConfig+0x240>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 030f 	and.w	r3, r3, #15
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d214      	bcs.n	80037bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003792:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <HAL_RCC_ClockConfig+0x240>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 020f 	bic.w	r2, r3, #15
 800379a:	4906      	ldr	r1, [pc, #24]	; (80037b4 <HAL_RCC_ClockConfig+0x240>)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a2:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <HAL_RCC_ClockConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d005      	beq.n	80037bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e086      	b.n	80038c2 <HAL_RCC_ClockConfig+0x34e>
 80037b4:	52002000 	.word	0x52002000
 80037b8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d010      	beq.n	80037ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	4b3f      	ldr	r3, [pc, #252]	; (80038cc <HAL_RCC_ClockConfig+0x358>)
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d208      	bcs.n	80037ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80037d8:	4b3c      	ldr	r3, [pc, #240]	; (80038cc <HAL_RCC_ClockConfig+0x358>)
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	4939      	ldr	r1, [pc, #228]	; (80038cc <HAL_RCC_ClockConfig+0x358>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d010      	beq.n	8003818 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	4b34      	ldr	r3, [pc, #208]	; (80038cc <HAL_RCC_ClockConfig+0x358>)
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003802:	429a      	cmp	r2, r3
 8003804:	d208      	bcs.n	8003818 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003806:	4b31      	ldr	r3, [pc, #196]	; (80038cc <HAL_RCC_ClockConfig+0x358>)
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	492e      	ldr	r1, [pc, #184]	; (80038cc <HAL_RCC_ClockConfig+0x358>)
 8003814:	4313      	orrs	r3, r2
 8003816:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b00      	cmp	r3, #0
 8003822:	d010      	beq.n	8003846 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699a      	ldr	r2, [r3, #24]
 8003828:	4b28      	ldr	r3, [pc, #160]	; (80038cc <HAL_RCC_ClockConfig+0x358>)
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003830:	429a      	cmp	r2, r3
 8003832:	d208      	bcs.n	8003846 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003834:	4b25      	ldr	r3, [pc, #148]	; (80038cc <HAL_RCC_ClockConfig+0x358>)
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	4922      	ldr	r1, [pc, #136]	; (80038cc <HAL_RCC_ClockConfig+0x358>)
 8003842:	4313      	orrs	r3, r2
 8003844:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d010      	beq.n	8003874 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69da      	ldr	r2, [r3, #28]
 8003856:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <HAL_RCC_ClockConfig+0x358>)
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800385e:	429a      	cmp	r2, r3
 8003860:	d208      	bcs.n	8003874 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003862:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <HAL_RCC_ClockConfig+0x358>)
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	4917      	ldr	r1, [pc, #92]	; (80038cc <HAL_RCC_ClockConfig+0x358>)
 8003870:	4313      	orrs	r3, r2
 8003872:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003874:	f000 f89e 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8003878:	4602      	mov	r2, r0
 800387a:	4b14      	ldr	r3, [pc, #80]	; (80038cc <HAL_RCC_ClockConfig+0x358>)
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	0a1b      	lsrs	r3, r3, #8
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	4912      	ldr	r1, [pc, #72]	; (80038d0 <HAL_RCC_ClockConfig+0x35c>)
 8003886:	5ccb      	ldrb	r3, [r1, r3]
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	fa22 f303 	lsr.w	r3, r2, r3
 8003890:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003892:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <HAL_RCC_ClockConfig+0x358>)
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	4a0d      	ldr	r2, [pc, #52]	; (80038d0 <HAL_RCC_ClockConfig+0x35c>)
 800389c:	5cd3      	ldrb	r3, [r2, r3]
 800389e:	f003 031f 	and.w	r3, r3, #31
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
 80038a8:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <HAL_RCC_ClockConfig+0x360>)
 80038aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038ac:	4a0a      	ldr	r2, [pc, #40]	; (80038d8 <HAL_RCC_ClockConfig+0x364>)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80038b2:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <HAL_RCC_ClockConfig+0x368>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fd fb96 	bl	8000fe8 <HAL_InitTick>
 80038bc:	4603      	mov	r3, r0
 80038be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	58024400 	.word	0x58024400
 80038d0:	0800f03c 	.word	0x0800f03c
 80038d4:	24000004 	.word	0x24000004
 80038d8:	24000000 	.word	0x24000000
 80038dc:	24000008 	.word	0x24000008

080038e0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08c      	sub	sp, #48	; 0x30
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d12a      	bne.n	8003948 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80038f2:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <HAL_RCC_MCOConfig+0xc8>)
 80038f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80038f8:	4a2b      	ldr	r2, [pc, #172]	; (80039a8 <HAL_RCC_MCOConfig+0xc8>)
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003902:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <HAL_RCC_MCOConfig+0xc8>)
 8003904:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003916:	2302      	movs	r3, #2
 8003918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800391a:	2303      	movs	r3, #3
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391e:	2300      	movs	r3, #0
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003922:	2300      	movs	r3, #0
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003926:	f107 031c 	add.w	r3, r7, #28
 800392a:	4619      	mov	r1, r3
 800392c:	481f      	ldr	r0, [pc, #124]	; (80039ac <HAL_RCC_MCOConfig+0xcc>)
 800392e:	f7fd fcf1 	bl	8001314 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003932:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <HAL_RCC_MCOConfig+0xc8>)
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800393a:	68b9      	ldr	r1, [r7, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	430b      	orrs	r3, r1
 8003940:	4919      	ldr	r1, [pc, #100]	; (80039a8 <HAL_RCC_MCOConfig+0xc8>)
 8003942:	4313      	orrs	r3, r2
 8003944:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8003946:	e02a      	b.n	800399e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8003948:	4b17      	ldr	r3, [pc, #92]	; (80039a8 <HAL_RCC_MCOConfig+0xc8>)
 800394a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800394e:	4a16      	ldr	r2, [pc, #88]	; (80039a8 <HAL_RCC_MCOConfig+0xc8>)
 8003950:	f043 0304 	orr.w	r3, r3, #4
 8003954:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003958:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <HAL_RCC_MCOConfig+0xc8>)
 800395a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003966:	f44f 7300 	mov.w	r3, #512	; 0x200
 800396a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396c:	2302      	movs	r3, #2
 800396e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003970:	2303      	movs	r3, #3
 8003972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003974:	2300      	movs	r3, #0
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003978:	2300      	movs	r3, #0
 800397a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800397c:	f107 031c 	add.w	r3, r7, #28
 8003980:	4619      	mov	r1, r3
 8003982:	480b      	ldr	r0, [pc, #44]	; (80039b0 <HAL_RCC_MCOConfig+0xd0>)
 8003984:	f7fd fcc6 	bl	8001314 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <HAL_RCC_MCOConfig+0xc8>)
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	01d9      	lsls	r1, r3, #7
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	430b      	orrs	r3, r1
 8003998:	4903      	ldr	r1, [pc, #12]	; (80039a8 <HAL_RCC_MCOConfig+0xc8>)
 800399a:	4313      	orrs	r3, r2
 800399c:	610b      	str	r3, [r1, #16]
}
 800399e:	bf00      	nop
 80039a0:	3730      	adds	r7, #48	; 0x30
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	58024400 	.word	0x58024400
 80039ac:	58020000 	.word	0x58020000
 80039b0:	58020800 	.word	0x58020800

080039b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b089      	sub	sp, #36	; 0x24
 80039b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ba:	4bb3      	ldr	r3, [pc, #716]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039c2:	2b18      	cmp	r3, #24
 80039c4:	f200 8155 	bhi.w	8003c72 <HAL_RCC_GetSysClockFreq+0x2be>
 80039c8:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	08003a35 	.word	0x08003a35
 80039d4:	08003c73 	.word	0x08003c73
 80039d8:	08003c73 	.word	0x08003c73
 80039dc:	08003c73 	.word	0x08003c73
 80039e0:	08003c73 	.word	0x08003c73
 80039e4:	08003c73 	.word	0x08003c73
 80039e8:	08003c73 	.word	0x08003c73
 80039ec:	08003c73 	.word	0x08003c73
 80039f0:	08003a5b 	.word	0x08003a5b
 80039f4:	08003c73 	.word	0x08003c73
 80039f8:	08003c73 	.word	0x08003c73
 80039fc:	08003c73 	.word	0x08003c73
 8003a00:	08003c73 	.word	0x08003c73
 8003a04:	08003c73 	.word	0x08003c73
 8003a08:	08003c73 	.word	0x08003c73
 8003a0c:	08003c73 	.word	0x08003c73
 8003a10:	08003a61 	.word	0x08003a61
 8003a14:	08003c73 	.word	0x08003c73
 8003a18:	08003c73 	.word	0x08003c73
 8003a1c:	08003c73 	.word	0x08003c73
 8003a20:	08003c73 	.word	0x08003c73
 8003a24:	08003c73 	.word	0x08003c73
 8003a28:	08003c73 	.word	0x08003c73
 8003a2c:	08003c73 	.word	0x08003c73
 8003a30:	08003a67 	.word	0x08003a67
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a34:	4b94      	ldr	r3, [pc, #592]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d009      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a40:	4b91      	ldr	r3, [pc, #580]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	08db      	lsrs	r3, r3, #3
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	4a90      	ldr	r2, [pc, #576]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003a52:	e111      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a54:	4b8d      	ldr	r3, [pc, #564]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a56:	61bb      	str	r3, [r7, #24]
      break;
 8003a58:	e10e      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003a5a:	4b8d      	ldr	r3, [pc, #564]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a5c:	61bb      	str	r3, [r7, #24]
      break;
 8003a5e:	e10b      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003a60:	4b8c      	ldr	r3, [pc, #560]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a62:	61bb      	str	r3, [r7, #24]
      break;
 8003a64:	e108      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a66:	4b88      	ldr	r3, [pc, #544]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003a70:	4b85      	ldr	r3, [pc, #532]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a7a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a7c:	4b82      	ldr	r3, [pc, #520]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003a86:	4b80      	ldr	r3, [pc, #512]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8a:	08db      	lsrs	r3, r3, #3
 8003a8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80e1 	beq.w	8003c6c <HAL_RCC_GetSysClockFreq+0x2b8>
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	f000 8083 	beq.w	8003bb8 <HAL_RCC_GetSysClockFreq+0x204>
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	f200 80a1 	bhi.w	8003bfc <HAL_RCC_GetSysClockFreq+0x248>
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x114>
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d056      	beq.n	8003b74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003ac6:	e099      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ac8:	4b6f      	ldr	r3, [pc, #444]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0320 	and.w	r3, r3, #32
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d02d      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ad4:	4b6c      	ldr	r3, [pc, #432]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	08db      	lsrs	r3, r3, #3
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	4a6b      	ldr	r2, [pc, #428]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	ee07 3a90 	vmov	s15, r3
 8003aec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	ee07 3a90 	vmov	s15, r3
 8003af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003afe:	4b62      	ldr	r3, [pc, #392]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b12:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003c98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003b2e:	e087      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003c9c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b42:	4b51      	ldr	r3, [pc, #324]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b56:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003c98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b72:	e065      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003ca0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b86:	4b40      	ldr	r3, [pc, #256]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003c98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bb6:	e043      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003ca4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bca:	4b2f      	ldr	r3, [pc, #188]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bde:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003c98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bfa:	e021      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c06:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003ca0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c0e:	4b1e      	ldr	r3, [pc, #120]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c22:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003c98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c3e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003c40:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	0a5b      	lsrs	r3, r3, #9
 8003c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	ee07 3a90 	vmov	s15, r3
 8003c54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c58:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c64:	ee17 3a90 	vmov	r3, s15
 8003c68:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003c6a:	e005      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61bb      	str	r3, [r7, #24]
      break;
 8003c70:	e002      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003c72:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c74:	61bb      	str	r3, [r7, #24]
      break;
 8003c76:	bf00      	nop
  }

  return sysclockfreq;
 8003c78:	69bb      	ldr	r3, [r7, #24]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3724      	adds	r7, #36	; 0x24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	58024400 	.word	0x58024400
 8003c8c:	03d09000 	.word	0x03d09000
 8003c90:	003d0900 	.word	0x003d0900
 8003c94:	016e3600 	.word	0x016e3600
 8003c98:	46000000 	.word	0x46000000
 8003c9c:	4c742400 	.word	0x4c742400
 8003ca0:	4a742400 	.word	0x4a742400
 8003ca4:	4bb71b00 	.word	0x4bb71b00

08003ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003cae:	f7ff fe81 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	4b10      	ldr	r3, [pc, #64]	; (8003cf8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	0a1b      	lsrs	r3, r3, #8
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	490f      	ldr	r1, [pc, #60]	; (8003cfc <HAL_RCC_GetHCLKFreq+0x54>)
 8003cc0:	5ccb      	ldrb	r3, [r1, r3]
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cca:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	4a09      	ldr	r2, [pc, #36]	; (8003cfc <HAL_RCC_GetHCLKFreq+0x54>)
 8003cd6:	5cd3      	ldrb	r3, [r2, r3]
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce2:	4a07      	ldr	r2, [pc, #28]	; (8003d00 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ce4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ce6:	4a07      	ldr	r2, [pc, #28]	; (8003d04 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003cec:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cee:	681b      	ldr	r3, [r3, #0]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	58024400 	.word	0x58024400
 8003cfc:	0800f03c 	.word	0x0800f03c
 8003d00:	24000004 	.word	0x24000004
 8003d04:	24000000 	.word	0x24000000

08003d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003d0c:	f7ff ffcc 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003d10:	4602      	mov	r2, r0
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	4904      	ldr	r1, [pc, #16]	; (8003d30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d1e:	5ccb      	ldrb	r3, [r1, r3]
 8003d20:	f003 031f 	and.w	r3, r3, #31
 8003d24:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	58024400 	.word	0x58024400
 8003d30:	0800f03c 	.word	0x0800f03c

08003d34 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d38:	b0c8      	sub	sp, #288	; 0x120
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d40:	2300      	movs	r3, #0
 8003d42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d46:	2300      	movs	r3, #0
 8003d48:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d54:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003d58:	2500      	movs	r5, #0
 8003d5a:	ea54 0305 	orrs.w	r3, r4, r5
 8003d5e:	d049      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d6a:	d02f      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003d6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d70:	d828      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d76:	d01a      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d7c:	d822      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d86:	d007      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d88:	e01c      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d8a:	4ba7      	ldr	r3, [pc, #668]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	4aa6      	ldr	r2, [pc, #664]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d96:	e01a      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	2102      	movs	r1, #2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f002 fac3 	bl	800632c <RCCEx_PLL2_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003dac:	e00f      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003db2:	3328      	adds	r3, #40	; 0x28
 8003db4:	2102      	movs	r1, #2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f002 fb6a 	bl	8006490 <RCCEx_PLL3_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003dc2:	e004      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003dca:	e000      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003dd6:	4b94      	ldr	r3, [pc, #592]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dda:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de4:	4a90      	ldr	r2, [pc, #576]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003de6:	430b      	orrs	r3, r1
 8003de8:	6513      	str	r3, [r2, #80]	; 0x50
 8003dea:	e003      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003df0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003e00:	f04f 0900 	mov.w	r9, #0
 8003e04:	ea58 0309 	orrs.w	r3, r8, r9
 8003e08:	d047      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d82a      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003e14:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e31 	.word	0x08003e31
 8003e20:	08003e3f 	.word	0x08003e3f
 8003e24:	08003e55 	.word	0x08003e55
 8003e28:	08003e73 	.word	0x08003e73
 8003e2c:	08003e73 	.word	0x08003e73
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e30:	4b7d      	ldr	r3, [pc, #500]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	4a7c      	ldr	r2, [pc, #496]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e3c:	e01a      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e42:	3308      	adds	r3, #8
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f002 fa70 	bl	800632c <RCCEx_PLL2_Config>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e52:	e00f      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e58:	3328      	adds	r3, #40	; 0x28
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f002 fb17 	bl	8006490 <RCCEx_PLL3_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e68:	e004      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e70:	e000      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e7c:	4b6a      	ldr	r3, [pc, #424]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e80:	f023 0107 	bic.w	r1, r3, #7
 8003e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	4a67      	ldr	r2, [pc, #412]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	6513      	str	r3, [r2, #80]	; 0x50
 8003e90:	e003      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e96:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003ea6:	f04f 0b00 	mov.w	fp, #0
 8003eaa:	ea5a 030b 	orrs.w	r3, sl, fp
 8003eae:	d054      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003eba:	d036      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003ebc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003ec0:	d82f      	bhi.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec6:	d032      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ecc:	d829      	bhi.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003ece:	2bc0      	cmp	r3, #192	; 0xc0
 8003ed0:	d02f      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003ed2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ed4:	d825      	bhi.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003ed6:	2b80      	cmp	r3, #128	; 0x80
 8003ed8:	d018      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003eda:	2b80      	cmp	r3, #128	; 0x80
 8003edc:	d821      	bhi.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003ee2:	2b40      	cmp	r3, #64	; 0x40
 8003ee4:	d007      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003ee6:	e01c      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ee8:	4b4f      	ldr	r3, [pc, #316]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	4a4e      	ldr	r2, [pc, #312]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003ef4:	e01e      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003efa:	3308      	adds	r3, #8
 8003efc:	2100      	movs	r1, #0
 8003efe:	4618      	mov	r0, r3
 8003f00:	f002 fa14 	bl	800632c <RCCEx_PLL2_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003f0a:	e013      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f10:	3328      	adds	r3, #40	; 0x28
 8003f12:	2100      	movs	r1, #0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f002 fabb 	bl	8006490 <RCCEx_PLL3_Config>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003f20:	e008      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f28:	e004      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003f2a:	bf00      	nop
 8003f2c:	e002      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003f2e:	bf00      	nop
 8003f30:	e000      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10a      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003f3c:	4b3a      	ldr	r3, [pc, #232]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f40:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4a:	4a37      	ldr	r2, [pc, #220]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	6513      	str	r3, [r2, #80]	; 0x50
 8003f50:	e003      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f56:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f62:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003f66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003f70:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003f74:	460b      	mov	r3, r1
 8003f76:	4313      	orrs	r3, r2
 8003f78:	d05c      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f80:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003f84:	d03b      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003f86:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003f8a:	d834      	bhi.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f90:	d037      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f96:	d82e      	bhi.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003f98:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f9c:	d033      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003f9e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003fa2:	d828      	bhi.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa8:	d01a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fae:	d822      	bhi.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb8:	d007      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003fba:	e01c      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fbc:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	4a19      	ldr	r2, [pc, #100]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003fc8:	e01e      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fce:	3308      	adds	r3, #8
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f002 f9aa 	bl	800632c <RCCEx_PLL2_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003fde:	e013      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fe4:	3328      	adds	r3, #40	; 0x28
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f002 fa51 	bl	8006490 <RCCEx_PLL3_Config>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003ff4:	e008      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ffc:	e004      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003ffe:	bf00      	nop
 8004000:	e002      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004002:	bf00      	nop
 8004004:	e000      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004008:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10d      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004014:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004018:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800401c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401e:	4a02      	ldr	r2, [pc, #8]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004020:	430b      	orrs	r3, r1
 8004022:	6513      	str	r3, [r2, #80]	; 0x50
 8004024:	e006      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004026:	bf00      	nop
 8004028:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004030:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004040:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004044:	2300      	movs	r3, #0
 8004046:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800404a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800404e:	460b      	mov	r3, r1
 8004050:	4313      	orrs	r3, r2
 8004052:	d03a      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405a:	2b30      	cmp	r3, #48	; 0x30
 800405c:	d01f      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800405e:	2b30      	cmp	r3, #48	; 0x30
 8004060:	d819      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004062:	2b20      	cmp	r3, #32
 8004064:	d00c      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004066:	2b20      	cmp	r3, #32
 8004068:	d815      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800406a:	2b00      	cmp	r3, #0
 800406c:	d019      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800406e:	2b10      	cmp	r3, #16
 8004070:	d111      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004072:	4bae      	ldr	r3, [pc, #696]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004076:	4aad      	ldr	r2, [pc, #692]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800407c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800407e:	e011      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004084:	3308      	adds	r3, #8
 8004086:	2102      	movs	r1, #2
 8004088:	4618      	mov	r0, r3
 800408a:	f002 f94f 	bl	800632c <RCCEx_PLL2_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004094:	e006      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800409c:	e002      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800409e:	bf00      	nop
 80040a0:	e000      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80040a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80040ac:	4b9f      	ldr	r3, [pc, #636]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80040b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ba:	4a9c      	ldr	r2, [pc, #624]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040bc:	430b      	orrs	r3, r1
 80040be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040c0:	e003      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040c6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80040ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80040d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80040da:	2300      	movs	r3, #0
 80040dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80040e0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4313      	orrs	r3, r2
 80040e8:	d051      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80040ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f4:	d035      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80040f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040fa:	d82e      	bhi.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80040fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004100:	d031      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004102:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004106:	d828      	bhi.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800410c:	d01a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800410e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004112:	d822      	bhi.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800411c:	d007      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800411e:	e01c      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004120:	4b82      	ldr	r3, [pc, #520]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	4a81      	ldr	r2, [pc, #516]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800412a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800412c:	e01c      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800412e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004132:	3308      	adds	r3, #8
 8004134:	2100      	movs	r1, #0
 8004136:	4618      	mov	r0, r3
 8004138:	f002 f8f8 	bl	800632c <RCCEx_PLL2_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004142:	e011      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004148:	3328      	adds	r3, #40	; 0x28
 800414a:	2100      	movs	r1, #0
 800414c:	4618      	mov	r0, r3
 800414e:	f002 f99f 	bl	8006490 <RCCEx_PLL3_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004158:	e006      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004160:	e002      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004162:	bf00      	nop
 8004164:	e000      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004166:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004168:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004170:	4b6e      	ldr	r3, [pc, #440]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004174:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004178:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800417c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800417e:	4a6b      	ldr	r2, [pc, #428]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004180:	430b      	orrs	r3, r1
 8004182:	6513      	str	r3, [r2, #80]	; 0x50
 8004184:	e003      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004186:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800418a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800418e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004196:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800419a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800419e:	2300      	movs	r3, #0
 80041a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80041a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80041a8:	460b      	mov	r3, r1
 80041aa:	4313      	orrs	r3, r2
 80041ac:	d053      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80041ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041b8:	d033      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80041ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041be:	d82c      	bhi.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80041c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041c4:	d02f      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80041c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041ca:	d826      	bhi.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80041cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041d0:	d02b      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80041d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041d6:	d820      	bhi.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80041d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041dc:	d012      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80041de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041e2:	d81a      	bhi.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d022      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80041e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ec:	d115      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f2:	3308      	adds	r3, #8
 80041f4:	2101      	movs	r1, #1
 80041f6:	4618      	mov	r0, r3
 80041f8:	f002 f898 	bl	800632c <RCCEx_PLL2_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004202:	e015      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004204:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004208:	3328      	adds	r3, #40	; 0x28
 800420a:	2101      	movs	r1, #1
 800420c:	4618      	mov	r0, r3
 800420e:	f002 f93f 	bl	8006490 <RCCEx_PLL3_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004218:	e00a      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004220:	e006      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004222:	bf00      	nop
 8004224:	e004      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004226:	bf00      	nop
 8004228:	e002      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800422a:	bf00      	nop
 800422c:	e000      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800422e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004230:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004238:	4b3c      	ldr	r3, [pc, #240]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800423a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004246:	4a39      	ldr	r2, [pc, #228]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004248:	430b      	orrs	r3, r1
 800424a:	6513      	str	r3, [r2, #80]	; 0x50
 800424c:	e003      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004252:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004262:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004266:	2300      	movs	r3, #0
 8004268:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800426c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004270:	460b      	mov	r3, r1
 8004272:	4313      	orrs	r3, r2
 8004274:	d060      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800427a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800427e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004282:	d039      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004284:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004288:	d832      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800428a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800428e:	d035      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004290:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004294:	d82c      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429a:	d031      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800429c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a0:	d826      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80042a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042a6:	d02d      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80042a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042ac:	d820      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80042ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042b2:	d012      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80042b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042b8:	d81a      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d024      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80042be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042c2:	d115      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042c8:	3308      	adds	r3, #8
 80042ca:	2101      	movs	r1, #1
 80042cc:	4618      	mov	r0, r3
 80042ce:	f002 f82d 	bl	800632c <RCCEx_PLL2_Config>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80042d8:	e017      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042de:	3328      	adds	r3, #40	; 0x28
 80042e0:	2101      	movs	r1, #1
 80042e2:	4618      	mov	r0, r3
 80042e4:	f002 f8d4 	bl	8006490 <RCCEx_PLL3_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80042ee:	e00c      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042f6:	e008      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80042f8:	bf00      	nop
 80042fa:	e006      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80042fc:	bf00      	nop
 80042fe:	e004      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004300:	bf00      	nop
 8004302:	e002      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004304:	bf00      	nop
 8004306:	e000      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10e      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004312:	4b06      	ldr	r3, [pc, #24]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800431a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800431e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004322:	4a02      	ldr	r2, [pc, #8]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004324:	430b      	orrs	r3, r1
 8004326:	6593      	str	r3, [r2, #88]	; 0x58
 8004328:	e006      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800432a:	bf00      	nop
 800432c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004330:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004334:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004338:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004348:	2300      	movs	r3, #0
 800434a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800434e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004352:	460b      	mov	r3, r1
 8004354:	4313      	orrs	r3, r2
 8004356:	d037      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004358:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800435c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800435e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004362:	d00e      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004368:	d816      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800436a:	2b00      	cmp	r3, #0
 800436c:	d018      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800436e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004372:	d111      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004374:	4bc4      	ldr	r3, [pc, #784]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	4ac3      	ldr	r2, [pc, #780]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800437a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800437e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004380:	e00f      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004386:	3308      	adds	r3, #8
 8004388:	2101      	movs	r1, #1
 800438a:	4618      	mov	r0, r3
 800438c:	f001 ffce 	bl	800632c <RCCEx_PLL2_Config>
 8004390:	4603      	mov	r3, r0
 8004392:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004396:	e004      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800439e:	e000      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80043a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043aa:	4bb7      	ldr	r3, [pc, #732]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80043b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043b8:	4ab3      	ldr	r2, [pc, #716]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043ba:	430b      	orrs	r3, r1
 80043bc:	6513      	str	r3, [r2, #80]	; 0x50
 80043be:	e003      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80043c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80043d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043d8:	2300      	movs	r3, #0
 80043da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80043de:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4313      	orrs	r3, r2
 80043e6:	d039      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80043e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d81c      	bhi.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80043f2:	a201      	add	r2, pc, #4	; (adr r2, 80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80043f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f8:	08004435 	.word	0x08004435
 80043fc:	08004409 	.word	0x08004409
 8004400:	08004417 	.word	0x08004417
 8004404:	08004435 	.word	0x08004435
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004408:	4b9f      	ldr	r3, [pc, #636]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	4a9e      	ldr	r2, [pc, #632]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800440e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004412:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004414:	e00f      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800441a:	3308      	adds	r3, #8
 800441c:	2102      	movs	r1, #2
 800441e:	4618      	mov	r0, r3
 8004420:	f001 ff84 	bl	800632c <RCCEx_PLL2_Config>
 8004424:	4603      	mov	r3, r0
 8004426:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800442a:	e004      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004432:	e000      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004436:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10a      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800443e:	4b92      	ldr	r3, [pc, #584]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	f023 0103 	bic.w	r1, r3, #3
 8004446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800444a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444c:	4a8e      	ldr	r2, [pc, #568]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800444e:	430b      	orrs	r3, r1
 8004450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004452:	e003      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004454:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004458:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800445c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004468:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800446c:	2300      	movs	r3, #0
 800446e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004472:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004476:	460b      	mov	r3, r1
 8004478:	4313      	orrs	r3, r2
 800447a:	f000 8099 	beq.w	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800447e:	4b83      	ldr	r3, [pc, #524]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a82      	ldr	r2, [pc, #520]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004488:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800448a:	f7fc fdf7 	bl	800107c <HAL_GetTick>
 800448e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004492:	e00b      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004494:	f7fc fdf2 	bl	800107c <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b64      	cmp	r3, #100	; 0x64
 80044a2:	d903      	bls.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044aa:	e005      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044ac:	4b77      	ldr	r3, [pc, #476]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0ed      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80044b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d173      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80044c0:	4b71      	ldr	r3, [pc, #452]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80044cc:	4053      	eors	r3, r2
 80044ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d015      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044d6:	4b6c      	ldr	r3, [pc, #432]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044e2:	4b69      	ldr	r3, [pc, #420]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	4a68      	ldr	r2, [pc, #416]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ec:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044ee:	4b66      	ldr	r3, [pc, #408]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	4a65      	ldr	r2, [pc, #404]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80044fa:	4a63      	ldr	r2, [pc, #396]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004500:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004506:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800450a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800450e:	d118      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fc fdb4 	bl	800107c <HAL_GetTick>
 8004514:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004518:	e00d      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451a:	f7fc fdaf 	bl	800107c <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004524:	1ad2      	subs	r2, r2, r3
 8004526:	f241 3388 	movw	r3, #5000	; 0x1388
 800452a:	429a      	cmp	r2, r3
 800452c:	d903      	bls.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8004534:	e005      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004536:	4b54      	ldr	r3, [pc, #336]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0eb      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004542:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004546:	2b00      	cmp	r3, #0
 8004548:	d129      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800454a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800454e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800455a:	d10e      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800455c:	4b4a      	ldr	r3, [pc, #296]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004568:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800456c:	091a      	lsrs	r2, r3, #4
 800456e:	4b48      	ldr	r3, [pc, #288]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004570:	4013      	ands	r3, r2
 8004572:	4a45      	ldr	r2, [pc, #276]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004574:	430b      	orrs	r3, r1
 8004576:	6113      	str	r3, [r2, #16]
 8004578:	e005      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800457a:	4b43      	ldr	r3, [pc, #268]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	4a42      	ldr	r2, [pc, #264]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004580:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004584:	6113      	str	r3, [r2, #16]
 8004586:	4b40      	ldr	r3, [pc, #256]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004588:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800458a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800458e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004596:	4a3c      	ldr	r2, [pc, #240]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004598:	430b      	orrs	r3, r1
 800459a:	6713      	str	r3, [r2, #112]	; 0x70
 800459c:	e008      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800459e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80045a6:	e003      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80045b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	f002 0301 	and.w	r3, r2, #1
 80045bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045c0:	2300      	movs	r3, #0
 80045c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f000 8090 	beq.w	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80045d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045da:	2b28      	cmp	r3, #40	; 0x28
 80045dc:	d870      	bhi.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80045de:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80045e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e4:	080046c9 	.word	0x080046c9
 80045e8:	080046c1 	.word	0x080046c1
 80045ec:	080046c1 	.word	0x080046c1
 80045f0:	080046c1 	.word	0x080046c1
 80045f4:	080046c1 	.word	0x080046c1
 80045f8:	080046c1 	.word	0x080046c1
 80045fc:	080046c1 	.word	0x080046c1
 8004600:	080046c1 	.word	0x080046c1
 8004604:	08004695 	.word	0x08004695
 8004608:	080046c1 	.word	0x080046c1
 800460c:	080046c1 	.word	0x080046c1
 8004610:	080046c1 	.word	0x080046c1
 8004614:	080046c1 	.word	0x080046c1
 8004618:	080046c1 	.word	0x080046c1
 800461c:	080046c1 	.word	0x080046c1
 8004620:	080046c1 	.word	0x080046c1
 8004624:	080046ab 	.word	0x080046ab
 8004628:	080046c1 	.word	0x080046c1
 800462c:	080046c1 	.word	0x080046c1
 8004630:	080046c1 	.word	0x080046c1
 8004634:	080046c1 	.word	0x080046c1
 8004638:	080046c1 	.word	0x080046c1
 800463c:	080046c1 	.word	0x080046c1
 8004640:	080046c1 	.word	0x080046c1
 8004644:	080046c9 	.word	0x080046c9
 8004648:	080046c1 	.word	0x080046c1
 800464c:	080046c1 	.word	0x080046c1
 8004650:	080046c1 	.word	0x080046c1
 8004654:	080046c1 	.word	0x080046c1
 8004658:	080046c1 	.word	0x080046c1
 800465c:	080046c1 	.word	0x080046c1
 8004660:	080046c1 	.word	0x080046c1
 8004664:	080046c9 	.word	0x080046c9
 8004668:	080046c1 	.word	0x080046c1
 800466c:	080046c1 	.word	0x080046c1
 8004670:	080046c1 	.word	0x080046c1
 8004674:	080046c1 	.word	0x080046c1
 8004678:	080046c1 	.word	0x080046c1
 800467c:	080046c1 	.word	0x080046c1
 8004680:	080046c1 	.word	0x080046c1
 8004684:	080046c9 	.word	0x080046c9
 8004688:	58024400 	.word	0x58024400
 800468c:	58024800 	.word	0x58024800
 8004690:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004698:	3308      	adds	r3, #8
 800469a:	2101      	movs	r1, #1
 800469c:	4618      	mov	r0, r3
 800469e:	f001 fe45 	bl	800632c <RCCEx_PLL2_Config>
 80046a2:	4603      	mov	r3, r0
 80046a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80046a8:	e00f      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ae:	3328      	adds	r3, #40	; 0x28
 80046b0:	2101      	movs	r1, #1
 80046b2:	4618      	mov	r0, r3
 80046b4:	f001 feec 	bl	8006490 <RCCEx_PLL3_Config>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80046be:	e004      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80046c6:	e000      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80046c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10b      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80046d2:	4bc0      	ldr	r3, [pc, #768]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80046da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e2:	4abc      	ldr	r2, [pc, #752]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046e4:	430b      	orrs	r3, r1
 80046e6:	6553      	str	r3, [r2, #84]	; 0x54
 80046e8:	e003      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80046f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fa:	f002 0302 	and.w	r3, r2, #2
 80046fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004702:	2300      	movs	r3, #0
 8004704:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004708:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800470c:	460b      	mov	r3, r1
 800470e:	4313      	orrs	r3, r2
 8004710:	d043      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800471a:	2b05      	cmp	r3, #5
 800471c:	d824      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800471e:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004724:	08004771 	.word	0x08004771
 8004728:	0800473d 	.word	0x0800473d
 800472c:	08004753 	.word	0x08004753
 8004730:	08004771 	.word	0x08004771
 8004734:	08004771 	.word	0x08004771
 8004738:	08004771 	.word	0x08004771
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800473c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004740:	3308      	adds	r3, #8
 8004742:	2101      	movs	r1, #1
 8004744:	4618      	mov	r0, r3
 8004746:	f001 fdf1 	bl	800632c <RCCEx_PLL2_Config>
 800474a:	4603      	mov	r3, r0
 800474c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004750:	e00f      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004756:	3328      	adds	r3, #40	; 0x28
 8004758:	2101      	movs	r1, #1
 800475a:	4618      	mov	r0, r3
 800475c:	f001 fe98 	bl	8006490 <RCCEx_PLL3_Config>
 8004760:	4603      	mov	r3, r0
 8004762:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004766:	e004      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800476e:	e000      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004772:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10b      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800477a:	4b96      	ldr	r3, [pc, #600]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800477c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477e:	f023 0107 	bic.w	r1, r3, #7
 8004782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800478a:	4a92      	ldr	r2, [pc, #584]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800478c:	430b      	orrs	r3, r1
 800478e:	6553      	str	r3, [r2, #84]	; 0x54
 8004790:	e003      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004792:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004796:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800479a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a2:	f002 0304 	and.w	r3, r2, #4
 80047a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047aa:	2300      	movs	r3, #0
 80047ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047b0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80047b4:	460b      	mov	r3, r1
 80047b6:	4313      	orrs	r3, r2
 80047b8:	d043      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80047ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	d824      	bhi.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80047c6:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80047c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047cc:	08004819 	.word	0x08004819
 80047d0:	080047e5 	.word	0x080047e5
 80047d4:	080047fb 	.word	0x080047fb
 80047d8:	08004819 	.word	0x08004819
 80047dc:	08004819 	.word	0x08004819
 80047e0:	08004819 	.word	0x08004819
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e8:	3308      	adds	r3, #8
 80047ea:	2101      	movs	r1, #1
 80047ec:	4618      	mov	r0, r3
 80047ee:	f001 fd9d 	bl	800632c <RCCEx_PLL2_Config>
 80047f2:	4603      	mov	r3, r0
 80047f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80047f8:	e00f      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047fe:	3328      	adds	r3, #40	; 0x28
 8004800:	2101      	movs	r1, #1
 8004802:	4618      	mov	r0, r3
 8004804:	f001 fe44 	bl	8006490 <RCCEx_PLL3_Config>
 8004808:	4603      	mov	r3, r0
 800480a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800480e:	e004      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004816:	e000      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800481a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10b      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004822:	4b6c      	ldr	r3, [pc, #432]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004826:	f023 0107 	bic.w	r1, r3, #7
 800482a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800482e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004832:	4a68      	ldr	r2, [pc, #416]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004834:	430b      	orrs	r3, r1
 8004836:	6593      	str	r3, [r2, #88]	; 0x58
 8004838:	e003      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800483e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484a:	f002 0320 	and.w	r3, r2, #32
 800484e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004852:	2300      	movs	r3, #0
 8004854:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004858:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800485c:	460b      	mov	r3, r1
 800485e:	4313      	orrs	r3, r2
 8004860:	d055      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004866:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800486a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800486e:	d033      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004874:	d82c      	bhi.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487a:	d02f      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800487c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004880:	d826      	bhi.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004882:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004886:	d02b      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004888:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800488c:	d820      	bhi.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800488e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004892:	d012      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004898:	d81a      	bhi.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d022      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800489e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048a2:	d115      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a8:	3308      	adds	r3, #8
 80048aa:	2100      	movs	r1, #0
 80048ac:	4618      	mov	r0, r3
 80048ae:	f001 fd3d 	bl	800632c <RCCEx_PLL2_Config>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80048b8:	e015      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048be:	3328      	adds	r3, #40	; 0x28
 80048c0:	2102      	movs	r1, #2
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 fde4 	bl	8006490 <RCCEx_PLL3_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80048ce:	e00a      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80048d6:	e006      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80048d8:	bf00      	nop
 80048da:	e004      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80048dc:	bf00      	nop
 80048de:	e002      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80048e0:	bf00      	nop
 80048e2:	e000      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80048e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10b      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ee:	4b39      	ldr	r3, [pc, #228]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80048f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048fe:	4a35      	ldr	r2, [pc, #212]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004900:	430b      	orrs	r3, r1
 8004902:	6553      	str	r3, [r2, #84]	; 0x54
 8004904:	e003      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004906:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800490a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800490e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004916:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800491a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800491e:	2300      	movs	r3, #0
 8004920:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004924:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004928:	460b      	mov	r3, r1
 800492a:	4313      	orrs	r3, r2
 800492c:	d058      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800492e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004932:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004936:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800493a:	d033      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800493c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004940:	d82c      	bhi.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004946:	d02f      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800494c:	d826      	bhi.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800494e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004952:	d02b      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004954:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004958:	d820      	bhi.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800495a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800495e:	d012      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004964:	d81a      	bhi.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d022      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800496a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800496e:	d115      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004974:	3308      	adds	r3, #8
 8004976:	2100      	movs	r1, #0
 8004978:	4618      	mov	r0, r3
 800497a:	f001 fcd7 	bl	800632c <RCCEx_PLL2_Config>
 800497e:	4603      	mov	r3, r0
 8004980:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004984:	e015      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800498a:	3328      	adds	r3, #40	; 0x28
 800498c:	2102      	movs	r1, #2
 800498e:	4618      	mov	r0, r3
 8004990:	f001 fd7e 	bl	8006490 <RCCEx_PLL3_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800499a:	e00a      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80049a2:	e006      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80049a4:	bf00      	nop
 80049a6:	e004      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80049a8:	bf00      	nop
 80049aa:	e002      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80049ac:	bf00      	nop
 80049ae:	e000      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80049b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10e      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80049bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049be:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80049c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049ca:	4a02      	ldr	r2, [pc, #8]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80049cc:	430b      	orrs	r3, r1
 80049ce:	6593      	str	r3, [r2, #88]	; 0x58
 80049d0:	e006      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80049d2:	bf00      	nop
 80049d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80049e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80049ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049f0:	2300      	movs	r3, #0
 80049f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049f6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80049fa:	460b      	mov	r3, r1
 80049fc:	4313      	orrs	r3, r2
 80049fe:	d055      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a08:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004a0c:	d033      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004a0e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004a12:	d82c      	bhi.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a18:	d02f      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a1e:	d826      	bhi.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004a20:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004a24:	d02b      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004a26:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004a2a:	d820      	bhi.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a30:	d012      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a36:	d81a      	bhi.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d022      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a40:	d115      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a46:	3308      	adds	r3, #8
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f001 fc6e 	bl	800632c <RCCEx_PLL2_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004a56:	e015      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a5c:	3328      	adds	r3, #40	; 0x28
 8004a5e:	2102      	movs	r1, #2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f001 fd15 	bl	8006490 <RCCEx_PLL3_Config>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004a6c:	e00a      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a74:	e006      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004a76:	bf00      	nop
 8004a78:	e004      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004a7a:	bf00      	nop
 8004a7c:	e002      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004a7e:	bf00      	nop
 8004a80:	e000      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10b      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004a8c:	4ba1      	ldr	r3, [pc, #644]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a90:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a9c:	4a9d      	ldr	r2, [pc, #628]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a9e:	430b      	orrs	r3, r1
 8004aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8004aa2:	e003      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004aa8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	f002 0308 	and.w	r3, r2, #8
 8004ab8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004abc:	2300      	movs	r3, #0
 8004abe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ac2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	d01e      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad8:	d10c      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ade:	3328      	adds	r3, #40	; 0x28
 8004ae0:	2102      	movs	r1, #2
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f001 fcd4 	bl	8006490 <RCCEx_PLL3_Config>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004af4:	4b87      	ldr	r3, [pc, #540]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b04:	4a83      	ldr	r2, [pc, #524]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b06:	430b      	orrs	r3, r1
 8004b08:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	f002 0310 	and.w	r3, r2, #16
 8004b16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004b20:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004b24:	460b      	mov	r3, r1
 8004b26:	4313      	orrs	r3, r2
 8004b28:	d01e      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b36:	d10c      	bne.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b3c:	3328      	adds	r3, #40	; 0x28
 8004b3e:	2102      	movs	r1, #2
 8004b40:	4618      	mov	r0, r3
 8004b42:	f001 fca5 	bl	8006490 <RCCEx_PLL3_Config>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b52:	4b70      	ldr	r3, [pc, #448]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b62:	4a6c      	ldr	r2, [pc, #432]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b64:	430b      	orrs	r3, r1
 8004b66:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004b74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b7e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004b82:	460b      	mov	r3, r1
 8004b84:	4313      	orrs	r3, r2
 8004b86:	d03e      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b94:	d022      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004b96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b9a:	d81b      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba4:	d00b      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004ba6:	e015      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bac:	3308      	adds	r3, #8
 8004bae:	2100      	movs	r1, #0
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f001 fbbb 	bl	800632c <RCCEx_PLL2_Config>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004bbc:	e00f      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc2:	3328      	adds	r3, #40	; 0x28
 8004bc4:	2102      	movs	r1, #2
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f001 fc62 	bl	8006490 <RCCEx_PLL3_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004bd2:	e004      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004bda:	e000      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bde:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10b      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004be6:	4b4b      	ldr	r3, [pc, #300]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004bf6:	4a47      	ldr	r2, [pc, #284]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8004bfc:	e003      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c02:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004c12:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c14:	2300      	movs	r3, #0
 8004c16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c18:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	d03b      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c2e:	d01f      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004c30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c34:	d818      	bhi.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004c36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c3a:	d003      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004c3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c40:	d007      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004c42:	e011      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c44:	4b33      	ldr	r3, [pc, #204]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	4a32      	ldr	r2, [pc, #200]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004c50:	e00f      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c56:	3328      	adds	r3, #40	; 0x28
 8004c58:	2101      	movs	r1, #1
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f001 fc18 	bl	8006490 <RCCEx_PLL3_Config>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004c66:	e004      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c6e:	e000      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10b      	bne.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c7a:	4b26      	ldr	r3, [pc, #152]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8a:	4a22      	ldr	r2, [pc, #136]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c8c:	430b      	orrs	r3, r1
 8004c8e:	6553      	str	r3, [r2, #84]	; 0x54
 8004c90:	e003      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c96:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004ca6:	673b      	str	r3, [r7, #112]	; 0x70
 8004ca8:	2300      	movs	r3, #0
 8004caa:	677b      	str	r3, [r7, #116]	; 0x74
 8004cac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	d034      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc4:	d007      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004cc6:	e011      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cc8:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	4a11      	ldr	r2, [pc, #68]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004cd4:	e00e      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cda:	3308      	adds	r3, #8
 8004cdc:	2102      	movs	r1, #2
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f001 fb24 	bl	800632c <RCCEx_PLL2_Config>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004cea:	e003      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004cf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cf4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10d      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004cfc:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0a:	4a02      	ldr	r2, [pc, #8]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d0c:	430b      	orrs	r3, r1
 8004d0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d10:	e006      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004d12:	bf00      	nop
 8004d14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004d2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d2e:	2300      	movs	r3, #0
 8004d30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d32:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004d36:	460b      	mov	r3, r1
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	d00c      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d40:	3328      	adds	r3, #40	; 0x28
 8004d42:	2102      	movs	r1, #2
 8004d44:	4618      	mov	r0, r3
 8004d46:	f001 fba3 	bl	8006490 <RCCEx_PLL3_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004d62:	663b      	str	r3, [r7, #96]	; 0x60
 8004d64:	2300      	movs	r3, #0
 8004d66:	667b      	str	r3, [r7, #100]	; 0x64
 8004d68:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	d038      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d7e:	d018      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004d80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d84:	d811      	bhi.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8a:	d014      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d90:	d80b      	bhi.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d011      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d9a:	d106      	bne.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d9c:	4bc3      	ldr	r3, [pc, #780]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	4ac2      	ldr	r2, [pc, #776]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004da6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004da8:	e008      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004db0:	e004      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004db2:	bf00      	nop
 8004db4:	e002      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004db6:	bf00      	nop
 8004db8:	e000      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004dba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10b      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004dc4:	4bb9      	ldr	r3, [pc, #740]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd4:	4ab5      	ldr	r2, [pc, #724]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dd6:	430b      	orrs	r3, r1
 8004dd8:	6553      	str	r3, [r2, #84]	; 0x54
 8004dda:	e003      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ddc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004de0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dec:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004df0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004df2:	2300      	movs	r3, #0
 8004df4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004df6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	d009      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e00:	4baa      	ldr	r3, [pc, #680]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e04:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e0e:	4aa7      	ldr	r2, [pc, #668]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e10:	430b      	orrs	r3, r1
 8004e12:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004e20:	653b      	str	r3, [r7, #80]	; 0x50
 8004e22:	2300      	movs	r3, #0
 8004e24:	657b      	str	r3, [r7, #84]	; 0x54
 8004e26:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	d009      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e30:	4b9e      	ldr	r3, [pc, #632]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e34:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3e:	4a9b      	ldr	r2, [pc, #620]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e40:	430b      	orrs	r3, r1
 8004e42:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004e50:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e52:	2300      	movs	r3, #0
 8004e54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e56:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	d009      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004e60:	4b92      	ldr	r3, [pc, #584]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e64:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6e:	4a8f      	ldr	r2, [pc, #572]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e70:	430b      	orrs	r3, r1
 8004e72:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004e80:	643b      	str	r3, [r7, #64]	; 0x40
 8004e82:	2300      	movs	r3, #0
 8004e84:	647b      	str	r3, [r7, #68]	; 0x44
 8004e86:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	d00e      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e90:	4b86      	ldr	r3, [pc, #536]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	4a85      	ldr	r2, [pc, #532]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e9a:	6113      	str	r3, [r2, #16]
 8004e9c:	4b83      	ldr	r3, [pc, #524]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e9e:	6919      	ldr	r1, [r3, #16]
 8004ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ea4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004ea8:	4a80      	ldr	r2, [pc, #512]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004eba:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ec0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	d009      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004eca:	4b78      	ldr	r3, [pc, #480]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ece:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed8:	4a74      	ldr	r2, [pc, #464]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004eda:	430b      	orrs	r3, r1
 8004edc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004eea:	633b      	str	r3, [r7, #48]	; 0x30
 8004eec:	2300      	movs	r3, #0
 8004eee:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004efa:	4b6c      	ldr	r3, [pc, #432]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efe:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f0a:	4a68      	ldr	r2, [pc, #416]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004f10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f18:	2100      	movs	r1, #0
 8004f1a:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f22:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004f26:	460b      	mov	r3, r1
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	d011      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f30:	3308      	adds	r3, #8
 8004f32:	2100      	movs	r1, #0
 8004f34:	4618      	mov	r0, r3
 8004f36:	f001 f9f9 	bl	800632c <RCCEx_PLL2_Config>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004f40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f4c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	2100      	movs	r1, #0
 8004f5a:	6239      	str	r1, [r7, #32]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
 8004f62:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004f66:	460b      	mov	r3, r1
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	d011      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f70:	3308      	adds	r3, #8
 8004f72:	2101      	movs	r1, #1
 8004f74:	4618      	mov	r0, r3
 8004f76:	f001 f9d9 	bl	800632c <RCCEx_PLL2_Config>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004f80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f8c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	2100      	movs	r1, #0
 8004f9a:	61b9      	str	r1, [r7, #24]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	61fb      	str	r3, [r7, #28]
 8004fa2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	d011      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb0:	3308      	adds	r3, #8
 8004fb2:	2102      	movs	r1, #2
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f001 f9b9 	bl	800632c <RCCEx_PLL2_Config>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004fc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fcc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd8:	2100      	movs	r1, #0
 8004fda:	6139      	str	r1, [r7, #16]
 8004fdc:	f003 0308 	and.w	r3, r3, #8
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	d011      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff0:	3328      	adds	r3, #40	; 0x28
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f001 fa4b 	bl	8006490 <RCCEx_PLL3_Config>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8005000:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005008:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800500c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005010:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005018:	2100      	movs	r1, #0
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	f003 0310 	and.w	r3, r3, #16
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005026:	460b      	mov	r3, r1
 8005028:	4313      	orrs	r3, r2
 800502a:	d011      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800502c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005030:	3328      	adds	r3, #40	; 0x28
 8005032:	2101      	movs	r1, #1
 8005034:	4618      	mov	r0, r3
 8005036:	f001 fa2b 	bl	8006490 <RCCEx_PLL3_Config>
 800503a:	4603      	mov	r3, r0
 800503c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005040:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005048:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800504c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005058:	2100      	movs	r1, #0
 800505a:	6039      	str	r1, [r7, #0]
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	607b      	str	r3, [r7, #4]
 8005062:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005066:	460b      	mov	r3, r1
 8005068:	4313      	orrs	r3, r2
 800506a:	d011      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800506c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005070:	3328      	adds	r3, #40	; 0x28
 8005072:	2102      	movs	r1, #2
 8005074:	4618      	mov	r0, r3
 8005076:	f001 fa0b 	bl	8006490 <RCCEx_PLL3_Config>
 800507a:	4603      	mov	r3, r0
 800507c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005080:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005088:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800508c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8005090:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005098:	2300      	movs	r3, #0
 800509a:	e000      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
}
 800509e:	4618      	mov	r0, r3
 80050a0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80050a4:	46bd      	mov	sp, r7
 80050a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050aa:	bf00      	nop
 80050ac:	58024400 	.word	0x58024400

080050b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b090      	sub	sp, #64	; 0x40
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80050ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050be:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80050c2:	430b      	orrs	r3, r1
 80050c4:	f040 8094 	bne.w	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80050c8:	4b97      	ldr	r3, [pc, #604]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80050ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	2b04      	cmp	r3, #4
 80050d6:	f200 8087 	bhi.w	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80050da:	a201      	add	r2, pc, #4	; (adr r2, 80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	080050f5 	.word	0x080050f5
 80050e4:	0800511d 	.word	0x0800511d
 80050e8:	08005145 	.word	0x08005145
 80050ec:	080051e1 	.word	0x080051e1
 80050f0:	0800516d 	.word	0x0800516d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050f4:	4b8c      	ldr	r3, [pc, #560]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005100:	d108      	bne.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005106:	4618      	mov	r0, r3
 8005108:	f000 ff68 	bl	8005fdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005110:	f000 bc97 	b.w	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005114:	2300      	movs	r3, #0
 8005116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005118:	f000 bc93 	b.w	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800511c:	4b82      	ldr	r3, [pc, #520]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005128:	d108      	bne.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800512a:	f107 0318 	add.w	r3, r7, #24
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fcac 	bl	8005a8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005138:	f000 bc83 	b.w	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005140:	f000 bc7f 	b.w	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005144:	4b78      	ldr	r3, [pc, #480]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800514c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005150:	d108      	bne.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005152:	f107 030c 	add.w	r3, r7, #12
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fdec 	bl	8005d34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005160:	f000 bc6f 	b.w	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005164:	2300      	movs	r3, #0
 8005166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005168:	f000 bc6b 	b.w	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800516c:	4b6e      	ldr	r3, [pc, #440]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800516e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005170:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005174:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005176:	4b6c      	ldr	r3, [pc, #432]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0304 	and.w	r3, r3, #4
 800517e:	2b04      	cmp	r3, #4
 8005180:	d10c      	bne.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005184:	2b00      	cmp	r3, #0
 8005186:	d109      	bne.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005188:	4b67      	ldr	r3, [pc, #412]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	08db      	lsrs	r3, r3, #3
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	4a66      	ldr	r2, [pc, #408]	; (800532c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005194:	fa22 f303 	lsr.w	r3, r2, r3
 8005198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800519a:	e01f      	b.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800519c:	4b62      	ldr	r3, [pc, #392]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a8:	d106      	bne.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80051aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051b0:	d102      	bne.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80051b2:	4b5f      	ldr	r3, [pc, #380]	; (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80051b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051b6:	e011      	b.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051b8:	4b5b      	ldr	r3, [pc, #364]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051c4:	d106      	bne.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80051c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051cc:	d102      	bne.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80051ce:	4b59      	ldr	r3, [pc, #356]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80051d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051d2:	e003      	b.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80051d4:	2300      	movs	r3, #0
 80051d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80051d8:	f000 bc33 	b.w	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80051dc:	f000 bc31 	b.w	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80051e0:	4b55      	ldr	r3, [pc, #340]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80051e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051e4:	f000 bc2d 	b.w	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051ec:	f000 bc29 	b.w	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80051f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051f4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80051f8:	430b      	orrs	r3, r1
 80051fa:	f040 809f 	bne.w	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 80051fe:	4b4a      	ldr	r3, [pc, #296]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005202:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005206:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800520e:	d04d      	beq.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005216:	f200 8084 	bhi.w	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800521a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521c:	2bc0      	cmp	r3, #192	; 0xc0
 800521e:	d07d      	beq.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	2bc0      	cmp	r3, #192	; 0xc0
 8005224:	d87d      	bhi.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	2b80      	cmp	r3, #128	; 0x80
 800522a:	d02d      	beq.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800522c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522e:	2b80      	cmp	r3, #128	; 0x80
 8005230:	d877      	bhi.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523a:	2b40      	cmp	r3, #64	; 0x40
 800523c:	d012      	beq.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800523e:	e070      	b.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005240:	4b39      	ldr	r3, [pc, #228]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005248:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800524c:	d107      	bne.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800524e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fec2 	bl	8005fdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800525c:	e3f1      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005262:	e3ee      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005264:	4b30      	ldr	r3, [pc, #192]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800526c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005270:	d107      	bne.n	8005282 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005272:	f107 0318 	add.w	r3, r7, #24
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fc08 	bl	8005a8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005280:	e3df      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005282:	2300      	movs	r3, #0
 8005284:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005286:	e3dc      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005288:	4b27      	ldr	r3, [pc, #156]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005294:	d107      	bne.n	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005296:	f107 030c 	add.w	r3, r7, #12
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fd4a 	bl	8005d34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052a4:	e3cd      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80052a6:	2300      	movs	r3, #0
 80052a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052aa:	e3ca      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80052ac:	4b1e      	ldr	r3, [pc, #120]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052b4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052b6:	4b1c      	ldr	r3, [pc, #112]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0304 	and.w	r3, r3, #4
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d10c      	bne.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80052c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d109      	bne.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052c8:	4b17      	ldr	r3, [pc, #92]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	08db      	lsrs	r3, r3, #3
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	4a16      	ldr	r2, [pc, #88]	; (800532c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
 80052d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052da:	e01e      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052dc:	4b12      	ldr	r3, [pc, #72]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e8:	d106      	bne.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80052ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052f0:	d102      	bne.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80052f2:	4b0f      	ldr	r3, [pc, #60]	; (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80052f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f6:	e010      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052f8:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005300:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005304:	d106      	bne.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800530c:	d102      	bne.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800530e:	4b09      	ldr	r3, [pc, #36]	; (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005310:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005312:	e002      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005318:	e393      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800531a:	e392      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800531c:	4b06      	ldr	r3, [pc, #24]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800531e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005320:	e38f      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005322:	2300      	movs	r3, #0
 8005324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005326:	e38c      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005328:	58024400 	.word	0x58024400
 800532c:	03d09000 	.word	0x03d09000
 8005330:	003d0900 	.word	0x003d0900
 8005334:	016e3600 	.word	0x016e3600
 8005338:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800533c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005340:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005344:	430b      	orrs	r3, r1
 8005346:	f040 809c 	bne.w	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800534a:	4b9e      	ldr	r3, [pc, #632]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800534c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800534e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8005352:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800535a:	d054      	beq.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005362:	f200 808b 	bhi.w	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800536c:	f000 8083 	beq.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005376:	f200 8081 	bhi.w	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800537a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005380:	d02f      	beq.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005388:	d878      	bhi.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	2b00      	cmp	r3, #0
 800538e:	d004      	beq.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005396:	d012      	beq.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8005398:	e070      	b.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800539a:	4b8a      	ldr	r3, [pc, #552]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053a6:	d107      	bne.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fe15 	bl	8005fdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053b6:	e344      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053bc:	e341      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053be:	4b81      	ldr	r3, [pc, #516]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ca:	d107      	bne.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053cc:	f107 0318 	add.w	r3, r7, #24
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 fb5b 	bl	8005a8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053da:	e332      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80053dc:	2300      	movs	r3, #0
 80053de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053e0:	e32f      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053e2:	4b78      	ldr	r3, [pc, #480]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ee:	d107      	bne.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053f0:	f107 030c 	add.w	r3, r7, #12
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 fc9d 	bl	8005d34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053fe:	e320      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005400:	2300      	movs	r3, #0
 8005402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005404:	e31d      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005406:	4b6f      	ldr	r3, [pc, #444]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800540e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005410:	4b6c      	ldr	r3, [pc, #432]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b04      	cmp	r3, #4
 800541a:	d10c      	bne.n	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800541c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541e:	2b00      	cmp	r3, #0
 8005420:	d109      	bne.n	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005422:	4b68      	ldr	r3, [pc, #416]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	08db      	lsrs	r3, r3, #3
 8005428:	f003 0303 	and.w	r3, r3, #3
 800542c:	4a66      	ldr	r2, [pc, #408]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800542e:	fa22 f303 	lsr.w	r3, r2, r3
 8005432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005434:	e01e      	b.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005436:	4b63      	ldr	r3, [pc, #396]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005442:	d106      	bne.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800544a:	d102      	bne.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800544c:	4b5f      	ldr	r3, [pc, #380]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800544e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005450:	e010      	b.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005452:	4b5c      	ldr	r3, [pc, #368]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800545e:	d106      	bne.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005466:	d102      	bne.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005468:	4b59      	ldr	r3, [pc, #356]	; (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800546a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800546c:	e002      	b.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8005472:	e2e6      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005474:	e2e5      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005476:	4b57      	ldr	r3, [pc, #348]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005478:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800547a:	e2e2      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800547c:	2300      	movs	r3, #0
 800547e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005480:	e2df      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005486:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800548a:	430b      	orrs	r3, r1
 800548c:	f040 80a7 	bne.w	80055de <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005490:	4b4c      	ldr	r3, [pc, #304]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005494:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005498:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054a0:	d055      	beq.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80054a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054a8:	f200 8096 	bhi.w	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80054ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054b2:	f000 8084 	beq.w	80055be <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80054b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054bc:	f200 808c 	bhi.w	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80054c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c6:	d030      	beq.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80054c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ce:	f200 8083 	bhi.w	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80054d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d004      	beq.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80054d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054de:	d012      	beq.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80054e0:	e07a      	b.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054e2:	4b38      	ldr	r3, [pc, #224]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054ee:	d107      	bne.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 fd71 	bl	8005fdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054fe:	e2a0      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005500:	2300      	movs	r3, #0
 8005502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005504:	e29d      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005506:	4b2f      	ldr	r3, [pc, #188]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800550e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005512:	d107      	bne.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005514:	f107 0318 	add.w	r3, r7, #24
 8005518:	4618      	mov	r0, r3
 800551a:	f000 fab7 	bl	8005a8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005522:	e28e      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005528:	e28b      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800552a:	4b26      	ldr	r3, [pc, #152]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005536:	d107      	bne.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005538:	f107 030c 	add.w	r3, r7, #12
 800553c:	4618      	mov	r0, r3
 800553e:	f000 fbf9 	bl	8005d34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005546:	e27c      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800554c:	e279      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800554e:	4b1d      	ldr	r3, [pc, #116]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005552:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005556:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005558:	4b1a      	ldr	r3, [pc, #104]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b04      	cmp	r3, #4
 8005562:	d10c      	bne.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8005564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005566:	2b00      	cmp	r3, #0
 8005568:	d109      	bne.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800556a:	4b16      	ldr	r3, [pc, #88]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	08db      	lsrs	r3, r3, #3
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	4a14      	ldr	r2, [pc, #80]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005576:	fa22 f303 	lsr.w	r3, r2, r3
 800557a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800557c:	e01e      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800557e:	4b11      	ldr	r3, [pc, #68]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558a:	d106      	bne.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800558c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005592:	d102      	bne.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005594:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8005596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005598:	e010      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800559a:	4b0a      	ldr	r3, [pc, #40]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055a6:	d106      	bne.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80055a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ae:	d102      	bne.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80055b0:	4b07      	ldr	r3, [pc, #28]	; (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80055b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b4:	e002      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80055b6:	2300      	movs	r3, #0
 80055b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80055ba:	e242      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80055bc:	e241      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80055be:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80055c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055c2:	e23e      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80055c4:	58024400 	.word	0x58024400
 80055c8:	03d09000 	.word	0x03d09000
 80055cc:	003d0900 	.word	0x003d0900
 80055d0:	016e3600 	.word	0x016e3600
 80055d4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055dc:	e231      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80055de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055e2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80055e6:	430b      	orrs	r3, r1
 80055e8:	f040 8085 	bne.w	80056f6 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80055ec:	4b9c      	ldr	r3, [pc, #624]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80055ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80055f4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80055f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055fc:	d06b      	beq.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80055fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005604:	d874      	bhi.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005608:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800560c:	d056      	beq.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005614:	d86c      	bhi.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800561c:	d03b      	beq.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005620:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005624:	d864      	bhi.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800562c:	d021      	beq.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800562e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005630:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005634:	d85c      	bhi.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005638:	2b00      	cmp	r3, #0
 800563a:	d004      	beq.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800563c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005642:	d004      	beq.n	800564e <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8005644:	e054      	b.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005646:	f7fe fb5f 	bl	8003d08 <HAL_RCC_GetPCLK1Freq>
 800564a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800564c:	e1f9      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800564e:	4b84      	ldr	r3, [pc, #528]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800565a:	d107      	bne.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800565c:	f107 0318 	add.w	r3, r7, #24
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fa13 	bl	8005a8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800566a:	e1ea      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005670:	e1e7      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005672:	4b7b      	ldr	r3, [pc, #492]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800567a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800567e:	d107      	bne.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005680:	f107 030c 	add.w	r3, r7, #12
 8005684:	4618      	mov	r0, r3
 8005686:	f000 fb55 	bl	8005d34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800568e:	e1d8      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005690:	2300      	movs	r3, #0
 8005692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005694:	e1d5      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005696:	4b72      	ldr	r3, [pc, #456]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d109      	bne.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056a2:	4b6f      	ldr	r3, [pc, #444]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	08db      	lsrs	r3, r3, #3
 80056a8:	f003 0303 	and.w	r3, r3, #3
 80056ac:	4a6d      	ldr	r2, [pc, #436]	; (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80056ae:	fa22 f303 	lsr.w	r3, r2, r3
 80056b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056b4:	e1c5      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056ba:	e1c2      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80056bc:	4b68      	ldr	r3, [pc, #416]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c8:	d102      	bne.n	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80056ca:	4b67      	ldr	r3, [pc, #412]	; (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80056cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056ce:	e1b8      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056d4:	e1b5      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80056d6:	4b62      	ldr	r3, [pc, #392]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056e2:	d102      	bne.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80056e4:	4b61      	ldr	r3, [pc, #388]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80056e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056e8:	e1ab      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80056ea:	2300      	movs	r3, #0
 80056ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056ee:	e1a8      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80056f0:	2300      	movs	r3, #0
 80056f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056f4:	e1a5      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80056f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056fa:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80056fe:	430b      	orrs	r3, r1
 8005700:	d173      	bne.n	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005702:	4b57      	ldr	r3, [pc, #348]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005706:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800570a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800570c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005712:	d02f      	beq.n	8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8005714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005716:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800571a:	d863      	bhi.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800571c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571e:	2b00      	cmp	r3, #0
 8005720:	d004      	beq.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005728:	d012      	beq.n	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800572a:	e05b      	b.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800572c:	4b4c      	ldr	r3, [pc, #304]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005738:	d107      	bne.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800573a:	f107 0318 	add.w	r3, r7, #24
 800573e:	4618      	mov	r0, r3
 8005740:	f000 f9a4 	bl	8005a8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005748:	e17b      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800574e:	e178      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005750:	4b43      	ldr	r3, [pc, #268]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800575c:	d107      	bne.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800575e:	f107 030c 	add.w	r3, r7, #12
 8005762:	4618      	mov	r0, r3
 8005764:	f000 fae6 	bl	8005d34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800576c:	e169      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800576e:	2300      	movs	r3, #0
 8005770:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005772:	e166      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005774:	4b3a      	ldr	r3, [pc, #232]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005778:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800577c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800577e:	4b38      	ldr	r3, [pc, #224]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	2b04      	cmp	r3, #4
 8005788:	d10c      	bne.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800578a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578c:	2b00      	cmp	r3, #0
 800578e:	d109      	bne.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005790:	4b33      	ldr	r3, [pc, #204]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	08db      	lsrs	r3, r3, #3
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	4a32      	ldr	r2, [pc, #200]	; (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800579c:	fa22 f303 	lsr.w	r3, r2, r3
 80057a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a2:	e01e      	b.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057a4:	4b2e      	ldr	r3, [pc, #184]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b0:	d106      	bne.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80057b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057b8:	d102      	bne.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80057ba:	4b2b      	ldr	r3, [pc, #172]	; (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80057bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057be:	e010      	b.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057c0:	4b27      	ldr	r3, [pc, #156]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057cc:	d106      	bne.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80057ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057d4:	d102      	bne.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80057d6:	4b25      	ldr	r3, [pc, #148]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80057d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057da:	e002      	b.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80057dc:	2300      	movs	r3, #0
 80057de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80057e0:	e12f      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80057e2:	e12e      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80057e4:	2300      	movs	r3, #0
 80057e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057e8:	e12b      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80057ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057ee:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80057f2:	430b      	orrs	r3, r1
 80057f4:	d13c      	bne.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80057f6:	4b1a      	ldr	r3, [pc, #104]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80057f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057fe:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005802:	2b00      	cmp	r3, #0
 8005804:	d004      	beq.n	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8005806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800580c:	d012      	beq.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800580e:	e023      	b.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005810:	4b13      	ldr	r3, [pc, #76]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005818:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800581c:	d107      	bne.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800581e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fbda 	bl	8005fdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800582c:	e109      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800582e:	2300      	movs	r3, #0
 8005830:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005832:	e106      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005834:	4b0a      	ldr	r3, [pc, #40]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800583c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005840:	d107      	bne.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005842:	f107 0318 	add.w	r3, r7, #24
 8005846:	4618      	mov	r0, r3
 8005848:	f000 f920 	bl	8005a8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005850:	e0f7      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005852:	2300      	movs	r3, #0
 8005854:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005856:	e0f4      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800585c:	e0f1      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800585e:	bf00      	nop
 8005860:	58024400 	.word	0x58024400
 8005864:	03d09000 	.word	0x03d09000
 8005868:	003d0900 	.word	0x003d0900
 800586c:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005874:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005878:	430b      	orrs	r3, r1
 800587a:	f040 8091 	bne.w	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800587e:	4b73      	ldr	r3, [pc, #460]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005882:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005886:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800588e:	f000 8081 	beq.w	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005894:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005898:	d87f      	bhi.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800589a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058a0:	d06b      	beq.n	800597a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80058a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058a8:	d877      	bhi.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80058aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b0:	d056      	beq.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b8:	d86f      	bhi.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80058ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058c0:	d03b      	beq.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80058c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058c8:	d867      	bhi.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80058ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058d0:	d021      	beq.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80058d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058d8:	d85f      	bhi.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80058da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d004      	beq.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80058e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058e6:	d004      	beq.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80058e8:	e057      	b.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80058ea:	f000 f8b9 	bl	8005a60 <HAL_RCCEx_GetD3PCLK1Freq>
 80058ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058f0:	e0a7      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058f2:	4b56      	ldr	r3, [pc, #344]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058fe:	d107      	bne.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005900:	f107 0318 	add.w	r3, r7, #24
 8005904:	4618      	mov	r0, r3
 8005906:	f000 f8c1 	bl	8005a8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800590e:	e098      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005914:	e095      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005916:	4b4d      	ldr	r3, [pc, #308]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800591e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005922:	d107      	bne.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005924:	f107 030c 	add.w	r3, r7, #12
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fa03 	bl	8005d34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005932:	e086      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005938:	e083      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800593a:	4b44      	ldr	r3, [pc, #272]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	2b04      	cmp	r3, #4
 8005944:	d109      	bne.n	800595a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005946:	4b41      	ldr	r3, [pc, #260]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	08db      	lsrs	r3, r3, #3
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	4a3f      	ldr	r2, [pc, #252]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005952:	fa22 f303 	lsr.w	r3, r2, r3
 8005956:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005958:	e073      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800595a:	2300      	movs	r3, #0
 800595c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800595e:	e070      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005960:	4b3a      	ldr	r3, [pc, #232]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800596c:	d102      	bne.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800596e:	4b39      	ldr	r3, [pc, #228]	; (8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8005970:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005972:	e066      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005978:	e063      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800597a:	4b34      	ldr	r3, [pc, #208]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005982:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005986:	d102      	bne.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8005988:	4b33      	ldr	r3, [pc, #204]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800598a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800598c:	e059      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005992:	e056      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005994:	4b31      	ldr	r3, [pc, #196]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8005996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005998:	e053      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800599e:	e050      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80059a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059a4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80059a8:	430b      	orrs	r3, r1
 80059aa:	d148      	bne.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80059ac:	4b27      	ldr	r3, [pc, #156]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80059ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059b4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059bc:	d02a      	beq.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059c4:	d838      	bhi.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80059c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d004      	beq.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80059cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059d2:	d00d      	beq.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80059d4:	e030      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80059d6:	4b1d      	ldr	r3, [pc, #116]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059e2:	d102      	bne.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 80059e4:	4b1c      	ldr	r3, [pc, #112]	; (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80059e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059e8:	e02b      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80059ea:	2300      	movs	r3, #0
 80059ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059ee:	e028      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059f0:	4b16      	ldr	r3, [pc, #88]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059fc:	d107      	bne.n	8005a0e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 faea 	bl	8005fdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a0c:	e019      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a12:	e016      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a14:	4b0d      	ldr	r3, [pc, #52]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a20:	d107      	bne.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a22:	f107 0318 	add.w	r3, r7, #24
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 f830 	bl	8005a8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a30:	e007      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a32:	2300      	movs	r3, #0
 8005a34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a36:	e004      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a3c:	e001      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8005a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3740      	adds	r7, #64	; 0x40
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	58024400 	.word	0x58024400
 8005a50:	03d09000 	.word	0x03d09000
 8005a54:	003d0900 	.word	0x003d0900
 8005a58:	016e3600 	.word	0x016e3600
 8005a5c:	00bb8000 	.word	0x00bb8000

08005a60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005a64:	f7fe f920 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	091b      	lsrs	r3, r3, #4
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	4904      	ldr	r1, [pc, #16]	; (8005a88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005a76:	5ccb      	ldrb	r3, [r1, r3]
 8005a78:	f003 031f 	and.w	r3, r3, #31
 8005a7c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	58024400 	.word	0x58024400
 8005a88:	0800f03c 	.word	0x0800f03c

08005a8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b089      	sub	sp, #36	; 0x24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a94:	4ba1      	ldr	r3, [pc, #644]	; (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a98:	f003 0303 	and.w	r3, r3, #3
 8005a9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005a9e:	4b9f      	ldr	r3, [pc, #636]	; (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa2:	0b1b      	lsrs	r3, r3, #12
 8005aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aa8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005aaa:	4b9c      	ldr	r3, [pc, #624]	; (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aae:	091b      	lsrs	r3, r3, #4
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005ab6:	4b99      	ldr	r3, [pc, #612]	; (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aba:	08db      	lsrs	r3, r3, #3
 8005abc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	fb02 f303 	mul.w	r3, r2, r3
 8005ac6:	ee07 3a90 	vmov	s15, r3
 8005aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ace:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 8111 	beq.w	8005cfc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	f000 8083 	beq.w	8005be8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	f200 80a1 	bhi.w	8005c2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d056      	beq.n	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005af6:	e099      	b.n	8005c2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005af8:	4b88      	ldr	r3, [pc, #544]	; (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0320 	and.w	r3, r3, #32
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d02d      	beq.n	8005b60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b04:	4b85      	ldr	r3, [pc, #532]	; (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	08db      	lsrs	r3, r3, #3
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	4a84      	ldr	r2, [pc, #528]	; (8005d20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
 8005b14:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	ee07 3a90 	vmov	s15, r3
 8005b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b2e:	4b7b      	ldr	r3, [pc, #492]	; (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b36:	ee07 3a90 	vmov	s15, r3
 8005b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005b5e:	e087      	b.n	8005c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	ee07 3a90 	vmov	s15, r3
 8005b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b72:	4b6a      	ldr	r3, [pc, #424]	; (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b7a:	ee07 3a90 	vmov	s15, r3
 8005b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ba2:	e065      	b.n	8005c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	ee07 3a90 	vmov	s15, r3
 8005baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bb6:	4b59      	ldr	r3, [pc, #356]	; (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005be2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005be6:	e043      	b.n	8005c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	ee07 3a90 	vmov	s15, r3
 8005bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bfa:	4b48      	ldr	r3, [pc, #288]	; (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c2a:	e021      	b.n	8005c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	ee07 3a90 	vmov	s15, r3
 8005c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c3e:	4b37      	ldr	r3, [pc, #220]	; (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005c70:	4b2a      	ldr	r3, [pc, #168]	; (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	0a5b      	lsrs	r3, r3, #9
 8005c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c96:	ee17 2a90 	vmov	r2, s15
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005c9e:	4b1f      	ldr	r3, [pc, #124]	; (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	0c1b      	lsrs	r3, r3, #16
 8005ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ca8:	ee07 3a90 	vmov	s15, r3
 8005cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cc4:	ee17 2a90 	vmov	r2, s15
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005ccc:	4b13      	ldr	r3, [pc, #76]	; (8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd0:	0e1b      	lsrs	r3, r3, #24
 8005cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ce2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ce6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cf2:	ee17 2a90 	vmov	r2, s15
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005cfa:	e008      	b.n	8005d0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	609a      	str	r2, [r3, #8]
}
 8005d0e:	bf00      	nop
 8005d10:	3724      	adds	r7, #36	; 0x24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	58024400 	.word	0x58024400
 8005d20:	03d09000 	.word	0x03d09000
 8005d24:	46000000 	.word	0x46000000
 8005d28:	4c742400 	.word	0x4c742400
 8005d2c:	4a742400 	.word	0x4a742400
 8005d30:	4bb71b00 	.word	0x4bb71b00

08005d34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b089      	sub	sp, #36	; 0x24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d3c:	4ba1      	ldr	r3, [pc, #644]	; (8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005d46:	4b9f      	ldr	r3, [pc, #636]	; (8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4a:	0d1b      	lsrs	r3, r3, #20
 8005d4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d52:	4b9c      	ldr	r3, [pc, #624]	; (8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d56:	0a1b      	lsrs	r3, r3, #8
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005d5e:	4b99      	ldr	r3, [pc, #612]	; (8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d62:	08db      	lsrs	r3, r3, #3
 8005d64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	fb02 f303 	mul.w	r3, r2, r3
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8111 	beq.w	8005fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	f000 8083 	beq.w	8005e90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	f200 80a1 	bhi.w	8005ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d056      	beq.n	8005e4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005d9e:	e099      	b.n	8005ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005da0:	4b88      	ldr	r3, [pc, #544]	; (8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0320 	and.w	r3, r3, #32
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d02d      	beq.n	8005e08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dac:	4b85      	ldr	r3, [pc, #532]	; (8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	08db      	lsrs	r3, r3, #3
 8005db2:	f003 0303 	and.w	r3, r3, #3
 8005db6:	4a84      	ldr	r2, [pc, #528]	; (8005fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005db8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dbc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	ee07 3a90 	vmov	s15, r3
 8005dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd6:	4b7b      	ldr	r3, [pc, #492]	; (8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e06:	e087      	b.n	8005f18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e1a:	4b6a      	ldr	r3, [pc, #424]	; (8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e4a:	e065      	b.n	8005f18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e5e:	4b59      	ldr	r3, [pc, #356]	; (8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e72:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e8e:	e043      	b.n	8005f18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	ee07 3a90 	vmov	s15, r3
 8005e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea2:	4b48      	ldr	r3, [pc, #288]	; (8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eb6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ed2:	e021      	b.n	8005f18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ede:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee6:	4b37      	ldr	r3, [pc, #220]	; (8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005efa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005f18:	4b2a      	ldr	r3, [pc, #168]	; (8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1c:	0a5b      	lsrs	r3, r3, #9
 8005f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f22:	ee07 3a90 	vmov	s15, r3
 8005f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f32:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f3e:	ee17 2a90 	vmov	r2, s15
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005f46:	4b1f      	ldr	r3, [pc, #124]	; (8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	0c1b      	lsrs	r3, r3, #16
 8005f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f50:	ee07 3a90 	vmov	s15, r3
 8005f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f60:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f6c:	ee17 2a90 	vmov	r2, s15
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005f74:	4b13      	ldr	r3, [pc, #76]	; (8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f78:	0e1b      	lsrs	r3, r3, #24
 8005f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f7e:	ee07 3a90 	vmov	s15, r3
 8005f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f9a:	ee17 2a90 	vmov	r2, s15
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	609a      	str	r2, [r3, #8]
}
 8005fb6:	bf00      	nop
 8005fb8:	3724      	adds	r7, #36	; 0x24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	58024400 	.word	0x58024400
 8005fc8:	03d09000 	.word	0x03d09000
 8005fcc:	46000000 	.word	0x46000000
 8005fd0:	4c742400 	.word	0x4c742400
 8005fd4:	4a742400 	.word	0x4a742400
 8005fd8:	4bb71b00 	.word	0x4bb71b00

08005fdc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b089      	sub	sp, #36	; 0x24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fe4:	4ba0      	ldr	r3, [pc, #640]	; (8006268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe8:	f003 0303 	and.w	r3, r3, #3
 8005fec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005fee:	4b9e      	ldr	r3, [pc, #632]	; (8006268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff2:	091b      	lsrs	r3, r3, #4
 8005ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ff8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005ffa:	4b9b      	ldr	r3, [pc, #620]	; (8006268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006004:	4b98      	ldr	r3, [pc, #608]	; (8006268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006008:	08db      	lsrs	r3, r3, #3
 800600a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	fb02 f303 	mul.w	r3, r2, r3
 8006014:	ee07 3a90 	vmov	s15, r3
 8006018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 8111 	beq.w	800624a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	2b02      	cmp	r3, #2
 800602c:	f000 8083 	beq.w	8006136 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	2b02      	cmp	r3, #2
 8006034:	f200 80a1 	bhi.w	800617a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d056      	beq.n	80060f2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006044:	e099      	b.n	800617a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006046:	4b88      	ldr	r3, [pc, #544]	; (8006268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	d02d      	beq.n	80060ae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006052:	4b85      	ldr	r3, [pc, #532]	; (8006268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	08db      	lsrs	r3, r3, #3
 8006058:	f003 0303 	and.w	r3, r3, #3
 800605c:	4a83      	ldr	r2, [pc, #524]	; (800626c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800605e:	fa22 f303 	lsr.w	r3, r2, r3
 8006062:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	ee07 3a90 	vmov	s15, r3
 8006074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607c:	4b7a      	ldr	r3, [pc, #488]	; (8006268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800607e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006084:	ee07 3a90 	vmov	s15, r3
 8006088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006090:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006270 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006094:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006098:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800609c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80060ac:	e087      	b.n	80061be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	ee07 3a90 	vmov	s15, r3
 80060b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006274 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80060bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c0:	4b69      	ldr	r3, [pc, #420]	; (8006268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c8:	ee07 3a90 	vmov	s15, r3
 80060cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80060d4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006270 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80060d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060f0:	e065      	b.n	80061be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	ee07 3a90 	vmov	s15, r3
 80060f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006278 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006104:	4b58      	ldr	r3, [pc, #352]	; (8006268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610c:	ee07 3a90 	vmov	s15, r3
 8006110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006114:	ed97 6a03 	vldr	s12, [r7, #12]
 8006118:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006270 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800611c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006120:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006124:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006128:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800612c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006130:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006134:	e043      	b.n	80061be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	ee07 3a90 	vmov	s15, r3
 800613c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006140:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800627c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006148:	4b47      	ldr	r3, [pc, #284]	; (8006268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800614a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006150:	ee07 3a90 	vmov	s15, r3
 8006154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006158:	ed97 6a03 	vldr	s12, [r7, #12]
 800615c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006270 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006160:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006164:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006168:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800616c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006174:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006178:	e021      	b.n	80061be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	ee07 3a90 	vmov	s15, r3
 8006180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006184:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006274 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006188:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800618c:	4b36      	ldr	r3, [pc, #216]	; (8006268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800618e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006194:	ee07 3a90 	vmov	s15, r3
 8006198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800619c:	ed97 6a03 	vldr	s12, [r7, #12]
 80061a0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006270 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80061a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061bc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80061be:	4b2a      	ldr	r3, [pc, #168]	; (8006268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c2:	0a5b      	lsrs	r3, r3, #9
 80061c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061c8:	ee07 3a90 	vmov	s15, r3
 80061cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80061dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061e4:	ee17 2a90 	vmov	r2, s15
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80061ec:	4b1e      	ldr	r3, [pc, #120]	; (8006268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f0:	0c1b      	lsrs	r3, r3, #16
 80061f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061f6:	ee07 3a90 	vmov	s15, r3
 80061fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006202:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006206:	edd7 6a07 	vldr	s13, [r7, #28]
 800620a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800620e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006212:	ee17 2a90 	vmov	r2, s15
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800621a:	4b13      	ldr	r3, [pc, #76]	; (8006268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800621c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621e:	0e1b      	lsrs	r3, r3, #24
 8006220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006224:	ee07 3a90 	vmov	s15, r3
 8006228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006230:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006234:	edd7 6a07 	vldr	s13, [r7, #28]
 8006238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800623c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006240:	ee17 2a90 	vmov	r2, s15
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006248:	e008      	b.n	800625c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	609a      	str	r2, [r3, #8]
}
 800625c:	bf00      	nop
 800625e:	3724      	adds	r7, #36	; 0x24
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	58024400 	.word	0x58024400
 800626c:	03d09000 	.word	0x03d09000
 8006270:	46000000 	.word	0x46000000
 8006274:	4c742400 	.word	0x4c742400
 8006278:	4a742400 	.word	0x4a742400
 800627c:	4bb71b00 	.word	0x4bb71b00

08006280 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8006288:	4b26      	ldr	r3, [pc, #152]	; (8006324 <HAL_RCCEx_CRSConfig+0xa4>)
 800628a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800628e:	4a25      	ldr	r2, [pc, #148]	; (8006324 <HAL_RCCEx_CRSConfig+0xa4>)
 8006290:	f043 0302 	orr.w	r3, r3, #2
 8006294:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8006298:	4b22      	ldr	r3, [pc, #136]	; (8006324 <HAL_RCCEx_CRSConfig+0xa4>)
 800629a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800629e:	4a21      	ldr	r2, [pc, #132]	; (8006324 <HAL_RCCEx_CRSConfig+0xa4>)
 80062a0:	f023 0302 	bic.w	r3, r3, #2
 80062a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 80062a8:	f7fa ff18 	bl	80010dc <HAL_GetREVID>
 80062ac:	4603      	mov	r3, r0
 80062ae:	f241 0203 	movw	r2, #4099	; 0x1003
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d80b      	bhi.n	80062ce <HAL_RCCEx_CRSConfig+0x4e>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062be:	d106      	bne.n	80062ce <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	e008      	b.n	80062e0 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	4313      	orrs	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	041b      	lsls	r3, r3, #16
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80062f6:	4a0c      	ldr	r2, [pc, #48]	; (8006328 <HAL_RCCEx_CRSConfig+0xa8>)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80062fc:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <HAL_RCCEx_CRSConfig+0xa8>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	021b      	lsls	r3, r3, #8
 800630a:	4907      	ldr	r1, [pc, #28]	; (8006328 <HAL_RCCEx_CRSConfig+0xa8>)
 800630c:	4313      	orrs	r3, r2
 800630e:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8006310:	4b05      	ldr	r3, [pc, #20]	; (8006328 <HAL_RCCEx_CRSConfig+0xa8>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a04      	ldr	r2, [pc, #16]	; (8006328 <HAL_RCCEx_CRSConfig+0xa8>)
 8006316:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800631a:	6013      	str	r3, [r2, #0]
}
 800631c:	bf00      	nop
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	58024400 	.word	0x58024400
 8006328:	40008400 	.word	0x40008400

0800632c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800633a:	4b53      	ldr	r3, [pc, #332]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800633c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633e:	f003 0303 	and.w	r3, r3, #3
 8006342:	2b03      	cmp	r3, #3
 8006344:	d101      	bne.n	800634a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e099      	b.n	800647e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800634a:	4b4f      	ldr	r3, [pc, #316]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a4e      	ldr	r2, [pc, #312]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006350:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006356:	f7fa fe91 	bl	800107c <HAL_GetTick>
 800635a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800635c:	e008      	b.n	8006370 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800635e:	f7fa fe8d 	bl	800107c <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	2b02      	cmp	r3, #2
 800636a:	d901      	bls.n	8006370 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e086      	b.n	800647e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006370:	4b45      	ldr	r3, [pc, #276]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1f0      	bne.n	800635e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800637c:	4b42      	ldr	r3, [pc, #264]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800637e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006380:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	031b      	lsls	r3, r3, #12
 800638a:	493f      	ldr	r1, [pc, #252]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800638c:	4313      	orrs	r3, r2
 800638e:	628b      	str	r3, [r1, #40]	; 0x28
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	3b01      	subs	r3, #1
 8006396:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	3b01      	subs	r3, #1
 80063a0:	025b      	lsls	r3, r3, #9
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	431a      	orrs	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	041b      	lsls	r3, r3, #16
 80063ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	061b      	lsls	r3, r3, #24
 80063bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063c0:	4931      	ldr	r1, [pc, #196]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80063c6:	4b30      	ldr	r3, [pc, #192]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	492d      	ldr	r1, [pc, #180]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80063d8:	4b2b      	ldr	r3, [pc, #172]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	f023 0220 	bic.w	r2, r3, #32
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	4928      	ldr	r1, [pc, #160]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80063ea:	4b27      	ldr	r3, [pc, #156]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	4a26      	ldr	r2, [pc, #152]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063f0:	f023 0310 	bic.w	r3, r3, #16
 80063f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80063f6:	4b24      	ldr	r3, [pc, #144]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 80063f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063fa:	4b24      	ldr	r3, [pc, #144]	; (800648c <RCCEx_PLL2_Config+0x160>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	69d2      	ldr	r2, [r2, #28]
 8006402:	00d2      	lsls	r2, r2, #3
 8006404:	4920      	ldr	r1, [pc, #128]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006406:	4313      	orrs	r3, r2
 8006408:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800640a:	4b1f      	ldr	r3, [pc, #124]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800640c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640e:	4a1e      	ldr	r2, [pc, #120]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006410:	f043 0310 	orr.w	r3, r3, #16
 8006414:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d106      	bne.n	800642a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800641c:	4b1a      	ldr	r3, [pc, #104]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	4a19      	ldr	r2, [pc, #100]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006422:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006426:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006428:	e00f      	b.n	800644a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d106      	bne.n	800643e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006430:	4b15      	ldr	r3, [pc, #84]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	4a14      	ldr	r2, [pc, #80]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800643a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800643c:	e005      	b.n	800644a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800643e:	4b12      	ldr	r3, [pc, #72]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006442:	4a11      	ldr	r2, [pc, #68]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006444:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006448:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800644a:	4b0f      	ldr	r3, [pc, #60]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a0e      	ldr	r2, [pc, #56]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006450:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006456:	f7fa fe11 	bl	800107c <HAL_GetTick>
 800645a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800645c:	e008      	b.n	8006470 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800645e:	f7fa fe0d 	bl	800107c <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b02      	cmp	r3, #2
 800646a:	d901      	bls.n	8006470 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e006      	b.n	800647e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006470:	4b05      	ldr	r3, [pc, #20]	; (8006488 <RCCEx_PLL2_Config+0x15c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0f0      	beq.n	800645e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800647c:	7bfb      	ldrb	r3, [r7, #15]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	58024400 	.word	0x58024400
 800648c:	ffff0007 	.word	0xffff0007

08006490 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800649e:	4b53      	ldr	r3, [pc, #332]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80064a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	2b03      	cmp	r3, #3
 80064a8:	d101      	bne.n	80064ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e099      	b.n	80065e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80064ae:	4b4f      	ldr	r3, [pc, #316]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a4e      	ldr	r2, [pc, #312]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80064b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ba:	f7fa fddf 	bl	800107c <HAL_GetTick>
 80064be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064c0:	e008      	b.n	80064d4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80064c2:	f7fa fddb 	bl	800107c <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d901      	bls.n	80064d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e086      	b.n	80065e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064d4:	4b45      	ldr	r3, [pc, #276]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1f0      	bne.n	80064c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80064e0:	4b42      	ldr	r3, [pc, #264]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	051b      	lsls	r3, r3, #20
 80064ee:	493f      	ldr	r1, [pc, #252]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	628b      	str	r3, [r1, #40]	; 0x28
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	3b01      	subs	r3, #1
 80064fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	3b01      	subs	r3, #1
 8006504:	025b      	lsls	r3, r3, #9
 8006506:	b29b      	uxth	r3, r3
 8006508:	431a      	orrs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	3b01      	subs	r3, #1
 8006510:	041b      	lsls	r3, r3, #16
 8006512:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	3b01      	subs	r3, #1
 800651e:	061b      	lsls	r3, r3, #24
 8006520:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006524:	4931      	ldr	r1, [pc, #196]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006526:	4313      	orrs	r3, r2
 8006528:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800652a:	4b30      	ldr	r3, [pc, #192]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 800652c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	492d      	ldr	r1, [pc, #180]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006538:	4313      	orrs	r3, r2
 800653a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800653c:	4b2b      	ldr	r3, [pc, #172]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	4928      	ldr	r1, [pc, #160]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 800654a:	4313      	orrs	r3, r2
 800654c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800654e:	4b27      	ldr	r3, [pc, #156]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006552:	4a26      	ldr	r2, [pc, #152]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006558:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800655a:	4b24      	ldr	r3, [pc, #144]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 800655c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800655e:	4b24      	ldr	r3, [pc, #144]	; (80065f0 <RCCEx_PLL3_Config+0x160>)
 8006560:	4013      	ands	r3, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	69d2      	ldr	r2, [r2, #28]
 8006566:	00d2      	lsls	r2, r2, #3
 8006568:	4920      	ldr	r1, [pc, #128]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 800656a:	4313      	orrs	r3, r2
 800656c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800656e:	4b1f      	ldr	r3, [pc, #124]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006572:	4a1e      	ldr	r2, [pc, #120]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006578:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d106      	bne.n	800658e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006580:	4b1a      	ldr	r3, [pc, #104]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	4a19      	ldr	r2, [pc, #100]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006586:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800658a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800658c:	e00f      	b.n	80065ae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d106      	bne.n	80065a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006594:	4b15      	ldr	r3, [pc, #84]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	4a14      	ldr	r2, [pc, #80]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 800659a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800659e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065a0:	e005      	b.n	80065ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80065a2:	4b12      	ldr	r3, [pc, #72]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80065a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a6:	4a11      	ldr	r2, [pc, #68]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80065a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80065ae:	4b0f      	ldr	r3, [pc, #60]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a0e      	ldr	r2, [pc, #56]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80065b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ba:	f7fa fd5f 	bl	800107c <HAL_GetTick>
 80065be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065c0:	e008      	b.n	80065d4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80065c2:	f7fa fd5b 	bl	800107c <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d901      	bls.n	80065d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e006      	b.n	80065e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065d4:	4b05      	ldr	r3, [pc, #20]	; (80065ec <RCCEx_PLL3_Config+0x15c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0f0      	beq.n	80065c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	58024400 	.word	0x58024400
 80065f0:	ffff0007 	.word	0xffff0007

080065f4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08a      	sub	sp, #40	; 0x28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e075      	b.n	80066f2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d105      	bne.n	800661e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7fa faa1 	bl	8000b60 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2204      	movs	r2, #4
 8006622:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f868 	bl	80066fc <HAL_SD_InitCard>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e05d      	b.n	80066f2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006636:	f107 0308 	add.w	r3, r7, #8
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fdb5 	bl	80071ac <HAL_SD_GetCardStatus>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e052      	b.n	80066f2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800664c:	7e3b      	ldrb	r3, [r7, #24]
 800664e:	b2db      	uxtb	r3, r3
 8006650:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006652:	7e7b      	ldrb	r3, [r7, #25]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665c:	2b01      	cmp	r3, #1
 800665e:	d10a      	bne.n	8006676 <HAL_SD_Init+0x82>
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	2b00      	cmp	r3, #0
 8006664:	d102      	bne.n	800666c <HAL_SD_Init+0x78>
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d004      	beq.n	8006676 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006672:	659a      	str	r2, [r3, #88]	; 0x58
 8006674:	e00b      	b.n	800668e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	2b01      	cmp	r3, #1
 800667c:	d104      	bne.n	8006688 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006684:	659a      	str	r2, [r3, #88]	; 0x58
 8006686:	e002      	b.n	800668e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fe73 	bl	8007380 <HAL_SD_ConfigWideBusOperation>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e026      	b.n	80066f2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80066a4:	f7fa fcea 	bl	800107c <HAL_GetTick>
 80066a8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80066aa:	e011      	b.n	80066d0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80066ac:	f7fa fce6 	bl	800107c <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066ba:	d109      	bne.n	80066d0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066c2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e010      	b.n	80066f2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 ff67 	bl	80075a4 <HAL_SD_GetCardState>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d1e7      	bne.n	80066ac <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3728      	adds	r7, #40	; 0x28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80066fc:	b590      	push	{r4, r7, lr}
 80066fe:	b08d      	sub	sp, #52	; 0x34
 8006700:	af02      	add	r7, sp, #8
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006704:	2300      	movs	r3, #0
 8006706:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006708:	2300      	movs	r3, #0
 800670a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800670c:	2300      	movs	r3, #0
 800670e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006710:	2300      	movs	r3, #0
 8006712:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006714:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006718:	f04f 0100 	mov.w	r1, #0
 800671c:	f7fe fcc8 	bl	80050b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006720:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	2b00      	cmp	r3, #0
 8006726:	d109      	bne.n	800673c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006736:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e070      	b.n	800681e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	0a1b      	lsrs	r3, r3, #8
 8006740:	4a39      	ldr	r2, [pc, #228]	; (8006828 <HAL_SD_InitCard+0x12c>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	091b      	lsrs	r3, r3, #4
 8006748:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681c      	ldr	r4, [r3, #0]
 800674e:	466a      	mov	r2, sp
 8006750:	f107 0318 	add.w	r3, r7, #24
 8006754:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006758:	e882 0003 	stmia.w	r2, {r0, r1}
 800675c:	f107 030c 	add.w	r3, r7, #12
 8006760:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006762:	4620      	mov	r0, r4
 8006764:	f001 faf8 	bl	8007d58 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4618      	mov	r0, r3
 800676e:	f001 fb3b 	bl	8007de8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d005      	beq.n	8006784 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006782:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	2b00      	cmp	r3, #0
 8006788:	d007      	beq.n	800679a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800678a:	4a28      	ldr	r2, [pc, #160]	; (800682c <HAL_SD_InitCard+0x130>)
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006792:	3301      	adds	r3, #1
 8006794:	4618      	mov	r0, r3
 8006796:	f7fa fc7d 	bl	8001094 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fff0 	bl	8007780 <SD_PowerON>
 80067a0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00b      	beq.n	80067c0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	431a      	orrs	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e02e      	b.n	800681e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 ff0f 	bl	80075e4 <SD_InitCard>
 80067c6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00b      	beq.n	80067e6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	431a      	orrs	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e01b      	b.n	800681e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067ee:	4618      	mov	r0, r3
 80067f0:	f001 fb90 	bl	8007f14 <SDMMC_CmdBlockLength>
 80067f4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00f      	beq.n	800681c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a0b      	ldr	r2, [pc, #44]	; (8006830 <HAL_SD_InitCard+0x134>)
 8006802:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e000      	b.n	800681e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	372c      	adds	r7, #44	; 0x2c
 8006822:	46bd      	mov	sp, r7
 8006824:	bd90      	pop	{r4, r7, pc}
 8006826:	bf00      	nop
 8006828:	014f8b59 	.word	0x014f8b59
 800682c:	00012110 	.word	0x00012110
 8006830:	1fe00fff 	.word	0x1fe00fff

08006834 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b092      	sub	sp, #72	; 0x48
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006842:	f7fa fc1b 	bl	800107c <HAL_GetTick>
 8006846:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d107      	bne.n	8006866 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e167      	b.n	8006b36 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b01      	cmp	r3, #1
 8006870:	f040 815a 	bne.w	8006b28 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800687a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	441a      	add	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006884:	429a      	cmp	r2, r3
 8006886:	d907      	bls.n	8006898 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800688c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e14e      	b.n	8006b36 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2203      	movs	r2, #3
 800689c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2200      	movs	r2, #0
 80068a6:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d002      	beq.n	80068b6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80068b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b2:	025b      	lsls	r3, r3, #9
 80068b4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80068b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068ba:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	025b      	lsls	r3, r3, #9
 80068c0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80068c2:	2390      	movs	r3, #144	; 0x90
 80068c4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80068c6:	2302      	movs	r3, #2
 80068c8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80068ce:	2300      	movs	r3, #0
 80068d0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f107 0214 	add.w	r2, r7, #20
 80068da:	4611      	mov	r1, r2
 80068dc:	4618      	mov	r0, r3
 80068de:	f001 faed 	bl	8007ebc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68da      	ldr	r2, [r3, #12]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068f0:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d90a      	bls.n	800690e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2202      	movs	r2, #2
 80068fc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006904:	4618      	mov	r0, r3
 8006906:	f001 fb4b 	bl	8007fa0 <SDMMC_CmdReadMultiBlock>
 800690a:	6478      	str	r0, [r7, #68]	; 0x44
 800690c:	e009      	b.n	8006922 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2201      	movs	r2, #1
 8006912:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800691a:	4618      	mov	r0, r3
 800691c:	f001 fb1d 	bl	8007f5a <SDMMC_CmdReadSingleBlock>
 8006920:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006924:	2b00      	cmp	r3, #0
 8006926:	d012      	beq.n	800694e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a84      	ldr	r2, [pc, #528]	; (8006b40 <HAL_SD_ReadBlocks+0x30c>)
 800692e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006936:	431a      	orrs	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e0f3      	b.n	8006b36 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006952:	e058      	b.n	8006a06 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d033      	beq.n	80069ca <HAL_SD_ReadBlocks+0x196>
 8006962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006964:	2b1f      	cmp	r3, #31
 8006966:	d930      	bls.n	80069ca <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8006968:	2300      	movs	r3, #0
 800696a:	643b      	str	r3, [r7, #64]	; 0x40
 800696c:	e027      	b.n	80069be <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4618      	mov	r0, r3
 8006974:	f001 fa1a 	bl	8007dac <SDMMC_ReadFIFO>
 8006978:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697c:	b2da      	uxtb	r2, r3
 800697e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006980:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006984:	3301      	adds	r3, #1
 8006986:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698a:	0a1b      	lsrs	r3, r3, #8
 800698c:	b2da      	uxtb	r2, r3
 800698e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006990:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006994:	3301      	adds	r3, #1
 8006996:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699a:	0c1b      	lsrs	r3, r3, #16
 800699c:	b2da      	uxtb	r2, r3
 800699e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80069a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a4:	3301      	adds	r3, #1
 80069a6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80069a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069aa:	0e1b      	lsrs	r3, r3, #24
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80069b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b4:	3301      	adds	r3, #1
 80069b6:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 80069b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ba:	3301      	adds	r3, #1
 80069bc:	643b      	str	r3, [r7, #64]	; 0x40
 80069be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c0:	2b07      	cmp	r3, #7
 80069c2:	d9d4      	bls.n	800696e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 80069c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c6:	3b20      	subs	r3, #32
 80069c8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80069ca:	f7fa fb57 	bl	800107c <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d902      	bls.n	80069e0 <HAL_SD_ReadBlocks+0x1ac>
 80069da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d112      	bne.n	8006a06 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a56      	ldr	r2, [pc, #344]	; (8006b40 <HAL_SD_ReadBlocks+0x30c>)
 80069e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e097      	b.n	8006b36 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a0c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d09f      	beq.n	8006954 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a22:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d022      	beq.n	8006a78 <HAL_SD_ReadBlocks+0x244>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d91f      	bls.n	8006a78 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d01b      	beq.n	8006a78 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f001 fb15 	bl	8008074 <SDMMC_CmdStopTransfer>
 8006a4a:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d012      	beq.n	8006a78 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a3a      	ldr	r2, [pc, #232]	; (8006b40 <HAL_SD_ReadBlocks+0x30c>)
 8006a58:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a60:	431a      	orrs	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e05e      	b.n	8006b36 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7e:	f003 0308 	and.w	r3, r3, #8
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d012      	beq.n	8006aac <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a2d      	ldr	r2, [pc, #180]	; (8006b40 <HAL_SD_ReadBlocks+0x30c>)
 8006a8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a92:	f043 0208 	orr.w	r2, r3, #8
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e044      	b.n	8006b36 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d012      	beq.n	8006ae0 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a20      	ldr	r2, [pc, #128]	; (8006b40 <HAL_SD_ReadBlocks+0x30c>)
 8006ac0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac6:	f043 0202 	orr.w	r2, r3, #2
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e02a      	b.n	8006b36 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d012      	beq.n	8006b14 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a13      	ldr	r2, [pc, #76]	; (8006b40 <HAL_SD_ReadBlocks+0x30c>)
 8006af4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006afa:	f043 0220 	orr.w	r2, r3, #32
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e010      	b.n	8006b36 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a0a      	ldr	r2, [pc, #40]	; (8006b44 <HAL_SD_ReadBlocks+0x310>)
 8006b1a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	e006      	b.n	8006b36 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b2c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
  }
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3748      	adds	r7, #72	; 0x48
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	1fe00fff 	.word	0x1fe00fff
 8006b44:	18000f3a 	.word	0x18000f3a

08006b48 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b092      	sub	sp, #72	; 0x48
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
 8006b54:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006b56:	f7fa fa91 	bl	800107c <HAL_GetTick>
 8006b5a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d107      	bne.n	8006b7a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e16b      	b.n	8006e52 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	f040 815e 	bne.w	8006e44 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	441a      	add	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d907      	bls.n	8006bac <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e152      	b.n	8006e52 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2203      	movs	r2, #3
 8006bb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d002      	beq.n	8006bca <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc6:	025b      	lsls	r3, r3, #9
 8006bc8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bce:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	025b      	lsls	r3, r3, #9
 8006bd4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006bd6:	2390      	movs	r3, #144	; 0x90
 8006bd8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006be2:	2300      	movs	r3, #0
 8006be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f107 0218 	add.w	r2, r7, #24
 8006bee:	4611      	mov	r1, r2
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f001 f963 	bl	8007ebc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68da      	ldr	r2, [r3, #12]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c04:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d90a      	bls.n	8006c22 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f001 fa07 	bl	800802c <SDMMC_CmdWriteMultiBlock>
 8006c1e:	6478      	str	r0, [r7, #68]	; 0x44
 8006c20:	e009      	b.n	8006c36 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2210      	movs	r2, #16
 8006c26:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f001 f9d9 	bl	8007fe6 <SDMMC_CmdWriteSingleBlock>
 8006c34:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d012      	beq.n	8006c62 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a86      	ldr	r2, [pc, #536]	; (8006e5c <HAL_SD_WriteBlocks+0x314>)
 8006c42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e0f7      	b.n	8006e52 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006c66:	e05c      	b.n	8006d22 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d037      	beq.n	8006ce6 <HAL_SD_WriteBlocks+0x19e>
 8006c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c78:	2b1f      	cmp	r3, #31
 8006c7a:	d934      	bls.n	8006ce6 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	643b      	str	r3, [r7, #64]	; 0x40
 8006c80:	e02b      	b.n	8006cda <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8006c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	021a      	lsls	r2, r3, #8
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	041a      	lsls	r2, r3, #16
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cae:	3301      	adds	r3, #1
 8006cb0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	061a      	lsls	r2, r3, #24
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f107 0214 	add.w	r2, r7, #20
 8006ccc:	4611      	mov	r1, r2
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f001 f879 	bl	8007dc6 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8006cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	643b      	str	r3, [r7, #64]	; 0x40
 8006cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cdc:	2b07      	cmp	r3, #7
 8006cde:	d9d0      	bls.n	8006c82 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce2:	3b20      	subs	r3, #32
 8006ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8006ce6:	f7fa f9c9 	bl	800107c <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d902      	bls.n	8006cfc <HAL_SD_WriteBlocks+0x1b4>
 8006cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d112      	bne.n	8006d22 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a56      	ldr	r2, [pc, #344]	; (8006e5c <HAL_SD_WriteBlocks+0x314>)
 8006d02:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e097      	b.n	8006e52 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d28:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d09b      	beq.n	8006c68 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68da      	ldr	r2, [r3, #12]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d3e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d022      	beq.n	8006d94 <HAL_SD_WriteBlocks+0x24c>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d91f      	bls.n	8006d94 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d58:	2b03      	cmp	r3, #3
 8006d5a:	d01b      	beq.n	8006d94 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f001 f987 	bl	8008074 <SDMMC_CmdStopTransfer>
 8006d66:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d012      	beq.n	8006d94 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a3a      	ldr	r2, [pc, #232]	; (8006e5c <HAL_SD_WriteBlocks+0x314>)
 8006d74:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e05e      	b.n	8006e52 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d9a:	f003 0308 	and.w	r3, r3, #8
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d012      	beq.n	8006dc8 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a2d      	ldr	r2, [pc, #180]	; (8006e5c <HAL_SD_WriteBlocks+0x314>)
 8006da8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dae:	f043 0208 	orr.w	r2, r3, #8
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e044      	b.n	8006e52 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d012      	beq.n	8006dfc <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a20      	ldr	r2, [pc, #128]	; (8006e5c <HAL_SD_WriteBlocks+0x314>)
 8006ddc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de2:	f043 0202 	orr.w	r2, r3, #2
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e02a      	b.n	8006e52 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e02:	f003 0310 	and.w	r3, r3, #16
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d012      	beq.n	8006e30 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a13      	ldr	r2, [pc, #76]	; (8006e5c <HAL_SD_WriteBlocks+0x314>)
 8006e10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e16:	f043 0210 	orr.w	r2, r3, #16
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e010      	b.n	8006e52 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a0a      	ldr	r2, [pc, #40]	; (8006e60 <HAL_SD_WriteBlocks+0x318>)
 8006e36:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	e006      	b.n	8006e52 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e48:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
  }
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3748      	adds	r7, #72	; 0x48
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	1fe00fff 	.word	0x1fe00fff
 8006e60:	18000f3a 	.word	0x18000f3a

08006e64 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e72:	0f9b      	lsrs	r3, r3, #30
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e7e:	0e9b      	lsrs	r3, r3, #26
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	f003 030f 	and.w	r3, r3, #15
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e90:	0e1b      	lsrs	r3, r3, #24
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	f003 0303 	and.w	r3, r3, #3
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea2:	0c1b      	lsrs	r3, r3, #16
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eae:	0a1b      	lsrs	r3, r3, #8
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ec4:	0d1b      	lsrs	r3, r3, #20
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed0:	0c1b      	lsrs	r3, r3, #16
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	f003 030f 	and.w	r3, r3, #15
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ee2:	0bdb      	lsrs	r3, r3, #15
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ef4:	0b9b      	lsrs	r3, r3, #14
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f06:	0b5b      	lsrs	r3, r3, #13
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f18:	0b1b      	lsrs	r3, r3, #12
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d163      	bne.n	8006ffc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f38:	009a      	lsls	r2, r3, #2
 8006f3a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006f3e:	4013      	ands	r3, r2
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8006f44:	0f92      	lsrs	r2, r2, #30
 8006f46:	431a      	orrs	r2, r3
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f50:	0edb      	lsrs	r3, r3, #27
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	f003 0307 	and.w	r3, r3, #7
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f62:	0e1b      	lsrs	r3, r3, #24
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	f003 0307 	and.w	r3, r3, #7
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f74:	0d5b      	lsrs	r3, r3, #21
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	f003 0307 	and.w	r3, r3, #7
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f86:	0c9b      	lsrs	r3, r3, #18
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	f003 0307 	and.w	r3, r3, #7
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f98:	0bdb      	lsrs	r3, r3, #15
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	7e1b      	ldrb	r3, [r3, #24]
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	3302      	adds	r3, #2
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006fc6:	fb03 f202 	mul.w	r2, r3, r2
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	7a1b      	ldrb	r3, [r3, #8]
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	f003 030f 	and.w	r3, r3, #15
 8006fd8:	2201      	movs	r2, #1
 8006fda:	409a      	lsls	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006fe8:	0a52      	lsrs	r2, r2, #9
 8006fea:	fb03 f202 	mul.w	r2, r3, r2
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ff8:	655a      	str	r2, [r3, #84]	; 0x54
 8006ffa:	e031      	b.n	8007060 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007000:	2b01      	cmp	r3, #1
 8007002:	d11d      	bne.n	8007040 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007008:	041b      	lsls	r3, r3, #16
 800700a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007012:	0c1b      	lsrs	r3, r3, #16
 8007014:	431a      	orrs	r2, r3
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	3301      	adds	r3, #1
 8007020:	029a      	lsls	r2, r3, #10
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007034:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	655a      	str	r2, [r3, #84]	; 0x54
 800703e:	e00f      	b.n	8007060 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a58      	ldr	r2, [pc, #352]	; (80071a8 <HAL_SD_GetCardCSD+0x344>)
 8007046:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e09d      	b.n	800719c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007064:	0b9b      	lsrs	r3, r3, #14
 8007066:	b2db      	uxtb	r3, r3
 8007068:	f003 0301 	and.w	r3, r3, #1
 800706c:	b2da      	uxtb	r2, r3
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007076:	09db      	lsrs	r3, r3, #7
 8007078:	b2db      	uxtb	r3, r3
 800707a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800707e:	b2da      	uxtb	r2, r3
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007088:	b2db      	uxtb	r3, r3
 800708a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800708e:	b2da      	uxtb	r2, r3
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007098:	0fdb      	lsrs	r3, r3, #31
 800709a:	b2da      	uxtb	r2, r3
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070a4:	0f5b      	lsrs	r3, r3, #29
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	f003 0303 	and.w	r3, r3, #3
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070b6:	0e9b      	lsrs	r3, r3, #26
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	f003 0307 	and.w	r3, r3, #7
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070c8:	0d9b      	lsrs	r3, r3, #22
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	f003 030f 	and.w	r3, r3, #15
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070da:	0d5b      	lsrs	r3, r3, #21
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070f6:	0c1b      	lsrs	r3, r3, #16
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800710a:	0bdb      	lsrs	r3, r3, #15
 800710c:	b2db      	uxtb	r3, r3
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	b2da      	uxtb	r2, r3
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800711e:	0b9b      	lsrs	r3, r3, #14
 8007120:	b2db      	uxtb	r3, r3
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	b2da      	uxtb	r2, r3
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007132:	0b5b      	lsrs	r3, r3, #13
 8007134:	b2db      	uxtb	r3, r3
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	b2da      	uxtb	r2, r3
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007146:	0b1b      	lsrs	r3, r3, #12
 8007148:	b2db      	uxtb	r3, r3
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	b2da      	uxtb	r2, r3
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800715a:	0a9b      	lsrs	r3, r3, #10
 800715c:	b2db      	uxtb	r3, r3
 800715e:	f003 0303 	and.w	r3, r3, #3
 8007162:	b2da      	uxtb	r2, r3
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800716e:	0a1b      	lsrs	r3, r3, #8
 8007170:	b2db      	uxtb	r3, r3
 8007172:	f003 0303 	and.w	r3, r3, #3
 8007176:	b2da      	uxtb	r2, r3
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007182:	085b      	lsrs	r3, r3, #1
 8007184:	b2db      	uxtb	r3, r3
 8007186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800718a:	b2da      	uxtb	r2, r3
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	1fe00fff 	.word	0x1fe00fff

080071ac <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b094      	sub	sp, #80	; 0x50
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d101      	bne.n	80071cc <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e0a7      	b.n	800731c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80071cc:	f107 0308 	add.w	r3, r7, #8
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fb62 	bl	800789c <SD_SendSDStatus>
 80071d8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80071da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d011      	beq.n	8007204 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a4f      	ldr	r2, [pc, #316]	; (8007324 <HAL_SD_GetCardStatus+0x178>)
 80071e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ee:	431a      	orrs	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007202:	e070      	b.n	80072e6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	099b      	lsrs	r3, r3, #6
 8007208:	b2db      	uxtb	r3, r3
 800720a:	f003 0303 	and.w	r3, r3, #3
 800720e:	b2da      	uxtb	r2, r3
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	095b      	lsrs	r3, r3, #5
 8007218:	b2db      	uxtb	r3, r3
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	b2da      	uxtb	r2, r3
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	0a1b      	lsrs	r3, r3, #8
 8007228:	b29b      	uxth	r3, r3
 800722a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800722e:	b29a      	uxth	r2, r3
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	0e1b      	lsrs	r3, r3, #24
 8007234:	b29b      	uxth	r3, r3
 8007236:	4313      	orrs	r3, r2
 8007238:	b29a      	uxth	r2, r3
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	061a      	lsls	r2, r3, #24
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	021b      	lsls	r3, r3, #8
 8007246:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800724a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	0a1b      	lsrs	r3, r3, #8
 8007250:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007254:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	0e1b      	lsrs	r3, r3, #24
 800725a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	b2da      	uxtb	r2, r3
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	b2da      	uxtb	r2, r3
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	0d1b      	lsrs	r3, r3, #20
 8007276:	b2db      	uxtb	r3, r3
 8007278:	f003 030f 	and.w	r3, r3, #15
 800727c:	b2da      	uxtb	r2, r3
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	0c1b      	lsrs	r3, r3, #16
 8007286:	b29b      	uxth	r3, r3
 8007288:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800728c:	b29a      	uxth	r2, r3
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	b29b      	uxth	r3, r3
 8007292:	b2db      	uxtb	r3, r3
 8007294:	b29b      	uxth	r3, r3
 8007296:	4313      	orrs	r3, r2
 8007298:	b29a      	uxth	r2, r3
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	0a9b      	lsrs	r3, r3, #10
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	0a1b      	lsrs	r3, r3, #8
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	f003 0303 	and.w	r3, r3, #3
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	091b      	lsrs	r3, r3, #4
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	f003 030f 	and.w	r3, r3, #15
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	f003 030f 	and.w	r3, r3, #15
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	0e1b      	lsrs	r3, r3, #24
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 fe10 	bl	8007f14 <SDMMC_CmdBlockLength>
 80072f4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80072f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00d      	beq.n	8007318 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a08      	ldr	r2, [pc, #32]	; (8007324 <HAL_SD_GetCardStatus+0x178>)
 8007302:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007308:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8007318:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800731c:	4618      	mov	r0, r3
 800731e:	3750      	adds	r7, #80	; 0x50
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	1fe00fff 	.word	0x1fe00fff

08007328 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007380:	b590      	push	{r4, r7, lr}
 8007382:	b08d      	sub	sp, #52	; 0x34
 8007384:	af02      	add	r7, sp, #8
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2203      	movs	r2, #3
 8007394:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739c:	2b03      	cmp	r3, #3
 800739e:	d02e      	beq.n	80073fe <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073a6:	d106      	bne.n	80073b6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	635a      	str	r2, [r3, #52]	; 0x34
 80073b4:	e029      	b.n	800740a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073bc:	d10a      	bne.n	80073d4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fb64 	bl	8007a8c <SD_WideBus_Enable>
 80073c4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	431a      	orrs	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	635a      	str	r2, [r3, #52]	; 0x34
 80073d2:	e01a      	b.n	800740a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10a      	bne.n	80073f0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fba1 	bl	8007b22 <SD_WideBus_Disable>
 80073e0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	635a      	str	r2, [r3, #52]	; 0x34
 80073ee:	e00c      	b.n	800740a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	635a      	str	r2, [r3, #52]	; 0x34
 80073fc:	e005      	b.n	800740a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007402:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740e:	2b00      	cmp	r3, #0
 8007410:	d007      	beq.n	8007422 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a5f      	ldr	r2, [pc, #380]	; (8007594 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007418:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007420:	e096      	b.n	8007550 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007422:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007426:	f04f 0100 	mov.w	r1, #0
 800742a:	f7fd fe41 	bl	80050b0 <HAL_RCCEx_GetPeriphCLKFreq>
 800742e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 8083 	beq.w	800753e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	695a      	ldr	r2, [r3, #20]
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	4950      	ldr	r1, [pc, #320]	; (8007598 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007456:	fba1 1303 	umull	r1, r3, r1, r3
 800745a:	0e1b      	lsrs	r3, r3, #24
 800745c:	429a      	cmp	r2, r3
 800745e:	d303      	bcc.n	8007468 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	61bb      	str	r3, [r7, #24]
 8007466:	e05a      	b.n	800751e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800746c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007470:	d103      	bne.n	800747a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	61bb      	str	r3, [r7, #24]
 8007478:	e051      	b.n	800751e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800747e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007482:	d126      	bne.n	80074d2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10e      	bne.n	80074aa <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	4a43      	ldr	r2, [pc, #268]	; (800759c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d906      	bls.n	80074a2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	4a40      	ldr	r2, [pc, #256]	; (8007598 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007498:	fba2 2303 	umull	r2, r3, r2, r3
 800749c:	0e5b      	lsrs	r3, r3, #25
 800749e:	61bb      	str	r3, [r7, #24]
 80074a0:	e03d      	b.n	800751e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	61bb      	str	r3, [r7, #24]
 80074a8:	e039      	b.n	800751e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	69fa      	ldr	r2, [r7, #28]
 80074b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b6:	4a39      	ldr	r2, [pc, #228]	; (800759c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d906      	bls.n	80074ca <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	4a36      	ldr	r2, [pc, #216]	; (8007598 <HAL_SD_ConfigWideBusOperation+0x218>)
 80074c0:	fba2 2303 	umull	r2, r3, r2, r3
 80074c4:	0e5b      	lsrs	r3, r3, #25
 80074c6:	61bb      	str	r3, [r7, #24]
 80074c8:	e029      	b.n	800751e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	61bb      	str	r3, [r7, #24]
 80074d0:	e025      	b.n	800751e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10e      	bne.n	80074f8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	4a30      	ldr	r2, [pc, #192]	; (80075a0 <HAL_SD_ConfigWideBusOperation+0x220>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d906      	bls.n	80074f0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	4a2c      	ldr	r2, [pc, #176]	; (8007598 <HAL_SD_ConfigWideBusOperation+0x218>)
 80074e6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ea:	0e1b      	lsrs	r3, r3, #24
 80074ec:	61bb      	str	r3, [r7, #24]
 80074ee:	e016      	b.n	800751e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	61bb      	str	r3, [r7, #24]
 80074f6:	e012      	b.n	800751e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	69fa      	ldr	r2, [r7, #28]
 8007500:	fbb2 f3f3 	udiv	r3, r2, r3
 8007504:	4a26      	ldr	r2, [pc, #152]	; (80075a0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d906      	bls.n	8007518 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	4a22      	ldr	r2, [pc, #136]	; (8007598 <HAL_SD_ConfigWideBusOperation+0x218>)
 800750e:	fba2 2303 	umull	r2, r3, r2, r3
 8007512:	0e1b      	lsrs	r3, r3, #24
 8007514:	61bb      	str	r3, [r7, #24]
 8007516:	e002      	b.n	800751e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681c      	ldr	r4, [r3, #0]
 8007522:	466a      	mov	r2, sp
 8007524:	f107 0314 	add.w	r3, r7, #20
 8007528:	e893 0003 	ldmia.w	r3, {r0, r1}
 800752c:	e882 0003 	stmia.w	r2, {r0, r1}
 8007530:	f107 0308 	add.w	r3, r7, #8
 8007534:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007536:	4620      	mov	r0, r4
 8007538:	f000 fc0e 	bl	8007d58 <SDMMC_Init>
 800753c:	e008      	b.n	8007550 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007542:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007558:	4618      	mov	r0, r3
 800755a:	f000 fcdb 	bl	8007f14 <SDMMC_CmdBlockLength>
 800755e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00c      	beq.n	8007580 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a0a      	ldr	r2, [pc, #40]	; (8007594 <HAL_SD_ConfigWideBusOperation+0x214>)
 800756c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	431a      	orrs	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8007588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800758c:	4618      	mov	r0, r3
 800758e:	372c      	adds	r7, #44	; 0x2c
 8007590:	46bd      	mov	sp, r7
 8007592:	bd90      	pop	{r4, r7, pc}
 8007594:	1fe00fff 	.word	0x1fe00fff
 8007598:	55e63b89 	.word	0x55e63b89
 800759c:	02faf080 	.word	0x02faf080
 80075a0:	017d7840 	.word	0x017d7840

080075a4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80075ac:	2300      	movs	r3, #0
 80075ae:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80075b0:	f107 030c 	add.w	r3, r7, #12
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fa40 	bl	8007a3c <SD_SendStatus>
 80075bc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	431a      	orrs	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	0a5b      	lsrs	r3, r3, #9
 80075d4:	f003 030f 	and.w	r3, r3, #15
 80075d8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80075da:	693b      	ldr	r3, [r7, #16]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b090      	sub	sp, #64	; 0x40
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80075ec:	2300      	movs	r3, #0
 80075ee:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80075f0:	f7f9 fd44 	bl	800107c <HAL_GetTick>
 80075f4:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 fc05 	bl	8007e0a <SDMMC_GetPowerState>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d102      	bne.n	800760c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007606:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800760a:	e0b5      	b.n	8007778 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007610:	2b03      	cmp	r3, #3
 8007612:	d02e      	beq.n	8007672 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4618      	mov	r0, r3
 800761a:	f000 fe50 	bl	80082be <SDMMC_CmdSendCID>
 800761e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <SD_InitCard+0x46>
    {
      return errorstate;
 8007626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007628:	e0a6      	b.n	8007778 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2100      	movs	r1, #0
 8007630:	4618      	mov	r0, r3
 8007632:	f000 fc30 	bl	8007e96 <SDMMC_GetResponse>
 8007636:	4602      	mov	r2, r0
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2104      	movs	r1, #4
 8007642:	4618      	mov	r0, r3
 8007644:	f000 fc27 	bl	8007e96 <SDMMC_GetResponse>
 8007648:	4602      	mov	r2, r0
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2108      	movs	r1, #8
 8007654:	4618      	mov	r0, r3
 8007656:	f000 fc1e 	bl	8007e96 <SDMMC_GetResponse>
 800765a:	4602      	mov	r2, r0
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	210c      	movs	r1, #12
 8007666:	4618      	mov	r0, r3
 8007668:	f000 fc15 	bl	8007e96 <SDMMC_GetResponse>
 800766c:	4602      	mov	r2, r0
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007676:	2b03      	cmp	r3, #3
 8007678:	d01d      	beq.n	80076b6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800767a:	e019      	b.n	80076b0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f107 020a 	add.w	r2, r7, #10
 8007684:	4611      	mov	r1, r2
 8007686:	4618      	mov	r0, r3
 8007688:	f000 fe58 	bl	800833c <SDMMC_CmdSetRelAdd>
 800768c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800768e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <SD_InitCard+0xb4>
      {
        return errorstate;
 8007694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007696:	e06f      	b.n	8007778 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007698:	f7f9 fcf0 	bl	800107c <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	f241 3287 	movw	r2, #4999	; 0x1387
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d902      	bls.n	80076b0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80076aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076ae:	e063      	b.n	8007778 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80076b0:	897b      	ldrh	r3, [r7, #10]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0e2      	beq.n	800767c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d036      	beq.n	800772c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80076be:	897b      	ldrh	r3, [r7, #10]
 80076c0:	461a      	mov	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ce:	041b      	lsls	r3, r3, #16
 80076d0:	4619      	mov	r1, r3
 80076d2:	4610      	mov	r0, r2
 80076d4:	f000 fe12 	bl	80082fc <SDMMC_CmdSendCSD>
 80076d8:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80076da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d001      	beq.n	80076e4 <SD_InitCard+0x100>
    {
      return errorstate;
 80076e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e2:	e049      	b.n	8007778 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2100      	movs	r1, #0
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 fbd3 	bl	8007e96 <SDMMC_GetResponse>
 80076f0:	4602      	mov	r2, r0
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2104      	movs	r1, #4
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 fbca 	bl	8007e96 <SDMMC_GetResponse>
 8007702:	4602      	mov	r2, r0
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2108      	movs	r1, #8
 800770e:	4618      	mov	r0, r3
 8007710:	f000 fbc1 	bl	8007e96 <SDMMC_GetResponse>
 8007714:	4602      	mov	r2, r0
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	210c      	movs	r1, #12
 8007720:	4618      	mov	r0, r3
 8007722:	f000 fbb8 	bl	8007e96 <SDMMC_GetResponse>
 8007726:	4602      	mov	r2, r0
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2104      	movs	r1, #4
 8007732:	4618      	mov	r0, r3
 8007734:	f000 fbaf 	bl	8007e96 <SDMMC_GetResponse>
 8007738:	4603      	mov	r3, r0
 800773a:	0d1a      	lsrs	r2, r3, #20
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007740:	f107 030c 	add.w	r3, r7, #12
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7ff fb8c 	bl	8006e64 <HAL_SD_GetCardCSD>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d002      	beq.n	8007758 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007752:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007756:	e00f      	b.n	8007778 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007760:	041b      	lsls	r3, r3, #16
 8007762:	4619      	mov	r1, r3
 8007764:	4610      	mov	r0, r2
 8007766:	f000 fcc1 	bl	80080ec <SDMMC_CmdSelDesel>
 800776a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800776c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <SD_InitCard+0x192>
  {
    return errorstate;
 8007772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007774:	e000      	b.n	8007778 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3740      	adds	r7, #64	; 0x40
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007790:	2300      	movs	r3, #0
 8007792:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4618      	mov	r0, r3
 800779a:	f000 fcca 	bl	8008132 <SDMMC_CmdGoIdleState>
 800779e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <SD_PowerON+0x2a>
  {
    return errorstate;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	e072      	b.n	8007890 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fcdd 	bl	800816e <SDMMC_CmdOperCond>
 80077b4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077bc:	d10d      	bne.n	80077da <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 fcb2 	bl	8008132 <SDMMC_CmdGoIdleState>
 80077ce:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d004      	beq.n	80077e0 <SD_PowerON+0x60>
    {
      return errorstate;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	e05a      	b.n	8007890 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d137      	bne.n	8007858 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2100      	movs	r1, #0
 80077ee:	4618      	mov	r0, r3
 80077f0:	f000 fcdd 	bl	80081ae <SDMMC_CmdAppCommand>
 80077f4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d02d      	beq.n	8007858 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007800:	e046      	b.n	8007890 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2100      	movs	r1, #0
 8007808:	4618      	mov	r0, r3
 800780a:	f000 fcd0 	bl	80081ae <SDMMC_CmdAppCommand>
 800780e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d001      	beq.n	800781a <SD_PowerON+0x9a>
    {
      return errorstate;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	e03a      	b.n	8007890 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	491e      	ldr	r1, [pc, #120]	; (8007898 <SD_PowerON+0x118>)
 8007820:	4618      	mov	r0, r3
 8007822:	f000 fce7 	bl	80081f4 <SDMMC_CmdAppOperCommand>
 8007826:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800782e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007832:	e02d      	b.n	8007890 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2100      	movs	r1, #0
 800783a:	4618      	mov	r0, r3
 800783c:	f000 fb2b 	bl	8007e96 <SDMMC_GetResponse>
 8007840:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	0fdb      	lsrs	r3, r3, #31
 8007846:	2b01      	cmp	r3, #1
 8007848:	d101      	bne.n	800784e <SD_PowerON+0xce>
 800784a:	2301      	movs	r3, #1
 800784c:	e000      	b.n	8007850 <SD_PowerON+0xd0>
 800784e:	2300      	movs	r3, #0
 8007850:	613b      	str	r3, [r7, #16]

    count++;
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	3301      	adds	r3, #1
 8007856:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800785e:	4293      	cmp	r3, r2
 8007860:	d802      	bhi.n	8007868 <SD_PowerON+0xe8>
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d0cc      	beq.n	8007802 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800786e:	4293      	cmp	r3, r2
 8007870:	d902      	bls.n	8007878 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007872:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007876:	e00b      	b.n	8007890 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d002      	beq.n	800788e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3718      	adds	r7, #24
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	c1100000 	.word	0xc1100000

0800789c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08c      	sub	sp, #48	; 0x30
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80078a6:	f7f9 fbe9 	bl	800107c <HAL_GetTick>
 80078aa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2100      	movs	r1, #0
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 faed 	bl	8007e96 <SDMMC_GetResponse>
 80078bc:	4603      	mov	r3, r0
 80078be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078c6:	d102      	bne.n	80078ce <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80078c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078cc:	e0b0      	b.n	8007a30 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2140      	movs	r1, #64	; 0x40
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 fb1d 	bl	8007f14 <SDMMC_CmdBlockLength>
 80078da:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d005      	beq.n	80078ee <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	e0a0      	b.n	8007a30 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f6:	041b      	lsls	r3, r3, #16
 80078f8:	4619      	mov	r1, r3
 80078fa:	4610      	mov	r0, r2
 80078fc:	f000 fc57 	bl	80081ae <SDMMC_CmdAppCommand>
 8007900:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d005      	beq.n	8007914 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007910:	6a3b      	ldr	r3, [r7, #32]
 8007912:	e08d      	b.n	8007a30 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007918:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800791a:	2340      	movs	r3, #64	; 0x40
 800791c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800791e:	2360      	movs	r3, #96	; 0x60
 8007920:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007922:	2302      	movs	r3, #2
 8007924:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007926:	2300      	movs	r3, #0
 8007928:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800792a:	2301      	movs	r3, #1
 800792c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f107 0208 	add.w	r2, r7, #8
 8007936:	4611      	mov	r1, r2
 8007938:	4618      	mov	r0, r3
 800793a:	f000 fabf 	bl	8007ebc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4618      	mov	r0, r3
 8007944:	f000 fd3f 	bl	80083c6 <SDMMC_CmdStatusRegister>
 8007948:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d02b      	beq.n	80079a8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	e069      	b.n	8007a30 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007962:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d013      	beq.n	8007992 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800796a:	2300      	movs	r3, #0
 800796c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800796e:	e00d      	b.n	800798c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4618      	mov	r0, r3
 8007976:	f000 fa19 	bl	8007dac <SDMMC_ReadFIFO>
 800797a:	4602      	mov	r2, r0
 800797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797e:	601a      	str	r2, [r3, #0]
        pData++;
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	3304      	adds	r3, #4
 8007984:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8007986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007988:	3301      	adds	r3, #1
 800798a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800798c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798e:	2b07      	cmp	r3, #7
 8007990:	d9ee      	bls.n	8007970 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007992:	f7f9 fb73 	bl	800107c <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079a0:	d102      	bne.n	80079a8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80079a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079a6:	e043      	b.n	8007a30 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ae:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d0d2      	beq.n	800795c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079bc:	f003 0308 	and.w	r3, r3, #8
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80079c4:	2308      	movs	r3, #8
 80079c6:	e033      	b.n	8007a30 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80079d6:	2302      	movs	r3, #2
 80079d8:	e02a      	b.n	8007a30 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e0:	f003 0320 	and.w	r3, r3, #32
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d017      	beq.n	8007a18 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80079e8:	2320      	movs	r3, #32
 80079ea:	e021      	b.n	8007a30 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f000 f9db 	bl	8007dac <SDMMC_ReadFIFO>
 80079f6:	4602      	mov	r2, r0
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	601a      	str	r2, [r3, #0]
    pData++;
 80079fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fe:	3304      	adds	r3, #4
 8007a00:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007a02:	f7f9 fb3b 	bl	800107c <HAL_GetTick>
 8007a06:	4602      	mov	r2, r0
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a10:	d102      	bne.n	8007a18 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007a12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a16:	e00b      	b.n	8007a30 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e2      	bne.n	80079ec <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a03      	ldr	r2, [pc, #12]	; (8007a38 <SD_SendSDStatus+0x19c>)
 8007a2c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3730      	adds	r7, #48	; 0x30
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	18000f3a 	.word	0x18000f3a

08007a3c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d102      	bne.n	8007a52 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007a4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a50:	e018      	b.n	8007a84 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a5a:	041b      	lsls	r3, r3, #16
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	4610      	mov	r0, r2
 8007a60:	f000 fc8e 	bl	8008380 <SDMMC_CmdSendStatus>
 8007a64:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	e009      	b.n	8007a84 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2100      	movs	r1, #0
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 fa0d 	bl	8007e96 <SDMMC_GetResponse>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007a94:	2300      	movs	r3, #0
 8007a96:	60fb      	str	r3, [r7, #12]
 8007a98:	2300      	movs	r3, #0
 8007a9a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 f9f7 	bl	8007e96 <SDMMC_GetResponse>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ab2:	d102      	bne.n	8007aba <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007ab4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ab8:	e02f      	b.n	8007b1a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007aba:	f107 030c 	add.w	r3, r7, #12
 8007abe:	4619      	mov	r1, r3
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f879 	bl	8007bb8 <SD_FindSCR>
 8007ac6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	e023      	b.n	8007b1a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d01c      	beq.n	8007b16 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae4:	041b      	lsls	r3, r3, #16
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	4610      	mov	r0, r2
 8007aea:	f000 fb60 	bl	80081ae <SDMMC_CmdAppCommand>
 8007aee:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	e00f      	b.n	8007b1a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2102      	movs	r1, #2
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 fb97 	bl	8008234 <SDMMC_CmdBusWidth>
 8007b06:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	e003      	b.n	8007b1a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007b12:	2300      	movs	r3, #0
 8007b14:	e001      	b.n	8007b1a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3718      	adds	r7, #24
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b086      	sub	sp, #24
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]
 8007b2e:	2300      	movs	r3, #0
 8007b30:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2100      	movs	r1, #0
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f000 f9ac 	bl	8007e96 <SDMMC_GetResponse>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b48:	d102      	bne.n	8007b50 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007b4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b4e:	e02f      	b.n	8007bb0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007b50:	f107 030c 	add.w	r3, r7, #12
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f82e 	bl	8007bb8 <SD_FindSCR>
 8007b5c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	e023      	b.n	8007bb0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d01c      	beq.n	8007bac <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b7a:	041b      	lsls	r3, r3, #16
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	4610      	mov	r0, r2
 8007b80:	f000 fb15 	bl	80081ae <SDMMC_CmdAppCommand>
 8007b84:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	e00f      	b.n	8007bb0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2100      	movs	r1, #0
 8007b96:	4618      	mov	r0, r3
 8007b98:	f000 fb4c 	bl	8008234 <SDMMC_CmdBusWidth>
 8007b9c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d001      	beq.n	8007ba8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	e003      	b.n	8007bb0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	e001      	b.n	8007bb0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007bac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b08e      	sub	sp, #56	; 0x38
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007bc2:	f7f9 fa5b 	bl	800107c <HAL_GetTick>
 8007bc6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60bb      	str	r3, [r7, #8]
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2108      	movs	r1, #8
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 f998 	bl	8007f14 <SDMMC_CmdBlockLength>
 8007be4:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	e0ad      	b.n	8007d4c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf8:	041b      	lsls	r3, r3, #16
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	f000 fad6 	bl	80081ae <SDMMC_CmdAppCommand>
 8007c02:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <SD_FindSCR+0x56>
  {
    return errorstate;
 8007c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0c:	e09e      	b.n	8007d4c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c12:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007c14:	2308      	movs	r3, #8
 8007c16:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007c18:	2330      	movs	r3, #48	; 0x30
 8007c1a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007c24:	2301      	movs	r3, #1
 8007c26:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f107 0210 	add.w	r2, r7, #16
 8007c30:	4611      	mov	r1, r2
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 f942 	bl	8007ebc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 fb1c 	bl	800827a <SDMMC_CmdSendSCR>
 8007c42:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d027      	beq.n	8007c9a <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4c:	e07e      	b.n	8007d4c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d113      	bne.n	8007c84 <SD_FindSCR+0xcc>
 8007c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d110      	bne.n	8007c84 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 f8a0 	bl	8007dac <SDMMC_ReadFIFO>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 f899 	bl	8007dac <SDMMC_ReadFIFO>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	60fb      	str	r3, [r7, #12]
      index++;
 8007c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c80:	3301      	adds	r3, #1
 8007c82:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007c84:	f7f9 f9fa 	bl	800107c <HAL_GetTick>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c92:	d102      	bne.n	8007c9a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007c94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c98:	e058      	b.n	8007d4c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ca0:	f240 532a 	movw	r3, #1322	; 0x52a
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d0d1      	beq.n	8007c4e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb0:	f003 0308 	and.w	r3, r3, #8
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d005      	beq.n	8007cc4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2208      	movs	r2, #8
 8007cbe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007cc0:	2308      	movs	r3, #8
 8007cc2:	e043      	b.n	8007d4c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d005      	beq.n	8007cde <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007cda:	2302      	movs	r3, #2
 8007cdc:	e036      	b.n	8007d4c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce4:	f003 0320 	and.w	r3, r3, #32
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d005      	beq.n	8007cf8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007cf4:	2320      	movs	r3, #32
 8007cf6:	e029      	b.n	8007d4c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a15      	ldr	r2, [pc, #84]	; (8007d54 <SD_FindSCR+0x19c>)
 8007cfe:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	061a      	lsls	r2, r3, #24
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	021b      	lsls	r3, r3, #8
 8007d08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d0c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	0a1b      	lsrs	r3, r3, #8
 8007d12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007d16:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	0e1b      	lsrs	r3, r3, #24
 8007d1c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d20:	601a      	str	r2, [r3, #0]
    scr++;
 8007d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d24:	3304      	adds	r3, #4
 8007d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	061a      	lsls	r2, r3, #24
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	021b      	lsls	r3, r3, #8
 8007d30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d34:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	0a1b      	lsrs	r3, r3, #8
 8007d3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007d3e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	0e1b      	lsrs	r3, r3, #24
 8007d44:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d48:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3738      	adds	r7, #56	; 0x38
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	18000f3a 	.word	0x18000f3a

08007d58 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007d58:	b084      	sub	sp, #16
 8007d5a:	b480      	push	{r7}
 8007d5c:	b085      	sub	sp, #20
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	f107 001c 	add.w	r0, r7, #28
 8007d66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8007d6e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8007d70:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8007d72:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8007d76:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8007d7a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8007d7e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685a      	ldr	r2, [r3, #4]
 8007d8a:	4b07      	ldr	r3, [pc, #28]	; (8007da8 <SDMMC_Init+0x50>)
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	431a      	orrs	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	b004      	add	sp, #16
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	ffc02c00 	.word	0xffc02c00

08007dac <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f043 0203 	orr.w	r2, r3, #3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0303 	and.w	r3, r3, #3
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
	...

08007e28 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007e32:	2300      	movs	r3, #0
 8007e34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007e46:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8007e4c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8007e52:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <SDMMC_SendCommand+0x50>)
 8007e60:	4013      	ands	r3, r2
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	431a      	orrs	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	fffee0c0 	.word	0xfffee0c0

08007e7c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	b2db      	uxtb	r3, r3
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b085      	sub	sp, #20
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
 8007e9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3314      	adds	r3, #20
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007ee2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8007ee8:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8007eee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	431a      	orrs	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007f06:	2300      	movs	r3, #0

}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3714      	adds	r7, #20
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007f22:	2310      	movs	r3, #16
 8007f24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f36:	f107 0308 	add.w	r3, r7, #8
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7ff ff73 	bl	8007e28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f46:	2110      	movs	r1, #16
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fa5f 	bl	800840c <SDMMC_GetCmdResp1>
 8007f4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f50:	69fb      	ldr	r3, [r7, #28]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3720      	adds	r7, #32
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b088      	sub	sp, #32
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007f68:	2311      	movs	r3, #17
 8007f6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f72:	2300      	movs	r3, #0
 8007f74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f7c:	f107 0308 	add.w	r3, r7, #8
 8007f80:	4619      	mov	r1, r3
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7ff ff50 	bl	8007e28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f8c:	2111      	movs	r1, #17
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fa3c 	bl	800840c <SDMMC_GetCmdResp1>
 8007f94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f96:	69fb      	ldr	r3, [r7, #28]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3720      	adds	r7, #32
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b088      	sub	sp, #32
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007fae:	2312      	movs	r3, #18
 8007fb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fc2:	f107 0308 	add.w	r3, r7, #8
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7ff ff2d 	bl	8007e28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fd2:	2112      	movs	r1, #18
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fa19 	bl	800840c <SDMMC_GetCmdResp1>
 8007fda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fdc:	69fb      	ldr	r3, [r7, #28]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3720      	adds	r7, #32
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b088      	sub	sp, #32
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007ff4:	2318      	movs	r3, #24
 8007ff6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ffc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ffe:	2300      	movs	r3, #0
 8008000:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008006:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008008:	f107 0308 	add.w	r3, r7, #8
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff ff0a 	bl	8007e28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008014:	f241 3288 	movw	r2, #5000	; 0x1388
 8008018:	2118      	movs	r1, #24
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f9f6 	bl	800840c <SDMMC_GetCmdResp1>
 8008020:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008022:	69fb      	ldr	r3, [r7, #28]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3720      	adds	r7, #32
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b088      	sub	sp, #32
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800803a:	2319      	movs	r3, #25
 800803c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800803e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008042:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008044:	2300      	movs	r3, #0
 8008046:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800804c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800804e:	f107 0308 	add.w	r3, r7, #8
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7ff fee7 	bl	8007e28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800805a:	f241 3288 	movw	r2, #5000	; 0x1388
 800805e:	2119      	movs	r1, #25
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f9d3 	bl	800840c <SDMMC_GetCmdResp1>
 8008066:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008068:	69fb      	ldr	r3, [r7, #28]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3720      	adds	r7, #32
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
	...

08008074 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b088      	sub	sp, #32
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008080:	230c      	movs	r3, #12
 8008082:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008084:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008088:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800808a:	2300      	movs	r3, #0
 800808c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800808e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008092:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080ac:	f107 0308 	add.w	r3, r7, #8
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff feb8 	bl	8007e28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80080b8:	4a0b      	ldr	r2, [pc, #44]	; (80080e8 <SDMMC_CmdStopTransfer+0x74>)
 80080ba:	210c      	movs	r1, #12
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f9a5 	bl	800840c <SDMMC_GetCmdResp1>
 80080c2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080d6:	d101      	bne.n	80080dc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80080d8:	2300      	movs	r3, #0
 80080da:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80080dc:	69fb      	ldr	r3, [r7, #28]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3720      	adds	r7, #32
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	05f5e100 	.word	0x05f5e100

080080ec <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b088      	sub	sp, #32
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80080fa:	2307      	movs	r3, #7
 80080fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008102:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008104:	2300      	movs	r3, #0
 8008106:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800810c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800810e:	f107 0308 	add.w	r3, r7, #8
 8008112:	4619      	mov	r1, r3
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7ff fe87 	bl	8007e28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800811a:	f241 3288 	movw	r2, #5000	; 0x1388
 800811e:	2107      	movs	r1, #7
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f973 	bl	800840c <SDMMC_GetCmdResp1>
 8008126:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008128:	69fb      	ldr	r3, [r7, #28]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3720      	adds	r7, #32
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b088      	sub	sp, #32
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800813a:	2300      	movs	r3, #0
 800813c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800813e:	2300      	movs	r3, #0
 8008140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008142:	2300      	movs	r3, #0
 8008144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008146:	2300      	movs	r3, #0
 8008148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800814a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800814e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008150:	f107 0308 	add.w	r3, r7, #8
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7ff fe66 	bl	8007e28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fb97 	bl	8008890 <SDMMC_GetCmdError>
 8008162:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008164:	69fb      	ldr	r3, [r7, #28]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3720      	adds	r7, #32
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b088      	sub	sp, #32
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008176:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800817a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800817c:	2308      	movs	r3, #8
 800817e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008180:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008184:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008186:	2300      	movs	r3, #0
 8008188:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800818a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800818e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008190:	f107 0308 	add.w	r3, r7, #8
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7ff fe46 	bl	8007e28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fb29 	bl	80087f4 <SDMMC_GetCmdResp7>
 80081a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081a4:	69fb      	ldr	r3, [r7, #28]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3720      	adds	r7, #32
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b088      	sub	sp, #32
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80081bc:	2337      	movs	r3, #55	; 0x37
 80081be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081c6:	2300      	movs	r3, #0
 80081c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081d0:	f107 0308 	add.w	r3, r7, #8
 80081d4:	4619      	mov	r1, r3
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7ff fe26 	bl	8007e28 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80081dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80081e0:	2137      	movs	r1, #55	; 0x37
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f912 	bl	800840c <SDMMC_GetCmdResp1>
 80081e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081ea:	69fb      	ldr	r3, [r7, #28]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3720      	adds	r7, #32
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b088      	sub	sp, #32
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008202:	2329      	movs	r3, #41	; 0x29
 8008204:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008206:	f44f 7380 	mov.w	r3, #256	; 0x100
 800820a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800820c:	2300      	movs	r3, #0
 800820e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008214:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008216:	f107 0308 	add.w	r3, r7, #8
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f7ff fe03 	bl	8007e28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fa2e 	bl	8008684 <SDMMC_GetCmdResp3>
 8008228:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800822a:	69fb      	ldr	r3, [r7, #28]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3720      	adds	r7, #32
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b088      	sub	sp, #32
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008242:	2306      	movs	r3, #6
 8008244:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800824a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800824c:	2300      	movs	r3, #0
 800824e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008254:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008256:	f107 0308 	add.w	r3, r7, #8
 800825a:	4619      	mov	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7ff fde3 	bl	8007e28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008262:	f241 3288 	movw	r2, #5000	; 0x1388
 8008266:	2106      	movs	r1, #6
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f8cf 	bl	800840c <SDMMC_GetCmdResp1>
 800826e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008270:	69fb      	ldr	r3, [r7, #28]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3720      	adds	r7, #32
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b088      	sub	sp, #32
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008286:	2333      	movs	r3, #51	; 0x33
 8008288:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800828a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800828e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008290:	2300      	movs	r3, #0
 8008292:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008298:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800829a:	f107 0308 	add.w	r3, r7, #8
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7ff fdc1 	bl	8007e28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80082a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80082aa:	2133      	movs	r1, #51	; 0x33
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f8ad 	bl	800840c <SDMMC_GetCmdResp1>
 80082b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082b4:	69fb      	ldr	r3, [r7, #28]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3720      	adds	r7, #32
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b088      	sub	sp, #32
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80082ca:	2302      	movs	r3, #2
 80082cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80082ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80082d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082d4:	2300      	movs	r3, #0
 80082d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082de:	f107 0308 	add.w	r3, r7, #8
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7ff fd9f 	bl	8007e28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f980 	bl	80085f0 <SDMMC_GetCmdResp2>
 80082f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082f2:	69fb      	ldr	r3, [r7, #28]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3720      	adds	r7, #32
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800830a:	2309      	movs	r3, #9
 800830c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800830e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008312:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008314:	2300      	movs	r3, #0
 8008316:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800831c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800831e:	f107 0308 	add.w	r3, r7, #8
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7ff fd7f 	bl	8007e28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f960 	bl	80085f0 <SDMMC_GetCmdResp2>
 8008330:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008332:	69fb      	ldr	r3, [r7, #28]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3720      	adds	r7, #32
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b088      	sub	sp, #32
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800834a:	2303      	movs	r3, #3
 800834c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800834e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008352:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008354:	2300      	movs	r3, #0
 8008356:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800835c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800835e:	f107 0308 	add.w	r3, r7, #8
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7ff fd5f 	bl	8007e28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	2103      	movs	r1, #3
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f9c8 	bl	8008704 <SDMMC_GetCmdResp6>
 8008374:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008376:	69fb      	ldr	r3, [r7, #28]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3720      	adds	r7, #32
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b088      	sub	sp, #32
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800838e:	230d      	movs	r3, #13
 8008390:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008396:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008398:	2300      	movs	r3, #0
 800839a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800839c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083a2:	f107 0308 	add.w	r3, r7, #8
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7ff fd3d 	bl	8007e28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80083ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80083b2:	210d      	movs	r1, #13
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f829 	bl	800840c <SDMMC_GetCmdResp1>
 80083ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083bc:	69fb      	ldr	r3, [r7, #28]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3720      	adds	r7, #32
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b088      	sub	sp, #32
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80083ce:	2300      	movs	r3, #0
 80083d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80083d2:	230d      	movs	r3, #13
 80083d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083dc:	2300      	movs	r3, #0
 80083de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083e6:	f107 0308 	add.w	r3, r7, #8
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7ff fd1b 	bl	8007e28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80083f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80083f6:	210d      	movs	r1, #13
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f807 	bl	800840c <SDMMC_GetCmdResp1>
 80083fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008400:	69fb      	ldr	r3, [r7, #28]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3720      	adds	r7, #32
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b088      	sub	sp, #32
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	460b      	mov	r3, r1
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800841a:	4b70      	ldr	r3, [pc, #448]	; (80085dc <SDMMC_GetCmdResp1+0x1d0>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a70      	ldr	r2, [pc, #448]	; (80085e0 <SDMMC_GetCmdResp1+0x1d4>)
 8008420:	fba2 2303 	umull	r2, r3, r2, r3
 8008424:	0a5a      	lsrs	r2, r3, #9
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	fb02 f303 	mul.w	r3, r2, r3
 800842c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	1e5a      	subs	r2, r3, #1
 8008432:	61fa      	str	r2, [r7, #28]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d102      	bne.n	800843e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008438:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800843c:	e0c9      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008442:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8008444:	69ba      	ldr	r2, [r7, #24]
 8008446:	4b67      	ldr	r3, [pc, #412]	; (80085e4 <SDMMC_GetCmdResp1+0x1d8>)
 8008448:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800844a:	2b00      	cmp	r3, #0
 800844c:	d0ef      	beq.n	800842e <SDMMC_GetCmdResp1+0x22>
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1ea      	bne.n	800842e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845c:	f003 0304 	and.w	r3, r3, #4
 8008460:	2b00      	cmp	r3, #0
 8008462:	d004      	beq.n	800846e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2204      	movs	r2, #4
 8008468:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800846a:	2304      	movs	r3, #4
 800846c:	e0b1      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	2b00      	cmp	r3, #0
 8008478:	d004      	beq.n	8008484 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2201      	movs	r2, #1
 800847e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008480:	2301      	movs	r3, #1
 8008482:	e0a6      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	4a58      	ldr	r2, [pc, #352]	; (80085e8 <SDMMC_GetCmdResp1+0x1dc>)
 8008488:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f7ff fcf6 	bl	8007e7c <SDMMC_GetCommandResponse>
 8008490:	4603      	mov	r3, r0
 8008492:	461a      	mov	r2, r3
 8008494:	7afb      	ldrb	r3, [r7, #11]
 8008496:	4293      	cmp	r3, r2
 8008498:	d001      	beq.n	800849e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800849a:	2301      	movs	r3, #1
 800849c:	e099      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800849e:	2100      	movs	r1, #0
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f7ff fcf8 	bl	8007e96 <SDMMC_GetResponse>
 80084a6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80084a8:	697a      	ldr	r2, [r7, #20]
 80084aa:	4b50      	ldr	r3, [pc, #320]	; (80085ec <SDMMC_GetCmdResp1+0x1e0>)
 80084ac:	4013      	ands	r3, r2
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80084b2:	2300      	movs	r3, #0
 80084b4:	e08d      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	da02      	bge.n	80084c2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80084bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084c0:	e087      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80084cc:	2340      	movs	r3, #64	; 0x40
 80084ce:	e080      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80084da:	2380      	movs	r3, #128	; 0x80
 80084dc:	e079      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80084e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084ec:	e071      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80084f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084fc:	e069      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800850c:	e061      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008518:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800851c:	e059      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d002      	beq.n	800852e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800852c:	e051      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800853c:	e049      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008548:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800854c:	e041      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008558:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800855c:	e039      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008568:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800856c:	e031      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d002      	beq.n	800857e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008578:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800857c:	e029      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008588:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800858c:	e021      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008594:	2b00      	cmp	r3, #0
 8008596:	d002      	beq.n	800859e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008598:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800859c:	e019      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80085a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80085ac:	e011      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80085b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80085bc:	e009      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	f003 0308 	and.w	r3, r3, #8
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80085c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80085cc:	e001      	b.n	80085d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80085ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3720      	adds	r7, #32
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	24000000 	.word	0x24000000
 80085e0:	10624dd3 	.word	0x10624dd3
 80085e4:	00200045 	.word	0x00200045
 80085e8:	002000c5 	.word	0x002000c5
 80085ec:	fdffe008 	.word	0xfdffe008

080085f0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80085f8:	4b1f      	ldr	r3, [pc, #124]	; (8008678 <SDMMC_GetCmdResp2+0x88>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a1f      	ldr	r2, [pc, #124]	; (800867c <SDMMC_GetCmdResp2+0x8c>)
 80085fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008602:	0a5b      	lsrs	r3, r3, #9
 8008604:	f241 3288 	movw	r2, #5000	; 0x1388
 8008608:	fb02 f303 	mul.w	r3, r2, r3
 800860c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	1e5a      	subs	r2, r3, #1
 8008612:	60fa      	str	r2, [r7, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d102      	bne.n	800861e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008618:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800861c:	e026      	b.n	800866c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008622:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800862a:	2b00      	cmp	r3, #0
 800862c:	d0ef      	beq.n	800860e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1ea      	bne.n	800860e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800863c:	f003 0304 	and.w	r3, r3, #4
 8008640:	2b00      	cmp	r3, #0
 8008642:	d004      	beq.n	800864e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2204      	movs	r2, #4
 8008648:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800864a:	2304      	movs	r3, #4
 800864c:	e00e      	b.n	800866c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	2b00      	cmp	r3, #0
 8008658:	d004      	beq.n	8008664 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008660:	2301      	movs	r3, #1
 8008662:	e003      	b.n	800866c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a06      	ldr	r2, [pc, #24]	; (8008680 <SDMMC_GetCmdResp2+0x90>)
 8008668:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr
 8008678:	24000000 	.word	0x24000000
 800867c:	10624dd3 	.word	0x10624dd3
 8008680:	002000c5 	.word	0x002000c5

08008684 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800868c:	4b1a      	ldr	r3, [pc, #104]	; (80086f8 <SDMMC_GetCmdResp3+0x74>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a1a      	ldr	r2, [pc, #104]	; (80086fc <SDMMC_GetCmdResp3+0x78>)
 8008692:	fba2 2303 	umull	r2, r3, r2, r3
 8008696:	0a5b      	lsrs	r3, r3, #9
 8008698:	f241 3288 	movw	r2, #5000	; 0x1388
 800869c:	fb02 f303 	mul.w	r3, r2, r3
 80086a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	1e5a      	subs	r2, r3, #1
 80086a6:	60fa      	str	r2, [r7, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d102      	bne.n	80086b2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80086ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086b0:	e01b      	b.n	80086ea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d0ef      	beq.n	80086a2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1ea      	bne.n	80086a2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d0:	f003 0304 	and.w	r3, r3, #4
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d004      	beq.n	80086e2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2204      	movs	r2, #4
 80086dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80086de:	2304      	movs	r3, #4
 80086e0:	e003      	b.n	80086ea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a06      	ldr	r2, [pc, #24]	; (8008700 <SDMMC_GetCmdResp3+0x7c>)
 80086e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	24000000 	.word	0x24000000
 80086fc:	10624dd3 	.word	0x10624dd3
 8008700:	002000c5 	.word	0x002000c5

08008704 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b088      	sub	sp, #32
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	460b      	mov	r3, r1
 800870e:	607a      	str	r2, [r7, #4]
 8008710:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008712:	4b35      	ldr	r3, [pc, #212]	; (80087e8 <SDMMC_GetCmdResp6+0xe4>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a35      	ldr	r2, [pc, #212]	; (80087ec <SDMMC_GetCmdResp6+0xe8>)
 8008718:	fba2 2303 	umull	r2, r3, r2, r3
 800871c:	0a5b      	lsrs	r3, r3, #9
 800871e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008722:	fb02 f303 	mul.w	r3, r2, r3
 8008726:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	1e5a      	subs	r2, r3, #1
 800872c:	61fa      	str	r2, [r7, #28]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d102      	bne.n	8008738 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008732:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008736:	e052      	b.n	80087de <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008744:	2b00      	cmp	r3, #0
 8008746:	d0ef      	beq.n	8008728 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1ea      	bne.n	8008728 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008756:	f003 0304 	and.w	r3, r3, #4
 800875a:	2b00      	cmp	r3, #0
 800875c:	d004      	beq.n	8008768 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2204      	movs	r2, #4
 8008762:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008764:	2304      	movs	r3, #4
 8008766:	e03a      	b.n	80087de <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800876c:	f003 0301 	and.w	r3, r3, #1
 8008770:	2b00      	cmp	r3, #0
 8008772:	d004      	beq.n	800877e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2201      	movs	r2, #1
 8008778:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800877a:	2301      	movs	r3, #1
 800877c:	e02f      	b.n	80087de <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f7ff fb7c 	bl	8007e7c <SDMMC_GetCommandResponse>
 8008784:	4603      	mov	r3, r0
 8008786:	461a      	mov	r2, r3
 8008788:	7afb      	ldrb	r3, [r7, #11]
 800878a:	4293      	cmp	r3, r2
 800878c:	d001      	beq.n	8008792 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800878e:	2301      	movs	r3, #1
 8008790:	e025      	b.n	80087de <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	4a16      	ldr	r2, [pc, #88]	; (80087f0 <SDMMC_GetCmdResp6+0xec>)
 8008796:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008798:	2100      	movs	r1, #0
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f7ff fb7b 	bl	8007e96 <SDMMC_GetResponse>
 80087a0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d106      	bne.n	80087ba <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	0c1b      	lsrs	r3, r3, #16
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80087b6:	2300      	movs	r3, #0
 80087b8:	e011      	b.n	80087de <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80087c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087c8:	e009      	b.n	80087de <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d002      	beq.n	80087da <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80087d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087d8:	e001      	b.n	80087de <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80087da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3720      	adds	r7, #32
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	24000000 	.word	0x24000000
 80087ec:	10624dd3 	.word	0x10624dd3
 80087f0:	002000c5 	.word	0x002000c5

080087f4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80087fc:	4b22      	ldr	r3, [pc, #136]	; (8008888 <SDMMC_GetCmdResp7+0x94>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a22      	ldr	r2, [pc, #136]	; (800888c <SDMMC_GetCmdResp7+0x98>)
 8008802:	fba2 2303 	umull	r2, r3, r2, r3
 8008806:	0a5b      	lsrs	r3, r3, #9
 8008808:	f241 3288 	movw	r2, #5000	; 0x1388
 800880c:	fb02 f303 	mul.w	r3, r2, r3
 8008810:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	1e5a      	subs	r2, r3, #1
 8008816:	60fa      	str	r2, [r7, #12]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d102      	bne.n	8008822 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800881c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008820:	e02c      	b.n	800887c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008826:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800882e:	2b00      	cmp	r3, #0
 8008830:	d0ef      	beq.n	8008812 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1ea      	bne.n	8008812 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008840:	f003 0304 	and.w	r3, r3, #4
 8008844:	2b00      	cmp	r3, #0
 8008846:	d004      	beq.n	8008852 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2204      	movs	r2, #4
 800884c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800884e:	2304      	movs	r3, #4
 8008850:	e014      	b.n	800887c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	2b00      	cmp	r3, #0
 800885c:	d004      	beq.n	8008868 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008864:	2301      	movs	r3, #1
 8008866:	e009      	b.n	800887c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800886c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008870:	2b00      	cmp	r3, #0
 8008872:	d002      	beq.n	800887a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2240      	movs	r2, #64	; 0x40
 8008878:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800887a:	2300      	movs	r3, #0

}
 800887c:	4618      	mov	r0, r3
 800887e:	3714      	adds	r7, #20
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	24000000 	.word	0x24000000
 800888c:	10624dd3 	.word	0x10624dd3

08008890 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008898:	4b11      	ldr	r3, [pc, #68]	; (80088e0 <SDMMC_GetCmdError+0x50>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a11      	ldr	r2, [pc, #68]	; (80088e4 <SDMMC_GetCmdError+0x54>)
 800889e:	fba2 2303 	umull	r2, r3, r2, r3
 80088a2:	0a5b      	lsrs	r3, r3, #9
 80088a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80088a8:	fb02 f303 	mul.w	r3, r2, r3
 80088ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	1e5a      	subs	r2, r3, #1
 80088b2:	60fa      	str	r2, [r7, #12]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d102      	bne.n	80088be <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088bc:	e009      	b.n	80088d2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0f1      	beq.n	80088ae <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a06      	ldr	r2, [pc, #24]	; (80088e8 <SDMMC_GetCmdError+0x58>)
 80088ce:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	24000000 	.word	0x24000000
 80088e4:	10624dd3 	.word	0x10624dd3
 80088e8:	002000c5 	.word	0x002000c5

080088ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088ec:	b084      	sub	sp, #16
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b084      	sub	sp, #16
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	f107 001c 	add.w	r0, r7, #28
 80088fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088fe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008902:	2b01      	cmp	r3, #1
 8008904:	d121      	bne.n	800894a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68da      	ldr	r2, [r3, #12]
 8008916:	4b2c      	ldr	r3, [pc, #176]	; (80089c8 <USB_CoreInit+0xdc>)
 8008918:	4013      	ands	r3, r2
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800892a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800892e:	2b01      	cmp	r3, #1
 8008930:	d105      	bne.n	800893e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f001 faf6 	bl	8009f30 <USB_CoreReset>
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]
 8008948:	e01b      	b.n	8008982 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f001 faea 	bl	8009f30 <USB_CoreReset>
 800895c:	4603      	mov	r3, r0
 800895e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008960:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008964:	2b00      	cmp	r3, #0
 8008966:	d106      	bne.n	8008976 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	639a      	str	r2, [r3, #56]	; 0x38
 8008974:	e005      	b.n	8008982 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008982:	7fbb      	ldrb	r3, [r7, #30]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d116      	bne.n	80089b6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800898c:	b29a      	uxth	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008996:	4b0d      	ldr	r3, [pc, #52]	; (80089cc <USB_CoreInit+0xe0>)
 8008998:	4313      	orrs	r3, r2
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f043 0206 	orr.w	r2, r3, #6
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	f043 0220 	orr.w	r2, r3, #32
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80089b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089c2:	b004      	add	sp, #16
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	ffbdffbf 	.word	0xffbdffbf
 80089cc:	03ee0000 	.word	0x03ee0000

080089d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b087      	sub	sp, #28
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	4613      	mov	r3, r2
 80089dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80089de:	79fb      	ldrb	r3, [r7, #7]
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d165      	bne.n	8008ab0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	4a41      	ldr	r2, [pc, #260]	; (8008aec <USB_SetTurnaroundTime+0x11c>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d906      	bls.n	80089fa <USB_SetTurnaroundTime+0x2a>
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	4a40      	ldr	r2, [pc, #256]	; (8008af0 <USB_SetTurnaroundTime+0x120>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d202      	bcs.n	80089fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80089f4:	230f      	movs	r3, #15
 80089f6:	617b      	str	r3, [r7, #20]
 80089f8:	e062      	b.n	8008ac0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	4a3c      	ldr	r2, [pc, #240]	; (8008af0 <USB_SetTurnaroundTime+0x120>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d306      	bcc.n	8008a10 <USB_SetTurnaroundTime+0x40>
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	4a3b      	ldr	r2, [pc, #236]	; (8008af4 <USB_SetTurnaroundTime+0x124>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d202      	bcs.n	8008a10 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008a0a:	230e      	movs	r3, #14
 8008a0c:	617b      	str	r3, [r7, #20]
 8008a0e:	e057      	b.n	8008ac0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	4a38      	ldr	r2, [pc, #224]	; (8008af4 <USB_SetTurnaroundTime+0x124>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d306      	bcc.n	8008a26 <USB_SetTurnaroundTime+0x56>
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	4a37      	ldr	r2, [pc, #220]	; (8008af8 <USB_SetTurnaroundTime+0x128>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d202      	bcs.n	8008a26 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008a20:	230d      	movs	r3, #13
 8008a22:	617b      	str	r3, [r7, #20]
 8008a24:	e04c      	b.n	8008ac0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	4a33      	ldr	r2, [pc, #204]	; (8008af8 <USB_SetTurnaroundTime+0x128>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d306      	bcc.n	8008a3c <USB_SetTurnaroundTime+0x6c>
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	4a32      	ldr	r2, [pc, #200]	; (8008afc <USB_SetTurnaroundTime+0x12c>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d802      	bhi.n	8008a3c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008a36:	230c      	movs	r3, #12
 8008a38:	617b      	str	r3, [r7, #20]
 8008a3a:	e041      	b.n	8008ac0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	4a2f      	ldr	r2, [pc, #188]	; (8008afc <USB_SetTurnaroundTime+0x12c>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d906      	bls.n	8008a52 <USB_SetTurnaroundTime+0x82>
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	4a2e      	ldr	r2, [pc, #184]	; (8008b00 <USB_SetTurnaroundTime+0x130>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d802      	bhi.n	8008a52 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008a4c:	230b      	movs	r3, #11
 8008a4e:	617b      	str	r3, [r7, #20]
 8008a50:	e036      	b.n	8008ac0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	4a2a      	ldr	r2, [pc, #168]	; (8008b00 <USB_SetTurnaroundTime+0x130>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d906      	bls.n	8008a68 <USB_SetTurnaroundTime+0x98>
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	4a29      	ldr	r2, [pc, #164]	; (8008b04 <USB_SetTurnaroundTime+0x134>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d802      	bhi.n	8008a68 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008a62:	230a      	movs	r3, #10
 8008a64:	617b      	str	r3, [r7, #20]
 8008a66:	e02b      	b.n	8008ac0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	4a26      	ldr	r2, [pc, #152]	; (8008b04 <USB_SetTurnaroundTime+0x134>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d906      	bls.n	8008a7e <USB_SetTurnaroundTime+0xae>
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	4a25      	ldr	r2, [pc, #148]	; (8008b08 <USB_SetTurnaroundTime+0x138>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d202      	bcs.n	8008a7e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008a78:	2309      	movs	r3, #9
 8008a7a:	617b      	str	r3, [r7, #20]
 8008a7c:	e020      	b.n	8008ac0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	4a21      	ldr	r2, [pc, #132]	; (8008b08 <USB_SetTurnaroundTime+0x138>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d306      	bcc.n	8008a94 <USB_SetTurnaroundTime+0xc4>
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	4a20      	ldr	r2, [pc, #128]	; (8008b0c <USB_SetTurnaroundTime+0x13c>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d802      	bhi.n	8008a94 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008a8e:	2308      	movs	r3, #8
 8008a90:	617b      	str	r3, [r7, #20]
 8008a92:	e015      	b.n	8008ac0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	4a1d      	ldr	r2, [pc, #116]	; (8008b0c <USB_SetTurnaroundTime+0x13c>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d906      	bls.n	8008aaa <USB_SetTurnaroundTime+0xda>
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	4a1c      	ldr	r2, [pc, #112]	; (8008b10 <USB_SetTurnaroundTime+0x140>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d202      	bcs.n	8008aaa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008aa4:	2307      	movs	r3, #7
 8008aa6:	617b      	str	r3, [r7, #20]
 8008aa8:	e00a      	b.n	8008ac0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008aaa:	2306      	movs	r3, #6
 8008aac:	617b      	str	r3, [r7, #20]
 8008aae:	e007      	b.n	8008ac0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008ab0:	79fb      	ldrb	r3, [r7, #7]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d102      	bne.n	8008abc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008ab6:	2309      	movs	r3, #9
 8008ab8:	617b      	str	r3, [r7, #20]
 8008aba:	e001      	b.n	8008ac0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008abc:	2309      	movs	r3, #9
 8008abe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	68da      	ldr	r2, [r3, #12]
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	029b      	lsls	r3, r3, #10
 8008ad4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008ad8:	431a      	orrs	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	371c      	adds	r7, #28
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr
 8008aec:	00d8acbf 	.word	0x00d8acbf
 8008af0:	00e4e1c0 	.word	0x00e4e1c0
 8008af4:	00f42400 	.word	0x00f42400
 8008af8:	01067380 	.word	0x01067380
 8008afc:	011a499f 	.word	0x011a499f
 8008b00:	01312cff 	.word	0x01312cff
 8008b04:	014ca43f 	.word	0x014ca43f
 8008b08:	016e3600 	.word	0x016e3600
 8008b0c:	01a6ab1f 	.word	0x01a6ab1f
 8008b10:	01e84800 	.word	0x01e84800

08008b14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f043 0201 	orr.w	r2, r3, #1
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b083      	sub	sp, #12
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	f023 0201 	bic.w	r2, r3, #1
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	460b      	mov	r3, r1
 8008b62:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008b64:	2300      	movs	r3, #0
 8008b66:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b74:	78fb      	ldrb	r3, [r7, #3]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d115      	bne.n	8008ba6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008b86:	200a      	movs	r0, #10
 8008b88:	f7f8 fa84 	bl	8001094 <HAL_Delay>
      ms += 10U;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	330a      	adds	r3, #10
 8008b90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f001 f93b 	bl	8009e0e <USB_GetMode>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d01e      	beq.n	8008bdc <USB_SetCurrentMode+0x84>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2bc7      	cmp	r3, #199	; 0xc7
 8008ba2:	d9f0      	bls.n	8008b86 <USB_SetCurrentMode+0x2e>
 8008ba4:	e01a      	b.n	8008bdc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ba6:	78fb      	ldrb	r3, [r7, #3]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d115      	bne.n	8008bd8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008bb8:	200a      	movs	r0, #10
 8008bba:	f7f8 fa6b 	bl	8001094 <HAL_Delay>
      ms += 10U;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	330a      	adds	r3, #10
 8008bc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f001 f922 	bl	8009e0e <USB_GetMode>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d005      	beq.n	8008bdc <USB_SetCurrentMode+0x84>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2bc7      	cmp	r3, #199	; 0xc7
 8008bd4:	d9f0      	bls.n	8008bb8 <USB_SetCurrentMode+0x60>
 8008bd6:	e001      	b.n	8008bdc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e005      	b.n	8008be8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2bc8      	cmp	r3, #200	; 0xc8
 8008be0:	d101      	bne.n	8008be6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e000      	b.n	8008be8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bf0:	b084      	sub	sp, #16
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b086      	sub	sp, #24
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008bfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	613b      	str	r3, [r7, #16]
 8008c0e:	e009      	b.n	8008c24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	3340      	adds	r3, #64	; 0x40
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4413      	add	r3, r2
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	3301      	adds	r3, #1
 8008c22:	613b      	str	r3, [r7, #16]
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	2b0e      	cmp	r3, #14
 8008c28:	d9f2      	bls.n	8008c10 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008c2a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d11c      	bne.n	8008c6c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c40:	f043 0302 	orr.w	r3, r3, #2
 8008c44:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	e005      	b.n	8008c78 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c70:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c7e:	461a      	mov	r2, r3
 8008c80:	2300      	movs	r3, #0
 8008c82:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c84:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d10d      	bne.n	8008ca8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d104      	bne.n	8008c9e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c94:	2100      	movs	r1, #0
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f968 	bl	8008f6c <USB_SetDevSpeed>
 8008c9c:	e008      	b.n	8008cb0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f963 	bl	8008f6c <USB_SetDevSpeed>
 8008ca6:	e003      	b.n	8008cb0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ca8:	2103      	movs	r1, #3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f95e 	bl	8008f6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008cb0:	2110      	movs	r1, #16
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f8fa 	bl	8008eac <USB_FlushTxFifo>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f924 	bl	8008f10 <USB_FlushRxFifo>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd8:	461a      	mov	r2, r3
 8008cda:	2300      	movs	r3, #0
 8008cdc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	613b      	str	r3, [r7, #16]
 8008cfa:	e043      	b.n	8008d84 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d12:	d118      	bne.n	8008d46 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d10a      	bne.n	8008d30 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	015a      	lsls	r2, r3, #5
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	4413      	add	r3, r2
 8008d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d26:	461a      	mov	r2, r3
 8008d28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d2c:	6013      	str	r3, [r2, #0]
 8008d2e:	e013      	b.n	8008d58 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d42:	6013      	str	r3, [r2, #0]
 8008d44:	e008      	b.n	8008d58 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d52:	461a      	mov	r2, r3
 8008d54:	2300      	movs	r3, #0
 8008d56:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	015a      	lsls	r2, r3, #5
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	4413      	add	r3, r2
 8008d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d64:	461a      	mov	r2, r3
 8008d66:	2300      	movs	r3, #0
 8008d68:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	015a      	lsls	r2, r3, #5
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	4413      	add	r3, r2
 8008d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d76:	461a      	mov	r2, r3
 8008d78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	3301      	adds	r3, #1
 8008d82:	613b      	str	r3, [r7, #16]
 8008d84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d88:	461a      	mov	r2, r3
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d3b5      	bcc.n	8008cfc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d90:	2300      	movs	r3, #0
 8008d92:	613b      	str	r3, [r7, #16]
 8008d94:	e043      	b.n	8008e1e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	015a      	lsls	r2, r3, #5
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008da8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dac:	d118      	bne.n	8008de0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10a      	bne.n	8008dca <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008dc6:	6013      	str	r3, [r2, #0]
 8008dc8:	e013      	b.n	8008df2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	015a      	lsls	r2, r3, #5
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ddc:	6013      	str	r3, [r2, #0]
 8008dde:	e008      	b.n	8008df2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	015a      	lsls	r2, r3, #5
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dec:	461a      	mov	r2, r3
 8008dee:	2300      	movs	r3, #0
 8008df0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	015a      	lsls	r2, r3, #5
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	4413      	add	r3, r2
 8008dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dfe:	461a      	mov	r2, r3
 8008e00:	2300      	movs	r3, #0
 8008e02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e10:	461a      	mov	r2, r3
 8008e12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	613b      	str	r3, [r7, #16]
 8008e1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e22:	461a      	mov	r2, r3
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d3b5      	bcc.n	8008d96 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e3c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008e4a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d105      	bne.n	8008e60 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	f043 0210 	orr.w	r2, r3, #16
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	699a      	ldr	r2, [r3, #24]
 8008e64:	4b0f      	ldr	r3, [pc, #60]	; (8008ea4 <USB_DevInit+0x2b4>)
 8008e66:	4313      	orrs	r3, r2
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008e6c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d005      	beq.n	8008e80 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	f043 0208 	orr.w	r2, r3, #8
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008e80:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d105      	bne.n	8008e94 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	699a      	ldr	r2, [r3, #24]
 8008e8c:	4b06      	ldr	r3, [pc, #24]	; (8008ea8 <USB_DevInit+0x2b8>)
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ea0:	b004      	add	sp, #16
 8008ea2:	4770      	bx	lr
 8008ea4:	803c3800 	.word	0x803c3800
 8008ea8:	40000004 	.word	0x40000004

08008eac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008ec6:	d901      	bls.n	8008ecc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e01b      	b.n	8008f04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	daf2      	bge.n	8008eba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	019b      	lsls	r3, r3, #6
 8008edc:	f043 0220 	orr.w	r2, r3, #32
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008ef0:	d901      	bls.n	8008ef6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	e006      	b.n	8008f04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	f003 0320 	and.w	r3, r3, #32
 8008efe:	2b20      	cmp	r3, #32
 8008f00:	d0f0      	beq.n	8008ee4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3714      	adds	r7, #20
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008f28:	d901      	bls.n	8008f2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	e018      	b.n	8008f60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	daf2      	bge.n	8008f1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2210      	movs	r2, #16
 8008f3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3301      	adds	r3, #1
 8008f44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008f4c:	d901      	bls.n	8008f52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e006      	b.n	8008f60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	f003 0310 	and.w	r3, r3, #16
 8008f5a:	2b10      	cmp	r3, #16
 8008f5c:	d0f0      	beq.n	8008f40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	460b      	mov	r3, r1
 8008f76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	78fb      	ldrb	r3, [r7, #3]
 8008f86:	68f9      	ldr	r1, [r7, #12]
 8008f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3714      	adds	r7, #20
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b087      	sub	sp, #28
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	f003 0306 	and.w	r3, r3, #6
 8008fb6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d102      	bne.n	8008fc4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	75fb      	strb	r3, [r7, #23]
 8008fc2:	e00a      	b.n	8008fda <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d002      	beq.n	8008fd0 <USB_GetDevSpeed+0x32>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b06      	cmp	r3, #6
 8008fce:	d102      	bne.n	8008fd6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	75fb      	strb	r3, [r7, #23]
 8008fd4:	e001      	b.n	8008fda <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008fd6:	230f      	movs	r3, #15
 8008fd8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	371c      	adds	r7, #28
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	785b      	ldrb	r3, [r3, #1]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d139      	bne.n	8009078 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800900a:	69da      	ldr	r2, [r3, #28]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	f003 030f 	and.w	r3, r3, #15
 8009014:	2101      	movs	r1, #1
 8009016:	fa01 f303 	lsl.w	r3, r1, r3
 800901a:	b29b      	uxth	r3, r3
 800901c:	68f9      	ldr	r1, [r7, #12]
 800901e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009022:	4313      	orrs	r3, r2
 8009024:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	015a      	lsls	r2, r3, #5
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	4413      	add	r3, r2
 800902e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009038:	2b00      	cmp	r3, #0
 800903a:	d153      	bne.n	80090e4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	015a      	lsls	r2, r3, #5
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	4413      	add	r3, r2
 8009044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	791b      	ldrb	r3, [r3, #4]
 8009056:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009058:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	059b      	lsls	r3, r3, #22
 800905e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009060:	431a      	orrs	r2, r3
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	0159      	lsls	r1, r3, #5
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	440b      	add	r3, r1
 800906a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800906e:	4619      	mov	r1, r3
 8009070:	4b20      	ldr	r3, [pc, #128]	; (80090f4 <USB_ActivateEndpoint+0x10c>)
 8009072:	4313      	orrs	r3, r2
 8009074:	600b      	str	r3, [r1, #0]
 8009076:	e035      	b.n	80090e4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800907e:	69da      	ldr	r2, [r3, #28]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	f003 030f 	and.w	r3, r3, #15
 8009088:	2101      	movs	r1, #1
 800908a:	fa01 f303 	lsl.w	r3, r1, r3
 800908e:	041b      	lsls	r3, r3, #16
 8009090:	68f9      	ldr	r1, [r7, #12]
 8009092:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009096:	4313      	orrs	r3, r2
 8009098:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	015a      	lsls	r2, r3, #5
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	4413      	add	r3, r2
 80090a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d119      	bne.n	80090e4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	015a      	lsls	r2, r3, #5
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	4413      	add	r3, r2
 80090b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	791b      	ldrb	r3, [r3, #4]
 80090ca:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80090cc:	430b      	orrs	r3, r1
 80090ce:	431a      	orrs	r2, r3
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	0159      	lsls	r1, r3, #5
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	440b      	add	r3, r1
 80090d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090dc:	4619      	mov	r1, r3
 80090de:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <USB_ActivateEndpoint+0x10c>)
 80090e0:	4313      	orrs	r3, r2
 80090e2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3714      	adds	r7, #20
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	10008000 	.word	0x10008000

080090f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	785b      	ldrb	r3, [r3, #1]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d161      	bne.n	80091d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	015a      	lsls	r2, r3, #5
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	4413      	add	r3, r2
 800911c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009126:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800912a:	d11f      	bne.n	800916c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	015a      	lsls	r2, r3, #5
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	4413      	add	r3, r2
 8009134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	0151      	lsls	r1, r2, #5
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	440a      	add	r2, r1
 8009142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009146:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800914a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	015a      	lsls	r2, r3, #5
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	4413      	add	r3, r2
 8009154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	0151      	lsls	r1, r2, #5
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	440a      	add	r2, r1
 8009162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009166:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800916a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	f003 030f 	and.w	r3, r3, #15
 800917c:	2101      	movs	r1, #1
 800917e:	fa01 f303 	lsl.w	r3, r1, r3
 8009182:	b29b      	uxth	r3, r3
 8009184:	43db      	mvns	r3, r3
 8009186:	68f9      	ldr	r1, [r7, #12]
 8009188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800918c:	4013      	ands	r3, r2
 800918e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009196:	69da      	ldr	r2, [r3, #28]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	f003 030f 	and.w	r3, r3, #15
 80091a0:	2101      	movs	r1, #1
 80091a2:	fa01 f303 	lsl.w	r3, r1, r3
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	43db      	mvns	r3, r3
 80091aa:	68f9      	ldr	r1, [r7, #12]
 80091ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091b0:	4013      	ands	r3, r2
 80091b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	015a      	lsls	r2, r3, #5
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	0159      	lsls	r1, r3, #5
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	440b      	add	r3, r1
 80091ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ce:	4619      	mov	r1, r3
 80091d0:	4b35      	ldr	r3, [pc, #212]	; (80092a8 <USB_DeactivateEndpoint+0x1b0>)
 80091d2:	4013      	ands	r3, r2
 80091d4:	600b      	str	r3, [r1, #0]
 80091d6:	e060      	b.n	800929a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	015a      	lsls	r2, r3, #5
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	4413      	add	r3, r2
 80091e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091ee:	d11f      	bne.n	8009230 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	015a      	lsls	r2, r3, #5
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	4413      	add	r3, r2
 80091f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	0151      	lsls	r1, r2, #5
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	440a      	add	r2, r1
 8009206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800920a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800920e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	015a      	lsls	r2, r3, #5
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	4413      	add	r3, r2
 8009218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	0151      	lsls	r1, r2, #5
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	440a      	add	r2, r1
 8009226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800922a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800922e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	f003 030f 	and.w	r3, r3, #15
 8009240:	2101      	movs	r1, #1
 8009242:	fa01 f303 	lsl.w	r3, r1, r3
 8009246:	041b      	lsls	r3, r3, #16
 8009248:	43db      	mvns	r3, r3
 800924a:	68f9      	ldr	r1, [r7, #12]
 800924c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009250:	4013      	ands	r3, r2
 8009252:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800925a:	69da      	ldr	r2, [r3, #28]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	f003 030f 	and.w	r3, r3, #15
 8009264:	2101      	movs	r1, #1
 8009266:	fa01 f303 	lsl.w	r3, r1, r3
 800926a:	041b      	lsls	r3, r3, #16
 800926c:	43db      	mvns	r3, r3
 800926e:	68f9      	ldr	r1, [r7, #12]
 8009270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009274:	4013      	ands	r3, r2
 8009276:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	015a      	lsls	r2, r3, #5
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	4413      	add	r3, r2
 8009280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	0159      	lsls	r1, r3, #5
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	440b      	add	r3, r1
 800928e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009292:	4619      	mov	r1, r3
 8009294:	4b05      	ldr	r3, [pc, #20]	; (80092ac <USB_DeactivateEndpoint+0x1b4>)
 8009296:	4013      	ands	r3, r2
 8009298:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3714      	adds	r7, #20
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr
 80092a8:	ec337800 	.word	0xec337800
 80092ac:	eff37800 	.word	0xeff37800

080092b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b08a      	sub	sp, #40	; 0x28
 80092b4:	af02      	add	r7, sp, #8
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	4613      	mov	r3, r2
 80092bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	785b      	ldrb	r3, [r3, #1]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	f040 8181 	bne.w	80095d4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d132      	bne.n	8009340 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	015a      	lsls	r2, r3, #5
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	4413      	add	r3, r2
 80092e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e6:	691a      	ldr	r2, [r3, #16]
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	0159      	lsls	r1, r3, #5
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	440b      	add	r3, r1
 80092f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f4:	4619      	mov	r1, r3
 80092f6:	4ba5      	ldr	r3, [pc, #660]	; (800958c <USB_EPStartXfer+0x2dc>)
 80092f8:	4013      	ands	r3, r2
 80092fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	015a      	lsls	r2, r3, #5
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	4413      	add	r3, r2
 8009304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	69ba      	ldr	r2, [r7, #24]
 800930c:	0151      	lsls	r1, r2, #5
 800930e:	69fa      	ldr	r2, [r7, #28]
 8009310:	440a      	add	r2, r1
 8009312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009316:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800931a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	015a      	lsls	r2, r3, #5
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	4413      	add	r3, r2
 8009324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009328:	691a      	ldr	r2, [r3, #16]
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	0159      	lsls	r1, r3, #5
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	440b      	add	r3, r1
 8009332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009336:	4619      	mov	r1, r3
 8009338:	4b95      	ldr	r3, [pc, #596]	; (8009590 <USB_EPStartXfer+0x2e0>)
 800933a:	4013      	ands	r3, r2
 800933c:	610b      	str	r3, [r1, #16]
 800933e:	e092      	b.n	8009466 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	015a      	lsls	r2, r3, #5
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	4413      	add	r3, r2
 8009348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800934c:	691a      	ldr	r2, [r3, #16]
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	0159      	lsls	r1, r3, #5
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	440b      	add	r3, r1
 8009356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800935a:	4619      	mov	r1, r3
 800935c:	4b8c      	ldr	r3, [pc, #560]	; (8009590 <USB_EPStartXfer+0x2e0>)
 800935e:	4013      	ands	r3, r2
 8009360:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	015a      	lsls	r2, r3, #5
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	4413      	add	r3, r2
 800936a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800936e:	691a      	ldr	r2, [r3, #16]
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	0159      	lsls	r1, r3, #5
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	440b      	add	r3, r1
 8009378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800937c:	4619      	mov	r1, r3
 800937e:	4b83      	ldr	r3, [pc, #524]	; (800958c <USB_EPStartXfer+0x2dc>)
 8009380:	4013      	ands	r3, r2
 8009382:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d11a      	bne.n	80093c0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	691a      	ldr	r2, [r3, #16]
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	429a      	cmp	r2, r3
 8009394:	d903      	bls.n	800939e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	689a      	ldr	r2, [r3, #8]
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	015a      	lsls	r2, r3, #5
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	4413      	add	r3, r2
 80093a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	69ba      	ldr	r2, [r7, #24]
 80093ae:	0151      	lsls	r1, r2, #5
 80093b0:	69fa      	ldr	r2, [r7, #28]
 80093b2:	440a      	add	r2, r1
 80093b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093bc:	6113      	str	r3, [r2, #16]
 80093be:	e01b      	b.n	80093f8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	015a      	lsls	r2, r3, #5
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	4413      	add	r3, r2
 80093c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093cc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	6919      	ldr	r1, [r3, #16]
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	440b      	add	r3, r1
 80093d8:	1e59      	subs	r1, r3, #1
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	fbb1 f3f3 	udiv	r3, r1, r3
 80093e2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80093e4:	4b6b      	ldr	r3, [pc, #428]	; (8009594 <USB_EPStartXfer+0x2e4>)
 80093e6:	400b      	ands	r3, r1
 80093e8:	69b9      	ldr	r1, [r7, #24]
 80093ea:	0148      	lsls	r0, r1, #5
 80093ec:	69f9      	ldr	r1, [r7, #28]
 80093ee:	4401      	add	r1, r0
 80093f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80093f4:	4313      	orrs	r3, r2
 80093f6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009404:	691a      	ldr	r2, [r3, #16]
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800940e:	69b9      	ldr	r1, [r7, #24]
 8009410:	0148      	lsls	r0, r1, #5
 8009412:	69f9      	ldr	r1, [r7, #28]
 8009414:	4401      	add	r1, r0
 8009416:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800941a:	4313      	orrs	r3, r2
 800941c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	791b      	ldrb	r3, [r3, #4]
 8009422:	2b01      	cmp	r3, #1
 8009424:	d11f      	bne.n	8009466 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	015a      	lsls	r2, r3, #5
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	4413      	add	r3, r2
 800942e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	0151      	lsls	r1, r2, #5
 8009438:	69fa      	ldr	r2, [r7, #28]
 800943a:	440a      	add	r2, r1
 800943c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009440:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009444:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	015a      	lsls	r2, r3, #5
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	4413      	add	r3, r2
 800944e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	69ba      	ldr	r2, [r7, #24]
 8009456:	0151      	lsls	r1, r2, #5
 8009458:	69fa      	ldr	r2, [r7, #28]
 800945a:	440a      	add	r2, r1
 800945c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009460:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009464:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009466:	79fb      	ldrb	r3, [r7, #7]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d14b      	bne.n	8009504 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	69db      	ldr	r3, [r3, #28]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d009      	beq.n	8009488 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	015a      	lsls	r2, r3, #5
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	4413      	add	r3, r2
 800947c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009480:	461a      	mov	r2, r3
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	69db      	ldr	r3, [r3, #28]
 8009486:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	791b      	ldrb	r3, [r3, #4]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d128      	bne.n	80094e2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800949c:	2b00      	cmp	r3, #0
 800949e:	d110      	bne.n	80094c2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	015a      	lsls	r2, r3, #5
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	4413      	add	r3, r2
 80094a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	69ba      	ldr	r2, [r7, #24]
 80094b0:	0151      	lsls	r1, r2, #5
 80094b2:	69fa      	ldr	r2, [r7, #28]
 80094b4:	440a      	add	r2, r1
 80094b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094be:	6013      	str	r3, [r2, #0]
 80094c0:	e00f      	b.n	80094e2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	69ba      	ldr	r2, [r7, #24]
 80094d2:	0151      	lsls	r1, r2, #5
 80094d4:	69fa      	ldr	r2, [r7, #28]
 80094d6:	440a      	add	r2, r1
 80094d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094e0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	69ba      	ldr	r2, [r7, #24]
 80094f2:	0151      	lsls	r1, r2, #5
 80094f4:	69fa      	ldr	r2, [r7, #28]
 80094f6:	440a      	add	r2, r1
 80094f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009500:	6013      	str	r3, [r2, #0]
 8009502:	e16a      	b.n	80097da <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	015a      	lsls	r2, r3, #5
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	4413      	add	r3, r2
 800950c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	69ba      	ldr	r2, [r7, #24]
 8009514:	0151      	lsls	r1, r2, #5
 8009516:	69fa      	ldr	r2, [r7, #28]
 8009518:	440a      	add	r2, r1
 800951a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800951e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009522:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	791b      	ldrb	r3, [r3, #4]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d015      	beq.n	8009558 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 8152 	beq.w	80097da <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800953c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	f003 030f 	and.w	r3, r3, #15
 8009546:	2101      	movs	r1, #1
 8009548:	fa01 f303 	lsl.w	r3, r1, r3
 800954c:	69f9      	ldr	r1, [r7, #28]
 800954e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009552:	4313      	orrs	r3, r2
 8009554:	634b      	str	r3, [r1, #52]	; 0x34
 8009556:	e140      	b.n	80097da <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009564:	2b00      	cmp	r3, #0
 8009566:	d117      	bne.n	8009598 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	015a      	lsls	r2, r3, #5
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	4413      	add	r3, r2
 8009570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	69ba      	ldr	r2, [r7, #24]
 8009578:	0151      	lsls	r1, r2, #5
 800957a:	69fa      	ldr	r2, [r7, #28]
 800957c:	440a      	add	r2, r1
 800957e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009582:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009586:	6013      	str	r3, [r2, #0]
 8009588:	e016      	b.n	80095b8 <USB_EPStartXfer+0x308>
 800958a:	bf00      	nop
 800958c:	e007ffff 	.word	0xe007ffff
 8009590:	fff80000 	.word	0xfff80000
 8009594:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	015a      	lsls	r2, r3, #5
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	4413      	add	r3, r2
 80095a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	69ba      	ldr	r2, [r7, #24]
 80095a8:	0151      	lsls	r1, r2, #5
 80095aa:	69fa      	ldr	r2, [r7, #28]
 80095ac:	440a      	add	r2, r1
 80095ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095b6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	68d9      	ldr	r1, [r3, #12]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	781a      	ldrb	r2, [r3, #0]
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	b298      	uxth	r0, r3
 80095c6:	79fb      	ldrb	r3, [r7, #7]
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	4603      	mov	r3, r0
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f000 f9b9 	bl	8009944 <USB_WritePacket>
 80095d2:	e102      	b.n	80097da <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	015a      	lsls	r2, r3, #5
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	4413      	add	r3, r2
 80095dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e0:	691a      	ldr	r2, [r3, #16]
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	0159      	lsls	r1, r3, #5
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	440b      	add	r3, r1
 80095ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ee:	4619      	mov	r1, r3
 80095f0:	4b7c      	ldr	r3, [pc, #496]	; (80097e4 <USB_EPStartXfer+0x534>)
 80095f2:	4013      	ands	r3, r2
 80095f4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	015a      	lsls	r2, r3, #5
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009602:	691a      	ldr	r2, [r3, #16]
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	0159      	lsls	r1, r3, #5
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	440b      	add	r3, r1
 800960c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009610:	4619      	mov	r1, r3
 8009612:	4b75      	ldr	r3, [pc, #468]	; (80097e8 <USB_EPStartXfer+0x538>)
 8009614:	4013      	ands	r3, r2
 8009616:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d12f      	bne.n	800967e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d003      	beq.n	800962e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	689a      	ldr	r2, [r3, #8]
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	689a      	ldr	r2, [r3, #8]
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	015a      	lsls	r2, r3, #5
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	4413      	add	r3, r2
 800963e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009642:	691a      	ldr	r2, [r3, #16]
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	6a1b      	ldr	r3, [r3, #32]
 8009648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800964c:	69b9      	ldr	r1, [r7, #24]
 800964e:	0148      	lsls	r0, r1, #5
 8009650:	69f9      	ldr	r1, [r7, #28]
 8009652:	4401      	add	r1, r0
 8009654:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009658:	4313      	orrs	r3, r2
 800965a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	015a      	lsls	r2, r3, #5
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	4413      	add	r3, r2
 8009664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	69ba      	ldr	r2, [r7, #24]
 800966c:	0151      	lsls	r1, r2, #5
 800966e:	69fa      	ldr	r2, [r7, #28]
 8009670:	440a      	add	r2, r1
 8009672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009676:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800967a:	6113      	str	r3, [r2, #16]
 800967c:	e05f      	b.n	800973e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d123      	bne.n	80096ce <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	015a      	lsls	r2, r3, #5
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	4413      	add	r3, r2
 800968e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009692:	691a      	ldr	r2, [r3, #16]
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800969c:	69b9      	ldr	r1, [r7, #24]
 800969e:	0148      	lsls	r0, r1, #5
 80096a0:	69f9      	ldr	r1, [r7, #28]
 80096a2:	4401      	add	r1, r0
 80096a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096a8:	4313      	orrs	r3, r2
 80096aa:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	015a      	lsls	r2, r3, #5
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	4413      	add	r3, r2
 80096b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	69ba      	ldr	r2, [r7, #24]
 80096bc:	0151      	lsls	r1, r2, #5
 80096be:	69fa      	ldr	r2, [r7, #28]
 80096c0:	440a      	add	r2, r1
 80096c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096ca:	6113      	str	r3, [r2, #16]
 80096cc:	e037      	b.n	800973e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	691a      	ldr	r2, [r3, #16]
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	4413      	add	r3, r2
 80096d8:	1e5a      	subs	r2, r3, #1
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	fbb2 f3f3 	udiv	r3, r2, r3
 80096e2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	8afa      	ldrh	r2, [r7, #22]
 80096ea:	fb03 f202 	mul.w	r2, r3, r2
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	015a      	lsls	r2, r3, #5
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	4413      	add	r3, r2
 80096fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096fe:	691a      	ldr	r2, [r3, #16]
 8009700:	8afb      	ldrh	r3, [r7, #22]
 8009702:	04d9      	lsls	r1, r3, #19
 8009704:	4b39      	ldr	r3, [pc, #228]	; (80097ec <USB_EPStartXfer+0x53c>)
 8009706:	400b      	ands	r3, r1
 8009708:	69b9      	ldr	r1, [r7, #24]
 800970a:	0148      	lsls	r0, r1, #5
 800970c:	69f9      	ldr	r1, [r7, #28]
 800970e:	4401      	add	r1, r0
 8009710:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009714:	4313      	orrs	r3, r2
 8009716:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	015a      	lsls	r2, r3, #5
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	4413      	add	r3, r2
 8009720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009724:	691a      	ldr	r2, [r3, #16]
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800972e:	69b9      	ldr	r1, [r7, #24]
 8009730:	0148      	lsls	r0, r1, #5
 8009732:	69f9      	ldr	r1, [r7, #28]
 8009734:	4401      	add	r1, r0
 8009736:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800973a:	4313      	orrs	r3, r2
 800973c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d10d      	bne.n	8009760 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d009      	beq.n	8009760 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	68d9      	ldr	r1, [r3, #12]
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	015a      	lsls	r2, r3, #5
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	4413      	add	r3, r2
 8009758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800975c:	460a      	mov	r2, r1
 800975e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	791b      	ldrb	r3, [r3, #4]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d128      	bne.n	80097ba <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009774:	2b00      	cmp	r3, #0
 8009776:	d110      	bne.n	800979a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	69ba      	ldr	r2, [r7, #24]
 8009788:	0151      	lsls	r1, r2, #5
 800978a:	69fa      	ldr	r2, [r7, #28]
 800978c:	440a      	add	r2, r1
 800978e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009792:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009796:	6013      	str	r3, [r2, #0]
 8009798:	e00f      	b.n	80097ba <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	015a      	lsls	r2, r3, #5
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	4413      	add	r3, r2
 80097a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	69ba      	ldr	r2, [r7, #24]
 80097aa:	0151      	lsls	r1, r2, #5
 80097ac:	69fa      	ldr	r2, [r7, #28]
 80097ae:	440a      	add	r2, r1
 80097b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097b8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	015a      	lsls	r2, r3, #5
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	4413      	add	r3, r2
 80097c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	69ba      	ldr	r2, [r7, #24]
 80097ca:	0151      	lsls	r1, r2, #5
 80097cc:	69fa      	ldr	r2, [r7, #28]
 80097ce:	440a      	add	r2, r1
 80097d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3720      	adds	r7, #32
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	fff80000 	.word	0xfff80000
 80097e8:	e007ffff 	.word	0xe007ffff
 80097ec:	1ff80000 	.word	0x1ff80000

080097f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b087      	sub	sp, #28
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80097fa:	2300      	movs	r3, #0
 80097fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80097fe:	2300      	movs	r3, #0
 8009800:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	785b      	ldrb	r3, [r3, #1]
 800980a:	2b01      	cmp	r3, #1
 800980c:	d14a      	bne.n	80098a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009826:	f040 8086 	bne.w	8009936 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	015a      	lsls	r2, r3, #5
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	4413      	add	r3, r2
 8009834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	683a      	ldr	r2, [r7, #0]
 800983c:	7812      	ldrb	r2, [r2, #0]
 800983e:	0151      	lsls	r1, r2, #5
 8009840:	693a      	ldr	r2, [r7, #16]
 8009842:	440a      	add	r2, r1
 8009844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009848:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800984c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	015a      	lsls	r2, r3, #5
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	4413      	add	r3, r2
 8009858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	683a      	ldr	r2, [r7, #0]
 8009860:	7812      	ldrb	r2, [r2, #0]
 8009862:	0151      	lsls	r1, r2, #5
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	440a      	add	r2, r1
 8009868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800986c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009870:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	3301      	adds	r3, #1
 8009876:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f242 7210 	movw	r2, #10000	; 0x2710
 800987e:	4293      	cmp	r3, r2
 8009880:	d902      	bls.n	8009888 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	75fb      	strb	r3, [r7, #23]
          break;
 8009886:	e056      	b.n	8009936 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	015a      	lsls	r2, r3, #5
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	4413      	add	r3, r2
 8009892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800989c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098a0:	d0e7      	beq.n	8009872 <USB_EPStopXfer+0x82>
 80098a2:	e048      	b.n	8009936 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098bc:	d13b      	bne.n	8009936 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	015a      	lsls	r2, r3, #5
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	4413      	add	r3, r2
 80098c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	7812      	ldrb	r2, [r2, #0]
 80098d2:	0151      	lsls	r1, r2, #5
 80098d4:	693a      	ldr	r2, [r7, #16]
 80098d6:	440a      	add	r2, r1
 80098d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80098e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	015a      	lsls	r2, r3, #5
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	4413      	add	r3, r2
 80098ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	683a      	ldr	r2, [r7, #0]
 80098f4:	7812      	ldrb	r2, [r2, #0]
 80098f6:	0151      	lsls	r1, r2, #5
 80098f8:	693a      	ldr	r2, [r7, #16]
 80098fa:	440a      	add	r2, r1
 80098fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009900:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009904:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	3301      	adds	r3, #1
 800990a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009912:	4293      	cmp	r3, r2
 8009914:	d902      	bls.n	800991c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	75fb      	strb	r3, [r7, #23]
          break;
 800991a:	e00c      	b.n	8009936 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	015a      	lsls	r2, r3, #5
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	4413      	add	r3, r2
 8009926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009930:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009934:	d0e7      	beq.n	8009906 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009936:	7dfb      	ldrb	r3, [r7, #23]
}
 8009938:	4618      	mov	r0, r3
 800993a:	371c      	adds	r7, #28
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009944:	b480      	push	{r7}
 8009946:	b089      	sub	sp, #36	; 0x24
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	4611      	mov	r1, r2
 8009950:	461a      	mov	r2, r3
 8009952:	460b      	mov	r3, r1
 8009954:	71fb      	strb	r3, [r7, #7]
 8009956:	4613      	mov	r3, r2
 8009958:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009962:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009966:	2b00      	cmp	r3, #0
 8009968:	d123      	bne.n	80099b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800996a:	88bb      	ldrh	r3, [r7, #4]
 800996c:	3303      	adds	r3, #3
 800996e:	089b      	lsrs	r3, r3, #2
 8009970:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009972:	2300      	movs	r3, #0
 8009974:	61bb      	str	r3, [r7, #24]
 8009976:	e018      	b.n	80099aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009978:	79fb      	ldrb	r3, [r7, #7]
 800997a:	031a      	lsls	r2, r3, #12
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	4413      	add	r3, r2
 8009980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009984:	461a      	mov	r2, r3
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	3301      	adds	r3, #1
 8009990:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	3301      	adds	r3, #1
 8009996:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	3301      	adds	r3, #1
 800999c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	3301      	adds	r3, #1
 80099a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	3301      	adds	r3, #1
 80099a8:	61bb      	str	r3, [r7, #24]
 80099aa:	69ba      	ldr	r2, [r7, #24]
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d3e2      	bcc.n	8009978 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3724      	adds	r7, #36	; 0x24
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b08b      	sub	sp, #44	; 0x2c
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	4613      	mov	r3, r2
 80099cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80099d6:	88fb      	ldrh	r3, [r7, #6]
 80099d8:	089b      	lsrs	r3, r3, #2
 80099da:	b29b      	uxth	r3, r3
 80099dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80099de:	88fb      	ldrh	r3, [r7, #6]
 80099e0:	f003 0303 	and.w	r3, r3, #3
 80099e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80099e6:	2300      	movs	r3, #0
 80099e8:	623b      	str	r3, [r7, #32]
 80099ea:	e014      	b.n	8009a16 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80099f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fa:	3301      	adds	r3, #1
 80099fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a00:	3301      	adds	r3, #1
 8009a02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a06:	3301      	adds	r3, #1
 8009a08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	3301      	adds	r3, #1
 8009a14:	623b      	str	r3, [r7, #32]
 8009a16:	6a3a      	ldr	r2, [r7, #32]
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d3e6      	bcc.n	80099ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009a1e:	8bfb      	ldrh	r3, [r7, #30]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d01e      	beq.n	8009a62 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009a24:	2300      	movs	r3, #0
 8009a26:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a2e:	461a      	mov	r2, r3
 8009a30:	f107 0310 	add.w	r3, r7, #16
 8009a34:	6812      	ldr	r2, [r2, #0]
 8009a36:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009a38:	693a      	ldr	r2, [r7, #16]
 8009a3a:	6a3b      	ldr	r3, [r7, #32]
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	00db      	lsls	r3, r3, #3
 8009a40:	fa22 f303 	lsr.w	r3, r2, r3
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a48:	701a      	strb	r2, [r3, #0]
      i++;
 8009a4a:	6a3b      	ldr	r3, [r7, #32]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	3301      	adds	r3, #1
 8009a54:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009a56:	8bfb      	ldrh	r3, [r7, #30]
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009a5c:	8bfb      	ldrh	r3, [r7, #30]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1ea      	bne.n	8009a38 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	372c      	adds	r7, #44	; 0x2c
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	785b      	ldrb	r3, [r3, #1]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d12c      	bne.n	8009ae6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	015a      	lsls	r2, r3, #5
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	4413      	add	r3, r2
 8009a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	db12      	blt.n	8009ac4 <USB_EPSetStall+0x54>
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00f      	beq.n	8009ac4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	015a      	lsls	r2, r3, #5
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	4413      	add	r3, r2
 8009aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	0151      	lsls	r1, r2, #5
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	440a      	add	r2, r1
 8009aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009abe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ac2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	015a      	lsls	r2, r3, #5
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	4413      	add	r3, r2
 8009acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68ba      	ldr	r2, [r7, #8]
 8009ad4:	0151      	lsls	r1, r2, #5
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	440a      	add	r2, r1
 8009ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ade:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ae2:	6013      	str	r3, [r2, #0]
 8009ae4:	e02b      	b.n	8009b3e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	015a      	lsls	r2, r3, #5
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	4413      	add	r3, r2
 8009aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	db12      	blt.n	8009b1e <USB_EPSetStall+0xae>
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00f      	beq.n	8009b1e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	015a      	lsls	r2, r3, #5
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	4413      	add	r3, r2
 8009b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	0151      	lsls	r1, r2, #5
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	440a      	add	r2, r1
 8009b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b1c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	015a      	lsls	r2, r3, #5
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	4413      	add	r3, r2
 8009b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	0151      	lsls	r1, r2, #5
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	440a      	add	r2, r1
 8009b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3714      	adds	r7, #20
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	785b      	ldrb	r3, [r3, #1]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d128      	bne.n	8009bba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	015a      	lsls	r2, r3, #5
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	4413      	add	r3, r2
 8009b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	0151      	lsls	r1, r2, #5
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	440a      	add	r2, r1
 8009b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b86:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	791b      	ldrb	r3, [r3, #4]
 8009b8c:	2b03      	cmp	r3, #3
 8009b8e:	d003      	beq.n	8009b98 <USB_EPClearStall+0x4c>
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	791b      	ldrb	r3, [r3, #4]
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d138      	bne.n	8009c0a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	015a      	lsls	r2, r3, #5
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	0151      	lsls	r1, r2, #5
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	440a      	add	r2, r1
 8009bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bb6:	6013      	str	r3, [r2, #0]
 8009bb8:	e027      	b.n	8009c0a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	015a      	lsls	r2, r3, #5
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68ba      	ldr	r2, [r7, #8]
 8009bca:	0151      	lsls	r1, r2, #5
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	440a      	add	r2, r1
 8009bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bd8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	791b      	ldrb	r3, [r3, #4]
 8009bde:	2b03      	cmp	r3, #3
 8009be0:	d003      	beq.n	8009bea <USB_EPClearStall+0x9e>
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	791b      	ldrb	r3, [r3, #4]
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	d10f      	bne.n	8009c0a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	015a      	lsls	r2, r3, #5
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	0151      	lsls	r1, r2, #5
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	440a      	add	r2, r1
 8009c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c08:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3714      	adds	r7, #20
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	460b      	mov	r3, r1
 8009c22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009c3a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	78fb      	ldrb	r3, [r7, #3]
 8009c46:	011b      	lsls	r3, r3, #4
 8009c48:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009c4c:	68f9      	ldr	r1, [r7, #12]
 8009c4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c52:	4313      	orrs	r3, r2
 8009c54:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3714      	adds	r7, #20
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68fa      	ldr	r2, [r7, #12]
 8009c7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c7e:	f023 0303 	bic.w	r3, r3, #3
 8009c82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c92:	f023 0302 	bic.w	r3, r3, #2
 8009c96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3714      	adds	r7, #20
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ca6:	b480      	push	{r7}
 8009ca8:	b085      	sub	sp, #20
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009cc0:	f023 0303 	bic.w	r3, r3, #3
 8009cc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cd4:	f043 0302 	orr.w	r3, r3, #2
 8009cd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3714      	adds	r7, #20
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	695b      	ldr	r3, [r3, #20]
 8009cf4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	699b      	ldr	r3, [r3, #24]
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009d00:	68fb      	ldr	r3, [r7, #12]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3714      	adds	r7, #20
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr

08009d0e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d0e:	b480      	push	{r7}
 8009d10:	b085      	sub	sp, #20
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d2a:	69db      	ldr	r3, [r3, #28]
 8009d2c:	68ba      	ldr	r2, [r7, #8]
 8009d2e:	4013      	ands	r3, r2
 8009d30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	0c1b      	lsrs	r3, r3, #16
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d42:	b480      	push	{r7}
 8009d44:	b085      	sub	sp, #20
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d54:	699b      	ldr	r3, [r3, #24]
 8009d56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d5e:	69db      	ldr	r3, [r3, #28]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	4013      	ands	r3, r2
 8009d64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	b29b      	uxth	r3, r3
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b085      	sub	sp, #20
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	460b      	mov	r3, r1
 8009d80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009d86:	78fb      	ldrb	r3, [r7, #3]
 8009d88:	015a      	lsls	r2, r3, #5
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d9c:	695b      	ldr	r3, [r3, #20]
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	4013      	ands	r3, r2
 8009da2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009da4:	68bb      	ldr	r3, [r7, #8]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3714      	adds	r7, #20
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009db2:	b480      	push	{r7}
 8009db4:	b087      	sub	sp, #28
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	460b      	mov	r3, r1
 8009dbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009dd6:	78fb      	ldrb	r3, [r7, #3]
 8009dd8:	f003 030f 	and.w	r3, r3, #15
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	fa22 f303 	lsr.w	r3, r2, r3
 8009de2:	01db      	lsls	r3, r3, #7
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009dec:	78fb      	ldrb	r3, [r7, #3]
 8009dee:	015a      	lsls	r2, r3, #5
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	4413      	add	r3, r2
 8009df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e00:	68bb      	ldr	r3, [r7, #8]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	371c      	adds	r7, #28
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b083      	sub	sp, #12
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	f003 0301 	and.w	r3, r3, #1
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	370c      	adds	r7, #12
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
	...

08009e2c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e46:	4619      	mov	r1, r3
 8009e48:	4b09      	ldr	r3, [pc, #36]	; (8009e70 <USB_ActivateSetup+0x44>)
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	68fa      	ldr	r2, [r7, #12]
 8009e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3714      	adds	r7, #20
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr
 8009e70:	fffff800 	.word	0xfffff800

08009e74 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b087      	sub	sp, #28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	607a      	str	r2, [r7, #4]
 8009e80:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	333c      	adds	r3, #60	; 0x3c
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	4a26      	ldr	r2, [pc, #152]	; (8009f2c <USB_EP0_OutStart+0xb8>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d90a      	bls.n	8009eae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ea8:	d101      	bne.n	8009eae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	e037      	b.n	8009f1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	697a      	ldr	r2, [r7, #20]
 8009ec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ec8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ecc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed4:	691b      	ldr	r3, [r3, #16]
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009edc:	f043 0318 	orr.w	r3, r3, #24
 8009ee0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ef0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009ef4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009ef6:	7afb      	ldrb	r3, [r7, #11]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d10f      	bne.n	8009f1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f02:	461a      	mov	r2, r3
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f16:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009f1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	371c      	adds	r7, #28
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	4f54300a 	.word	0x4f54300a

08009f30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009f48:	d901      	bls.n	8009f4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	e01b      	b.n	8009f86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	daf2      	bge.n	8009f3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009f56:	2300      	movs	r3, #0
 8009f58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	f043 0201 	orr.w	r2, r3, #1
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009f72:	d901      	bls.n	8009f78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009f74:	2303      	movs	r3, #3
 8009f76:	e006      	b.n	8009f86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	f003 0301 	and.w	r3, r3, #1
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d0f0      	beq.n	8009f66 <USB_CoreReset+0x36>

  return HAL_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3714      	adds	r7, #20
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr
	...

08009f94 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8009fa0:	f44f 701d 	mov.w	r0, #628	; 0x274
 8009fa4:	f004 f85c 	bl	800e060 <USBD_static_malloc>
 8009fa8:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d109      	bne.n	8009fc4 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	32b0      	adds	r2, #176	; 0xb0
 8009fba:	2100      	movs	r1, #0
 8009fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	e06e      	b.n	800a0a2 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	32b0      	adds	r2, #176	; 0xb0
 8009fce:	68f9      	ldr	r1, [r7, #12]
 8009fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	32b0      	adds	r2, #176	; 0xb0
 8009fde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	7c1b      	ldrb	r3, [r3, #16]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d12b      	bne.n	800a048 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8009ff0:	4b2e      	ldr	r3, [pc, #184]	; (800a0ac <USBD_MSC_Init+0x118>)
 8009ff2:	7819      	ldrb	r1, [r3, #0]
 8009ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ff8:	2202      	movs	r2, #2
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f003 feed 	bl	800ddda <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800a000:	4b2a      	ldr	r3, [pc, #168]	; (800a0ac <USBD_MSC_Init+0x118>)
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	f003 020f 	and.w	r2, r3, #15
 800a008:	6879      	ldr	r1, [r7, #4]
 800a00a:	4613      	mov	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	4413      	add	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	440b      	add	r3, r1
 800a014:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a018:	2201      	movs	r2, #1
 800a01a:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800a01c:	4b24      	ldr	r3, [pc, #144]	; (800a0b0 <USBD_MSC_Init+0x11c>)
 800a01e:	7819      	ldrb	r1, [r3, #0]
 800a020:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a024:	2202      	movs	r2, #2
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f003 fed7 	bl	800ddda <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800a02c:	4b20      	ldr	r3, [pc, #128]	; (800a0b0 <USBD_MSC_Init+0x11c>)
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	f003 020f 	and.w	r2, r3, #15
 800a034:	6879      	ldr	r1, [r7, #4]
 800a036:	4613      	mov	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	4413      	add	r3, r2
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	440b      	add	r3, r1
 800a040:	3324      	adds	r3, #36	; 0x24
 800a042:	2201      	movs	r2, #1
 800a044:	801a      	strh	r2, [r3, #0]
 800a046:	e028      	b.n	800a09a <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800a048:	4b18      	ldr	r3, [pc, #96]	; (800a0ac <USBD_MSC_Init+0x118>)
 800a04a:	7819      	ldrb	r1, [r3, #0]
 800a04c:	2340      	movs	r3, #64	; 0x40
 800a04e:	2202      	movs	r2, #2
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f003 fec2 	bl	800ddda <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800a056:	4b15      	ldr	r3, [pc, #84]	; (800a0ac <USBD_MSC_Init+0x118>)
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	f003 020f 	and.w	r2, r3, #15
 800a05e:	6879      	ldr	r1, [r7, #4]
 800a060:	4613      	mov	r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4413      	add	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	440b      	add	r3, r1
 800a06a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a06e:	2201      	movs	r2, #1
 800a070:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800a072:	4b0f      	ldr	r3, [pc, #60]	; (800a0b0 <USBD_MSC_Init+0x11c>)
 800a074:	7819      	ldrb	r1, [r3, #0]
 800a076:	2340      	movs	r3, #64	; 0x40
 800a078:	2202      	movs	r2, #2
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f003 fead 	bl	800ddda <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800a080:	4b0b      	ldr	r3, [pc, #44]	; (800a0b0 <USBD_MSC_Init+0x11c>)
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	f003 020f 	and.w	r2, r3, #15
 800a088:	6879      	ldr	r1, [r7, #4]
 800a08a:	4613      	mov	r3, r2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4413      	add	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	440b      	add	r3, r1
 800a094:	3324      	adds	r3, #36	; 0x24
 800a096:	2201      	movs	r2, #1
 800a098:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fa2c 	bl	800a4f8 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	24000073 	.word	0x24000073
 800a0b0:	24000072 	.word	0x24000072

0800a0b4 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800a0c0:	4b26      	ldr	r3, [pc, #152]	; (800a15c <USBD_MSC_DeInit+0xa8>)
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f003 fead 	bl	800de26 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800a0cc:	4b23      	ldr	r3, [pc, #140]	; (800a15c <USBD_MSC_DeInit+0xa8>)
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	f003 020f 	and.w	r2, r3, #15
 800a0d4:	6879      	ldr	r1, [r7, #4]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	440b      	add	r3, r1
 800a0e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800a0e8:	4b1d      	ldr	r3, [pc, #116]	; (800a160 <USBD_MSC_DeInit+0xac>)
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f003 fe99 	bl	800de26 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800a0f4:	4b1a      	ldr	r3, [pc, #104]	; (800a160 <USBD_MSC_DeInit+0xac>)
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	f003 020f 	and.w	r2, r3, #15
 800a0fc:	6879      	ldr	r1, [r7, #4]
 800a0fe:	4613      	mov	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	440b      	add	r3, r1
 800a108:	3324      	adds	r3, #36	; 0x24
 800a10a:	2200      	movs	r2, #0
 800a10c:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	32b0      	adds	r2, #176	; 0xb0
 800a118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d018      	beq.n	800a152 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 fa67 	bl	800a5f4 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	32b0      	adds	r2, #176	; 0xb0
 800a130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a134:	4618      	mov	r0, r3
 800a136:	f003 ffa1 	bl	800e07c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	32b0      	adds	r2, #176	; 0xb0
 800a144:	2100      	movs	r1, #0
 800a146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	24000073 	.word	0x24000073
 800a160:	24000072 	.word	0x24000072

0800a164 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b086      	sub	sp, #24
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	32b0      	adds	r2, #176	; 0xb0
 800a178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a17c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800a17e:	2300      	movs	r3, #0
 800a180:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800a182:	2300      	movs	r3, #0
 800a184:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d101      	bne.n	800a190 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800a18c:	2303      	movs	r3, #3
 800a18e:	e0e1      	b.n	800a354 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d053      	beq.n	800a244 <USBD_MSC_Setup+0xe0>
 800a19c:	2b20      	cmp	r3, #32
 800a19e:	f040 80d1 	bne.w	800a344 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	785b      	ldrb	r3, [r3, #1]
 800a1a6:	2bfe      	cmp	r3, #254	; 0xfe
 800a1a8:	d002      	beq.n	800a1b0 <USBD_MSC_Setup+0x4c>
 800a1aa:	2bff      	cmp	r3, #255	; 0xff
 800a1ac:	d02a      	beq.n	800a204 <USBD_MSC_Setup+0xa0>
 800a1ae:	e041      	b.n	800a234 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	885b      	ldrh	r3, [r3, #2]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d11e      	bne.n	800a1f6 <USBD_MSC_Setup+0x92>
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	88db      	ldrh	r3, [r3, #6]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d11a      	bne.n	800a1f6 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	da15      	bge.n	800a1f6 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	33b0      	adds	r3, #176	; 0xb0
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4413      	add	r3, r2
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	4798      	blx	r3
 800a1de:	4603      	mov	r3, r0
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f003 f955 	bl	800d49c <USBD_CtlSendData>
 800a1f2:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a1f4:	e025      	b.n	800a242 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f003 f8d2 	bl	800d3a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a1fe:	2303      	movs	r3, #3
 800a200:	75fb      	strb	r3, [r7, #23]
          break;
 800a202:	e01e      	b.n	800a242 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	885b      	ldrh	r3, [r3, #2]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10c      	bne.n	800a226 <USBD_MSC_Setup+0xc2>
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	88db      	ldrh	r3, [r3, #6]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d108      	bne.n	800a226 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	db03      	blt.n	800a226 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f9b4 	bl	800a58c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a224:	e00d      	b.n	800a242 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800a226:	6839      	ldr	r1, [r7, #0]
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f003 f8ba 	bl	800d3a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a22e:	2303      	movs	r3, #3
 800a230:	75fb      	strb	r3, [r7, #23]
          break;
 800a232:	e006      	b.n	800a242 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800a234:	6839      	ldr	r1, [r7, #0]
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f003 f8b3 	bl	800d3a2 <USBD_CtlError>
          ret = USBD_FAIL;
 800a23c:	2303      	movs	r3, #3
 800a23e:	75fb      	strb	r3, [r7, #23]
          break;
 800a240:	bf00      	nop
      }
      break;
 800a242:	e086      	b.n	800a352 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	785b      	ldrb	r3, [r3, #1]
 800a248:	2b0b      	cmp	r3, #11
 800a24a:	d872      	bhi.n	800a332 <USBD_MSC_Setup+0x1ce>
 800a24c:	a201      	add	r2, pc, #4	; (adr r2, 800a254 <USBD_MSC_Setup+0xf0>)
 800a24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a252:	bf00      	nop
 800a254:	0800a285 	.word	0x0800a285
 800a258:	0800a301 	.word	0x0800a301
 800a25c:	0800a333 	.word	0x0800a333
 800a260:	0800a333 	.word	0x0800a333
 800a264:	0800a333 	.word	0x0800a333
 800a268:	0800a333 	.word	0x0800a333
 800a26c:	0800a333 	.word	0x0800a333
 800a270:	0800a333 	.word	0x0800a333
 800a274:	0800a333 	.word	0x0800a333
 800a278:	0800a333 	.word	0x0800a333
 800a27c:	0800a2af 	.word	0x0800a2af
 800a280:	0800a2d9 	.word	0x0800a2d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	2b03      	cmp	r3, #3
 800a28e:	d107      	bne.n	800a2a0 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a290:	f107 030e 	add.w	r3, r7, #14
 800a294:	2202      	movs	r2, #2
 800a296:	4619      	mov	r1, r3
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f003 f8ff 	bl	800d49c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a29e:	e050      	b.n	800a342 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f003 f87d 	bl	800d3a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	75fb      	strb	r3, [r7, #23]
          break;
 800a2ac:	e049      	b.n	800a342 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b03      	cmp	r3, #3
 800a2b8:	d107      	bne.n	800a2ca <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	3304      	adds	r3, #4
 800a2be:	2201      	movs	r2, #1
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f003 f8ea 	bl	800d49c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a2c8:	e03b      	b.n	800a342 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800a2ca:	6839      	ldr	r1, [r7, #0]
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f003 f868 	bl	800d3a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a2d2:	2303      	movs	r3, #3
 800a2d4:	75fb      	strb	r3, [r7, #23]
          break;
 800a2d6:	e034      	b.n	800a342 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	2b03      	cmp	r3, #3
 800a2e2:	d106      	bne.n	800a2f2 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	885b      	ldrh	r3, [r3, #2]
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a2f0:	e027      	b.n	800a342 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800a2f2:	6839      	ldr	r1, [r7, #0]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f003 f854 	bl	800d3a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a2fa:	2303      	movs	r3, #3
 800a2fc:	75fb      	strb	r3, [r7, #23]
          break;
 800a2fe:	e020      	b.n	800a342 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a306:	b2db      	uxtb	r3, r3
 800a308:	2b03      	cmp	r3, #3
 800a30a:	d119      	bne.n	800a340 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	885b      	ldrh	r3, [r3, #2]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d115      	bne.n	800a340 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	889b      	ldrh	r3, [r3, #4]
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	4619      	mov	r1, r3
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f003 fda1 	bl	800de64 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	889b      	ldrh	r3, [r3, #4]
 800a326:	b2db      	uxtb	r3, r3
 800a328:	4619      	mov	r1, r3
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 fb2e 	bl	800a98c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800a330:	e006      	b.n	800a340 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f003 f834 	bl	800d3a2 <USBD_CtlError>
          ret = USBD_FAIL;
 800a33a:	2303      	movs	r3, #3
 800a33c:	75fb      	strb	r3, [r7, #23]
          break;
 800a33e:	e000      	b.n	800a342 <USBD_MSC_Setup+0x1de>
          break;
 800a340:	bf00      	nop
      }
      break;
 800a342:	e006      	b.n	800a352 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800a344:	6839      	ldr	r1, [r7, #0]
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f003 f82b 	bl	800d3a2 <USBD_CtlError>
      ret = USBD_FAIL;
 800a34c:	2303      	movs	r3, #3
 800a34e:	75fb      	strb	r3, [r7, #23]
      break;
 800a350:	bf00      	nop
  }

  return (uint8_t)ret;
 800a352:	7dfb      	ldrb	r3, [r7, #23]
}
 800a354:	4618      	mov	r0, r3
 800a356:	3718      	adds	r7, #24
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	460b      	mov	r3, r1
 800a366:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800a368:	78fb      	ldrb	r3, [r7, #3]
 800a36a:	4619      	mov	r1, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f959 	bl	800a624 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	460b      	mov	r3, r1
 800a386:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800a388:	78fb      	ldrb	r3, [r7, #3]
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 f983 	bl	800a698 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800a3a4:	2181      	movs	r1, #129	; 0x81
 800a3a6:	4812      	ldr	r0, [pc, #72]	; (800a3f0 <USBD_MSC_GetHSCfgDesc+0x54>)
 800a3a8:	f002 f9c3 	bl	800c732 <USBD_GetEpDesc>
 800a3ac:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800a3ae:	2101      	movs	r1, #1
 800a3b0:	480f      	ldr	r0, [pc, #60]	; (800a3f0 <USBD_MSC_GetHSCfgDesc+0x54>)
 800a3b2:	f002 f9be 	bl	800c732 <USBD_GetEpDesc>
 800a3b6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d006      	beq.n	800a3cc <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	711a      	strb	r2, [r3, #4]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f042 0202 	orr.w	r2, r2, #2
 800a3ca:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d006      	beq.n	800a3e0 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	711a      	strb	r2, [r3, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f042 0202 	orr.w	r2, r2, #2
 800a3de:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2220      	movs	r2, #32
 800a3e4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800a3e6:	4b02      	ldr	r3, [pc, #8]	; (800a3f0 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	24000048 	.word	0x24000048

0800a3f4 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800a3fc:	2181      	movs	r1, #129	; 0x81
 800a3fe:	4812      	ldr	r0, [pc, #72]	; (800a448 <USBD_MSC_GetFSCfgDesc+0x54>)
 800a400:	f002 f997 	bl	800c732 <USBD_GetEpDesc>
 800a404:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800a406:	2101      	movs	r1, #1
 800a408:	480f      	ldr	r0, [pc, #60]	; (800a448 <USBD_MSC_GetFSCfgDesc+0x54>)
 800a40a:	f002 f992 	bl	800c732 <USBD_GetEpDesc>
 800a40e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d006      	beq.n	800a424 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a41e:	711a      	strb	r2, [r3, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d006      	beq.n	800a438 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a432:	711a      	strb	r2, [r3, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2220      	movs	r2, #32
 800a43c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800a43e:	4b02      	ldr	r3, [pc, #8]	; (800a448 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	24000048 	.word	0x24000048

0800a44c <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800a454:	2181      	movs	r1, #129	; 0x81
 800a456:	4812      	ldr	r0, [pc, #72]	; (800a4a0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800a458:	f002 f96b 	bl	800c732 <USBD_GetEpDesc>
 800a45c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800a45e:	2101      	movs	r1, #1
 800a460:	480f      	ldr	r0, [pc, #60]	; (800a4a0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800a462:	f002 f966 	bl	800c732 <USBD_GetEpDesc>
 800a466:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d006      	beq.n	800a47c <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2200      	movs	r2, #0
 800a472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a476:	711a      	strb	r2, [r3, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d006      	beq.n	800a490 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	2200      	movs	r2, #0
 800a486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a48a:	711a      	strb	r2, [r3, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2220      	movs	r2, #32
 800a494:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800a496:	4b02      	ldr	r3, [pc, #8]	; (800a4a0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	24000048 	.word	0x24000048

0800a4a4 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	220a      	movs	r2, #10
 800a4b0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800a4b2:	4b03      	ldr	r3, [pc, #12]	; (800a4c0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr
 800a4c0:	24000068 	.word	0x24000068

0800a4c4 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d101      	bne.n	800a4d8 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a4d4:	2303      	movs	r3, #3
 800a4d6:	e009      	b.n	800a4ec <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	33b0      	adds	r3, #176	; 0xb0
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	4413      	add	r3, r2
 800a4e6:	683a      	ldr	r2, [r7, #0]
 800a4e8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	32b0      	adds	r2, #176	; 0xb0
 800a50a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a50e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d032      	beq.n	800a57c <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2200      	movs	r2, #0
 800a526:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2200      	movs	r2, #0
 800a536:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	33b0      	adds	r3, #176	; 0xb0
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	4413      	add	r3, r2
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2000      	movs	r0, #0
 800a54e:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800a550:	4b0c      	ldr	r3, [pc, #48]	; (800a584 <MSC_BOT_Init+0x8c>)
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	4619      	mov	r1, r3
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f003 fc84 	bl	800de64 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800a55c:	4b0a      	ldr	r3, [pc, #40]	; (800a588 <MSC_BOT_Init+0x90>)
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	4619      	mov	r1, r3
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f003 fc7e 	bl	800de64 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800a568:	4b06      	ldr	r3, [pc, #24]	; (800a584 <MSC_BOT_Init+0x8c>)
 800a56a:	7819      	ldrb	r1, [r3, #0]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800a572:	231f      	movs	r3, #31
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f003 fd3e 	bl	800dff6 <USBD_LL_PrepareReceive>
 800a57a:	e000      	b.n	800a57e <MSC_BOT_Init+0x86>
    return;
 800a57c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	24000073 	.word	0x24000073
 800a588:	24000072 	.word	0x24000072

0800a58c <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	32b0      	adds	r2, #176	; 0xb0
 800a59e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d01b      	beq.n	800a5e2 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800a5b6:	4b0d      	ldr	r3, [pc, #52]	; (800a5ec <MSC_BOT_Reset+0x60>)
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f003 fc8f 	bl	800dee0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800a5c2:	4b0b      	ldr	r3, [pc, #44]	; (800a5f0 <MSC_BOT_Reset+0x64>)
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f003 fc89 	bl	800dee0 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800a5ce:	4b08      	ldr	r3, [pc, #32]	; (800a5f0 <MSC_BOT_Reset+0x64>)
 800a5d0:	7819      	ldrb	r1, [r3, #0]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800a5d8:	231f      	movs	r3, #31
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f003 fd0b 	bl	800dff6 <USBD_LL_PrepareReceive>
 800a5e0:	e000      	b.n	800a5e4 <MSC_BOT_Reset+0x58>
    return;
 800a5e2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	24000072 	.word	0x24000072
 800a5f0:	24000073 	.word	0x24000073

0800a5f4 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	32b0      	adds	r2, #176	; 0xb0
 800a606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a60a:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d002      	beq.n	800a618 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2200      	movs	r2, #0
 800a616:	721a      	strb	r2, [r3, #8]
  }
}
 800a618:	bf00      	nop
 800a61a:	3714      	adds	r7, #20
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	460b      	mov	r3, r1
 800a62e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	32b0      	adds	r2, #176	; 0xb0
 800a63a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a63e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d020      	beq.n	800a688 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	7a1b      	ldrb	r3, [r3, #8]
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d005      	beq.n	800a65a <MSC_BOT_DataIn+0x36>
 800a64e:	2b02      	cmp	r3, #2
 800a650:	db1c      	blt.n	800a68c <MSC_BOT_DataIn+0x68>
 800a652:	3b03      	subs	r3, #3
 800a654:	2b01      	cmp	r3, #1
 800a656:	d819      	bhi.n	800a68c <MSC_BOT_DataIn+0x68>
 800a658:	e011      	b.n	800a67e <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800a666:	461a      	mov	r2, r3
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f9c9 	bl	800aa00 <SCSI_ProcessCmd>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	da0d      	bge.n	800a690 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800a674:	2101      	movs	r1, #1
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f90c 	bl	800a894 <MSC_BOT_SendCSW>
      }
      break;
 800a67c:	e008      	b.n	800a690 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800a67e:	2100      	movs	r1, #0
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f907 	bl	800a894 <MSC_BOT_SendCSW>
      break;
 800a686:	e004      	b.n	800a692 <MSC_BOT_DataIn+0x6e>
    return;
 800a688:	bf00      	nop
 800a68a:	e002      	b.n	800a692 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800a68c:	bf00      	nop
 800a68e:	e000      	b.n	800a692 <MSC_BOT_DataIn+0x6e>
      break;
 800a690:	bf00      	nop
  }
}
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	32b0      	adds	r2, #176	; 0xb0
 800a6ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6b2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d01c      	beq.n	800a6f4 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	7a1b      	ldrb	r3, [r3, #8]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d002      	beq.n	800a6c8 <MSC_BOT_DataOut+0x30>
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d004      	beq.n	800a6d0 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800a6c6:	e018      	b.n	800a6fa <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 f819 	bl	800a700 <MSC_BOT_CBW_Decode>
      break;
 800a6ce:	e014      	b.n	800a6fa <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800a6dc:	461a      	mov	r2, r3
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f98e 	bl	800aa00 <SCSI_ProcessCmd>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	da06      	bge.n	800a6f8 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800a6ea:	2101      	movs	r1, #1
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 f8d1 	bl	800a894 <MSC_BOT_SendCSW>
      break;
 800a6f2:	e001      	b.n	800a6f8 <MSC_BOT_DataOut+0x60>
    return;
 800a6f4:	bf00      	nop
 800a6f6:	e000      	b.n	800a6fa <MSC_BOT_DataOut+0x62>
      break;
 800a6f8:	bf00      	nop
  }
}
 800a6fa:	3710      	adds	r7, #16
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	32b0      	adds	r2, #176	; 0xb0
 800a712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a716:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d079      	beq.n	800a812 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800a736:	4b3a      	ldr	r3, [pc, #232]	; (800a820 <MSC_BOT_CBW_Decode+0x120>)
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	4619      	mov	r1, r3
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f003 fc7b 	bl	800e038 <USBD_LL_GetRxDataSize>
 800a742:	4603      	mov	r3, r0
 800a744:	2b1f      	cmp	r3, #31
 800a746:	d114      	bne.n	800a772 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800a74e:	4a35      	ldr	r2, [pc, #212]	; (800a824 <MSC_BOT_CBW_Decode+0x124>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d10e      	bne.n	800a772 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d809      	bhi.n	800a772 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800a764:	2b00      	cmp	r3, #0
 800a766:	d004      	beq.n	800a772 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800a76e:	2b10      	cmp	r3, #16
 800a770:	d90e      	bls.n	800a790 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a778:	2320      	movs	r3, #32
 800a77a:	2205      	movs	r2, #5
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 fe56 	bl	800b42e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2202      	movs	r2, #2
 800a786:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 f8bd 	bl	800a908 <MSC_BOT_Abort>
 800a78e:	e043      	b.n	800a818 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800a79c:	461a      	mov	r2, r3
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 f92e 	bl	800aa00 <SCSI_ProcessCmd>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	da0c      	bge.n	800a7c4 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	7a1b      	ldrb	r3, [r3, #8]
 800a7ae:	2b05      	cmp	r3, #5
 800a7b0:	d104      	bne.n	800a7bc <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800a7b2:	2101      	movs	r1, #1
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 f86d 	bl	800a894 <MSC_BOT_SendCSW>
 800a7ba:	e02d      	b.n	800a818 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 f8a3 	bl	800a908 <MSC_BOT_Abort>
 800a7c2:	e029      	b.n	800a818 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	7a1b      	ldrb	r3, [r3, #8]
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	d024      	beq.n	800a816 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d020      	beq.n	800a816 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800a7d8:	2b03      	cmp	r3, #3
 800a7da:	d01c      	beq.n	800a816 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d009      	beq.n	800a7f8 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f103 0110 	add.w	r1, r3, #16
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f819 	bl	800a828 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800a7f6:	e00f      	b.n	800a818 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d104      	bne.n	800a80a <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800a800:	2100      	movs	r1, #0
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 f846 	bl	800a894 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800a808:	e006      	b.n	800a818 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 f87c 	bl	800a908 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800a810:	e002      	b.n	800a818 <MSC_BOT_CBW_Decode+0x118>
    return;
 800a812:	bf00      	nop
 800a814:	e000      	b.n	800a818 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800a816:	bf00      	nop
    }
  }
}
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	24000073 	.word	0x24000073
 800a824:	43425355 	.word	0x43425355

0800a828 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b086      	sub	sp, #24
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	32b0      	adds	r2, #176	; 0xb0
 800a83e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a842:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d01e      	beq.n	800a888 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	4293      	cmp	r3, r2
 800a854:	bf28      	it	cs
 800a856:	4613      	movcs	r3, r2
 800a858:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	1ad2      	subs	r2, r2, r3
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	2200      	movs	r2, #0
 800a86e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	2204      	movs	r2, #4
 800a876:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800a878:	4b05      	ldr	r3, [pc, #20]	; (800a890 <MSC_BOT_SendData+0x68>)
 800a87a:	7819      	ldrb	r1, [r3, #0]
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f003 fb97 	bl	800dfb4 <USBD_LL_Transmit>
 800a886:	e000      	b.n	800a88a <MSC_BOT_SendData+0x62>
    return;
 800a888:	bf00      	nop
}
 800a88a:	3718      	adds	r7, #24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	24000072 	.word	0x24000072

0800a894 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	460b      	mov	r3, r1
 800a89e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	32b0      	adds	r2, #176	; 0xb0
 800a8aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ae:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d01d      	beq.n	800a8f2 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	4a10      	ldr	r2, [pc, #64]	; (800a8fc <MSC_BOT_SendCSW+0x68>)
 800a8ba:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	78fa      	ldrb	r2, [r7, #3]
 800a8c2:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800a8cc:	4b0c      	ldr	r3, [pc, #48]	; (800a900 <MSC_BOT_SendCSW+0x6c>)
 800a8ce:	7819      	ldrb	r1, [r3, #0]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800a8d6:	230d      	movs	r3, #13
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f003 fb6b 	bl	800dfb4 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800a8de:	4b09      	ldr	r3, [pc, #36]	; (800a904 <MSC_BOT_SendCSW+0x70>)
 800a8e0:	7819      	ldrb	r1, [r3, #0]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800a8e8:	231f      	movs	r3, #31
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f003 fb83 	bl	800dff6 <USBD_LL_PrepareReceive>
 800a8f0:	e000      	b.n	800a8f4 <MSC_BOT_SendCSW+0x60>
    return;
 800a8f2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	53425355 	.word	0x53425355
 800a900:	24000072 	.word	0x24000072
 800a904:	24000073 	.word	0x24000073

0800a908 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	32b0      	adds	r2, #176	; 0xb0
 800a91a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a91e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d02a      	beq.n	800a97c <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d10e      	bne.n	800a94e <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800a936:	2b00      	cmp	r3, #0
 800a938:	d009      	beq.n	800a94e <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d105      	bne.n	800a94e <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800a942:	4b10      	ldr	r3, [pc, #64]	; (800a984 <MSC_BOT_Abort+0x7c>)
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	4619      	mov	r1, r3
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f003 faaa 	bl	800dea2 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800a94e:	4b0e      	ldr	r3, [pc, #56]	; (800a988 <MSC_BOT_Abort+0x80>)
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	4619      	mov	r1, r3
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f003 faa4 	bl	800dea2 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	7a5b      	ldrb	r3, [r3, #9]
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d10d      	bne.n	800a97e <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800a962:	4b09      	ldr	r3, [pc, #36]	; (800a988 <MSC_BOT_Abort+0x80>)
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	4619      	mov	r1, r3
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f003 fa9a 	bl	800dea2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800a96e:	4b05      	ldr	r3, [pc, #20]	; (800a984 <MSC_BOT_Abort+0x7c>)
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	4619      	mov	r1, r3
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f003 fa94 	bl	800dea2 <USBD_LL_StallEP>
 800a97a:	e000      	b.n	800a97e <MSC_BOT_Abort+0x76>
    return;
 800a97c:	bf00      	nop
  }
}
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	24000073 	.word	0x24000073
 800a988:	24000072 	.word	0x24000072

0800a98c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	460b      	mov	r3, r1
 800a996:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	32b0      	adds	r2, #176	; 0xb0
 800a9a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d01d      	beq.n	800a9ea <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	7a5b      	ldrb	r3, [r3, #9]
 800a9b2:	2b02      	cmp	r3, #2
 800a9b4:	d10c      	bne.n	800a9d0 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800a9b6:	4b10      	ldr	r3, [pc, #64]	; (800a9f8 <MSC_BOT_CplClrFeature+0x6c>)
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f003 fa70 	bl	800dea2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800a9c2:	4b0e      	ldr	r3, [pc, #56]	; (800a9fc <MSC_BOT_CplClrFeature+0x70>)
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f003 fa6a 	bl	800dea2 <USBD_LL_StallEP>
 800a9ce:	e00f      	b.n	800a9f0 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800a9d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	da0a      	bge.n	800a9ee <MSC_BOT_CplClrFeature+0x62>
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	7a5b      	ldrb	r3, [r3, #9]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d006      	beq.n	800a9ee <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f7ff ff56 	bl	800a894 <MSC_BOT_SendCSW>
 800a9e8:	e002      	b.n	800a9f0 <MSC_BOT_CplClrFeature+0x64>
    return;
 800a9ea:	bf00      	nop
 800a9ec:	e000      	b.n	800a9f0 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800a9ee:	bf00      	nop
  }
}
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	24000072 	.word	0x24000072
 800a9fc:	24000073 	.word	0x24000073

0800aa00 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b086      	sub	sp, #24
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	460b      	mov	r3, r1
 800aa0a:	607a      	str	r2, [r7, #4]
 800aa0c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	32b0      	adds	r2, #176	; 0xb0
 800aa18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa1c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d102      	bne.n	800aa2a <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800aa24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa28:	e168      	b.n	800acfc <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	2baa      	cmp	r3, #170	; 0xaa
 800aa30:	f000 8144 	beq.w	800acbc <SCSI_ProcessCmd+0x2bc>
 800aa34:	2baa      	cmp	r3, #170	; 0xaa
 800aa36:	f300 8153 	bgt.w	800ace0 <SCSI_ProcessCmd+0x2e0>
 800aa3a:	2ba8      	cmp	r3, #168	; 0xa8
 800aa3c:	f000 812c 	beq.w	800ac98 <SCSI_ProcessCmd+0x298>
 800aa40:	2ba8      	cmp	r3, #168	; 0xa8
 800aa42:	f300 814d 	bgt.w	800ace0 <SCSI_ProcessCmd+0x2e0>
 800aa46:	2b5a      	cmp	r3, #90	; 0x5a
 800aa48:	f300 80c0 	bgt.w	800abcc <SCSI_ProcessCmd+0x1cc>
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f2c0 8147 	blt.w	800ace0 <SCSI_ProcessCmd+0x2e0>
 800aa52:	2b5a      	cmp	r3, #90	; 0x5a
 800aa54:	f200 8144 	bhi.w	800ace0 <SCSI_ProcessCmd+0x2e0>
 800aa58:	a201      	add	r2, pc, #4	; (adr r2, 800aa60 <SCSI_ProcessCmd+0x60>)
 800aa5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa5e:	bf00      	nop
 800aa60:	0800abd3 	.word	0x0800abd3
 800aa64:	0800ace1 	.word	0x0800ace1
 800aa68:	0800ace1 	.word	0x0800ace1
 800aa6c:	0800abe5 	.word	0x0800abe5
 800aa70:	0800ace1 	.word	0x0800ace1
 800aa74:	0800ace1 	.word	0x0800ace1
 800aa78:	0800ace1 	.word	0x0800ace1
 800aa7c:	0800ace1 	.word	0x0800ace1
 800aa80:	0800ace1 	.word	0x0800ace1
 800aa84:	0800ace1 	.word	0x0800ace1
 800aa88:	0800ace1 	.word	0x0800ace1
 800aa8c:	0800ace1 	.word	0x0800ace1
 800aa90:	0800ace1 	.word	0x0800ace1
 800aa94:	0800ace1 	.word	0x0800ace1
 800aa98:	0800ace1 	.word	0x0800ace1
 800aa9c:	0800ace1 	.word	0x0800ace1
 800aaa0:	0800ace1 	.word	0x0800ace1
 800aaa4:	0800ace1 	.word	0x0800ace1
 800aaa8:	0800abf7 	.word	0x0800abf7
 800aaac:	0800ace1 	.word	0x0800ace1
 800aab0:	0800ace1 	.word	0x0800ace1
 800aab4:	0800ace1 	.word	0x0800ace1
 800aab8:	0800ace1 	.word	0x0800ace1
 800aabc:	0800ace1 	.word	0x0800ace1
 800aac0:	0800ace1 	.word	0x0800ace1
 800aac4:	0800ace1 	.word	0x0800ace1
 800aac8:	0800ac2d 	.word	0x0800ac2d
 800aacc:	0800ac09 	.word	0x0800ac09
 800aad0:	0800ace1 	.word	0x0800ace1
 800aad4:	0800ace1 	.word	0x0800ace1
 800aad8:	0800ac1b 	.word	0x0800ac1b
 800aadc:	0800ace1 	.word	0x0800ace1
 800aae0:	0800ace1 	.word	0x0800ace1
 800aae4:	0800ace1 	.word	0x0800ace1
 800aae8:	0800ace1 	.word	0x0800ace1
 800aaec:	0800ac51 	.word	0x0800ac51
 800aaf0:	0800ace1 	.word	0x0800ace1
 800aaf4:	0800ac63 	.word	0x0800ac63
 800aaf8:	0800ace1 	.word	0x0800ace1
 800aafc:	0800ace1 	.word	0x0800ace1
 800ab00:	0800ac87 	.word	0x0800ac87
 800ab04:	0800ace1 	.word	0x0800ace1
 800ab08:	0800acab 	.word	0x0800acab
 800ab0c:	0800ace1 	.word	0x0800ace1
 800ab10:	0800ace1 	.word	0x0800ace1
 800ab14:	0800ace1 	.word	0x0800ace1
 800ab18:	0800ace1 	.word	0x0800ace1
 800ab1c:	0800accf 	.word	0x0800accf
 800ab20:	0800ace1 	.word	0x0800ace1
 800ab24:	0800ace1 	.word	0x0800ace1
 800ab28:	0800ace1 	.word	0x0800ace1
 800ab2c:	0800ace1 	.word	0x0800ace1
 800ab30:	0800ace1 	.word	0x0800ace1
 800ab34:	0800ace1 	.word	0x0800ace1
 800ab38:	0800ace1 	.word	0x0800ace1
 800ab3c:	0800ace1 	.word	0x0800ace1
 800ab40:	0800ace1 	.word	0x0800ace1
 800ab44:	0800ace1 	.word	0x0800ace1
 800ab48:	0800ace1 	.word	0x0800ace1
 800ab4c:	0800ace1 	.word	0x0800ace1
 800ab50:	0800ace1 	.word	0x0800ace1
 800ab54:	0800ace1 	.word	0x0800ace1
 800ab58:	0800ace1 	.word	0x0800ace1
 800ab5c:	0800ace1 	.word	0x0800ace1
 800ab60:	0800ace1 	.word	0x0800ace1
 800ab64:	0800ace1 	.word	0x0800ace1
 800ab68:	0800ace1 	.word	0x0800ace1
 800ab6c:	0800ace1 	.word	0x0800ace1
 800ab70:	0800ace1 	.word	0x0800ace1
 800ab74:	0800ace1 	.word	0x0800ace1
 800ab78:	0800ace1 	.word	0x0800ace1
 800ab7c:	0800ace1 	.word	0x0800ace1
 800ab80:	0800ace1 	.word	0x0800ace1
 800ab84:	0800ace1 	.word	0x0800ace1
 800ab88:	0800ace1 	.word	0x0800ace1
 800ab8c:	0800ace1 	.word	0x0800ace1
 800ab90:	0800ace1 	.word	0x0800ace1
 800ab94:	0800ace1 	.word	0x0800ace1
 800ab98:	0800ace1 	.word	0x0800ace1
 800ab9c:	0800ace1 	.word	0x0800ace1
 800aba0:	0800ace1 	.word	0x0800ace1
 800aba4:	0800ace1 	.word	0x0800ace1
 800aba8:	0800ace1 	.word	0x0800ace1
 800abac:	0800ace1 	.word	0x0800ace1
 800abb0:	0800ace1 	.word	0x0800ace1
 800abb4:	0800ace1 	.word	0x0800ace1
 800abb8:	0800ace1 	.word	0x0800ace1
 800abbc:	0800ace1 	.word	0x0800ace1
 800abc0:	0800ace1 	.word	0x0800ace1
 800abc4:	0800ace1 	.word	0x0800ace1
 800abc8:	0800ac3f 	.word	0x0800ac3f
 800abcc:	2b9e      	cmp	r3, #158	; 0x9e
 800abce:	d051      	beq.n	800ac74 <SCSI_ProcessCmd+0x274>
 800abd0:	e086      	b.n	800ace0 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800abd2:	7afb      	ldrb	r3, [r7, #11]
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	4619      	mov	r1, r3
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f000 f893 	bl	800ad04 <SCSI_TestUnitReady>
 800abde:	4603      	mov	r3, r0
 800abe0:	75fb      	strb	r3, [r7, #23]
      break;
 800abe2:	e089      	b.n	800acf8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800abe4:	7afb      	ldrb	r3, [r7, #11]
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	4619      	mov	r1, r3
 800abea:	68f8      	ldr	r0, [r7, #12]
 800abec:	f000 fb9c 	bl	800b328 <SCSI_RequestSense>
 800abf0:	4603      	mov	r3, r0
 800abf2:	75fb      	strb	r3, [r7, #23]
      break;
 800abf4:	e080      	b.n	800acf8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800abf6:	7afb      	ldrb	r3, [r7, #11]
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	4619      	mov	r1, r3
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f000 f8db 	bl	800adb8 <SCSI_Inquiry>
 800ac02:	4603      	mov	r3, r0
 800ac04:	75fb      	strb	r3, [r7, #23]
      break;
 800ac06:	e077      	b.n	800acf8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800ac08:	7afb      	ldrb	r3, [r7, #11]
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	f000 fc58 	bl	800b4c4 <SCSI_StartStopUnit>
 800ac14:	4603      	mov	r3, r0
 800ac16:	75fb      	strb	r3, [r7, #23]
      break;
 800ac18:	e06e      	b.n	800acf8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800ac1a:	7afb      	ldrb	r3, [r7, #11]
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	4619      	mov	r1, r3
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f000 fca4 	bl	800b56e <SCSI_AllowPreventRemovable>
 800ac26:	4603      	mov	r3, r0
 800ac28:	75fb      	strb	r3, [r7, #23]
      break;
 800ac2a:	e065      	b.n	800acf8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800ac2c:	7afb      	ldrb	r3, [r7, #11]
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	4619      	mov	r1, r3
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f000 faec 	bl	800b210 <SCSI_ModeSense6>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	75fb      	strb	r3, [r7, #23]
      break;
 800ac3c:	e05c      	b.n	800acf8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800ac3e:	7afb      	ldrb	r3, [r7, #11]
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	4619      	mov	r1, r3
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	f000 fb29 	bl	800b29c <SCSI_ModeSense10>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	75fb      	strb	r3, [r7, #23]
      break;
 800ac4e:	e053      	b.n	800acf8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800ac50:	7afb      	ldrb	r3, [r7, #11]
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	4619      	mov	r1, r3
 800ac56:	68f8      	ldr	r0, [r7, #12]
 800ac58:	f000 fa5e 	bl	800b118 <SCSI_ReadFormatCapacity>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	75fb      	strb	r3, [r7, #23]
      break;
 800ac60:	e04a      	b.n	800acf8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800ac62:	7afb      	ldrb	r3, [r7, #11]
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	4619      	mov	r1, r3
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f000 f923 	bl	800aeb4 <SCSI_ReadCapacity10>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	75fb      	strb	r3, [r7, #23]
      break;
 800ac72:	e041      	b.n	800acf8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800ac74:	7afb      	ldrb	r3, [r7, #11]
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	4619      	mov	r1, r3
 800ac7a:	68f8      	ldr	r0, [r7, #12]
 800ac7c:	f000 f998 	bl	800afb0 <SCSI_ReadCapacity16>
 800ac80:	4603      	mov	r3, r0
 800ac82:	75fb      	strb	r3, [r7, #23]
      break;
 800ac84:	e038      	b.n	800acf8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800ac86:	7afb      	ldrb	r3, [r7, #11]
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f000 fc9b 	bl	800b5c8 <SCSI_Read10>
 800ac92:	4603      	mov	r3, r0
 800ac94:	75fb      	strb	r3, [r7, #23]
      break;
 800ac96:	e02f      	b.n	800acf8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800ac98:	7afb      	ldrb	r3, [r7, #11]
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f000 fd3c 	bl	800b71c <SCSI_Read12>
 800aca4:	4603      	mov	r3, r0
 800aca6:	75fb      	strb	r3, [r7, #23]
      break;
 800aca8:	e026      	b.n	800acf8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800acaa:	7afb      	ldrb	r3, [r7, #11]
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	4619      	mov	r1, r3
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f000 fde7 	bl	800b884 <SCSI_Write10>
 800acb6:	4603      	mov	r3, r0
 800acb8:	75fb      	strb	r3, [r7, #23]
      break;
 800acba:	e01d      	b.n	800acf8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800acbc:	7afb      	ldrb	r3, [r7, #11]
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	4619      	mov	r1, r3
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f000 feb4 	bl	800ba30 <SCSI_Write12>
 800acc8:	4603      	mov	r3, r0
 800acca:	75fb      	strb	r3, [r7, #23]
      break;
 800accc:	e014      	b.n	800acf8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800acce:	7afb      	ldrb	r3, [r7, #11]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	4619      	mov	r1, r3
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f000 ff91 	bl	800bbfc <SCSI_Verify10>
 800acda:	4603      	mov	r3, r0
 800acdc:	75fb      	strb	r3, [r7, #23]
      break;
 800acde:	e00b      	b.n	800acf8 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800ace0:	7af9      	ldrb	r1, [r7, #11]
 800ace2:	2320      	movs	r3, #32
 800ace4:	2205      	movs	r2, #5
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f000 fba1 	bl	800b42e <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	2202      	movs	r2, #2
 800acf0:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800acf2:	23ff      	movs	r3, #255	; 0xff
 800acf4:	75fb      	strb	r3, [r7, #23]
      break;
 800acf6:	bf00      	nop
  }

  return ret;
 800acf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3718      	adds	r7, #24
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	607a      	str	r2, [r7, #4]
 800ad10:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	32b0      	adds	r2, #176	; 0xb0
 800ad1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad20:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d102      	bne.n	800ad2e <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800ad28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad2c:	e03f      	b.n	800adae <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d00a      	beq.n	800ad4e <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ad3e:	2320      	movs	r3, #32
 800ad40:	2205      	movs	r2, #5
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f000 fb73 	bl	800b42e <SCSI_SenseCode>

    return -1;
 800ad48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad4c:	e02f      	b.n	800adae <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	d10b      	bne.n	800ad70 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ad58:	7af9      	ldrb	r1, [r7, #11]
 800ad5a:	233a      	movs	r3, #58	; 0x3a
 800ad5c:	2202      	movs	r2, #2
 800ad5e:	68f8      	ldr	r0, [r7, #12]
 800ad60:	f000 fb65 	bl	800b42e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	2205      	movs	r2, #5
 800ad68:	721a      	strb	r2, [r3, #8]
    return -1;
 800ad6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad6e:	e01e      	b.n	800adae <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	33b0      	adds	r3, #176	; 0xb0
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	4413      	add	r3, r2
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	7afa      	ldrb	r2, [r7, #11]
 800ad84:	4610      	mov	r0, r2
 800ad86:	4798      	blx	r3
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00b      	beq.n	800ada6 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ad8e:	7af9      	ldrb	r1, [r7, #11]
 800ad90:	233a      	movs	r3, #58	; 0x3a
 800ad92:	2202      	movs	r2, #2
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	f000 fb4a 	bl	800b42e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	2205      	movs	r2, #5
 800ad9e:	721a      	strb	r2, [r3, #8]

    return -1;
 800ada0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ada4:	e003      	b.n	800adae <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	2200      	movs	r2, #0
 800adaa:	60da      	str	r2, [r3, #12]

  return 0;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3718      	adds	r7, #24
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
	...

0800adb8 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b088      	sub	sp, #32
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	460b      	mov	r3, r1
 800adc2:	607a      	str	r2, [r7, #4]
 800adc4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	32b0      	adds	r2, #176	; 0xb0
 800add0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d102      	bne.n	800ade2 <SCSI_Inquiry+0x2a>
  {
    return -1;
 800addc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ade0:	e05f      	b.n	800aea2 <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10a      	bne.n	800ae02 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800adec:	69bb      	ldr	r3, [r7, #24]
 800adee:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800adf2:	2320      	movs	r3, #32
 800adf4:	2205      	movs	r2, #5
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f000 fb19 	bl	800b42e <SCSI_SenseCode>
    return -1;
 800adfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae00:	e04f      	b.n	800aea2 <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	3301      	adds	r3, #1
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	f003 0301 	and.w	r3, r3, #1
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d020      	beq.n	800ae52 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	3302      	adds	r3, #2
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d105      	bne.n	800ae26 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800ae1a:	2206      	movs	r2, #6
 800ae1c:	4923      	ldr	r1, [pc, #140]	; (800aeac <SCSI_Inquiry+0xf4>)
 800ae1e:	69b8      	ldr	r0, [r7, #24]
 800ae20:	f001 f872 	bl	800bf08 <SCSI_UpdateBotData>
 800ae24:	e03c      	b.n	800aea0 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	3302      	adds	r3, #2
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	2b80      	cmp	r3, #128	; 0x80
 800ae2e:	d105      	bne.n	800ae3c <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800ae30:	2208      	movs	r2, #8
 800ae32:	491f      	ldr	r1, [pc, #124]	; (800aeb0 <SCSI_Inquiry+0xf8>)
 800ae34:	69b8      	ldr	r0, [r7, #24]
 800ae36:	f001 f867 	bl	800bf08 <SCSI_UpdateBotData>
 800ae3a:	e031      	b.n	800aea0 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ae42:	2324      	movs	r3, #36	; 0x24
 800ae44:	2205      	movs	r2, #5
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f000 faf1 	bl	800b42e <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800ae4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae50:	e027      	b.n	800aea2 <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	33b0      	adds	r3, #176	; 0xb0
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	4413      	add	r3, r2
 800ae60:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800ae62:	69d9      	ldr	r1, [r3, #28]
 800ae64:	7afa      	ldrb	r2, [r7, #11]
 800ae66:	4613      	mov	r3, r2
 800ae68:	00db      	lsls	r3, r3, #3
 800ae6a:	4413      	add	r3, r2
 800ae6c:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800ae6e:	440b      	add	r3, r1
 800ae70:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	3304      	adds	r3, #4
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	3305      	adds	r3, #5
 800ae7c:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	3304      	adds	r3, #4
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	8bfa      	ldrh	r2, [r7, #30]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d303      	bcc.n	800ae94 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	3304      	adds	r3, #4
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800ae94:	8bfb      	ldrh	r3, [r7, #30]
 800ae96:	461a      	mov	r2, r3
 800ae98:	6979      	ldr	r1, [r7, #20]
 800ae9a:	69b8      	ldr	r0, [r7, #24]
 800ae9c:	f001 f834 	bl	800bf08 <SCSI_UpdateBotData>
  }

  return 0;
 800aea0:	2300      	movs	r3, #0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3720      	adds	r7, #32
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	24000074 	.word	0x24000074
 800aeb0:	2400007c 	.word	0x2400007c

0800aeb4 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	460b      	mov	r3, r1
 800aebe:	607a      	str	r2, [r7, #4]
 800aec0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	32b0      	adds	r2, #176	; 0xb0
 800aecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d102      	bne.n	800aede <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800aed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aedc:	e064      	b.n	800afa8 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	33b0      	adds	r3, #176	; 0xb0
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	4413      	add	r3, r2
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	697a      	ldr	r2, [r7, #20]
 800aef2:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800aefc:	7af8      	ldrb	r0, [r7, #11]
 800aefe:	4798      	blx	r3
 800af00:	4603      	mov	r3, r0
 800af02:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800af04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d104      	bne.n	800af16 <SCSI_ReadCapacity10+0x62>
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800af12:	2b02      	cmp	r3, #2
 800af14:	d108      	bne.n	800af28 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800af16:	7af9      	ldrb	r1, [r7, #11]
 800af18:	233a      	movs	r3, #58	; 0x3a
 800af1a:	2202      	movs	r2, #2
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f000 fa86 	bl	800b42e <SCSI_SenseCode>
    return -1;
 800af22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af26:	e03f      	b.n	800afa8 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800af2e:	3b01      	subs	r3, #1
 800af30:	0e1b      	lsrs	r3, r3, #24
 800af32:	b2da      	uxtb	r2, r3
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800af3e:	3b01      	subs	r3, #1
 800af40:	0c1b      	lsrs	r3, r3, #16
 800af42:	b2da      	uxtb	r2, r3
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800af4e:	3b01      	subs	r3, #1
 800af50:	0a1b      	lsrs	r3, r3, #8
 800af52:	b2da      	uxtb	r2, r3
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	3b01      	subs	r3, #1
 800af62:	b2da      	uxtb	r2, r3
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800af6e:	161b      	asrs	r3, r3, #24
 800af70:	b2da      	uxtb	r2, r3
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800af7c:	141b      	asrs	r3, r3, #16
 800af7e:	b2da      	uxtb	r2, r3
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800af8a:	0a1b      	lsrs	r3, r3, #8
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	b2da      	uxtb	r2, r3
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800af9a:	b2da      	uxtb	r2, r3
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	2208      	movs	r2, #8
 800afa4:	60da      	str	r2, [r3, #12]

  return 0;
 800afa6:	2300      	movs	r3, #0

}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3718      	adds	r7, #24
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b088      	sub	sp, #32
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	460b      	mov	r3, r1
 800afba:	607a      	str	r2, [r7, #4]
 800afbc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	32b0      	adds	r2, #176	; 0xb0
 800afc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afcc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800afce:	69bb      	ldr	r3, [r7, #24]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d102      	bne.n	800afda <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800afd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afd8:	e09a      	b.n	800b110 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	33b0      	adds	r3, #176	; 0xb0
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	4413      	add	r3, r2
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	69ba      	ldr	r2, [r7, #24]
 800afee:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800aff2:	69ba      	ldr	r2, [r7, #24]
 800aff4:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800aff8:	7af8      	ldrb	r0, [r7, #11]
 800affa:	4798      	blx	r3
 800affc:	4603      	mov	r3, r0
 800affe:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b000:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d104      	bne.n	800b012 <SCSI_ReadCapacity16+0x62>
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b00e:	2b02      	cmp	r3, #2
 800b010:	d108      	bne.n	800b024 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b012:	7af9      	ldrb	r1, [r7, #11]
 800b014:	233a      	movs	r3, #58	; 0x3a
 800b016:	2202      	movs	r2, #2
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f000 fa08 	bl	800b42e <SCSI_SenseCode>
    return -1;
 800b01e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b022:	e075      	b.n	800b110 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	330a      	adds	r3, #10
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	330b      	adds	r3, #11
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b034:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	330c      	adds	r3, #12
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800b03e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	320d      	adds	r2, #13
 800b044:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800b046:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800b04c:	2300      	movs	r3, #0
 800b04e:	61fb      	str	r3, [r7, #28]
 800b050:	e008      	b.n	800b064 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 800b052:	69ba      	ldr	r2, [r7, #24]
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	4413      	add	r3, r2
 800b058:	3310      	adds	r3, #16
 800b05a:	2200      	movs	r2, #0
 800b05c:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	3301      	adds	r3, #1
 800b062:	61fb      	str	r3, [r7, #28]
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	69fa      	ldr	r2, [r7, #28]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d3f1      	bcc.n	800b052 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b074:	3b01      	subs	r3, #1
 800b076:	0e1b      	lsrs	r3, r3, #24
 800b078:	b2da      	uxtb	r2, r3
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b084:	3b01      	subs	r3, #1
 800b086:	0c1b      	lsrs	r3, r3, #16
 800b088:	b2da      	uxtb	r2, r3
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b094:	3b01      	subs	r3, #1
 800b096:	0a1b      	lsrs	r3, r3, #8
 800b098:	b2da      	uxtb	r2, r3
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	b2da      	uxtb	r2, r3
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b0ae:	69bb      	ldr	r3, [r7, #24]
 800b0b0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b0b4:	161b      	asrs	r3, r3, #24
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b0c2:	141b      	asrs	r3, r3, #16
 800b0c4:	b2da      	uxtb	r2, r3
 800b0c6:	69bb      	ldr	r3, [r7, #24]
 800b0c8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b0d0:	0a1b      	lsrs	r3, r3, #8
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	b2da      	uxtb	r2, r3
 800b0d6:	69bb      	ldr	r3, [r7, #24]
 800b0d8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b0e0:	b2da      	uxtb	r2, r3
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	330a      	adds	r3, #10
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	330b      	adds	r3, #11
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b0f6:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	330c      	adds	r3, #12
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800b100:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	320d      	adds	r2, #13
 800b106:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800b108:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	60da      	str	r2, [r3, #12]

  return 0;
 800b10e:	2300      	movs	r3, #0
}
 800b110:	4618      	mov	r0, r3
 800b112:	3720      	adds	r7, #32
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b088      	sub	sp, #32
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	460b      	mov	r3, r1
 800b122:	607a      	str	r2, [r7, #4]
 800b124:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	32b0      	adds	r2, #176	; 0xb0
 800b130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b134:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d102      	bne.n	800b142 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800b13c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b140:	e061      	b.n	800b206 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b148:	68fa      	ldr	r2, [r7, #12]
 800b14a:	33b0      	adds	r3, #176	; 0xb0
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	4413      	add	r3, r2
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	f107 0214 	add.w	r2, r7, #20
 800b158:	f107 0110 	add.w	r1, r7, #16
 800b15c:	7af8      	ldrb	r0, [r7, #11]
 800b15e:	4798      	blx	r3
 800b160:	4603      	mov	r3, r0
 800b162:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b164:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d104      	bne.n	800b176 <SCSI_ReadFormatCapacity+0x5e>
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b172:	2b02      	cmp	r3, #2
 800b174:	d108      	bne.n	800b188 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b176:	7af9      	ldrb	r1, [r7, #11]
 800b178:	233a      	movs	r3, #58	; 0x3a
 800b17a:	2202      	movs	r2, #2
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f000 f956 	bl	800b42e <SCSI_SenseCode>
    return -1;
 800b182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b186:	e03e      	b.n	800b206 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800b188:	2300      	movs	r3, #0
 800b18a:	83fb      	strh	r3, [r7, #30]
 800b18c:	e007      	b.n	800b19e <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800b18e:	8bfb      	ldrh	r3, [r7, #30]
 800b190:	69ba      	ldr	r2, [r7, #24]
 800b192:	4413      	add	r3, r2
 800b194:	2200      	movs	r2, #0
 800b196:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800b198:	8bfb      	ldrh	r3, [r7, #30]
 800b19a:	3301      	adds	r3, #1
 800b19c:	83fb      	strh	r3, [r7, #30]
 800b19e:	8bfb      	ldrh	r3, [r7, #30]
 800b1a0:	2b0b      	cmp	r3, #11
 800b1a2:	d9f4      	bls.n	800b18e <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	2208      	movs	r2, #8
 800b1a8:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	0e1b      	lsrs	r3, r3, #24
 800b1b0:	b2da      	uxtb	r2, r3
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	0c1b      	lsrs	r3, r3, #16
 800b1bc:	b2da      	uxtb	r2, r3
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	3b01      	subs	r3, #1
 800b1c6:	0a1b      	lsrs	r3, r3, #8
 800b1c8:	b2da      	uxtb	r2, r3
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	b2da      	uxtb	r2, r3
 800b1d6:	69bb      	ldr	r3, [r7, #24]
 800b1d8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	2202      	movs	r2, #2
 800b1de:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800b1e0:	8abb      	ldrh	r3, [r7, #20]
 800b1e2:	141b      	asrs	r3, r3, #16
 800b1e4:	b2da      	uxtb	r2, r3
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800b1ea:	8abb      	ldrh	r3, [r7, #20]
 800b1ec:	0a1b      	lsrs	r3, r3, #8
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	b2da      	uxtb	r2, r3
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800b1f6:	8abb      	ldrh	r3, [r7, #20]
 800b1f8:	b2da      	uxtb	r2, r3
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	220c      	movs	r2, #12
 800b202:	60da      	str	r2, [r3, #12]

  return 0;
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3720      	adds	r7, #32
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
	...

0800b210 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b086      	sub	sp, #24
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	460b      	mov	r3, r1
 800b21a:	607a      	str	r2, [r7, #4]
 800b21c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	32b0      	adds	r2, #176	; 0xb0
 800b228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b22c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800b22e:	2304      	movs	r3, #4
 800b230:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d102      	bne.n	800b23e <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800b238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b23c:	e027      	b.n	800b28e <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b244:	68fa      	ldr	r2, [r7, #12]
 800b246:	33b0      	adds	r3, #176	; 0xb0
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	4413      	add	r3, r2
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	7afa      	ldrb	r2, [r7, #11]
 800b252:	4610      	mov	r0, r2
 800b254:	4798      	blx	r3
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d006      	beq.n	800b26a <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 800b25c:	4b0e      	ldr	r3, [pc, #56]	; (800b298 <SCSI_ModeSense6+0x88>)
 800b25e:	789b      	ldrb	r3, [r3, #2]
 800b260:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b264:	b2da      	uxtb	r2, r3
 800b266:	4b0c      	ldr	r3, [pc, #48]	; (800b298 <SCSI_ModeSense6+0x88>)
 800b268:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	3304      	adds	r3, #4
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	b29b      	uxth	r3, r3
 800b272:	8afa      	ldrh	r2, [r7, #22]
 800b274:	429a      	cmp	r2, r3
 800b276:	d303      	bcc.n	800b280 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	3304      	adds	r3, #4
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800b280:	8afb      	ldrh	r3, [r7, #22]
 800b282:	461a      	mov	r2, r3
 800b284:	4904      	ldr	r1, [pc, #16]	; (800b298 <SCSI_ModeSense6+0x88>)
 800b286:	6938      	ldr	r0, [r7, #16]
 800b288:	f000 fe3e 	bl	800bf08 <SCSI_UpdateBotData>

  return 0;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3718      	adds	r7, #24
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	24000084 	.word	0x24000084

0800b29c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	607a      	str	r2, [r7, #4]
 800b2a8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	32b0      	adds	r2, #176	; 0xb0
 800b2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800b2ba:	2308      	movs	r3, #8
 800b2bc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d102      	bne.n	800b2ca <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800b2c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2c8:	e027      	b.n	800b31a <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	33b0      	adds	r3, #176	; 0xb0
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	4413      	add	r3, r2
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	7afa      	ldrb	r2, [r7, #11]
 800b2de:	4610      	mov	r0, r2
 800b2e0:	4798      	blx	r3
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d006      	beq.n	800b2f6 <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 800b2e8:	4b0e      	ldr	r3, [pc, #56]	; (800b324 <SCSI_ModeSense10+0x88>)
 800b2ea:	78db      	ldrb	r3, [r3, #3]
 800b2ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b2f0:	b2da      	uxtb	r2, r3
 800b2f2:	4b0c      	ldr	r3, [pc, #48]	; (800b324 <SCSI_ModeSense10+0x88>)
 800b2f4:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	3308      	adds	r3, #8
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	8afa      	ldrh	r2, [r7, #22]
 800b300:	429a      	cmp	r2, r3
 800b302:	d303      	bcc.n	800b30c <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	3308      	adds	r3, #8
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800b30c:	8afb      	ldrh	r3, [r7, #22]
 800b30e:	461a      	mov	r2, r3
 800b310:	4904      	ldr	r1, [pc, #16]	; (800b324 <SCSI_ModeSense10+0x88>)
 800b312:	6938      	ldr	r0, [r7, #16]
 800b314:	f000 fdf8 	bl	800bf08 <SCSI_UpdateBotData>

  return 0;
 800b318:	2300      	movs	r3, #0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3718      	adds	r7, #24
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	24000088 	.word	0x24000088

0800b328 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b086      	sub	sp, #24
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	460b      	mov	r3, r1
 800b332:	607a      	str	r2, [r7, #4]
 800b334:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	32b0      	adds	r2, #176	; 0xb0
 800b340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b344:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d102      	bne.n	800b352 <SCSI_RequestSense+0x2a>
  {
    return -1;
 800b34c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b350:	e069      	b.n	800b426 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d10a      	bne.n	800b372 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b362:	2320      	movs	r3, #32
 800b364:	2205      	movs	r2, #5
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f000 f861 	bl	800b42e <SCSI_SenseCode>
    return -1;
 800b36c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b370:	e059      	b.n	800b426 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800b372:	2300      	movs	r3, #0
 800b374:	75fb      	strb	r3, [r7, #23]
 800b376:	e007      	b.n	800b388 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800b378:	7dfb      	ldrb	r3, [r7, #23]
 800b37a:	693a      	ldr	r2, [r7, #16]
 800b37c:	4413      	add	r3, r2
 800b37e:	2200      	movs	r2, #0
 800b380:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800b382:	7dfb      	ldrb	r3, [r7, #23]
 800b384:	3301      	adds	r3, #1
 800b386:	75fb      	strb	r3, [r7, #23]
 800b388:	7dfb      	ldrb	r3, [r7, #23]
 800b38a:	2b11      	cmp	r3, #17
 800b38c:	d9f4      	bls.n	800b378 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	2270      	movs	r2, #112	; 0x70
 800b392:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	220c      	movs	r2, #12
 800b398:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d02e      	beq.n	800b408 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	3248      	adds	r2, #72	; 0x48
 800b3b6:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b3c4:	693a      	ldr	r2, [r7, #16]
 800b3c6:	3348      	adds	r3, #72	; 0x48
 800b3c8:	00db      	lsls	r3, r3, #3
 800b3ca:	4413      	add	r3, r2
 800b3cc:	791a      	ldrb	r2, [r3, #4]
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b3d8:	693a      	ldr	r2, [r7, #16]
 800b3da:	3348      	adds	r3, #72	; 0x48
 800b3dc:	00db      	lsls	r3, r3, #3
 800b3de:	4413      	add	r3, r2
 800b3e0:	795a      	ldrb	r2, [r3, #5]
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	b2da      	uxtb	r2, r3
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b3fc:	2b04      	cmp	r3, #4
 800b3fe:	d103      	bne.n	800b408 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	2200      	movs	r2, #0
 800b404:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	2212      	movs	r2, #18
 800b40c:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	3304      	adds	r3, #4
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	2b12      	cmp	r3, #18
 800b416:	d805      	bhi.n	800b424 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	3304      	adds	r3, #4
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	461a      	mov	r2, r3
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	3718      	adds	r7, #24
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800b42e:	b480      	push	{r7}
 800b430:	b085      	sub	sp, #20
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
 800b436:	4608      	mov	r0, r1
 800b438:	4611      	mov	r1, r2
 800b43a:	461a      	mov	r2, r3
 800b43c:	4603      	mov	r3, r0
 800b43e:	70fb      	strb	r3, [r7, #3]
 800b440:	460b      	mov	r3, r1
 800b442:	70bb      	strb	r3, [r7, #2]
 800b444:	4613      	mov	r3, r2
 800b446:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	32b0      	adds	r2, #176	; 0xb0
 800b452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b456:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d02c      	beq.n	800b4b8 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b464:	461a      	mov	r2, r3
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	3248      	adds	r2, #72	; 0x48
 800b46a:	78b9      	ldrb	r1, [r7, #2]
 800b46c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	3348      	adds	r3, #72	; 0x48
 800b47a:	00db      	lsls	r3, r3, #3
 800b47c:	4413      	add	r3, r2
 800b47e:	787a      	ldrb	r2, [r7, #1]
 800b480:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	3348      	adds	r3, #72	; 0x48
 800b48c:	00db      	lsls	r3, r3, #3
 800b48e:	4413      	add	r3, r2
 800b490:	2200      	movs	r2, #0
 800b492:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b49a:	3301      	adds	r3, #1
 800b49c:	b2da      	uxtb	r2, r3
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b4aa:	2b04      	cmp	r3, #4
 800b4ac:	d105      	bne.n	800b4ba <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800b4b6:	e000      	b.n	800b4ba <SCSI_SenseCode+0x8c>
    return;
 800b4b8:	bf00      	nop
  }
}
 800b4ba:	3714      	adds	r7, #20
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b086      	sub	sp, #24
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	607a      	str	r2, [r7, #4]
 800b4d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	32b0      	adds	r2, #176	; 0xb0
 800b4dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4e0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d102      	bne.n	800b4ee <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800b4e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4ec:	e03b      	b.n	800b566 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d10f      	bne.n	800b518 <SCSI_StartStopUnit+0x54>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	3304      	adds	r3, #4
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	f003 0303 	and.w	r3, r3, #3
 800b502:	2b02      	cmp	r3, #2
 800b504:	d108      	bne.n	800b518 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800b506:	7af9      	ldrb	r1, [r7, #11]
 800b508:	2324      	movs	r3, #36	; 0x24
 800b50a:	2205      	movs	r2, #5
 800b50c:	68f8      	ldr	r0, [r7, #12]
 800b50e:	f7ff ff8e 	bl	800b42e <SCSI_SenseCode>

    return -1;
 800b512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b516:	e026      	b.n	800b566 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	3304      	adds	r3, #4
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	f003 0303 	and.w	r3, r3, #3
 800b522:	2b01      	cmp	r3, #1
 800b524:	d104      	bne.n	800b530 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	2200      	movs	r2, #0
 800b52a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800b52e:	e016      	b.n	800b55e <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	3304      	adds	r3, #4
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	f003 0303 	and.w	r3, r3, #3
 800b53a:	2b02      	cmp	r3, #2
 800b53c:	d104      	bne.n	800b548 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	2202      	movs	r2, #2
 800b542:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800b546:	e00a      	b.n	800b55e <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	3304      	adds	r3, #4
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	f003 0303 	and.w	r3, r3, #3
 800b552:	2b03      	cmp	r3, #3
 800b554:	d103      	bne.n	800b55e <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	2200      	movs	r2, #0
 800b55a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	2200      	movs	r2, #0
 800b562:	60da      	str	r2, [r3, #12]

  return 0;
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	3718      	adds	r7, #24
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}

0800b56e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b56e:	b480      	push	{r7}
 800b570:	b087      	sub	sp, #28
 800b572:	af00      	add	r7, sp, #0
 800b574:	60f8      	str	r0, [r7, #12]
 800b576:	460b      	mov	r3, r1
 800b578:	607a      	str	r2, [r7, #4]
 800b57a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	32b0      	adds	r2, #176	; 0xb0
 800b586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b58a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d102      	bne.n	800b598 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800b592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b596:	e011      	b.n	800b5bc <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	3304      	adds	r3, #4
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d104      	bne.n	800b5ac <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800b5aa:	e003      	b.n	800b5b4 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	60da      	str	r2, [r3, #12]

  return 0;
 800b5ba:	2300      	movs	r3, #0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	371c      	adds	r7, #28
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b086      	sub	sp, #24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	607a      	str	r2, [r7, #4]
 800b5d4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	32b0      	adds	r2, #176	; 0xb0
 800b5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d102      	bne.n	800b5f2 <SCSI_Read10+0x2a>
  {
    return -1;
 800b5ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5f0:	e090      	b.n	800b714 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	7a1b      	ldrb	r3, [r3, #8]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f040 8082 	bne.w	800b700 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800b602:	b25b      	sxtb	r3, r3
 800b604:	2b00      	cmp	r3, #0
 800b606:	db0a      	blt.n	800b61e <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b60e:	2320      	movs	r3, #32
 800b610:	2205      	movs	r2, #5
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f7ff ff0b 	bl	800b42e <SCSI_SenseCode>
      return -1;
 800b618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b61c:	e07a      	b.n	800b714 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b624:	2b02      	cmp	r3, #2
 800b626:	d108      	bne.n	800b63a <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b628:	7af9      	ldrb	r1, [r7, #11]
 800b62a:	233a      	movs	r3, #58	; 0x3a
 800b62c:	2202      	movs	r2, #2
 800b62e:	68f8      	ldr	r0, [r7, #12]
 800b630:	f7ff fefd 	bl	800b42e <SCSI_SenseCode>

      return -1;
 800b634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b638:	e06c      	b.n	800b714 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	33b0      	adds	r3, #176	; 0xb0
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4413      	add	r3, r2
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	7afa      	ldrb	r2, [r7, #11]
 800b64e:	4610      	mov	r0, r2
 800b650:	4798      	blx	r3
 800b652:	4603      	mov	r3, r0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d008      	beq.n	800b66a <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b658:	7af9      	ldrb	r1, [r7, #11]
 800b65a:	233a      	movs	r3, #58	; 0x3a
 800b65c:	2202      	movs	r2, #2
 800b65e:	68f8      	ldr	r0, [r7, #12]
 800b660:	f7ff fee5 	bl	800b42e <SCSI_SenseCode>
      return -1;
 800b664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b668:	e054      	b.n	800b714 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	3302      	adds	r3, #2
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	3303      	adds	r3, #3
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b67a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	3304      	adds	r3, #4
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b684:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	3205      	adds	r2, #5
 800b68a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800b68c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	3307      	adds	r3, #7
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	021b      	lsls	r3, r3, #8
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	3208      	adds	r2, #8
 800b6a0:	7812      	ldrb	r2, [r2, #0]
 800b6a2:	431a      	orrs	r2, r3
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b6b6:	7af9      	ldrb	r1, [r7, #11]
 800b6b8:	68f8      	ldr	r0, [r7, #12]
 800b6ba:	f000 fadc 	bl	800bc76 <SCSI_CheckAddressRange>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	da02      	bge.n	800b6ca <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b6c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b6c8:	e024      	b.n	800b714 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b6d6:	6979      	ldr	r1, [r7, #20]
 800b6d8:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800b6dc:	fb01 f303 	mul.w	r3, r1, r3
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d00a      	beq.n	800b6fa <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b6ea:	2320      	movs	r3, #32
 800b6ec:	2205      	movs	r2, #5
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f7ff fe9d 	bl	800b42e <SCSI_SenseCode>
      return -1;
 800b6f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b6f8:	e00c      	b.n	800b714 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	2202      	movs	r2, #2
 800b6fe:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b706:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800b708:	7afb      	ldrb	r3, [r7, #11]
 800b70a:	4619      	mov	r1, r3
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f000 fadf 	bl	800bcd0 <SCSI_ProcessRead>
 800b712:	4603      	mov	r3, r0
}
 800b714:	4618      	mov	r0, r3
 800b716:	3718      	adds	r7, #24
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b086      	sub	sp, #24
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	460b      	mov	r3, r1
 800b726:	607a      	str	r2, [r7, #4]
 800b728:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	32b0      	adds	r2, #176	; 0xb0
 800b734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b738:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d102      	bne.n	800b746 <SCSI_Read12+0x2a>
  {
    return -1;
 800b740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b744:	e09a      	b.n	800b87c <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	7a1b      	ldrb	r3, [r3, #8]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f040 808c 	bne.w	800b868 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800b756:	b25b      	sxtb	r3, r3
 800b758:	2b00      	cmp	r3, #0
 800b75a:	db0a      	blt.n	800b772 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b762:	2320      	movs	r3, #32
 800b764:	2205      	movs	r2, #5
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	f7ff fe61 	bl	800b42e <SCSI_SenseCode>
      return -1;
 800b76c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b770:	e084      	b.n	800b87c <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b778:	2b02      	cmp	r3, #2
 800b77a:	d108      	bne.n	800b78e <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b77c:	7af9      	ldrb	r1, [r7, #11]
 800b77e:	233a      	movs	r3, #58	; 0x3a
 800b780:	2202      	movs	r2, #2
 800b782:	68f8      	ldr	r0, [r7, #12]
 800b784:	f7ff fe53 	bl	800b42e <SCSI_SenseCode>
      return -1;
 800b788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b78c:	e076      	b.n	800b87c <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	33b0      	adds	r3, #176	; 0xb0
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	4413      	add	r3, r2
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	7afa      	ldrb	r2, [r7, #11]
 800b7a2:	4610      	mov	r0, r2
 800b7a4:	4798      	blx	r3
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d008      	beq.n	800b7be <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b7ac:	7af9      	ldrb	r1, [r7, #11]
 800b7ae:	233a      	movs	r3, #58	; 0x3a
 800b7b0:	2202      	movs	r2, #2
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f7ff fe3b 	bl	800b42e <SCSI_SenseCode>
      return -1;
 800b7b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7bc:	e05e      	b.n	800b87c <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	3302      	adds	r3, #2
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	3303      	adds	r3, #3
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b7ce:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	3304      	adds	r3, #4
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b7d8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	3205      	adds	r2, #5
 800b7de:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800b7e0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	3306      	adds	r3, #6
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	3307      	adds	r3, #7
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b7f8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	3308      	adds	r3, #8
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800b802:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	3209      	adds	r2, #9
 800b808:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800b80a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b81e:	7af9      	ldrb	r1, [r7, #11]
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f000 fa28 	bl	800bc76 <SCSI_CheckAddressRange>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	da02      	bge.n	800b832 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b82c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b830:	e024      	b.n	800b87c <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b83e:	6979      	ldr	r1, [r7, #20]
 800b840:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800b844:	fb01 f303 	mul.w	r3, r1, r3
 800b848:	429a      	cmp	r2, r3
 800b84a:	d00a      	beq.n	800b862 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b852:	2320      	movs	r3, #32
 800b854:	2205      	movs	r2, #5
 800b856:	68f8      	ldr	r0, [r7, #12]
 800b858:	f7ff fde9 	bl	800b42e <SCSI_SenseCode>
      return -1;
 800b85c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b860:	e00c      	b.n	800b87c <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	2202      	movs	r2, #2
 800b866:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b86e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800b870:	7afb      	ldrb	r3, [r7, #11]
 800b872:	4619      	mov	r1, r3
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f000 fa2b 	bl	800bcd0 <SCSI_ProcessRead>
 800b87a:	4603      	mov	r3, r0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3718      	adds	r7, #24
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b086      	sub	sp, #24
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	460b      	mov	r3, r1
 800b88e:	607a      	str	r2, [r7, #4]
 800b890:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	32b0      	adds	r2, #176	; 0xb0
 800b89c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d102      	bne.n	800b8ae <SCSI_Write10+0x2a>
  {
    return -1;
 800b8a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8ac:	e0ba      	b.n	800ba24 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	7a1b      	ldrb	r3, [r3, #8]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	f040 80b0 	bne.w	800ba18 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d10a      	bne.n	800b8d8 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b8c8:	2320      	movs	r3, #32
 800b8ca:	2205      	movs	r2, #5
 800b8cc:	68f8      	ldr	r0, [r7, #12]
 800b8ce:	f7ff fdae 	bl	800b42e <SCSI_SenseCode>
      return -1;
 800b8d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8d6:	e0a5      	b.n	800ba24 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800b8de:	b25b      	sxtb	r3, r3
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	da0a      	bge.n	800b8fa <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b8ea:	2320      	movs	r3, #32
 800b8ec:	2205      	movs	r2, #5
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	f7ff fd9d 	bl	800b42e <SCSI_SenseCode>
      return -1;
 800b8f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8f8:	e094      	b.n	800ba24 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	33b0      	adds	r3, #176	; 0xb0
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4413      	add	r3, r2
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	689b      	ldr	r3, [r3, #8]
 800b90c:	7afa      	ldrb	r2, [r7, #11]
 800b90e:	4610      	mov	r0, r2
 800b910:	4798      	blx	r3
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d008      	beq.n	800b92a <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b918:	7af9      	ldrb	r1, [r7, #11]
 800b91a:	233a      	movs	r3, #58	; 0x3a
 800b91c:	2202      	movs	r2, #2
 800b91e:	68f8      	ldr	r0, [r7, #12]
 800b920:	f7ff fd85 	bl	800b42e <SCSI_SenseCode>
      return -1;
 800b924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b928:	e07c      	b.n	800ba24 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	33b0      	adds	r3, #176	; 0xb0
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	4413      	add	r3, r2
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	7afa      	ldrb	r2, [r7, #11]
 800b93e:	4610      	mov	r0, r2
 800b940:	4798      	blx	r3
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d008      	beq.n	800b95a <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800b948:	7af9      	ldrb	r1, [r7, #11]
 800b94a:	2327      	movs	r3, #39	; 0x27
 800b94c:	2202      	movs	r2, #2
 800b94e:	68f8      	ldr	r0, [r7, #12]
 800b950:	f7ff fd6d 	bl	800b42e <SCSI_SenseCode>
      return -1;
 800b954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b958:	e064      	b.n	800ba24 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	3302      	adds	r3, #2
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	3303      	adds	r3, #3
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b96a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	3304      	adds	r3, #4
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b974:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	3205      	adds	r2, #5
 800b97a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800b97c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	3307      	adds	r3, #7
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	3208      	adds	r2, #8
 800b990:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800b992:	431a      	orrs	r2, r3
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b9a6:	7af9      	ldrb	r1, [r7, #11]
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	f000 f964 	bl	800bc76 <SCSI_CheckAddressRange>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	da02      	bge.n	800b9ba <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b9b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9b8:	e034      	b.n	800ba24 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b9c0:	697a      	ldr	r2, [r7, #20]
 800b9c2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800b9c6:	fb02 f303 	mul.w	r3, r2, r3
 800b9ca:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b9d2:	693a      	ldr	r2, [r7, #16]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d00a      	beq.n	800b9ee <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b9de:	2320      	movs	r3, #32
 800b9e0:	2205      	movs	r2, #5
 800b9e2:	68f8      	ldr	r0, [r7, #12]
 800b9e4:	f7ff fd23 	bl	800b42e <SCSI_SenseCode>
      return -1;
 800b9e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9ec:	e01a      	b.n	800ba24 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9f4:	bf28      	it	cs
 800b9f6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800b9fa:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800ba02:	4b0a      	ldr	r3, [pc, #40]	; (800ba2c <SCSI_Write10+0x1a8>)
 800ba04:	7819      	ldrb	r1, [r3, #0]
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	f103 0210 	add.w	r2, r3, #16
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f002 faf1 	bl	800dff6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800ba14:	2300      	movs	r3, #0
 800ba16:	e005      	b.n	800ba24 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800ba18:	7afb      	ldrb	r3, [r7, #11]
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f000 f9dd 	bl	800bddc <SCSI_ProcessWrite>
 800ba22:	4603      	mov	r3, r0
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3718      	adds	r7, #24
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	24000073 	.word	0x24000073

0800ba30 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	460b      	mov	r3, r1
 800ba3a:	607a      	str	r2, [r7, #4]
 800ba3c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	32b0      	adds	r2, #176	; 0xb0
 800ba48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba4c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d102      	bne.n	800ba5a <SCSI_Write12+0x2a>
  {
    return -1;
 800ba54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba58:	e0ca      	b.n	800bbf0 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	7a1b      	ldrb	r3, [r3, #8]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	f040 80c0 	bne.w	800bbe4 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d10a      	bne.n	800ba84 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ba74:	2320      	movs	r3, #32
 800ba76:	2205      	movs	r2, #5
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f7ff fcd8 	bl	800b42e <SCSI_SenseCode>
      return -1;
 800ba7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba82:	e0b5      	b.n	800bbf0 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ba8a:	b25b      	sxtb	r3, r3
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	da0a      	bge.n	800baa6 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ba96:	2320      	movs	r3, #32
 800ba98:	2205      	movs	r2, #5
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f7ff fcc7 	bl	800b42e <SCSI_SenseCode>
      return -1;
 800baa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800baa4:	e0a4      	b.n	800bbf0 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	33b0      	adds	r3, #176	; 0xb0
 800bab0:	009b      	lsls	r3, r3, #2
 800bab2:	4413      	add	r3, r2
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	7afa      	ldrb	r2, [r7, #11]
 800baba:	4610      	mov	r0, r2
 800babc:	4798      	blx	r3
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d00b      	beq.n	800badc <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bac4:	7af9      	ldrb	r1, [r7, #11]
 800bac6:	233a      	movs	r3, #58	; 0x3a
 800bac8:	2202      	movs	r2, #2
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	f7ff fcaf 	bl	800b42e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	2205      	movs	r2, #5
 800bad4:	721a      	strb	r2, [r3, #8]
      return -1;
 800bad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bada:	e089      	b.n	800bbf0 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bae2:	68fa      	ldr	r2, [r7, #12]
 800bae4:	33b0      	adds	r3, #176	; 0xb0
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	4413      	add	r3, r2
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	7afa      	ldrb	r2, [r7, #11]
 800baf0:	4610      	mov	r0, r2
 800baf2:	4798      	blx	r3
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00b      	beq.n	800bb12 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800bafa:	7af9      	ldrb	r1, [r7, #11]
 800bafc:	2327      	movs	r3, #39	; 0x27
 800bafe:	2202      	movs	r2, #2
 800bb00:	68f8      	ldr	r0, [r7, #12]
 800bb02:	f7ff fc94 	bl	800b42e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	2205      	movs	r2, #5
 800bb0a:	721a      	strb	r2, [r3, #8]
      return -1;
 800bb0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb10:	e06e      	b.n	800bbf0 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	3302      	adds	r3, #2
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	3303      	adds	r3, #3
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bb22:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	3304      	adds	r3, #4
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800bb2c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	3205      	adds	r2, #5
 800bb32:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800bb34:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	3306      	adds	r3, #6
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	3307      	adds	r3, #7
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800bb4c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	3308      	adds	r3, #8
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800bb56:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	3209      	adds	r2, #9
 800bb5c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800bb5e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bb72:	7af9      	ldrb	r1, [r7, #11]
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f000 f87e 	bl	800bc76 <SCSI_CheckAddressRange>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	da02      	bge.n	800bb86 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800bb80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb84:	e034      	b.n	800bbf0 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bb8c:	697a      	ldr	r2, [r7, #20]
 800bb8e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800bb92:	fb02 f303 	mul.w	r3, r2, r3
 800bb96:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bb9e:	693a      	ldr	r2, [r7, #16]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d00a      	beq.n	800bbba <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bbaa:	2320      	movs	r3, #32
 800bbac:	2205      	movs	r2, #5
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	f7ff fc3d 	bl	800b42e <SCSI_SenseCode>
      return -1;
 800bbb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbb8:	e01a      	b.n	800bbf0 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbc0:	bf28      	it	cs
 800bbc2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800bbc6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800bbce:	4b0a      	ldr	r3, [pc, #40]	; (800bbf8 <SCSI_Write12+0x1c8>)
 800bbd0:	7819      	ldrb	r1, [r3, #0]
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	f103 0210 	add.w	r2, r3, #16
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f002 fa0b 	bl	800dff6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	e005      	b.n	800bbf0 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800bbe4:	7afb      	ldrb	r3, [r7, #11]
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f000 f8f7 	bl	800bddc <SCSI_ProcessWrite>
 800bbee:	4603      	mov	r3, r0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3718      	adds	r7, #24
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	24000073 	.word	0x24000073

0800bbfc <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b086      	sub	sp, #24
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	460b      	mov	r3, r1
 800bc06:	607a      	str	r2, [r7, #4]
 800bc08:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	32b0      	adds	r2, #176	; 0xb0
 800bc14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc18:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d102      	bne.n	800bc26 <SCSI_Verify10+0x2a>
  {
    return -1;
 800bc20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc24:	e023      	b.n	800bc6e <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	3301      	adds	r3, #1
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	f003 0302 	and.w	r3, r3, #2
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d008      	beq.n	800bc46 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800bc34:	7af9      	ldrb	r1, [r7, #11]
 800bc36:	2324      	movs	r3, #36	; 0x24
 800bc38:	2205      	movs	r2, #5
 800bc3a:	68f8      	ldr	r0, [r7, #12]
 800bc3c:	f7ff fbf7 	bl	800b42e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800bc40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc44:	e013      	b.n	800bc6e <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bc52:	7af9      	ldrb	r1, [r7, #11]
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	f000 f80e 	bl	800bc76 <SCSI_CheckAddressRange>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	da02      	bge.n	800bc66 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800bc60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc64:	e003      	b.n	800bc6e <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	60da      	str	r2, [r3, #12]

  return 0;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3718      	adds	r7, #24
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b086      	sub	sp, #24
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	60f8      	str	r0, [r7, #12]
 800bc7e:	607a      	str	r2, [r7, #4]
 800bc80:	603b      	str	r3, [r7, #0]
 800bc82:	460b      	mov	r3, r1
 800bc84:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	32b0      	adds	r2, #176	; 0xb0
 800bc90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc94:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d102      	bne.n	800bca2 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800bc9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bca0:	e011      	b.n	800bcc6 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	441a      	add	r2, r3
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d908      	bls.n	800bcc4 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800bcb2:	7af9      	ldrb	r1, [r7, #11]
 800bcb4:	2321      	movs	r3, #33	; 0x21
 800bcb6:	2205      	movs	r2, #5
 800bcb8:	68f8      	ldr	r0, [r7, #12]
 800bcba:	f7ff fbb8 	bl	800b42e <SCSI_SenseCode>
    return -1;
 800bcbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcc2:	e000      	b.n	800bcc6 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800bcc4:	2300      	movs	r3, #0
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3718      	adds	r7, #24
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
	...

0800bcd0 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800bcd0:	b590      	push	{r4, r7, lr}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	460b      	mov	r3, r1
 800bcda:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	32b0      	adds	r2, #176	; 0xb0
 800bce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcea:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d102      	bne.n	800bcf8 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800bcf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcf6:	e06a      	b.n	800bdce <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bcfe:	68fa      	ldr	r2, [r7, #12]
 800bd00:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800bd04:	fb02 f303 	mul.w	r3, r2, r3
 800bd08:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd10:	bf28      	it	cs
 800bd12:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800bd16:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	33b0      	adds	r3, #176	; 0xb0
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	4413      	add	r3, r2
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	691c      	ldr	r4, [r3, #16]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f103 0110 	add.w	r1, r3, #16
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	78f8      	ldrb	r0, [r7, #3]
 800bd48:	47a0      	blx	r4
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	da08      	bge.n	800bd62 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800bd50:	78f9      	ldrb	r1, [r7, #3]
 800bd52:	2311      	movs	r3, #17
 800bd54:	2204      	movs	r2, #4
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f7ff fb69 	bl	800b42e <SCSI_SenseCode>
    return -1;
 800bd5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd60:	e035      	b.n	800bdce <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800bd62:	4b1d      	ldr	r3, [pc, #116]	; (800bdd8 <SCSI_ProcessRead+0x108>)
 800bd64:	7819      	ldrb	r1, [r3, #0]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f103 0210 	add.w	r2, r3, #16
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f002 f920 	bl	800dfb4 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bd80:	4619      	mov	r1, r3
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd88:	441a      	add	r2, r3
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	fbb3 f3f1 	udiv	r3, r3, r1
 800bda4:	1ad2      	subs	r2, r2, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	1ad2      	subs	r2, r2, r3
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d102      	bne.n	800bdcc <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2203      	movs	r2, #3
 800bdca:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3714      	adds	r7, #20
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd90      	pop	{r4, r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	24000072 	.word	0x24000072

0800bddc <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800bddc:	b590      	push	{r4, r7, lr}
 800bdde:	b085      	sub	sp, #20
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	460b      	mov	r3, r1
 800bde6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	32b0      	adds	r2, #176	; 0xb0
 800bdf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdf6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d102      	bne.n	800be04 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800bdfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be02:	e07a      	b.n	800befa <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800be10:	fb02 f303 	mul.w	r3, r2, r3
 800be14:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be1c:	bf28      	it	cs
 800be1e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800be22:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	33b0      	adds	r3, #176	; 0xb0
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	4413      	add	r3, r2
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	695c      	ldr	r4, [r3, #20]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f103 0110 	add.w	r1, r3, #16
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800be48:	4618      	mov	r0, r3
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800be50:	b29b      	uxth	r3, r3
 800be52:	78f8      	ldrb	r0, [r7, #3]
 800be54:	47a0      	blx	r4
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	da08      	bge.n	800be6e <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800be5c:	78f9      	ldrb	r1, [r7, #3]
 800be5e:	2303      	movs	r3, #3
 800be60:	2204      	movs	r2, #4
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f7ff fae3 	bl	800b42e <SCSI_SenseCode>
    return -1;
 800be68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be6c:	e045      	b.n	800befa <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800be7a:	4619      	mov	r1, r3
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	fbb3 f3f1 	udiv	r3, r3, r1
 800be82:	441a      	add	r2, r3
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800be96:	4619      	mov	r1, r3
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	fbb3 f3f1 	udiv	r3, r3, r1
 800be9e:	1ad2      	subs	r2, r2, r3
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	1ad2      	subs	r2, r2, r3
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d104      	bne.n	800beca <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800bec0:	2100      	movs	r1, #0
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f7fe fce6 	bl	800a894 <MSC_BOT_SendCSW>
 800bec8:	e016      	b.n	800bef8 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bed0:	68fa      	ldr	r2, [r7, #12]
 800bed2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800bed6:	fb02 f303 	mul.w	r3, r2, r3
 800beda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bede:	bf28      	it	cs
 800bee0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800bee4:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800bee6:	4b07      	ldr	r3, [pc, #28]	; (800bf04 <SCSI_ProcessWrite+0x128>)
 800bee8:	7819      	ldrb	r1, [r3, #0]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f103 0210 	add.w	r2, r3, #16
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f002 f87f 	bl	800dff6 <USBD_LL_PrepareReceive>
  }

  return 0;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	3714      	adds	r7, #20
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd90      	pop	{r4, r7, pc}
 800bf02:	bf00      	nop
 800bf04:	24000073 	.word	0x24000073

0800bf08 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b087      	sub	sp, #28
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	4613      	mov	r3, r2
 800bf14:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800bf16:	88fb      	ldrh	r3, [r7, #6]
 800bf18:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d102      	bne.n	800bf26 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800bf20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf24:	e013      	b.n	800bf4e <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800bf26:	8afa      	ldrh	r2, [r7, #22]
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800bf2c:	e00b      	b.n	800bf46 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800bf2e:	8afb      	ldrh	r3, [r7, #22]
 800bf30:	3b01      	subs	r3, #1
 800bf32:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800bf34:	8afb      	ldrh	r3, [r7, #22]
 800bf36:	68ba      	ldr	r2, [r7, #8]
 800bf38:	441a      	add	r2, r3
 800bf3a:	8afb      	ldrh	r3, [r7, #22]
 800bf3c:	7811      	ldrb	r1, [r2, #0]
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	4413      	add	r3, r2
 800bf42:	460a      	mov	r2, r1
 800bf44:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800bf46:	8afb      	ldrh	r3, [r7, #22]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d1f0      	bne.n	800bf2e <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800bf4c:	2300      	movs	r3, #0
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	371c      	adds	r7, #28
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr
	...

0800bf5c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b086      	sub	sp, #24
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	4613      	mov	r3, r2
 800bf68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d10a      	bne.n	800bf86 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800bf70:	4817      	ldr	r0, [pc, #92]	; (800bfd0 <USBD_Init+0x74>)
 800bf72:	f002 f969 	bl	800e248 <iprintf>
 800bf76:	4817      	ldr	r0, [pc, #92]	; (800bfd4 <USBD_Init+0x78>)
 800bf78:	f002 f966 	bl	800e248 <iprintf>
 800bf7c:	200a      	movs	r0, #10
 800bf7e:	f002 f975 	bl	800e26c <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bf82:	2303      	movs	r3, #3
 800bf84:	e01f      	b.n	800bfc6 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d003      	beq.n	800bfac <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	79fa      	ldrb	r2, [r7, #7]
 800bfb8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f001 fea0 	bl	800dd00 <USBD_LL_Init>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bfc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3718      	adds	r7, #24
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	0800efc0 	.word	0x0800efc0
 800bfd4:	0800efc8 	.word	0x0800efc8

0800bfd8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d10a      	bne.n	800c002 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800bfec:	481a      	ldr	r0, [pc, #104]	; (800c058 <USBD_RegisterClass+0x80>)
 800bfee:	f002 f92b 	bl	800e248 <iprintf>
 800bff2:	481a      	ldr	r0, [pc, #104]	; (800c05c <USBD_RegisterClass+0x84>)
 800bff4:	f002 f928 	bl	800e248 <iprintf>
 800bff8:	200a      	movs	r0, #10
 800bffa:	f002 f937 	bl	800e26c <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bffe:	2303      	movs	r3, #3
 800c000:	e025      	b.n	800c04e <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	683a      	ldr	r2, [r7, #0]
 800c006:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	32ae      	adds	r2, #174	; 0xae
 800c014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00f      	beq.n	800c03e <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	32ae      	adds	r2, #174	; 0xae
 800c028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02e:	f107 020e 	add.w	r2, r7, #14
 800c032:	4610      	mov	r0, r2
 800c034:	4798      	blx	r3
 800c036:	4602      	mov	r2, r0
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c044:	1c5a      	adds	r2, r3, #1
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c04c:	2300      	movs	r3, #0
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3710      	adds	r7, #16
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	0800efc0 	.word	0x0800efc0
 800c05c:	0800efe0 	.word	0x0800efe0

0800c060 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f001 fe9b 	bl	800dda4 <USBD_LL_Start>
 800c06e:	4603      	mov	r3, r0
}
 800c070:	4618      	mov	r0, r3
 800c072:	3708      	adds	r7, #8
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c080:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c082:	4618      	mov	r0, r3
 800c084:	370c      	adds	r7, #12
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr

0800c08e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c08e:	b580      	push	{r7, lr}
 800c090:	b084      	sub	sp, #16
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
 800c096:	460b      	mov	r3, r1
 800c098:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c09a:	2300      	movs	r3, #0
 800c09c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d009      	beq.n	800c0bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	78fa      	ldrb	r2, [r7, #3]
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	4798      	blx	r3
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b084      	sub	sp, #16
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	78fa      	ldrb	r2, [r7, #3]
 800c0e0:	4611      	mov	r1, r2
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	4798      	blx	r3
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d001      	beq.n	800c0f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c0ec:	2303      	movs	r3, #3
 800c0ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b084      	sub	sp, #16
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
 800c102:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c10a:	6839      	ldr	r1, [r7, #0]
 800c10c:	4618      	mov	r0, r3
 800c10e:	f001 f90e 	bl	800d32e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2201      	movs	r2, #1
 800c116:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c120:	461a      	mov	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c12e:	f003 031f 	and.w	r3, r3, #31
 800c132:	2b02      	cmp	r3, #2
 800c134:	d01a      	beq.n	800c16c <USBD_LL_SetupStage+0x72>
 800c136:	2b02      	cmp	r3, #2
 800c138:	d822      	bhi.n	800c180 <USBD_LL_SetupStage+0x86>
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d002      	beq.n	800c144 <USBD_LL_SetupStage+0x4a>
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d00a      	beq.n	800c158 <USBD_LL_SetupStage+0x5e>
 800c142:	e01d      	b.n	800c180 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c14a:	4619      	mov	r1, r3
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f000 fb65 	bl	800c81c <USBD_StdDevReq>
 800c152:	4603      	mov	r3, r0
 800c154:	73fb      	strb	r3, [r7, #15]
      break;
 800c156:	e020      	b.n	800c19a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c15e:	4619      	mov	r1, r3
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 fbcd 	bl	800c900 <USBD_StdItfReq>
 800c166:	4603      	mov	r3, r0
 800c168:	73fb      	strb	r3, [r7, #15]
      break;
 800c16a:	e016      	b.n	800c19a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c172:	4619      	mov	r1, r3
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 fc2f 	bl	800c9d8 <USBD_StdEPReq>
 800c17a:	4603      	mov	r3, r0
 800c17c:	73fb      	strb	r3, [r7, #15]
      break;
 800c17e:	e00c      	b.n	800c19a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c186:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	4619      	mov	r1, r3
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f001 fe87 	bl	800dea2 <USBD_LL_StallEP>
 800c194:	4603      	mov	r3, r0
 800c196:	73fb      	strb	r3, [r7, #15]
      break;
 800c198:	bf00      	nop
  }

  return ret;
 800c19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3710      	adds	r7, #16
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b086      	sub	sp, #24
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	607a      	str	r2, [r7, #4]
 800c1b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c1b6:	7afb      	ldrb	r3, [r7, #11]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d16e      	bne.n	800c29a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c1c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c1ca:	2b03      	cmp	r3, #3
 800c1cc:	f040 8098 	bne.w	800c300 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	689a      	ldr	r2, [r3, #8]
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d913      	bls.n	800c204 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	689a      	ldr	r2, [r3, #8]
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	1ad2      	subs	r2, r2, r3
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	68da      	ldr	r2, [r3, #12]
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	689b      	ldr	r3, [r3, #8]
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	bf28      	it	cs
 800c1f6:	4613      	movcs	r3, r2
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	6879      	ldr	r1, [r7, #4]
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	f001 f979 	bl	800d4f4 <USBD_CtlContinueRx>
 800c202:	e07d      	b.n	800c300 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c20a:	f003 031f 	and.w	r3, r3, #31
 800c20e:	2b02      	cmp	r3, #2
 800c210:	d014      	beq.n	800c23c <USBD_LL_DataOutStage+0x98>
 800c212:	2b02      	cmp	r3, #2
 800c214:	d81d      	bhi.n	800c252 <USBD_LL_DataOutStage+0xae>
 800c216:	2b00      	cmp	r3, #0
 800c218:	d002      	beq.n	800c220 <USBD_LL_DataOutStage+0x7c>
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d003      	beq.n	800c226 <USBD_LL_DataOutStage+0x82>
 800c21e:	e018      	b.n	800c252 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c220:	2300      	movs	r3, #0
 800c222:	75bb      	strb	r3, [r7, #22]
            break;
 800c224:	e018      	b.n	800c258 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	4619      	mov	r1, r3
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f000 fa64 	bl	800c6fe <USBD_CoreFindIF>
 800c236:	4603      	mov	r3, r0
 800c238:	75bb      	strb	r3, [r7, #22]
            break;
 800c23a:	e00d      	b.n	800c258 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c242:	b2db      	uxtb	r3, r3
 800c244:	4619      	mov	r1, r3
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f000 fa66 	bl	800c718 <USBD_CoreFindEP>
 800c24c:	4603      	mov	r3, r0
 800c24e:	75bb      	strb	r3, [r7, #22]
            break;
 800c250:	e002      	b.n	800c258 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c252:	2300      	movs	r3, #0
 800c254:	75bb      	strb	r3, [r7, #22]
            break;
 800c256:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c258:	7dbb      	ldrb	r3, [r7, #22]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d119      	bne.n	800c292 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c264:	b2db      	uxtb	r3, r3
 800c266:	2b03      	cmp	r3, #3
 800c268:	d113      	bne.n	800c292 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c26a:	7dba      	ldrb	r2, [r7, #22]
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	32ae      	adds	r2, #174	; 0xae
 800c270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c274:	691b      	ldr	r3, [r3, #16]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00b      	beq.n	800c292 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c27a:	7dba      	ldrb	r2, [r7, #22]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c282:	7dba      	ldrb	r2, [r7, #22]
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	32ae      	adds	r2, #174	; 0xae
 800c288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c28c:	691b      	ldr	r3, [r3, #16]
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	f001 f93f 	bl	800d516 <USBD_CtlSendStatus>
 800c298:	e032      	b.n	800c300 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c29a:	7afb      	ldrb	r3, [r7, #11]
 800c29c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f000 fa37 	bl	800c718 <USBD_CoreFindEP>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2ae:	7dbb      	ldrb	r3, [r7, #22]
 800c2b0:	2bff      	cmp	r3, #255	; 0xff
 800c2b2:	d025      	beq.n	800c300 <USBD_LL_DataOutStage+0x15c>
 800c2b4:	7dbb      	ldrb	r3, [r7, #22]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d122      	bne.n	800c300 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	2b03      	cmp	r3, #3
 800c2c4:	d117      	bne.n	800c2f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c2c6:	7dba      	ldrb	r2, [r7, #22]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	32ae      	adds	r2, #174	; 0xae
 800c2cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2d0:	699b      	ldr	r3, [r3, #24]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d00f      	beq.n	800c2f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c2d6:	7dba      	ldrb	r2, [r7, #22]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c2de:	7dba      	ldrb	r2, [r7, #22]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	32ae      	adds	r2, #174	; 0xae
 800c2e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2e8:	699b      	ldr	r3, [r3, #24]
 800c2ea:	7afa      	ldrb	r2, [r7, #11]
 800c2ec:	4611      	mov	r1, r2
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	4798      	blx	r3
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c2f6:	7dfb      	ldrb	r3, [r7, #23]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d001      	beq.n	800c300 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c2fc:	7dfb      	ldrb	r3, [r7, #23]
 800c2fe:	e000      	b.n	800c302 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3718      	adds	r7, #24
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b086      	sub	sp, #24
 800c30e:	af00      	add	r7, sp, #0
 800c310:	60f8      	str	r0, [r7, #12]
 800c312:	460b      	mov	r3, r1
 800c314:	607a      	str	r2, [r7, #4]
 800c316:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c318:	7afb      	ldrb	r3, [r7, #11]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d16f      	bne.n	800c3fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	3314      	adds	r3, #20
 800c322:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	d15a      	bne.n	800c3e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	689a      	ldr	r2, [r3, #8]
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	429a      	cmp	r2, r3
 800c338:	d914      	bls.n	800c364 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	689a      	ldr	r2, [r3, #8]
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	68db      	ldr	r3, [r3, #12]
 800c342:	1ad2      	subs	r2, r2, r3
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	461a      	mov	r2, r3
 800c34e:	6879      	ldr	r1, [r7, #4]
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	f001 f8be 	bl	800d4d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c356:	2300      	movs	r3, #0
 800c358:	2200      	movs	r2, #0
 800c35a:	2100      	movs	r1, #0
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f001 fe4a 	bl	800dff6 <USBD_LL_PrepareReceive>
 800c362:	e03f      	b.n	800c3e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	68da      	ldr	r2, [r3, #12]
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d11c      	bne.n	800c3aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	685a      	ldr	r2, [r3, #4]
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c378:	429a      	cmp	r2, r3
 800c37a:	d316      	bcc.n	800c3aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	685a      	ldr	r2, [r3, #4]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c386:	429a      	cmp	r2, r3
 800c388:	d20f      	bcs.n	800c3aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c38a:	2200      	movs	r2, #0
 800c38c:	2100      	movs	r1, #0
 800c38e:	68f8      	ldr	r0, [r7, #12]
 800c390:	f001 f89f 	bl	800d4d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2200      	movs	r2, #0
 800c398:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c39c:	2300      	movs	r3, #0
 800c39e:	2200      	movs	r2, #0
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	68f8      	ldr	r0, [r7, #12]
 800c3a4:	f001 fe27 	bl	800dff6 <USBD_LL_PrepareReceive>
 800c3a8:	e01c      	b.n	800c3e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	2b03      	cmp	r3, #3
 800c3b4:	d10f      	bne.n	800c3d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3bc:	68db      	ldr	r3, [r3, #12]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d009      	beq.n	800c3d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	68f8      	ldr	r0, [r7, #12]
 800c3d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3d6:	2180      	movs	r1, #128	; 0x80
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	f001 fd62 	bl	800dea2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c3de:	68f8      	ldr	r0, [r7, #12]
 800c3e0:	f001 f8ac 	bl	800d53c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d03a      	beq.n	800c464 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f7ff fe42 	bl	800c078 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c3fc:	e032      	b.n	800c464 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c3fe:	7afb      	ldrb	r3, [r7, #11]
 800c400:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c404:	b2db      	uxtb	r3, r3
 800c406:	4619      	mov	r1, r3
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f000 f985 	bl	800c718 <USBD_CoreFindEP>
 800c40e:	4603      	mov	r3, r0
 800c410:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c412:	7dfb      	ldrb	r3, [r7, #23]
 800c414:	2bff      	cmp	r3, #255	; 0xff
 800c416:	d025      	beq.n	800c464 <USBD_LL_DataInStage+0x15a>
 800c418:	7dfb      	ldrb	r3, [r7, #23]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d122      	bne.n	800c464 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c424:	b2db      	uxtb	r3, r3
 800c426:	2b03      	cmp	r3, #3
 800c428:	d11c      	bne.n	800c464 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c42a:	7dfa      	ldrb	r2, [r7, #23]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	32ae      	adds	r2, #174	; 0xae
 800c430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c434:	695b      	ldr	r3, [r3, #20]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d014      	beq.n	800c464 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c43a:	7dfa      	ldrb	r2, [r7, #23]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c442:	7dfa      	ldrb	r2, [r7, #23]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	32ae      	adds	r2, #174	; 0xae
 800c448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c44c:	695b      	ldr	r3, [r3, #20]
 800c44e:	7afa      	ldrb	r2, [r7, #11]
 800c450:	4611      	mov	r1, r2
 800c452:	68f8      	ldr	r0, [r7, #12]
 800c454:	4798      	blx	r3
 800c456:	4603      	mov	r3, r0
 800c458:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c45a:	7dbb      	ldrb	r3, [r7, #22]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d001      	beq.n	800c464 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c460:	7dbb      	ldrb	r3, [r7, #22]
 800c462:	e000      	b.n	800c466 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c464:	2300      	movs	r3, #0
}
 800c466:	4618      	mov	r0, r3
 800c468:	3718      	adds	r7, #24
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c46e:	b580      	push	{r7, lr}
 800c470:	b084      	sub	sp, #16
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c476:	2300      	movs	r3, #0
 800c478:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2201      	movs	r2, #1
 800c47e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2200      	movs	r2, #0
 800c486:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2200      	movs	r2, #0
 800c48e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d014      	beq.n	800c4d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d00e      	beq.n	800c4d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	6852      	ldr	r2, [r2, #4]
 800c4c2:	b2d2      	uxtb	r2, r2
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	4798      	blx	r3
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d001      	beq.n	800c4d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c4d0:	2303      	movs	r3, #3
 800c4d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c4d4:	2340      	movs	r3, #64	; 0x40
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	2100      	movs	r1, #0
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f001 fc7d 	bl	800ddda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2240      	movs	r2, #64	; 0x40
 800c4ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c4f0:	2340      	movs	r3, #64	; 0x40
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	2180      	movs	r1, #128	; 0x80
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f001 fc6f 	bl	800ddda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2201      	movs	r2, #1
 800c500:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2240      	movs	r2, #64	; 0x40
 800c506:	621a      	str	r2, [r3, #32]

  return ret;
 800c508:	7bfb      	ldrb	r3, [r7, #15]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3710      	adds	r7, #16
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}

0800c512 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c512:	b480      	push	{r7}
 800c514:	b083      	sub	sp, #12
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
 800c51a:	460b      	mov	r3, r1
 800c51c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	78fa      	ldrb	r2, [r7, #3]
 800c522:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c524:	2300      	movs	r3, #0
}
 800c526:	4618      	mov	r0, r3
 800c528:	370c      	adds	r7, #12
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr

0800c532 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c532:	b480      	push	{r7}
 800c534:	b083      	sub	sp, #12
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c540:	b2db      	uxtb	r3, r3
 800c542:	2b04      	cmp	r3, #4
 800c544:	d006      	beq.n	800c554 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c54c:	b2da      	uxtb	r2, r3
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2204      	movs	r2, #4
 800c558:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	370c      	adds	r7, #12
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c56a:	b480      	push	{r7}
 800c56c:	b083      	sub	sp, #12
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	2b04      	cmp	r3, #4
 800c57c:	d106      	bne.n	800c58c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c584:	b2da      	uxtb	r2, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c58c:	2300      	movs	r3, #0
}
 800c58e:	4618      	mov	r0, r3
 800c590:	370c      	adds	r7, #12
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr

0800c59a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b082      	sub	sp, #8
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	2b03      	cmp	r3, #3
 800c5ac:	d110      	bne.n	800c5d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00b      	beq.n	800c5d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5be:	69db      	ldr	r3, [r3, #28]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d005      	beq.n	800c5d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5ca:	69db      	ldr	r3, [r3, #28]
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c5d0:	2300      	movs	r3, #0
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3708      	adds	r7, #8
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}

0800c5da <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c5da:	b580      	push	{r7, lr}
 800c5dc:	b082      	sub	sp, #8
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	32ae      	adds	r2, #174	; 0xae
 800c5f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d101      	bne.n	800c5fc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	e01c      	b.n	800c636 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c602:	b2db      	uxtb	r3, r3
 800c604:	2b03      	cmp	r3, #3
 800c606:	d115      	bne.n	800c634 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	32ae      	adds	r2, #174	; 0xae
 800c612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c616:	6a1b      	ldr	r3, [r3, #32]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d00b      	beq.n	800c634 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	32ae      	adds	r2, #174	; 0xae
 800c626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c62a:	6a1b      	ldr	r3, [r3, #32]
 800c62c:	78fa      	ldrb	r2, [r7, #3]
 800c62e:	4611      	mov	r1, r2
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c634:	2300      	movs	r3, #0
}
 800c636:	4618      	mov	r0, r3
 800c638:	3708      	adds	r7, #8
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c63e:	b580      	push	{r7, lr}
 800c640:	b082      	sub	sp, #8
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
 800c646:	460b      	mov	r3, r1
 800c648:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	32ae      	adds	r2, #174	; 0xae
 800c654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d101      	bne.n	800c660 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c65c:	2303      	movs	r3, #3
 800c65e:	e01c      	b.n	800c69a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c666:	b2db      	uxtb	r3, r3
 800c668:	2b03      	cmp	r3, #3
 800c66a:	d115      	bne.n	800c698 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	32ae      	adds	r2, #174	; 0xae
 800c676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00b      	beq.n	800c698 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	32ae      	adds	r2, #174	; 0xae
 800c68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c690:	78fa      	ldrb	r2, [r7, #3]
 800c692:	4611      	mov	r1, r2
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c698:	2300      	movs	r3, #0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3708      	adds	r7, #8
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c6a2:	b480      	push	{r7}
 800c6a4:	b083      	sub	sp, #12
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c6aa:	2300      	movs	r3, #0
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	370c      	adds	r7, #12
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b084      	sub	sp, #16
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d00e      	beq.n	800c6f4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	6852      	ldr	r2, [r2, #4]
 800c6e2:	b2d2      	uxtb	r2, r2
 800c6e4:	4611      	mov	r1, r2
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	4798      	blx	r3
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d001      	beq.n	800c6f4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c6fe:	b480      	push	{r7}
 800c700:	b083      	sub	sp, #12
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	460b      	mov	r3, r1
 800c708:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c70a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	370c      	adds	r7, #12
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	460b      	mov	r3, r1
 800c722:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c724:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c726:	4618      	mov	r0, r3
 800c728:	370c      	adds	r7, #12
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr

0800c732 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c732:	b580      	push	{r7, lr}
 800c734:	b086      	sub	sp, #24
 800c736:	af00      	add	r7, sp, #0
 800c738:	6078      	str	r0, [r7, #4]
 800c73a:	460b      	mov	r3, r1
 800c73c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c746:	2300      	movs	r3, #0
 800c748:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	885b      	ldrh	r3, [r3, #2]
 800c74e:	b29a      	uxth	r2, r3
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	b29b      	uxth	r3, r3
 800c756:	429a      	cmp	r2, r3
 800c758:	d920      	bls.n	800c79c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	b29b      	uxth	r3, r3
 800c760:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c762:	e013      	b.n	800c78c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c764:	f107 030a 	add.w	r3, r7, #10
 800c768:	4619      	mov	r1, r3
 800c76a:	6978      	ldr	r0, [r7, #20]
 800c76c:	f000 f81b 	bl	800c7a6 <USBD_GetNextDesc>
 800c770:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	785b      	ldrb	r3, [r3, #1]
 800c776:	2b05      	cmp	r3, #5
 800c778:	d108      	bne.n	800c78c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	789b      	ldrb	r3, [r3, #2]
 800c782:	78fa      	ldrb	r2, [r7, #3]
 800c784:	429a      	cmp	r2, r3
 800c786:	d008      	beq.n	800c79a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c788:	2300      	movs	r3, #0
 800c78a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	885b      	ldrh	r3, [r3, #2]
 800c790:	b29a      	uxth	r2, r3
 800c792:	897b      	ldrh	r3, [r7, #10]
 800c794:	429a      	cmp	r2, r3
 800c796:	d8e5      	bhi.n	800c764 <USBD_GetEpDesc+0x32>
 800c798:	e000      	b.n	800c79c <USBD_GetEpDesc+0x6a>
          break;
 800c79a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c79c:	693b      	ldr	r3, [r7, #16]
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3718      	adds	r7, #24
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}

0800c7a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c7a6:	b480      	push	{r7}
 800c7a8:	b085      	sub	sp, #20
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
 800c7ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	881a      	ldrh	r2, [r3, #0]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	4413      	add	r3, r2
 800c7c0:	b29a      	uxth	r2, r3
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	4413      	add	r3, r2
 800c7d0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3714      	adds	r7, #20
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b087      	sub	sp, #28
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c7fe:	8a3b      	ldrh	r3, [r7, #16]
 800c800:	021b      	lsls	r3, r3, #8
 800c802:	b21a      	sxth	r2, r3
 800c804:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c808:	4313      	orrs	r3, r2
 800c80a:	b21b      	sxth	r3, r3
 800c80c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c80e:	89fb      	ldrh	r3, [r7, #14]
}
 800c810:	4618      	mov	r0, r3
 800c812:	371c      	adds	r7, #28
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c826:	2300      	movs	r3, #0
 800c828:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c832:	2b40      	cmp	r3, #64	; 0x40
 800c834:	d005      	beq.n	800c842 <USBD_StdDevReq+0x26>
 800c836:	2b40      	cmp	r3, #64	; 0x40
 800c838:	d857      	bhi.n	800c8ea <USBD_StdDevReq+0xce>
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00f      	beq.n	800c85e <USBD_StdDevReq+0x42>
 800c83e:	2b20      	cmp	r3, #32
 800c840:	d153      	bne.n	800c8ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	32ae      	adds	r2, #174	; 0xae
 800c84c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c850:	689b      	ldr	r3, [r3, #8]
 800c852:	6839      	ldr	r1, [r7, #0]
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	4798      	blx	r3
 800c858:	4603      	mov	r3, r0
 800c85a:	73fb      	strb	r3, [r7, #15]
      break;
 800c85c:	e04a      	b.n	800c8f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	785b      	ldrb	r3, [r3, #1]
 800c862:	2b09      	cmp	r3, #9
 800c864:	d83b      	bhi.n	800c8de <USBD_StdDevReq+0xc2>
 800c866:	a201      	add	r2, pc, #4	; (adr r2, 800c86c <USBD_StdDevReq+0x50>)
 800c868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c86c:	0800c8c1 	.word	0x0800c8c1
 800c870:	0800c8d5 	.word	0x0800c8d5
 800c874:	0800c8df 	.word	0x0800c8df
 800c878:	0800c8cb 	.word	0x0800c8cb
 800c87c:	0800c8df 	.word	0x0800c8df
 800c880:	0800c89f 	.word	0x0800c89f
 800c884:	0800c895 	.word	0x0800c895
 800c888:	0800c8df 	.word	0x0800c8df
 800c88c:	0800c8b7 	.word	0x0800c8b7
 800c890:	0800c8a9 	.word	0x0800c8a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c894:	6839      	ldr	r1, [r7, #0]
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 fa3c 	bl	800cd14 <USBD_GetDescriptor>
          break;
 800c89c:	e024      	b.n	800c8e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c89e:	6839      	ldr	r1, [r7, #0]
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 fba1 	bl	800cfe8 <USBD_SetAddress>
          break;
 800c8a6:	e01f      	b.n	800c8e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c8a8:	6839      	ldr	r1, [r7, #0]
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 fbe0 	bl	800d070 <USBD_SetConfig>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	73fb      	strb	r3, [r7, #15]
          break;
 800c8b4:	e018      	b.n	800c8e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c8b6:	6839      	ldr	r1, [r7, #0]
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 fc83 	bl	800d1c4 <USBD_GetConfig>
          break;
 800c8be:	e013      	b.n	800c8e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c8c0:	6839      	ldr	r1, [r7, #0]
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 fcb4 	bl	800d230 <USBD_GetStatus>
          break;
 800c8c8:	e00e      	b.n	800c8e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c8ca:	6839      	ldr	r1, [r7, #0]
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f000 fce3 	bl	800d298 <USBD_SetFeature>
          break;
 800c8d2:	e009      	b.n	800c8e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c8d4:	6839      	ldr	r1, [r7, #0]
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 fd07 	bl	800d2ea <USBD_ClrFeature>
          break;
 800c8dc:	e004      	b.n	800c8e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c8de:	6839      	ldr	r1, [r7, #0]
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 fd5e 	bl	800d3a2 <USBD_CtlError>
          break;
 800c8e6:	bf00      	nop
      }
      break;
 800c8e8:	e004      	b.n	800c8f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c8ea:	6839      	ldr	r1, [r7, #0]
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 fd58 	bl	800d3a2 <USBD_CtlError>
      break;
 800c8f2:	bf00      	nop
  }

  return ret;
 800c8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3710      	adds	r7, #16
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop

0800c900 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c90a:	2300      	movs	r3, #0
 800c90c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c916:	2b40      	cmp	r3, #64	; 0x40
 800c918:	d005      	beq.n	800c926 <USBD_StdItfReq+0x26>
 800c91a:	2b40      	cmp	r3, #64	; 0x40
 800c91c:	d852      	bhi.n	800c9c4 <USBD_StdItfReq+0xc4>
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d001      	beq.n	800c926 <USBD_StdItfReq+0x26>
 800c922:	2b20      	cmp	r3, #32
 800c924:	d14e      	bne.n	800c9c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c92c:	b2db      	uxtb	r3, r3
 800c92e:	3b01      	subs	r3, #1
 800c930:	2b02      	cmp	r3, #2
 800c932:	d840      	bhi.n	800c9b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	889b      	ldrh	r3, [r3, #4]
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d836      	bhi.n	800c9ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	889b      	ldrh	r3, [r3, #4]
 800c942:	b2db      	uxtb	r3, r3
 800c944:	4619      	mov	r1, r3
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f7ff fed9 	bl	800c6fe <USBD_CoreFindIF>
 800c94c:	4603      	mov	r3, r0
 800c94e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c950:	7bbb      	ldrb	r3, [r7, #14]
 800c952:	2bff      	cmp	r3, #255	; 0xff
 800c954:	d01d      	beq.n	800c992 <USBD_StdItfReq+0x92>
 800c956:	7bbb      	ldrb	r3, [r7, #14]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d11a      	bne.n	800c992 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c95c:	7bba      	ldrb	r2, [r7, #14]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	32ae      	adds	r2, #174	; 0xae
 800c962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d00f      	beq.n	800c98c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c96c:	7bba      	ldrb	r2, [r7, #14]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c974:	7bba      	ldrb	r2, [r7, #14]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	32ae      	adds	r2, #174	; 0xae
 800c97a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	6839      	ldr	r1, [r7, #0]
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	4798      	blx	r3
 800c986:	4603      	mov	r3, r0
 800c988:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c98a:	e004      	b.n	800c996 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c98c:	2303      	movs	r3, #3
 800c98e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c990:	e001      	b.n	800c996 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c992:	2303      	movs	r3, #3
 800c994:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	88db      	ldrh	r3, [r3, #6]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d110      	bne.n	800c9c0 <USBD_StdItfReq+0xc0>
 800c99e:	7bfb      	ldrb	r3, [r7, #15]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d10d      	bne.n	800c9c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fdb6 	bl	800d516 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c9aa:	e009      	b.n	800c9c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c9ac:	6839      	ldr	r1, [r7, #0]
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 fcf7 	bl	800d3a2 <USBD_CtlError>
          break;
 800c9b4:	e004      	b.n	800c9c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 fcf2 	bl	800d3a2 <USBD_CtlError>
          break;
 800c9be:	e000      	b.n	800c9c2 <USBD_StdItfReq+0xc2>
          break;
 800c9c0:	bf00      	nop
      }
      break;
 800c9c2:	e004      	b.n	800c9ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c9c4:	6839      	ldr	r1, [r7, #0]
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 fceb 	bl	800d3a2 <USBD_CtlError>
      break;
 800c9cc:	bf00      	nop
  }

  return ret;
 800c9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3710      	adds	r7, #16
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b084      	sub	sp, #16
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	889b      	ldrh	r3, [r3, #4]
 800c9ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9f4:	2b40      	cmp	r3, #64	; 0x40
 800c9f6:	d007      	beq.n	800ca08 <USBD_StdEPReq+0x30>
 800c9f8:	2b40      	cmp	r3, #64	; 0x40
 800c9fa:	f200 817f 	bhi.w	800ccfc <USBD_StdEPReq+0x324>
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d02a      	beq.n	800ca58 <USBD_StdEPReq+0x80>
 800ca02:	2b20      	cmp	r3, #32
 800ca04:	f040 817a 	bne.w	800ccfc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ca08:	7bbb      	ldrb	r3, [r7, #14]
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f7ff fe83 	bl	800c718 <USBD_CoreFindEP>
 800ca12:	4603      	mov	r3, r0
 800ca14:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca16:	7b7b      	ldrb	r3, [r7, #13]
 800ca18:	2bff      	cmp	r3, #255	; 0xff
 800ca1a:	f000 8174 	beq.w	800cd06 <USBD_StdEPReq+0x32e>
 800ca1e:	7b7b      	ldrb	r3, [r7, #13]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f040 8170 	bne.w	800cd06 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ca26:	7b7a      	ldrb	r2, [r7, #13]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ca2e:	7b7a      	ldrb	r2, [r7, #13]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	32ae      	adds	r2, #174	; 0xae
 800ca34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	f000 8163 	beq.w	800cd06 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ca40:	7b7a      	ldrb	r2, [r7, #13]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	32ae      	adds	r2, #174	; 0xae
 800ca46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca4a:	689b      	ldr	r3, [r3, #8]
 800ca4c:	6839      	ldr	r1, [r7, #0]
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	4798      	blx	r3
 800ca52:	4603      	mov	r3, r0
 800ca54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ca56:	e156      	b.n	800cd06 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	785b      	ldrb	r3, [r3, #1]
 800ca5c:	2b03      	cmp	r3, #3
 800ca5e:	d008      	beq.n	800ca72 <USBD_StdEPReq+0x9a>
 800ca60:	2b03      	cmp	r3, #3
 800ca62:	f300 8145 	bgt.w	800ccf0 <USBD_StdEPReq+0x318>
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	f000 809b 	beq.w	800cba2 <USBD_StdEPReq+0x1ca>
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d03c      	beq.n	800caea <USBD_StdEPReq+0x112>
 800ca70:	e13e      	b.n	800ccf0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca78:	b2db      	uxtb	r3, r3
 800ca7a:	2b02      	cmp	r3, #2
 800ca7c:	d002      	beq.n	800ca84 <USBD_StdEPReq+0xac>
 800ca7e:	2b03      	cmp	r3, #3
 800ca80:	d016      	beq.n	800cab0 <USBD_StdEPReq+0xd8>
 800ca82:	e02c      	b.n	800cade <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca84:	7bbb      	ldrb	r3, [r7, #14]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00d      	beq.n	800caa6 <USBD_StdEPReq+0xce>
 800ca8a:	7bbb      	ldrb	r3, [r7, #14]
 800ca8c:	2b80      	cmp	r3, #128	; 0x80
 800ca8e:	d00a      	beq.n	800caa6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca90:	7bbb      	ldrb	r3, [r7, #14]
 800ca92:	4619      	mov	r1, r3
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f001 fa04 	bl	800dea2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca9a:	2180      	movs	r1, #128	; 0x80
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f001 fa00 	bl	800dea2 <USBD_LL_StallEP>
 800caa2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800caa4:	e020      	b.n	800cae8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800caa6:	6839      	ldr	r1, [r7, #0]
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 fc7a 	bl	800d3a2 <USBD_CtlError>
              break;
 800caae:	e01b      	b.n	800cae8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	885b      	ldrh	r3, [r3, #2]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d10e      	bne.n	800cad6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cab8:	7bbb      	ldrb	r3, [r7, #14]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d00b      	beq.n	800cad6 <USBD_StdEPReq+0xfe>
 800cabe:	7bbb      	ldrb	r3, [r7, #14]
 800cac0:	2b80      	cmp	r3, #128	; 0x80
 800cac2:	d008      	beq.n	800cad6 <USBD_StdEPReq+0xfe>
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	88db      	ldrh	r3, [r3, #6]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d104      	bne.n	800cad6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cacc:	7bbb      	ldrb	r3, [r7, #14]
 800cace:	4619      	mov	r1, r3
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f001 f9e6 	bl	800dea2 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 fd1d 	bl	800d516 <USBD_CtlSendStatus>

              break;
 800cadc:	e004      	b.n	800cae8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cade:	6839      	ldr	r1, [r7, #0]
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f000 fc5e 	bl	800d3a2 <USBD_CtlError>
              break;
 800cae6:	bf00      	nop
          }
          break;
 800cae8:	e107      	b.n	800ccfa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	2b02      	cmp	r3, #2
 800caf4:	d002      	beq.n	800cafc <USBD_StdEPReq+0x124>
 800caf6:	2b03      	cmp	r3, #3
 800caf8:	d016      	beq.n	800cb28 <USBD_StdEPReq+0x150>
 800cafa:	e04b      	b.n	800cb94 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cafc:	7bbb      	ldrb	r3, [r7, #14]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00d      	beq.n	800cb1e <USBD_StdEPReq+0x146>
 800cb02:	7bbb      	ldrb	r3, [r7, #14]
 800cb04:	2b80      	cmp	r3, #128	; 0x80
 800cb06:	d00a      	beq.n	800cb1e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb08:	7bbb      	ldrb	r3, [r7, #14]
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f001 f9c8 	bl	800dea2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb12:	2180      	movs	r1, #128	; 0x80
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f001 f9c4 	bl	800dea2 <USBD_LL_StallEP>
 800cb1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb1c:	e040      	b.n	800cba0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cb1e:	6839      	ldr	r1, [r7, #0]
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 fc3e 	bl	800d3a2 <USBD_CtlError>
              break;
 800cb26:	e03b      	b.n	800cba0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	885b      	ldrh	r3, [r3, #2]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d136      	bne.n	800cb9e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cb30:	7bbb      	ldrb	r3, [r7, #14]
 800cb32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d004      	beq.n	800cb44 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cb3a:	7bbb      	ldrb	r3, [r7, #14]
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f001 f9ce 	bl	800dee0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f000 fce6 	bl	800d516 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cb4a:	7bbb      	ldrb	r3, [r7, #14]
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f7ff fde2 	bl	800c718 <USBD_CoreFindEP>
 800cb54:	4603      	mov	r3, r0
 800cb56:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb58:	7b7b      	ldrb	r3, [r7, #13]
 800cb5a:	2bff      	cmp	r3, #255	; 0xff
 800cb5c:	d01f      	beq.n	800cb9e <USBD_StdEPReq+0x1c6>
 800cb5e:	7b7b      	ldrb	r3, [r7, #13]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d11c      	bne.n	800cb9e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cb64:	7b7a      	ldrb	r2, [r7, #13]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cb6c:	7b7a      	ldrb	r2, [r7, #13]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	32ae      	adds	r2, #174	; 0xae
 800cb72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb76:	689b      	ldr	r3, [r3, #8]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d010      	beq.n	800cb9e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cb7c:	7b7a      	ldrb	r2, [r7, #13]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	32ae      	adds	r2, #174	; 0xae
 800cb82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb86:	689b      	ldr	r3, [r3, #8]
 800cb88:	6839      	ldr	r1, [r7, #0]
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	4798      	blx	r3
 800cb8e:	4603      	mov	r3, r0
 800cb90:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cb92:	e004      	b.n	800cb9e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cb94:	6839      	ldr	r1, [r7, #0]
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 fc03 	bl	800d3a2 <USBD_CtlError>
              break;
 800cb9c:	e000      	b.n	800cba0 <USBD_StdEPReq+0x1c8>
              break;
 800cb9e:	bf00      	nop
          }
          break;
 800cba0:	e0ab      	b.n	800ccfa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	2b02      	cmp	r3, #2
 800cbac:	d002      	beq.n	800cbb4 <USBD_StdEPReq+0x1dc>
 800cbae:	2b03      	cmp	r3, #3
 800cbb0:	d032      	beq.n	800cc18 <USBD_StdEPReq+0x240>
 800cbb2:	e097      	b.n	800cce4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbb4:	7bbb      	ldrb	r3, [r7, #14]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d007      	beq.n	800cbca <USBD_StdEPReq+0x1f2>
 800cbba:	7bbb      	ldrb	r3, [r7, #14]
 800cbbc:	2b80      	cmp	r3, #128	; 0x80
 800cbbe:	d004      	beq.n	800cbca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cbc0:	6839      	ldr	r1, [r7, #0]
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 fbed 	bl	800d3a2 <USBD_CtlError>
                break;
 800cbc8:	e091      	b.n	800ccee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	da0b      	bge.n	800cbea <USBD_StdEPReq+0x212>
 800cbd2:	7bbb      	ldrb	r3, [r7, #14]
 800cbd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cbd8:	4613      	mov	r3, r2
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	4413      	add	r3, r2
 800cbde:	009b      	lsls	r3, r3, #2
 800cbe0:	3310      	adds	r3, #16
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	4413      	add	r3, r2
 800cbe6:	3304      	adds	r3, #4
 800cbe8:	e00b      	b.n	800cc02 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cbea:	7bbb      	ldrb	r3, [r7, #14]
 800cbec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbf0:	4613      	mov	r3, r2
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	4413      	add	r3, r2
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	4413      	add	r3, r2
 800cc00:	3304      	adds	r3, #4
 800cc02:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	2200      	movs	r2, #0
 800cc08:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	2202      	movs	r2, #2
 800cc0e:	4619      	mov	r1, r3
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 fc43 	bl	800d49c <USBD_CtlSendData>
              break;
 800cc16:	e06a      	b.n	800ccee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cc18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	da11      	bge.n	800cc44 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cc20:	7bbb      	ldrb	r3, [r7, #14]
 800cc22:	f003 020f 	and.w	r2, r3, #15
 800cc26:	6879      	ldr	r1, [r7, #4]
 800cc28:	4613      	mov	r3, r2
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	4413      	add	r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	440b      	add	r3, r1
 800cc32:	3324      	adds	r3, #36	; 0x24
 800cc34:	881b      	ldrh	r3, [r3, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d117      	bne.n	800cc6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cc3a:	6839      	ldr	r1, [r7, #0]
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 fbb0 	bl	800d3a2 <USBD_CtlError>
                  break;
 800cc42:	e054      	b.n	800ccee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cc44:	7bbb      	ldrb	r3, [r7, #14]
 800cc46:	f003 020f 	and.w	r2, r3, #15
 800cc4a:	6879      	ldr	r1, [r7, #4]
 800cc4c:	4613      	mov	r3, r2
 800cc4e:	009b      	lsls	r3, r3, #2
 800cc50:	4413      	add	r3, r2
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	440b      	add	r3, r1
 800cc56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cc5a:	881b      	ldrh	r3, [r3, #0]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d104      	bne.n	800cc6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cc60:	6839      	ldr	r1, [r7, #0]
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 fb9d 	bl	800d3a2 <USBD_CtlError>
                  break;
 800cc68:	e041      	b.n	800ccee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	da0b      	bge.n	800cc8a <USBD_StdEPReq+0x2b2>
 800cc72:	7bbb      	ldrb	r3, [r7, #14]
 800cc74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc78:	4613      	mov	r3, r2
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	4413      	add	r3, r2
 800cc7e:	009b      	lsls	r3, r3, #2
 800cc80:	3310      	adds	r3, #16
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	4413      	add	r3, r2
 800cc86:	3304      	adds	r3, #4
 800cc88:	e00b      	b.n	800cca2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc8a:	7bbb      	ldrb	r3, [r7, #14]
 800cc8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc90:	4613      	mov	r3, r2
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	4413      	add	r3, r2
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	4413      	add	r3, r2
 800cca0:	3304      	adds	r3, #4
 800cca2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cca4:	7bbb      	ldrb	r3, [r7, #14]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d002      	beq.n	800ccb0 <USBD_StdEPReq+0x2d8>
 800ccaa:	7bbb      	ldrb	r3, [r7, #14]
 800ccac:	2b80      	cmp	r3, #128	; 0x80
 800ccae:	d103      	bne.n	800ccb8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	601a      	str	r2, [r3, #0]
 800ccb6:	e00e      	b.n	800ccd6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ccb8:	7bbb      	ldrb	r3, [r7, #14]
 800ccba:	4619      	mov	r1, r3
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f001 f92e 	bl	800df1e <USBD_LL_IsStallEP>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d003      	beq.n	800ccd0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	2201      	movs	r2, #1
 800cccc:	601a      	str	r2, [r3, #0]
 800ccce:	e002      	b.n	800ccd6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	2202      	movs	r2, #2
 800ccda:	4619      	mov	r1, r3
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f000 fbdd 	bl	800d49c <USBD_CtlSendData>
              break;
 800cce2:	e004      	b.n	800ccee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cce4:	6839      	ldr	r1, [r7, #0]
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 fb5b 	bl	800d3a2 <USBD_CtlError>
              break;
 800ccec:	bf00      	nop
          }
          break;
 800ccee:	e004      	b.n	800ccfa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ccf0:	6839      	ldr	r1, [r7, #0]
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 fb55 	bl	800d3a2 <USBD_CtlError>
          break;
 800ccf8:	bf00      	nop
      }
      break;
 800ccfa:	e005      	b.n	800cd08 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ccfc:	6839      	ldr	r1, [r7, #0]
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 fb4f 	bl	800d3a2 <USBD_CtlError>
      break;
 800cd04:	e000      	b.n	800cd08 <USBD_StdEPReq+0x330>
      break;
 800cd06:	bf00      	nop
  }

  return ret;
 800cd08:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3710      	adds	r7, #16
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
	...

0800cd14 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cd22:	2300      	movs	r3, #0
 800cd24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cd26:	2300      	movs	r3, #0
 800cd28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	885b      	ldrh	r3, [r3, #2]
 800cd2e:	0a1b      	lsrs	r3, r3, #8
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	3b01      	subs	r3, #1
 800cd34:	2b06      	cmp	r3, #6
 800cd36:	f200 8128 	bhi.w	800cf8a <USBD_GetDescriptor+0x276>
 800cd3a:	a201      	add	r2, pc, #4	; (adr r2, 800cd40 <USBD_GetDescriptor+0x2c>)
 800cd3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd40:	0800cd5d 	.word	0x0800cd5d
 800cd44:	0800cd75 	.word	0x0800cd75
 800cd48:	0800cdb5 	.word	0x0800cdb5
 800cd4c:	0800cf8b 	.word	0x0800cf8b
 800cd50:	0800cf8b 	.word	0x0800cf8b
 800cd54:	0800cf2b 	.word	0x0800cf2b
 800cd58:	0800cf57 	.word	0x0800cf57
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	7c12      	ldrb	r2, [r2, #16]
 800cd68:	f107 0108 	add.w	r1, r7, #8
 800cd6c:	4610      	mov	r0, r2
 800cd6e:	4798      	blx	r3
 800cd70:	60f8      	str	r0, [r7, #12]
      break;
 800cd72:	e112      	b.n	800cf9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	7c1b      	ldrb	r3, [r3, #16]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d10d      	bne.n	800cd98 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd84:	f107 0208 	add.w	r2, r7, #8
 800cd88:	4610      	mov	r0, r2
 800cd8a:	4798      	blx	r3
 800cd8c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	3301      	adds	r3, #1
 800cd92:	2202      	movs	r2, #2
 800cd94:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cd96:	e100      	b.n	800cf9a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda0:	f107 0208 	add.w	r2, r7, #8
 800cda4:	4610      	mov	r0, r2
 800cda6:	4798      	blx	r3
 800cda8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	3301      	adds	r3, #1
 800cdae:	2202      	movs	r2, #2
 800cdb0:	701a      	strb	r2, [r3, #0]
      break;
 800cdb2:	e0f2      	b.n	800cf9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	885b      	ldrh	r3, [r3, #2]
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	2b05      	cmp	r3, #5
 800cdbc:	f200 80ac 	bhi.w	800cf18 <USBD_GetDescriptor+0x204>
 800cdc0:	a201      	add	r2, pc, #4	; (adr r2, 800cdc8 <USBD_GetDescriptor+0xb4>)
 800cdc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc6:	bf00      	nop
 800cdc8:	0800cde1 	.word	0x0800cde1
 800cdcc:	0800ce15 	.word	0x0800ce15
 800cdd0:	0800ce49 	.word	0x0800ce49
 800cdd4:	0800ce7d 	.word	0x0800ce7d
 800cdd8:	0800ceb1 	.word	0x0800ceb1
 800cddc:	0800cee5 	.word	0x0800cee5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d00b      	beq.n	800ce04 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	7c12      	ldrb	r2, [r2, #16]
 800cdf8:	f107 0108 	add.w	r1, r7, #8
 800cdfc:	4610      	mov	r0, r2
 800cdfe:	4798      	blx	r3
 800ce00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce02:	e091      	b.n	800cf28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce04:	6839      	ldr	r1, [r7, #0]
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f000 facb 	bl	800d3a2 <USBD_CtlError>
            err++;
 800ce0c:	7afb      	ldrb	r3, [r7, #11]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	72fb      	strb	r3, [r7, #11]
          break;
 800ce12:	e089      	b.n	800cf28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00b      	beq.n	800ce38 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce26:	689b      	ldr	r3, [r3, #8]
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	7c12      	ldrb	r2, [r2, #16]
 800ce2c:	f107 0108 	add.w	r1, r7, #8
 800ce30:	4610      	mov	r0, r2
 800ce32:	4798      	blx	r3
 800ce34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce36:	e077      	b.n	800cf28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce38:	6839      	ldr	r1, [r7, #0]
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 fab1 	bl	800d3a2 <USBD_CtlError>
            err++;
 800ce40:	7afb      	ldrb	r3, [r7, #11]
 800ce42:	3301      	adds	r3, #1
 800ce44:	72fb      	strb	r3, [r7, #11]
          break;
 800ce46:	e06f      	b.n	800cf28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d00b      	beq.n	800ce6c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce5a:	68db      	ldr	r3, [r3, #12]
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	7c12      	ldrb	r2, [r2, #16]
 800ce60:	f107 0108 	add.w	r1, r7, #8
 800ce64:	4610      	mov	r0, r2
 800ce66:	4798      	blx	r3
 800ce68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce6a:	e05d      	b.n	800cf28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce6c:	6839      	ldr	r1, [r7, #0]
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 fa97 	bl	800d3a2 <USBD_CtlError>
            err++;
 800ce74:	7afb      	ldrb	r3, [r7, #11]
 800ce76:	3301      	adds	r3, #1
 800ce78:	72fb      	strb	r3, [r7, #11]
          break;
 800ce7a:	e055      	b.n	800cf28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce82:	691b      	ldr	r3, [r3, #16]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d00b      	beq.n	800cea0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce8e:	691b      	ldr	r3, [r3, #16]
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	7c12      	ldrb	r2, [r2, #16]
 800ce94:	f107 0108 	add.w	r1, r7, #8
 800ce98:	4610      	mov	r0, r2
 800ce9a:	4798      	blx	r3
 800ce9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce9e:	e043      	b.n	800cf28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cea0:	6839      	ldr	r1, [r7, #0]
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 fa7d 	bl	800d3a2 <USBD_CtlError>
            err++;
 800cea8:	7afb      	ldrb	r3, [r7, #11]
 800ceaa:	3301      	adds	r3, #1
 800ceac:	72fb      	strb	r3, [r7, #11]
          break;
 800ceae:	e03b      	b.n	800cf28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceb6:	695b      	ldr	r3, [r3, #20]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d00b      	beq.n	800ced4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cec2:	695b      	ldr	r3, [r3, #20]
 800cec4:	687a      	ldr	r2, [r7, #4]
 800cec6:	7c12      	ldrb	r2, [r2, #16]
 800cec8:	f107 0108 	add.w	r1, r7, #8
 800cecc:	4610      	mov	r0, r2
 800cece:	4798      	blx	r3
 800ced0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ced2:	e029      	b.n	800cf28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ced4:	6839      	ldr	r1, [r7, #0]
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 fa63 	bl	800d3a2 <USBD_CtlError>
            err++;
 800cedc:	7afb      	ldrb	r3, [r7, #11]
 800cede:	3301      	adds	r3, #1
 800cee0:	72fb      	strb	r3, [r7, #11]
          break;
 800cee2:	e021      	b.n	800cf28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceea:	699b      	ldr	r3, [r3, #24]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d00b      	beq.n	800cf08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cef6:	699b      	ldr	r3, [r3, #24]
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	7c12      	ldrb	r2, [r2, #16]
 800cefc:	f107 0108 	add.w	r1, r7, #8
 800cf00:	4610      	mov	r0, r2
 800cf02:	4798      	blx	r3
 800cf04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf06:	e00f      	b.n	800cf28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf08:	6839      	ldr	r1, [r7, #0]
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 fa49 	bl	800d3a2 <USBD_CtlError>
            err++;
 800cf10:	7afb      	ldrb	r3, [r7, #11]
 800cf12:	3301      	adds	r3, #1
 800cf14:	72fb      	strb	r3, [r7, #11]
          break;
 800cf16:	e007      	b.n	800cf28 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cf18:	6839      	ldr	r1, [r7, #0]
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 fa41 	bl	800d3a2 <USBD_CtlError>
          err++;
 800cf20:	7afb      	ldrb	r3, [r7, #11]
 800cf22:	3301      	adds	r3, #1
 800cf24:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cf26:	bf00      	nop
      }
      break;
 800cf28:	e037      	b.n	800cf9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	7c1b      	ldrb	r3, [r3, #16]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d109      	bne.n	800cf46 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf3a:	f107 0208 	add.w	r2, r7, #8
 800cf3e:	4610      	mov	r0, r2
 800cf40:	4798      	blx	r3
 800cf42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf44:	e029      	b.n	800cf9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cf46:	6839      	ldr	r1, [r7, #0]
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 fa2a 	bl	800d3a2 <USBD_CtlError>
        err++;
 800cf4e:	7afb      	ldrb	r3, [r7, #11]
 800cf50:	3301      	adds	r3, #1
 800cf52:	72fb      	strb	r3, [r7, #11]
      break;
 800cf54:	e021      	b.n	800cf9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	7c1b      	ldrb	r3, [r3, #16]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d10d      	bne.n	800cf7a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf66:	f107 0208 	add.w	r2, r7, #8
 800cf6a:	4610      	mov	r0, r2
 800cf6c:	4798      	blx	r3
 800cf6e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	3301      	adds	r3, #1
 800cf74:	2207      	movs	r2, #7
 800cf76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf78:	e00f      	b.n	800cf9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cf7a:	6839      	ldr	r1, [r7, #0]
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 fa10 	bl	800d3a2 <USBD_CtlError>
        err++;
 800cf82:	7afb      	ldrb	r3, [r7, #11]
 800cf84:	3301      	adds	r3, #1
 800cf86:	72fb      	strb	r3, [r7, #11]
      break;
 800cf88:	e007      	b.n	800cf9a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cf8a:	6839      	ldr	r1, [r7, #0]
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 fa08 	bl	800d3a2 <USBD_CtlError>
      err++;
 800cf92:	7afb      	ldrb	r3, [r7, #11]
 800cf94:	3301      	adds	r3, #1
 800cf96:	72fb      	strb	r3, [r7, #11]
      break;
 800cf98:	bf00      	nop
  }

  if (err != 0U)
 800cf9a:	7afb      	ldrb	r3, [r7, #11]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d11e      	bne.n	800cfde <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	88db      	ldrh	r3, [r3, #6]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d016      	beq.n	800cfd6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cfa8:	893b      	ldrh	r3, [r7, #8]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d00e      	beq.n	800cfcc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	88da      	ldrh	r2, [r3, #6]
 800cfb2:	893b      	ldrh	r3, [r7, #8]
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	bf28      	it	cs
 800cfb8:	4613      	movcs	r3, r2
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cfbe:	893b      	ldrh	r3, [r7, #8]
 800cfc0:	461a      	mov	r2, r3
 800cfc2:	68f9      	ldr	r1, [r7, #12]
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f000 fa69 	bl	800d49c <USBD_CtlSendData>
 800cfca:	e009      	b.n	800cfe0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cfcc:	6839      	ldr	r1, [r7, #0]
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 f9e7 	bl	800d3a2 <USBD_CtlError>
 800cfd4:	e004      	b.n	800cfe0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 fa9d 	bl	800d516 <USBD_CtlSendStatus>
 800cfdc:	e000      	b.n	800cfe0 <USBD_GetDescriptor+0x2cc>
    return;
 800cfde:	bf00      	nop
  }
}
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop

0800cfe8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	889b      	ldrh	r3, [r3, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d131      	bne.n	800d05e <USBD_SetAddress+0x76>
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	88db      	ldrh	r3, [r3, #6]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d12d      	bne.n	800d05e <USBD_SetAddress+0x76>
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	885b      	ldrh	r3, [r3, #2]
 800d006:	2b7f      	cmp	r3, #127	; 0x7f
 800d008:	d829      	bhi.n	800d05e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	885b      	ldrh	r3, [r3, #2]
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d014:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	2b03      	cmp	r3, #3
 800d020:	d104      	bne.n	800d02c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d022:	6839      	ldr	r1, [r7, #0]
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f000 f9bc 	bl	800d3a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d02a:	e01d      	b.n	800d068 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	7bfa      	ldrb	r2, [r7, #15]
 800d030:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d034:	7bfb      	ldrb	r3, [r7, #15]
 800d036:	4619      	mov	r1, r3
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f000 ff9c 	bl	800df76 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 fa69 	bl	800d516 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d044:	7bfb      	ldrb	r3, [r7, #15]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d004      	beq.n	800d054 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2202      	movs	r2, #2
 800d04e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d052:	e009      	b.n	800d068 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2201      	movs	r2, #1
 800d058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d05c:	e004      	b.n	800d068 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d05e:	6839      	ldr	r1, [r7, #0]
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f000 f99e 	bl	800d3a2 <USBD_CtlError>
  }
}
 800d066:	bf00      	nop
 800d068:	bf00      	nop
 800d06a:	3710      	adds	r7, #16
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d07a:	2300      	movs	r3, #0
 800d07c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	885b      	ldrh	r3, [r3, #2]
 800d082:	b2da      	uxtb	r2, r3
 800d084:	4b4e      	ldr	r3, [pc, #312]	; (800d1c0 <USBD_SetConfig+0x150>)
 800d086:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d088:	4b4d      	ldr	r3, [pc, #308]	; (800d1c0 <USBD_SetConfig+0x150>)
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d905      	bls.n	800d09c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d090:	6839      	ldr	r1, [r7, #0]
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 f985 	bl	800d3a2 <USBD_CtlError>
    return USBD_FAIL;
 800d098:	2303      	movs	r3, #3
 800d09a:	e08c      	b.n	800d1b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	2b02      	cmp	r3, #2
 800d0a6:	d002      	beq.n	800d0ae <USBD_SetConfig+0x3e>
 800d0a8:	2b03      	cmp	r3, #3
 800d0aa:	d029      	beq.n	800d100 <USBD_SetConfig+0x90>
 800d0ac:	e075      	b.n	800d19a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d0ae:	4b44      	ldr	r3, [pc, #272]	; (800d1c0 <USBD_SetConfig+0x150>)
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d020      	beq.n	800d0f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d0b6:	4b42      	ldr	r3, [pc, #264]	; (800d1c0 <USBD_SetConfig+0x150>)
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d0c0:	4b3f      	ldr	r3, [pc, #252]	; (800d1c0 <USBD_SetConfig+0x150>)
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f7fe ffe1 	bl	800c08e <USBD_SetClassConfig>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d0d0:	7bfb      	ldrb	r3, [r7, #15]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d008      	beq.n	800d0e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d0d6:	6839      	ldr	r1, [r7, #0]
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f000 f962 	bl	800d3a2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2202      	movs	r2, #2
 800d0e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d0e6:	e065      	b.n	800d1b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f000 fa14 	bl	800d516 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2203      	movs	r2, #3
 800d0f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d0f6:	e05d      	b.n	800d1b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 fa0c 	bl	800d516 <USBD_CtlSendStatus>
      break;
 800d0fe:	e059      	b.n	800d1b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d100:	4b2f      	ldr	r3, [pc, #188]	; (800d1c0 <USBD_SetConfig+0x150>)
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d112      	bne.n	800d12e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2202      	movs	r2, #2
 800d10c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d110:	4b2b      	ldr	r3, [pc, #172]	; (800d1c0 <USBD_SetConfig+0x150>)
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	461a      	mov	r2, r3
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d11a:	4b29      	ldr	r3, [pc, #164]	; (800d1c0 <USBD_SetConfig+0x150>)
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	4619      	mov	r1, r3
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f7fe ffd0 	bl	800c0c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 f9f5 	bl	800d516 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d12c:	e042      	b.n	800d1b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d12e:	4b24      	ldr	r3, [pc, #144]	; (800d1c0 <USBD_SetConfig+0x150>)
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	461a      	mov	r2, r3
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d02a      	beq.n	800d192 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	b2db      	uxtb	r3, r3
 800d142:	4619      	mov	r1, r3
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f7fe ffbe 	bl	800c0c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d14a:	4b1d      	ldr	r3, [pc, #116]	; (800d1c0 <USBD_SetConfig+0x150>)
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	461a      	mov	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d154:	4b1a      	ldr	r3, [pc, #104]	; (800d1c0 <USBD_SetConfig+0x150>)
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	4619      	mov	r1, r3
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f7fe ff97 	bl	800c08e <USBD_SetClassConfig>
 800d160:	4603      	mov	r3, r0
 800d162:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d164:	7bfb      	ldrb	r3, [r7, #15]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d00f      	beq.n	800d18a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d16a:	6839      	ldr	r1, [r7, #0]
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f000 f918 	bl	800d3a2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	b2db      	uxtb	r3, r3
 800d178:	4619      	mov	r1, r3
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f7fe ffa3 	bl	800c0c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2202      	movs	r2, #2
 800d184:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d188:	e014      	b.n	800d1b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f000 f9c3 	bl	800d516 <USBD_CtlSendStatus>
      break;
 800d190:	e010      	b.n	800d1b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 f9bf 	bl	800d516 <USBD_CtlSendStatus>
      break;
 800d198:	e00c      	b.n	800d1b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d19a:	6839      	ldr	r1, [r7, #0]
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f000 f900 	bl	800d3a2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d1a2:	4b07      	ldr	r3, [pc, #28]	; (800d1c0 <USBD_SetConfig+0x150>)
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f7fe ff8c 	bl	800c0c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d1ae:	2303      	movs	r3, #3
 800d1b0:	73fb      	strb	r3, [r7, #15]
      break;
 800d1b2:	bf00      	nop
  }

  return ret;
 800d1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	240001fc 	.word	0x240001fc

0800d1c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	88db      	ldrh	r3, [r3, #6]
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d004      	beq.n	800d1e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d1d6:	6839      	ldr	r1, [r7, #0]
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 f8e2 	bl	800d3a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d1de:	e023      	b.n	800d228 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	2b02      	cmp	r3, #2
 800d1ea:	dc02      	bgt.n	800d1f2 <USBD_GetConfig+0x2e>
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	dc03      	bgt.n	800d1f8 <USBD_GetConfig+0x34>
 800d1f0:	e015      	b.n	800d21e <USBD_GetConfig+0x5a>
 800d1f2:	2b03      	cmp	r3, #3
 800d1f4:	d00b      	beq.n	800d20e <USBD_GetConfig+0x4a>
 800d1f6:	e012      	b.n	800d21e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	3308      	adds	r3, #8
 800d202:	2201      	movs	r2, #1
 800d204:	4619      	mov	r1, r3
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 f948 	bl	800d49c <USBD_CtlSendData>
        break;
 800d20c:	e00c      	b.n	800d228 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	3304      	adds	r3, #4
 800d212:	2201      	movs	r2, #1
 800d214:	4619      	mov	r1, r3
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 f940 	bl	800d49c <USBD_CtlSendData>
        break;
 800d21c:	e004      	b.n	800d228 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d21e:	6839      	ldr	r1, [r7, #0]
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 f8be 	bl	800d3a2 <USBD_CtlError>
        break;
 800d226:	bf00      	nop
}
 800d228:	bf00      	nop
 800d22a:	3708      	adds	r7, #8
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d240:	b2db      	uxtb	r3, r3
 800d242:	3b01      	subs	r3, #1
 800d244:	2b02      	cmp	r3, #2
 800d246:	d81e      	bhi.n	800d286 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	88db      	ldrh	r3, [r3, #6]
 800d24c:	2b02      	cmp	r3, #2
 800d24e:	d004      	beq.n	800d25a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d250:	6839      	ldr	r1, [r7, #0]
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f000 f8a5 	bl	800d3a2 <USBD_CtlError>
        break;
 800d258:	e01a      	b.n	800d290 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2201      	movs	r2, #1
 800d25e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d266:	2b00      	cmp	r3, #0
 800d268:	d005      	beq.n	800d276 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	f043 0202 	orr.w	r2, r3, #2
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	330c      	adds	r3, #12
 800d27a:	2202      	movs	r2, #2
 800d27c:	4619      	mov	r1, r3
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f000 f90c 	bl	800d49c <USBD_CtlSendData>
      break;
 800d284:	e004      	b.n	800d290 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 f88a 	bl	800d3a2 <USBD_CtlError>
      break;
 800d28e:	bf00      	nop
  }
}
 800d290:	bf00      	nop
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	885b      	ldrh	r3, [r3, #2]
 800d2a6:	2b01      	cmp	r3, #1
 800d2a8:	d107      	bne.n	800d2ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f000 f92f 	bl	800d516 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d2b8:	e013      	b.n	800d2e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	885b      	ldrh	r3, [r3, #2]
 800d2be:	2b02      	cmp	r3, #2
 800d2c0:	d10b      	bne.n	800d2da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	889b      	ldrh	r3, [r3, #4]
 800d2c6:	0a1b      	lsrs	r3, r3, #8
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	b2da      	uxtb	r2, r3
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f000 f91f 	bl	800d516 <USBD_CtlSendStatus>
}
 800d2d8:	e003      	b.n	800d2e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d2da:	6839      	ldr	r1, [r7, #0]
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 f860 	bl	800d3a2 <USBD_CtlError>
}
 800d2e2:	bf00      	nop
 800d2e4:	3708      	adds	r7, #8
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b082      	sub	sp, #8
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]
 800d2f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2fa:	b2db      	uxtb	r3, r3
 800d2fc:	3b01      	subs	r3, #1
 800d2fe:	2b02      	cmp	r3, #2
 800d300:	d80b      	bhi.n	800d31a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	885b      	ldrh	r3, [r3, #2]
 800d306:	2b01      	cmp	r3, #1
 800d308:	d10c      	bne.n	800d324 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2200      	movs	r2, #0
 800d30e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 f8ff 	bl	800d516 <USBD_CtlSendStatus>
      }
      break;
 800d318:	e004      	b.n	800d324 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d31a:	6839      	ldr	r1, [r7, #0]
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f000 f840 	bl	800d3a2 <USBD_CtlError>
      break;
 800d322:	e000      	b.n	800d326 <USBD_ClrFeature+0x3c>
      break;
 800d324:	bf00      	nop
  }
}
 800d326:	bf00      	nop
 800d328:	3708      	adds	r7, #8
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}

0800d32e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d32e:	b580      	push	{r7, lr}
 800d330:	b084      	sub	sp, #16
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
 800d336:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	781a      	ldrb	r2, [r3, #0]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	3301      	adds	r3, #1
 800d348:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	781a      	ldrb	r2, [r3, #0]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	3301      	adds	r3, #1
 800d356:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d358:	68f8      	ldr	r0, [r7, #12]
 800d35a:	f7ff fa41 	bl	800c7e0 <SWAPBYTE>
 800d35e:	4603      	mov	r3, r0
 800d360:	461a      	mov	r2, r3
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	3301      	adds	r3, #1
 800d36a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	3301      	adds	r3, #1
 800d370:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d372:	68f8      	ldr	r0, [r7, #12]
 800d374:	f7ff fa34 	bl	800c7e0 <SWAPBYTE>
 800d378:	4603      	mov	r3, r0
 800d37a:	461a      	mov	r2, r3
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	3301      	adds	r3, #1
 800d384:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	3301      	adds	r3, #1
 800d38a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d38c:	68f8      	ldr	r0, [r7, #12]
 800d38e:	f7ff fa27 	bl	800c7e0 <SWAPBYTE>
 800d392:	4603      	mov	r3, r0
 800d394:	461a      	mov	r2, r3
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	80da      	strh	r2, [r3, #6]
}
 800d39a:	bf00      	nop
 800d39c:	3710      	adds	r7, #16
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}

0800d3a2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3a2:	b580      	push	{r7, lr}
 800d3a4:	b082      	sub	sp, #8
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
 800d3aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d3ac:	2180      	movs	r1, #128	; 0x80
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f000 fd77 	bl	800dea2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d3b4:	2100      	movs	r1, #0
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 fd73 	bl	800dea2 <USBD_LL_StallEP>
}
 800d3bc:	bf00      	nop
 800d3be:	3708      	adds	r7, #8
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b086      	sub	sp, #24
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	60b9      	str	r1, [r7, #8]
 800d3ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d042      	beq.n	800d460 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d3de:	6938      	ldr	r0, [r7, #16]
 800d3e0:	f000 f842 	bl	800d468 <USBD_GetLen>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	005b      	lsls	r3, r3, #1
 800d3ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3ee:	d808      	bhi.n	800d402 <USBD_GetString+0x3e>
 800d3f0:	6938      	ldr	r0, [r7, #16]
 800d3f2:	f000 f839 	bl	800d468 <USBD_GetLen>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	b29b      	uxth	r3, r3
 800d3fc:	005b      	lsls	r3, r3, #1
 800d3fe:	b29a      	uxth	r2, r3
 800d400:	e001      	b.n	800d406 <USBD_GetString+0x42>
 800d402:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d40a:	7dfb      	ldrb	r3, [r7, #23]
 800d40c:	68ba      	ldr	r2, [r7, #8]
 800d40e:	4413      	add	r3, r2
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	7812      	ldrb	r2, [r2, #0]
 800d414:	701a      	strb	r2, [r3, #0]
  idx++;
 800d416:	7dfb      	ldrb	r3, [r7, #23]
 800d418:	3301      	adds	r3, #1
 800d41a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d41c:	7dfb      	ldrb	r3, [r7, #23]
 800d41e:	68ba      	ldr	r2, [r7, #8]
 800d420:	4413      	add	r3, r2
 800d422:	2203      	movs	r2, #3
 800d424:	701a      	strb	r2, [r3, #0]
  idx++;
 800d426:	7dfb      	ldrb	r3, [r7, #23]
 800d428:	3301      	adds	r3, #1
 800d42a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d42c:	e013      	b.n	800d456 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d42e:	7dfb      	ldrb	r3, [r7, #23]
 800d430:	68ba      	ldr	r2, [r7, #8]
 800d432:	4413      	add	r3, r2
 800d434:	693a      	ldr	r2, [r7, #16]
 800d436:	7812      	ldrb	r2, [r2, #0]
 800d438:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	3301      	adds	r3, #1
 800d43e:	613b      	str	r3, [r7, #16]
    idx++;
 800d440:	7dfb      	ldrb	r3, [r7, #23]
 800d442:	3301      	adds	r3, #1
 800d444:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d446:	7dfb      	ldrb	r3, [r7, #23]
 800d448:	68ba      	ldr	r2, [r7, #8]
 800d44a:	4413      	add	r3, r2
 800d44c:	2200      	movs	r2, #0
 800d44e:	701a      	strb	r2, [r3, #0]
    idx++;
 800d450:	7dfb      	ldrb	r3, [r7, #23]
 800d452:	3301      	adds	r3, #1
 800d454:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d1e7      	bne.n	800d42e <USBD_GetString+0x6a>
 800d45e:	e000      	b.n	800d462 <USBD_GetString+0x9e>
    return;
 800d460:	bf00      	nop
  }
}
 800d462:	3718      	adds	r7, #24
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d468:	b480      	push	{r7}
 800d46a:	b085      	sub	sp, #20
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d470:	2300      	movs	r3, #0
 800d472:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d478:	e005      	b.n	800d486 <USBD_GetLen+0x1e>
  {
    len++;
 800d47a:	7bfb      	ldrb	r3, [r7, #15]
 800d47c:	3301      	adds	r3, #1
 800d47e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	3301      	adds	r3, #1
 800d484:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d1f5      	bne.n	800d47a <USBD_GetLen+0x12>
  }

  return len;
 800d48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d490:	4618      	mov	r0, r3
 800d492:	3714      	adds	r7, #20
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b084      	sub	sp, #16
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	60f8      	str	r0, [r7, #12]
 800d4a4:	60b9      	str	r1, [r7, #8]
 800d4a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	2202      	movs	r2, #2
 800d4ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	68ba      	ldr	r2, [r7, #8]
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f000 fd76 	bl	800dfb4 <USBD_LL_Transmit>

  return USBD_OK;
 800d4c8:	2300      	movs	r3, #0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3710      	adds	r7, #16
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b084      	sub	sp, #16
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	60f8      	str	r0, [r7, #12]
 800d4da:	60b9      	str	r1, [r7, #8]
 800d4dc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	68ba      	ldr	r2, [r7, #8]
 800d4e2:	2100      	movs	r1, #0
 800d4e4:	68f8      	ldr	r0, [r7, #12]
 800d4e6:	f000 fd65 	bl	800dfb4 <USBD_LL_Transmit>

  return USBD_OK;
 800d4ea:	2300      	movs	r3, #0
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3710      	adds	r7, #16
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	60b9      	str	r1, [r7, #8]
 800d4fe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	68ba      	ldr	r2, [r7, #8]
 800d504:	2100      	movs	r1, #0
 800d506:	68f8      	ldr	r0, [r7, #12]
 800d508:	f000 fd75 	bl	800dff6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d50c:	2300      	movs	r3, #0
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d516:	b580      	push	{r7, lr}
 800d518:	b082      	sub	sp, #8
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2204      	movs	r2, #4
 800d522:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d526:	2300      	movs	r3, #0
 800d528:	2200      	movs	r2, #0
 800d52a:	2100      	movs	r1, #0
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f000 fd41 	bl	800dfb4 <USBD_LL_Transmit>

  return USBD_OK;
 800d532:	2300      	movs	r3, #0
}
 800d534:	4618      	mov	r0, r3
 800d536:	3708      	adds	r7, #8
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2205      	movs	r2, #5
 800d548:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d54c:	2300      	movs	r3, #0
 800d54e:	2200      	movs	r2, #0
 800d550:	2100      	movs	r1, #0
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 fd4f 	bl	800dff6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d558:	2300      	movs	r3, #0
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3708      	adds	r7, #8
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
	...

0800d564 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	af00      	add	r7, sp, #0
*/ //The above section is probably not necessary, as it is probably doing the exact
	//same thing as the below code, and the problem is elsewhere.
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800d568:	2201      	movs	r2, #1
 800d56a:	4913      	ldr	r1, [pc, #76]	; (800d5b8 <MX_USB_DEVICE_Init+0x54>)
 800d56c:	4813      	ldr	r0, [pc, #76]	; (800d5bc <MX_USB_DEVICE_Init+0x58>)
 800d56e:	f7fe fcf5 	bl	800bf5c <USBD_Init>
 800d572:	4603      	mov	r3, r0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d001      	beq.n	800d57c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d578:	f7f3 fad2 	bl	8000b20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_MSC) != USBD_OK)
 800d57c:	4910      	ldr	r1, [pc, #64]	; (800d5c0 <MX_USB_DEVICE_Init+0x5c>)
 800d57e:	480f      	ldr	r0, [pc, #60]	; (800d5bc <MX_USB_DEVICE_Init+0x58>)
 800d580:	f7fe fd2a 	bl	800bfd8 <USBD_RegisterClass>
 800d584:	4603      	mov	r3, r0
 800d586:	2b00      	cmp	r3, #0
 800d588:	d001      	beq.n	800d58e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d58a:	f7f3 fac9 	bl	8000b20 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceHS, &USBD_Storage_Interface_fops_HS) != USBD_OK)
 800d58e:	490d      	ldr	r1, [pc, #52]	; (800d5c4 <MX_USB_DEVICE_Init+0x60>)
 800d590:	480a      	ldr	r0, [pc, #40]	; (800d5bc <MX_USB_DEVICE_Init+0x58>)
 800d592:	f7fc ff97 	bl	800a4c4 <USBD_MSC_RegisterStorage>
 800d596:	4603      	mov	r3, r0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d001      	beq.n	800d5a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d59c:	f7f3 fac0 	bl	8000b20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800d5a0:	4806      	ldr	r0, [pc, #24]	; (800d5bc <MX_USB_DEVICE_Init+0x58>)
 800d5a2:	f7fe fd5d 	bl	800c060 <USBD_Start>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d001      	beq.n	800d5b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d5ac:	f7f3 fab8 	bl	8000b20 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800d5b0:	f7f5 fb9e 	bl	8002cf0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d5b4:	bf00      	nop
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	24000090 	.word	0x24000090
 800d5bc:	24000200 	.word	0x24000200
 800d5c0:	24000010 	.word	0x24000010
 800d5c4:	240000e0 	.word	0x240000e0

0800d5c8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	6039      	str	r1, [r7, #0]
 800d5d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	2212      	movs	r2, #18
 800d5d8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800d5da:	4b03      	ldr	r3, [pc, #12]	; (800d5e8 <USBD_HS_DeviceDescriptor+0x20>)
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	370c      	adds	r7, #12
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr
 800d5e8:	240000ac 	.word	0x240000ac

0800d5ec <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b083      	sub	sp, #12
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	6039      	str	r1, [r7, #0]
 800d5f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	2204      	movs	r2, #4
 800d5fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d5fe:	4b03      	ldr	r3, [pc, #12]	; (800d60c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800d600:	4618      	mov	r0, r3
 800d602:	370c      	adds	r7, #12
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr
 800d60c:	240000c0 	.word	0x240000c0

0800d610 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
 800d616:	4603      	mov	r3, r0
 800d618:	6039      	str	r1, [r7, #0]
 800d61a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d61c:	79fb      	ldrb	r3, [r7, #7]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d105      	bne.n	800d62e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d622:	683a      	ldr	r2, [r7, #0]
 800d624:	4907      	ldr	r1, [pc, #28]	; (800d644 <USBD_HS_ProductStrDescriptor+0x34>)
 800d626:	4808      	ldr	r0, [pc, #32]	; (800d648 <USBD_HS_ProductStrDescriptor+0x38>)
 800d628:	f7ff fecc 	bl	800d3c4 <USBD_GetString>
 800d62c:	e004      	b.n	800d638 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d62e:	683a      	ldr	r2, [r7, #0]
 800d630:	4904      	ldr	r1, [pc, #16]	; (800d644 <USBD_HS_ProductStrDescriptor+0x34>)
 800d632:	4805      	ldr	r0, [pc, #20]	; (800d648 <USBD_HS_ProductStrDescriptor+0x38>)
 800d634:	f7ff fec6 	bl	800d3c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d638:	4b02      	ldr	r3, [pc, #8]	; (800d644 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3708      	adds	r7, #8
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop
 800d644:	240004dc 	.word	0x240004dc
 800d648:	0800eff8 	.word	0x0800eff8

0800d64c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	4603      	mov	r3, r0
 800d654:	6039      	str	r1, [r7, #0]
 800d656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d658:	683a      	ldr	r2, [r7, #0]
 800d65a:	4904      	ldr	r1, [pc, #16]	; (800d66c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800d65c:	4804      	ldr	r0, [pc, #16]	; (800d670 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800d65e:	f7ff feb1 	bl	800d3c4 <USBD_GetString>
  return USBD_StrDesc;
 800d662:	4b02      	ldr	r3, [pc, #8]	; (800d66c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800d664:	4618      	mov	r0, r3
 800d666:	3708      	adds	r7, #8
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}
 800d66c:	240004dc 	.word	0x240004dc
 800d670:	0800f00c 	.word	0x0800f00c

0800d674 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
 800d67a:	4603      	mov	r3, r0
 800d67c:	6039      	str	r1, [r7, #0]
 800d67e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	221a      	movs	r2, #26
 800d684:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d686:	f000 f843 	bl	800d710 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d68a:	4b02      	ldr	r3, [pc, #8]	; (800d694 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3708      	adds	r7, #8
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	240000c4 	.word	0x240000c4

0800d698 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	4603      	mov	r3, r0
 800d6a0:	6039      	str	r1, [r7, #0]
 800d6a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d6a4:	79fb      	ldrb	r3, [r7, #7]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d105      	bne.n	800d6b6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d6aa:	683a      	ldr	r2, [r7, #0]
 800d6ac:	4907      	ldr	r1, [pc, #28]	; (800d6cc <USBD_HS_ConfigStrDescriptor+0x34>)
 800d6ae:	4808      	ldr	r0, [pc, #32]	; (800d6d0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800d6b0:	f7ff fe88 	bl	800d3c4 <USBD_GetString>
 800d6b4:	e004      	b.n	800d6c0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d6b6:	683a      	ldr	r2, [r7, #0]
 800d6b8:	4904      	ldr	r1, [pc, #16]	; (800d6cc <USBD_HS_ConfigStrDescriptor+0x34>)
 800d6ba:	4805      	ldr	r0, [pc, #20]	; (800d6d0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800d6bc:	f7ff fe82 	bl	800d3c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6c0:	4b02      	ldr	r3, [pc, #8]	; (800d6cc <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3708      	adds	r7, #8
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	240004dc 	.word	0x240004dc
 800d6d0:	0800f020 	.word	0x0800f020

0800d6d4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	4603      	mov	r3, r0
 800d6dc:	6039      	str	r1, [r7, #0]
 800d6de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d6e0:	79fb      	ldrb	r3, [r7, #7]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d105      	bne.n	800d6f2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d6e6:	683a      	ldr	r2, [r7, #0]
 800d6e8:	4907      	ldr	r1, [pc, #28]	; (800d708 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d6ea:	4808      	ldr	r0, [pc, #32]	; (800d70c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d6ec:	f7ff fe6a 	bl	800d3c4 <USBD_GetString>
 800d6f0:	e004      	b.n	800d6fc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d6f2:	683a      	ldr	r2, [r7, #0]
 800d6f4:	4904      	ldr	r1, [pc, #16]	; (800d708 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d6f6:	4805      	ldr	r0, [pc, #20]	; (800d70c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d6f8:	f7ff fe64 	bl	800d3c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6fc:	4b02      	ldr	r3, [pc, #8]	; (800d708 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3708      	adds	r7, #8
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	240004dc 	.word	0x240004dc
 800d70c:	0800f02c 	.word	0x0800f02c

0800d710 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d716:	4b0f      	ldr	r3, [pc, #60]	; (800d754 <Get_SerialNum+0x44>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d71c:	4b0e      	ldr	r3, [pc, #56]	; (800d758 <Get_SerialNum+0x48>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d722:	4b0e      	ldr	r3, [pc, #56]	; (800d75c <Get_SerialNum+0x4c>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	4413      	add	r3, r2
 800d72e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d009      	beq.n	800d74a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d736:	2208      	movs	r2, #8
 800d738:	4909      	ldr	r1, [pc, #36]	; (800d760 <Get_SerialNum+0x50>)
 800d73a:	68f8      	ldr	r0, [r7, #12]
 800d73c:	f000 f814 	bl	800d768 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d740:	2204      	movs	r2, #4
 800d742:	4908      	ldr	r1, [pc, #32]	; (800d764 <Get_SerialNum+0x54>)
 800d744:	68b8      	ldr	r0, [r7, #8]
 800d746:	f000 f80f 	bl	800d768 <IntToUnicode>
  }
}
 800d74a:	bf00      	nop
 800d74c:	3710      	adds	r7, #16
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	08fff800 	.word	0x08fff800
 800d758:	08fff804 	.word	0x08fff804
 800d75c:	08fff808 	.word	0x08fff808
 800d760:	240000c6 	.word	0x240000c6
 800d764:	240000d6 	.word	0x240000d6

0800d768 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d768:	b480      	push	{r7}
 800d76a:	b087      	sub	sp, #28
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	60b9      	str	r1, [r7, #8]
 800d772:	4613      	mov	r3, r2
 800d774:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d776:	2300      	movs	r3, #0
 800d778:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d77a:	2300      	movs	r3, #0
 800d77c:	75fb      	strb	r3, [r7, #23]
 800d77e:	e027      	b.n	800d7d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	0f1b      	lsrs	r3, r3, #28
 800d784:	2b09      	cmp	r3, #9
 800d786:	d80b      	bhi.n	800d7a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	0f1b      	lsrs	r3, r3, #28
 800d78c:	b2da      	uxtb	r2, r3
 800d78e:	7dfb      	ldrb	r3, [r7, #23]
 800d790:	005b      	lsls	r3, r3, #1
 800d792:	4619      	mov	r1, r3
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	440b      	add	r3, r1
 800d798:	3230      	adds	r2, #48	; 0x30
 800d79a:	b2d2      	uxtb	r2, r2
 800d79c:	701a      	strb	r2, [r3, #0]
 800d79e:	e00a      	b.n	800d7b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	0f1b      	lsrs	r3, r3, #28
 800d7a4:	b2da      	uxtb	r2, r3
 800d7a6:	7dfb      	ldrb	r3, [r7, #23]
 800d7a8:	005b      	lsls	r3, r3, #1
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	440b      	add	r3, r1
 800d7b0:	3237      	adds	r2, #55	; 0x37
 800d7b2:	b2d2      	uxtb	r2, r2
 800d7b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	011b      	lsls	r3, r3, #4
 800d7ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d7bc:	7dfb      	ldrb	r3, [r7, #23]
 800d7be:	005b      	lsls	r3, r3, #1
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	68ba      	ldr	r2, [r7, #8]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d7ca:	7dfb      	ldrb	r3, [r7, #23]
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	75fb      	strb	r3, [r7, #23]
 800d7d0:	7dfa      	ldrb	r2, [r7, #23]
 800d7d2:	79fb      	ldrb	r3, [r7, #7]
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d3d3      	bcc.n	800d780 <IntToUnicode+0x18>
  }
}
 800d7d8:	bf00      	nop
 800d7da:	bf00      	nop
 800d7dc:	371c      	adds	r7, #28
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr

0800d7e6 <STORAGE_Init_HS>:
  * @brief  Initializes the storage unit (medium).
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_HS(uint8_t lun)
{
 800d7e6:	b480      	push	{r7}
 800d7e8:	b083      	sub	sp, #12
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 9 */
  UNUSED(lun);

  return (USBD_OK);
 800d7f0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	370c      	adds	r7, #12
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr
	...

0800d800 <STORAGE_GetCapacity_HS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_HS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b08e      	sub	sp, #56	; 0x38
 800d804:	af00      	add	r7, sp, #0
 800d806:	4603      	mov	r3, r0
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	607a      	str	r2, [r7, #4]
 800d80c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 10 */
  UNUSED(lun);

  HAL_SD_CardInfoTypeDef info;

  HAL_SD_GetCardInfo(&hsd1, &info);
 800d80e:	f107 0314 	add.w	r3, r7, #20
 800d812:	4619      	mov	r1, r3
 800d814:	4807      	ldr	r0, [pc, #28]	; (800d834 <STORAGE_GetCapacity_HS+0x34>)
 800d816:	f7f9 fd87 	bl	8007328 <HAL_SD_GetCardInfo>

  *block_num  = info.LogBlockNbr - 1;
 800d81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d81c:	1e5a      	subs	r2, r3, #1
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	601a      	str	r2, [r3, #0]
  *block_size = info.LogBlockSize;
 800d822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d824:	b29a      	uxth	r2, r3
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800d82a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3738      	adds	r7, #56	; 0x38
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	24000178 	.word	0x24000178

0800d838 <STORAGE_IsReady_HS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_HS(uint8_t lun)
{
 800d838:	b480      	push	{r7}
 800d83a:	b083      	sub	sp, #12
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	4603      	mov	r3, r0
 800d840:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 11 */
  UNUSED(lun);

  return (USBD_OK);
 800d842:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800d844:	4618      	mov	r0, r3
 800d846:	370c      	adds	r7, #12
 800d848:	46bd      	mov	sp, r7
 800d84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84e:	4770      	bx	lr

0800d850 <STORAGE_IsWriteProtected_HS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_HS(uint8_t lun)
{
 800d850:	b480      	push	{r7}
 800d852:	b083      	sub	sp, #12
 800d854:	af00      	add	r7, sp, #0
 800d856:	4603      	mov	r3, r0
 800d858:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 12 */
  return (USBD_OK);
 800d85a:	2300      	movs	r3, #0
  /* USER CODE END 12 */
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	370c      	adds	r7, #12
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr

0800d868 <STORAGE_Read_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b086      	sub	sp, #24
 800d86c:	af02      	add	r7, sp, #8
 800d86e:	60b9      	str	r1, [r7, #8]
 800d870:	607a      	str	r2, [r7, #4]
 800d872:	461a      	mov	r2, r3
 800d874:	4603      	mov	r3, r0
 800d876:	73fb      	strb	r3, [r7, #15]
 800d878:	4613      	mov	r3, r2
 800d87a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 13 */
  UNUSED(lun);

  HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 800d87c:	89bb      	ldrh	r3, [r7, #12]
 800d87e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d882:	9200      	str	r2, [sp, #0]
 800d884:	687a      	ldr	r2, [r7, #4]
 800d886:	68b9      	ldr	r1, [r7, #8]
 800d888:	4803      	ldr	r0, [pc, #12]	; (800d898 <STORAGE_Read_HS+0x30>)
 800d88a:	f7f8 ffd3 	bl	8006834 <HAL_SD_ReadBlocks>

  //while(HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER);

  return (USBD_OK);
 800d88e:	2300      	movs	r3, #0
  /* USER CODE END 13 */
}
 800d890:	4618      	mov	r0, r3
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	24000178 	.word	0x24000178

0800d89c <STORAGE_Write_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b086      	sub	sp, #24
 800d8a0:	af02      	add	r7, sp, #8
 800d8a2:	60b9      	str	r1, [r7, #8]
 800d8a4:	607a      	str	r2, [r7, #4]
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	73fb      	strb	r3, [r7, #15]
 800d8ac:	4613      	mov	r3, r2
 800d8ae:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 14 */
  UNUSED(lun);
  //while(HAL_SD_GetCardState(&hsd1) != )
  HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 800d8b0:	89bb      	ldrh	r3, [r7, #12]
 800d8b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d8b6:	9200      	str	r2, [sp, #0]
 800d8b8:	687a      	ldr	r2, [r7, #4]
 800d8ba:	68b9      	ldr	r1, [r7, #8]
 800d8bc:	4803      	ldr	r0, [pc, #12]	; (800d8cc <STORAGE_Write_HS+0x30>)
 800d8be:	f7f9 f943 	bl	8006b48 <HAL_SD_WriteBlocks>
  //HAL_SD_WriteBlocks_DMA(&hsd1, buf, blk_addr, blk_len);

  return (USBD_OK);
 800d8c2:	2300      	movs	r3, #0
  /* USER CODE END 14 */
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3710      	adds	r7, #16
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}
 800d8cc:	24000178 	.word	0x24000178

0800d8d0 <STORAGE_GetMaxLun_HS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_HS(void)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 15 */
  return (STORAGE_LUN_NBR - 1);
 800d8d4:	2300      	movs	r3, #0
  /* USER CODE END 15 */
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b0c0      	sub	sp, #256	; 0x100
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d8e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	601a      	str	r2, [r3, #0]
 800d8f0:	605a      	str	r2, [r3, #4]
 800d8f2:	609a      	str	r2, [r3, #8]
 800d8f4:	60da      	str	r2, [r3, #12]
 800d8f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d8f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d8fc:	22c0      	movs	r2, #192	; 0xc0
 800d8fe:	2100      	movs	r1, #0
 800d900:	4618      	mov	r0, r3
 800d902:	f000 fcfe 	bl	800e302 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4a7d      	ldr	r2, [pc, #500]	; (800db00 <HAL_PCD_MspInit+0x220>)
 800d90c:	4293      	cmp	r3, r2
 800d90e:	f040 80f2 	bne.w	800daf6 <HAL_PCD_MspInit+0x216>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d912:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800d916:	f04f 0300 	mov.w	r3, #0
 800d91a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800d91e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d922:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d926:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7f6 fa02 	bl	8003d34 <HAL_RCCEx_PeriphCLKConfig>
 800d930:	4603      	mov	r3, r0
 800d932:	2b00      	cmp	r3, #0
 800d934:	d001      	beq.n	800d93a <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800d936:	f7f3 f8f3 	bl	8000b20 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800d93a:	f7f5 f9d9 	bl	8002cf0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d93e:	4b71      	ldr	r3, [pc, #452]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800d940:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d944:	4a6f      	ldr	r2, [pc, #444]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800d946:	f043 0302 	orr.w	r3, r3, #2
 800d94a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800d94e:	4b6d      	ldr	r3, [pc, #436]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800d950:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d954:	f003 0302 	and.w	r3, r3, #2
 800d958:	627b      	str	r3, [r7, #36]	; 0x24
 800d95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800d95c:	4b69      	ldr	r3, [pc, #420]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800d95e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d962:	4a68      	ldr	r2, [pc, #416]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800d964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d968:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800d96c:	4b65      	ldr	r3, [pc, #404]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800d96e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d976:	623b      	str	r3, [r7, #32]
 800d978:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d97a:	4b62      	ldr	r3, [pc, #392]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800d97c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d980:	4a60      	ldr	r2, [pc, #384]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800d982:	f043 0304 	orr.w	r3, r3, #4
 800d986:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800d98a:	4b5e      	ldr	r3, [pc, #376]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800d98c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d990:	f003 0304 	and.w	r3, r3, #4
 800d994:	61fb      	str	r3, [r7, #28]
 800d996:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800d998:	4b5a      	ldr	r3, [pc, #360]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800d99a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d99e:	4a59      	ldr	r2, [pc, #356]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800d9a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800d9a8:	4b56      	ldr	r3, [pc, #344]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800d9aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d9ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9b2:	61bb      	str	r3, [r7, #24]
 800d9b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d9b6:	4b53      	ldr	r3, [pc, #332]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800d9b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d9bc:	4a51      	ldr	r2, [pc, #324]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800d9be:	f043 0301 	orr.w	r3, r3, #1
 800d9c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800d9c6:	4b4f      	ldr	r3, [pc, #316]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800d9c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d9cc:	f003 0301 	and.w	r3, r3, #1
 800d9d0:	617b      	str	r3, [r7, #20]
 800d9d2:	697b      	ldr	r3, [r7, #20]
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB10     ------> USB_OTG_HS_ULPI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_12
 800d9d4:	f643 4323 	movw	r3, #15395	; 0x3c23
 800d9d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                          |GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9dc:	2302      	movs	r3, #2
 800d9de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d9e8:	2302      	movs	r3, #2
 800d9ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800d9ee:	230a      	movs	r3, #10
 800d9f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d9f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	4843      	ldr	r0, [pc, #268]	; (800db08 <HAL_PCD_MspInit+0x228>)
 800d9fc:	f7f3 fc8a 	bl	8001314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800da00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da08:	2302      	movs	r3, #2
 800da0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da0e:	2300      	movs	r3, #0
 800da10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800da14:	2302      	movs	r3, #2
 800da16:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800da1a:	230a      	movs	r3, #10
 800da1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800da20:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800da24:	4619      	mov	r1, r3
 800da26:	4839      	ldr	r0, [pc, #228]	; (800db0c <HAL_PCD_MspInit+0x22c>)
 800da28:	f7f3 fc74 	bl	8001314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800da2c:	2301      	movs	r3, #1
 800da2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da32:	2302      	movs	r3, #2
 800da34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da38:	2300      	movs	r3, #0
 800da3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800da3e:	2302      	movs	r3, #2
 800da40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800da44:	230a      	movs	r3, #10
 800da46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800da4a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800da4e:	4619      	mov	r1, r3
 800da50:	482f      	ldr	r0, [pc, #188]	; (800db10 <HAL_PCD_MspInit+0x230>)
 800da52:	f7f3 fc5f 	bl	8001314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800da56:	2310      	movs	r3, #16
 800da58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da5c:	2302      	movs	r3, #2
 800da5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da62:	2300      	movs	r3, #0
 800da64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800da68:	2302      	movs	r3, #2
 800da6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800da6e:	230a      	movs	r3, #10
 800da70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800da74:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800da78:	4619      	mov	r1, r3
 800da7a:	4826      	ldr	r0, [pc, #152]	; (800db14 <HAL_PCD_MspInit+0x234>)
 800da7c:	f7f3 fc4a 	bl	8001314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 800da80:	2328      	movs	r3, #40	; 0x28
 800da82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da86:	2302      	movs	r3, #2
 800da88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da8c:	2300      	movs	r3, #0
 800da8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800da92:	2302      	movs	r3, #2
 800da94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800da98:	230a      	movs	r3, #10
 800da9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da9e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800daa2:	4619      	mov	r1, r3
 800daa4:	481c      	ldr	r0, [pc, #112]	; (800db18 <HAL_PCD_MspInit+0x238>)
 800daa6:	f7f3 fc35 	bl	8001314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800daaa:	4b16      	ldr	r3, [pc, #88]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800daac:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800dab0:	4a14      	ldr	r2, [pc, #80]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800dab2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800dab6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800daba:	4b12      	ldr	r3, [pc, #72]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800dabc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800dac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dac4:	613b      	str	r3, [r7, #16]
 800dac6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800dac8:	4b0e      	ldr	r3, [pc, #56]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800daca:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800dace:	4a0d      	ldr	r2, [pc, #52]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800dad0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dad4:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800dad8:	4b0a      	ldr	r3, [pc, #40]	; (800db04 <HAL_PCD_MspInit+0x224>)
 800dada:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800dade:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dae2:	60fb      	str	r3, [r7, #12]
 800dae4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800dae6:	2200      	movs	r2, #0
 800dae8:	2100      	movs	r1, #0
 800daea:	204d      	movs	r0, #77	; 0x4d
 800daec:	f7f3 fbdd 	bl	80012aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800daf0:	204d      	movs	r0, #77	; 0x4d
 800daf2:	f7f3 fbf4 	bl	80012de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800daf6:	bf00      	nop
 800daf8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	40040000 	.word	0x40040000
 800db04:	58024400 	.word	0x58024400
 800db08:	58020400 	.word	0x58020400
 800db0c:	58022000 	.word	0x58022000
 800db10:	58020800 	.word	0x58020800
 800db14:	58021c00 	.word	0x58021c00
 800db18:	58020000 	.word	0x58020000

0800db1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800db30:	4619      	mov	r1, r3
 800db32:	4610      	mov	r0, r2
 800db34:	f7fe fae1 	bl	800c0fa <USBD_LL_SetupStage>
}
 800db38:	bf00      	nop
 800db3a:	3708      	adds	r7, #8
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	460b      	mov	r3, r1
 800db4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800db52:	78fa      	ldrb	r2, [r7, #3]
 800db54:	6879      	ldr	r1, [r7, #4]
 800db56:	4613      	mov	r3, r2
 800db58:	00db      	lsls	r3, r3, #3
 800db5a:	4413      	add	r3, r2
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	440b      	add	r3, r1
 800db60:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	78fb      	ldrb	r3, [r7, #3]
 800db68:	4619      	mov	r1, r3
 800db6a:	f7fe fb1b 	bl	800c1a4 <USBD_LL_DataOutStage>
}
 800db6e:	bf00      	nop
 800db70:	3708      	adds	r7, #8
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b082      	sub	sp, #8
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]
 800db7e:	460b      	mov	r3, r1
 800db80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800db88:	78fa      	ldrb	r2, [r7, #3]
 800db8a:	6879      	ldr	r1, [r7, #4]
 800db8c:	4613      	mov	r3, r2
 800db8e:	00db      	lsls	r3, r3, #3
 800db90:	4413      	add	r3, r2
 800db92:	009b      	lsls	r3, r3, #2
 800db94:	440b      	add	r3, r1
 800db96:	3320      	adds	r3, #32
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	78fb      	ldrb	r3, [r7, #3]
 800db9c:	4619      	mov	r1, r3
 800db9e:	f7fe fbb4 	bl	800c30a <USBD_LL_DataInStage>
}
 800dba2:	bf00      	nop
 800dba4:	3708      	adds	r7, #8
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}

0800dbaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbaa:	b580      	push	{r7, lr}
 800dbac:	b082      	sub	sp, #8
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7fe fcee 	bl	800c59a <USBD_LL_SOF>
}
 800dbbe:	bf00      	nop
 800dbc0:	3708      	adds	r7, #8
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	b084      	sub	sp, #16
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	79db      	ldrb	r3, [r3, #7]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d102      	bne.n	800dbe0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	73fb      	strb	r3, [r7, #15]
 800dbde:	e008      	b.n	800dbf2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	79db      	ldrb	r3, [r3, #7]
 800dbe4:	2b02      	cmp	r3, #2
 800dbe6:	d102      	bne.n	800dbee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	73fb      	strb	r3, [r7, #15]
 800dbec:	e001      	b.n	800dbf2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800dbee:	f7f2 ff97 	bl	8000b20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dbf8:	7bfa      	ldrb	r2, [r7, #15]
 800dbfa:	4611      	mov	r1, r2
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f7fe fc88 	bl	800c512 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7fe fc30 	bl	800c46e <USBD_LL_Reset>
}
 800dc0e:	bf00      	nop
 800dc10:	3710      	adds	r7, #16
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
	...

0800dc18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7fe fc83 	bl	800c532 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	687a      	ldr	r2, [r7, #4]
 800dc38:	6812      	ldr	r2, [r2, #0]
 800dc3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dc3e:	f043 0301 	orr.w	r3, r3, #1
 800dc42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	7adb      	ldrb	r3, [r3, #11]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d005      	beq.n	800dc58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc4c:	4b04      	ldr	r3, [pc, #16]	; (800dc60 <HAL_PCD_SuspendCallback+0x48>)
 800dc4e:	691b      	ldr	r3, [r3, #16]
 800dc50:	4a03      	ldr	r2, [pc, #12]	; (800dc60 <HAL_PCD_SuspendCallback+0x48>)
 800dc52:	f043 0306 	orr.w	r3, r3, #6
 800dc56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dc58:	bf00      	nop
 800dc5a:	3708      	adds	r7, #8
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}
 800dc60:	e000ed00 	.word	0xe000ed00

0800dc64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7fe fc79 	bl	800c56a <USBD_LL_Resume>
}
 800dc78:	bf00      	nop
 800dc7a:	3708      	adds	r7, #8
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	460b      	mov	r3, r1
 800dc8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dc92:	78fa      	ldrb	r2, [r7, #3]
 800dc94:	4611      	mov	r1, r2
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7fe fcd1 	bl	800c63e <USBD_LL_IsoOUTIncomplete>
}
 800dc9c:	bf00      	nop
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b082      	sub	sp, #8
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	460b      	mov	r3, r1
 800dcae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dcb6:	78fa      	ldrb	r2, [r7, #3]
 800dcb8:	4611      	mov	r1, r2
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fe fc8d 	bl	800c5da <USBD_LL_IsoINIncomplete>
}
 800dcc0:	bf00      	nop
 800dcc2:	3708      	adds	r7, #8
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fe fce3 	bl	800c6a2 <USBD_LL_DevConnected>
}
 800dcdc:	bf00      	nop
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f7fe fce0 	bl	800c6b8 <USBD_LL_DevDisconnected>
}
 800dcf8:	bf00      	nop
 800dcfa:	3708      	adds	r7, #8
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b082      	sub	sp, #8
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d140      	bne.n	800dd92 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800dd10:	4a22      	ldr	r2, [pc, #136]	; (800dd9c <USBD_LL_Init+0x9c>)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	4a20      	ldr	r2, [pc, #128]	; (800dd9c <USBD_LL_Init+0x9c>)
 800dd1c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800dd20:	4b1e      	ldr	r3, [pc, #120]	; (800dd9c <USBD_LL_Init+0x9c>)
 800dd22:	4a1f      	ldr	r2, [pc, #124]	; (800dda0 <USBD_LL_Init+0xa0>)
 800dd24:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800dd26:	4b1d      	ldr	r3, [pc, #116]	; (800dd9c <USBD_LL_Init+0x9c>)
 800dd28:	2209      	movs	r2, #9
 800dd2a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800dd2c:	4b1b      	ldr	r3, [pc, #108]	; (800dd9c <USBD_LL_Init+0x9c>)
 800dd2e:	2200      	movs	r2, #0
 800dd30:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800dd32:	4b1a      	ldr	r3, [pc, #104]	; (800dd9c <USBD_LL_Init+0x9c>)
 800dd34:	2200      	movs	r2, #0
 800dd36:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800dd38:	4b18      	ldr	r3, [pc, #96]	; (800dd9c <USBD_LL_Init+0x9c>)
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800dd3e:	4b17      	ldr	r3, [pc, #92]	; (800dd9c <USBD_LL_Init+0x9c>)
 800dd40:	2200      	movs	r2, #0
 800dd42:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800dd44:	4b15      	ldr	r3, [pc, #84]	; (800dd9c <USBD_LL_Init+0x9c>)
 800dd46:	2200      	movs	r2, #0
 800dd48:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800dd4a:	4b14      	ldr	r3, [pc, #80]	; (800dd9c <USBD_LL_Init+0x9c>)
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800dd50:	4b12      	ldr	r3, [pc, #72]	; (800dd9c <USBD_LL_Init+0x9c>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800dd56:	4b11      	ldr	r3, [pc, #68]	; (800dd9c <USBD_LL_Init+0x9c>)
 800dd58:	2200      	movs	r2, #0
 800dd5a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800dd5c:	4b0f      	ldr	r3, [pc, #60]	; (800dd9c <USBD_LL_Init+0x9c>)
 800dd5e:	2200      	movs	r2, #0
 800dd60:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800dd62:	480e      	ldr	r0, [pc, #56]	; (800dd9c <USBD_LL_Init+0x9c>)
 800dd64:	f7f3 fc9f 	bl	80016a6 <HAL_PCD_Init>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d001      	beq.n	800dd72 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800dd6e:	f7f2 fed7 	bl	8000b20 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800dd72:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd76:	4809      	ldr	r0, [pc, #36]	; (800dd9c <USBD_LL_Init+0x9c>)
 800dd78:	f7f4 ff1f 	bl	8002bba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800dd7c:	2280      	movs	r2, #128	; 0x80
 800dd7e:	2100      	movs	r1, #0
 800dd80:	4806      	ldr	r0, [pc, #24]	; (800dd9c <USBD_LL_Init+0x9c>)
 800dd82:	f7f4 fed3 	bl	8002b2c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800dd86:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800dd8a:	2101      	movs	r1, #1
 800dd8c:	4803      	ldr	r0, [pc, #12]	; (800dd9c <USBD_LL_Init+0x9c>)
 800dd8e:	f7f4 fecd 	bl	8002b2c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800dd92:	2300      	movs	r3, #0
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3708      	adds	r7, #8
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	240006dc 	.word	0x240006dc
 800dda0:	40040000 	.word	0x40040000

0800dda4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddac:	2300      	movs	r3, #0
 800ddae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7f3 fd7f 	bl	80018be <HAL_PCD_Start>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddc4:	7bfb      	ldrb	r3, [r7, #15]
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f000 f962 	bl	800e090 <USBD_Get_USB_Status>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3710      	adds	r7, #16
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b084      	sub	sp, #16
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
 800dde2:	4608      	mov	r0, r1
 800dde4:	4611      	mov	r1, r2
 800dde6:	461a      	mov	r2, r3
 800dde8:	4603      	mov	r3, r0
 800ddea:	70fb      	strb	r3, [r7, #3]
 800ddec:	460b      	mov	r3, r1
 800ddee:	70bb      	strb	r3, [r7, #2]
 800ddf0:	4613      	mov	r3, r2
 800ddf2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800de02:	78bb      	ldrb	r3, [r7, #2]
 800de04:	883a      	ldrh	r2, [r7, #0]
 800de06:	78f9      	ldrb	r1, [r7, #3]
 800de08:	f7f4 fa80 	bl	800230c <HAL_PCD_EP_Open>
 800de0c:	4603      	mov	r3, r0
 800de0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de10:	7bfb      	ldrb	r3, [r7, #15]
 800de12:	4618      	mov	r0, r3
 800de14:	f000 f93c 	bl	800e090 <USBD_Get_USB_Status>
 800de18:	4603      	mov	r3, r0
 800de1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3710      	adds	r7, #16
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de26:	b580      	push	{r7, lr}
 800de28:	b084      	sub	sp, #16
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
 800de2e:	460b      	mov	r3, r1
 800de30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de32:	2300      	movs	r3, #0
 800de34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de36:	2300      	movs	r3, #0
 800de38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de40:	78fa      	ldrb	r2, [r7, #3]
 800de42:	4611      	mov	r1, r2
 800de44:	4618      	mov	r0, r3
 800de46:	f7f4 fac9 	bl	80023dc <HAL_PCD_EP_Close>
 800de4a:	4603      	mov	r3, r0
 800de4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de4e:	7bfb      	ldrb	r3, [r7, #15]
 800de50:	4618      	mov	r0, r3
 800de52:	f000 f91d 	bl	800e090 <USBD_Get_USB_Status>
 800de56:	4603      	mov	r3, r0
 800de58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3710      	adds	r7, #16
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	460b      	mov	r3, r1
 800de6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de70:	2300      	movs	r3, #0
 800de72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de74:	2300      	movs	r3, #0
 800de76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de7e:	78fa      	ldrb	r2, [r7, #3]
 800de80:	4611      	mov	r1, r2
 800de82:	4618      	mov	r0, r3
 800de84:	f7f4 fc6b 	bl	800275e <HAL_PCD_EP_Flush>
 800de88:	4603      	mov	r3, r0
 800de8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de8c:	7bfb      	ldrb	r3, [r7, #15]
 800de8e:	4618      	mov	r0, r3
 800de90:	f000 f8fe 	bl	800e090 <USBD_Get_USB_Status>
 800de94:	4603      	mov	r3, r0
 800de96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de98:	7bbb      	ldrb	r3, [r7, #14]
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3710      	adds	r7, #16
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}

0800dea2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dea2:	b580      	push	{r7, lr}
 800dea4:	b084      	sub	sp, #16
 800dea6:	af00      	add	r7, sp, #0
 800dea8:	6078      	str	r0, [r7, #4]
 800deaa:	460b      	mov	r3, r1
 800deac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800deae:	2300      	movs	r3, #0
 800deb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800deb2:	2300      	movs	r3, #0
 800deb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800debc:	78fa      	ldrb	r2, [r7, #3]
 800debe:	4611      	mov	r1, r2
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7f4 fb62 	bl	800258a <HAL_PCD_EP_SetStall>
 800dec6:	4603      	mov	r3, r0
 800dec8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800deca:	7bfb      	ldrb	r3, [r7, #15]
 800decc:	4618      	mov	r0, r3
 800dece:	f000 f8df 	bl	800e090 <USBD_Get_USB_Status>
 800ded2:	4603      	mov	r3, r0
 800ded4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ded6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3710      	adds	r7, #16
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b084      	sub	sp, #16
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	460b      	mov	r3, r1
 800deea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800deec:	2300      	movs	r3, #0
 800deee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800def0:	2300      	movs	r3, #0
 800def2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800defa:	78fa      	ldrb	r2, [r7, #3]
 800defc:	4611      	mov	r1, r2
 800defe:	4618      	mov	r0, r3
 800df00:	f7f4 fba6 	bl	8002650 <HAL_PCD_EP_ClrStall>
 800df04:	4603      	mov	r3, r0
 800df06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df08:	7bfb      	ldrb	r3, [r7, #15]
 800df0a:	4618      	mov	r0, r3
 800df0c:	f000 f8c0 	bl	800e090 <USBD_Get_USB_Status>
 800df10:	4603      	mov	r3, r0
 800df12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df14:	7bbb      	ldrb	r3, [r7, #14]
}
 800df16:	4618      	mov	r0, r3
 800df18:	3710      	adds	r7, #16
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}

0800df1e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df1e:	b480      	push	{r7}
 800df20:	b085      	sub	sp, #20
 800df22:	af00      	add	r7, sp, #0
 800df24:	6078      	str	r0, [r7, #4]
 800df26:	460b      	mov	r3, r1
 800df28:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800df30:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800df32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800df36:	2b00      	cmp	r3, #0
 800df38:	da0b      	bge.n	800df52 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800df3a:	78fb      	ldrb	r3, [r7, #3]
 800df3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df40:	68f9      	ldr	r1, [r7, #12]
 800df42:	4613      	mov	r3, r2
 800df44:	00db      	lsls	r3, r3, #3
 800df46:	4413      	add	r3, r2
 800df48:	009b      	lsls	r3, r3, #2
 800df4a:	440b      	add	r3, r1
 800df4c:	3316      	adds	r3, #22
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	e00b      	b.n	800df6a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800df52:	78fb      	ldrb	r3, [r7, #3]
 800df54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df58:	68f9      	ldr	r1, [r7, #12]
 800df5a:	4613      	mov	r3, r2
 800df5c:	00db      	lsls	r3, r3, #3
 800df5e:	4413      	add	r3, r2
 800df60:	009b      	lsls	r3, r3, #2
 800df62:	440b      	add	r3, r1
 800df64:	f203 2356 	addw	r3, r3, #598	; 0x256
 800df68:	781b      	ldrb	r3, [r3, #0]
  }
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3714      	adds	r7, #20
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr

0800df76 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800df76:	b580      	push	{r7, lr}
 800df78:	b084      	sub	sp, #16
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
 800df7e:	460b      	mov	r3, r1
 800df80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df82:	2300      	movs	r3, #0
 800df84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df86:	2300      	movs	r3, #0
 800df88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800df90:	78fa      	ldrb	r2, [r7, #3]
 800df92:	4611      	mov	r1, r2
 800df94:	4618      	mov	r0, r3
 800df96:	f7f4 f995 	bl	80022c4 <HAL_PCD_SetAddress>
 800df9a:	4603      	mov	r3, r0
 800df9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df9e:	7bfb      	ldrb	r3, [r7, #15]
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f000 f875 	bl	800e090 <USBD_Get_USB_Status>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3710      	adds	r7, #16
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b086      	sub	sp, #24
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	60f8      	str	r0, [r7, #12]
 800dfbc:	607a      	str	r2, [r7, #4]
 800dfbe:	603b      	str	r3, [r7, #0]
 800dfc0:	460b      	mov	r3, r1
 800dfc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dfd2:	7af9      	ldrb	r1, [r7, #11]
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	f7f4 fa9d 	bl	8002516 <HAL_PCD_EP_Transmit>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfe0:	7dfb      	ldrb	r3, [r7, #23]
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f000 f854 	bl	800e090 <USBD_Get_USB_Status>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dfec:	7dbb      	ldrb	r3, [r7, #22]
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3718      	adds	r7, #24
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}

0800dff6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dff6:	b580      	push	{r7, lr}
 800dff8:	b086      	sub	sp, #24
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	60f8      	str	r0, [r7, #12]
 800dffe:	607a      	str	r2, [r7, #4]
 800e000:	603b      	str	r3, [r7, #0]
 800e002:	460b      	mov	r3, r1
 800e004:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e006:	2300      	movs	r3, #0
 800e008:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e00a:	2300      	movs	r3, #0
 800e00c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e014:	7af9      	ldrb	r1, [r7, #11]
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	687a      	ldr	r2, [r7, #4]
 800e01a:	f7f4 fa29 	bl	8002470 <HAL_PCD_EP_Receive>
 800e01e:	4603      	mov	r3, r0
 800e020:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e022:	7dfb      	ldrb	r3, [r7, #23]
 800e024:	4618      	mov	r0, r3
 800e026:	f000 f833 	bl	800e090 <USBD_Get_USB_Status>
 800e02a:	4603      	mov	r3, r0
 800e02c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e02e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e030:	4618      	mov	r0, r3
 800e032:	3718      	adds	r7, #24
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	460b      	mov	r3, r1
 800e042:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e04a:	78fa      	ldrb	r2, [r7, #3]
 800e04c:	4611      	mov	r1, r2
 800e04e:	4618      	mov	r0, r3
 800e050:	f7f4 fa49 	bl	80024e6 <HAL_PCD_EP_GetRxCount>
 800e054:	4603      	mov	r3, r0
}
 800e056:	4618      	mov	r0, r3
 800e058:	3708      	adds	r7, #8
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
	...

0800e060 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e068:	4b03      	ldr	r3, [pc, #12]	; (800e078 <USBD_static_malloc+0x18>)
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	370c      	adds	r7, #12
 800e06e:	46bd      	mov	sp, r7
 800e070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e074:	4770      	bx	lr
 800e076:	bf00      	nop
 800e078:	24000bc0 	.word	0x24000bc0

0800e07c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e07c:	b480      	push	{r7}
 800e07e:	b083      	sub	sp, #12
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800e084:	bf00      	nop
 800e086:	370c      	adds	r7, #12
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr

0800e090 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e090:	b480      	push	{r7}
 800e092:	b085      	sub	sp, #20
 800e094:	af00      	add	r7, sp, #0
 800e096:	4603      	mov	r3, r0
 800e098:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e09a:	2300      	movs	r3, #0
 800e09c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e09e:	79fb      	ldrb	r3, [r7, #7]
 800e0a0:	2b03      	cmp	r3, #3
 800e0a2:	d817      	bhi.n	800e0d4 <USBD_Get_USB_Status+0x44>
 800e0a4:	a201      	add	r2, pc, #4	; (adr r2, 800e0ac <USBD_Get_USB_Status+0x1c>)
 800e0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0aa:	bf00      	nop
 800e0ac:	0800e0bd 	.word	0x0800e0bd
 800e0b0:	0800e0c3 	.word	0x0800e0c3
 800e0b4:	0800e0c9 	.word	0x0800e0c9
 800e0b8:	0800e0cf 	.word	0x0800e0cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	73fb      	strb	r3, [r7, #15]
    break;
 800e0c0:	e00b      	b.n	800e0da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e0c2:	2303      	movs	r3, #3
 800e0c4:	73fb      	strb	r3, [r7, #15]
    break;
 800e0c6:	e008      	b.n	800e0da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	73fb      	strb	r3, [r7, #15]
    break;
 800e0cc:	e005      	b.n	800e0da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e0ce:	2303      	movs	r3, #3
 800e0d0:	73fb      	strb	r3, [r7, #15]
    break;
 800e0d2:	e002      	b.n	800e0da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e0d4:	2303      	movs	r3, #3
 800e0d6:	73fb      	strb	r3, [r7, #15]
    break;
 800e0d8:	bf00      	nop
  }
  return usb_status;
 800e0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3714      	adds	r7, #20
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <std>:
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	b510      	push	{r4, lr}
 800e0ec:	4604      	mov	r4, r0
 800e0ee:	e9c0 3300 	strd	r3, r3, [r0]
 800e0f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e0f6:	6083      	str	r3, [r0, #8]
 800e0f8:	8181      	strh	r1, [r0, #12]
 800e0fa:	6643      	str	r3, [r0, #100]	; 0x64
 800e0fc:	81c2      	strh	r2, [r0, #14]
 800e0fe:	6183      	str	r3, [r0, #24]
 800e100:	4619      	mov	r1, r3
 800e102:	2208      	movs	r2, #8
 800e104:	305c      	adds	r0, #92	; 0x5c
 800e106:	f000 f8fc 	bl	800e302 <memset>
 800e10a:	4b05      	ldr	r3, [pc, #20]	; (800e120 <std+0x38>)
 800e10c:	6263      	str	r3, [r4, #36]	; 0x24
 800e10e:	4b05      	ldr	r3, [pc, #20]	; (800e124 <std+0x3c>)
 800e110:	62a3      	str	r3, [r4, #40]	; 0x28
 800e112:	4b05      	ldr	r3, [pc, #20]	; (800e128 <std+0x40>)
 800e114:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e116:	4b05      	ldr	r3, [pc, #20]	; (800e12c <std+0x44>)
 800e118:	6224      	str	r4, [r4, #32]
 800e11a:	6323      	str	r3, [r4, #48]	; 0x30
 800e11c:	bd10      	pop	{r4, pc}
 800e11e:	bf00      	nop
 800e120:	0800e27d 	.word	0x0800e27d
 800e124:	0800e29f 	.word	0x0800e29f
 800e128:	0800e2d7 	.word	0x0800e2d7
 800e12c:	0800e2fb 	.word	0x0800e2fb

0800e130 <stdio_exit_handler>:
 800e130:	4a02      	ldr	r2, [pc, #8]	; (800e13c <stdio_exit_handler+0xc>)
 800e132:	4903      	ldr	r1, [pc, #12]	; (800e140 <stdio_exit_handler+0x10>)
 800e134:	4803      	ldr	r0, [pc, #12]	; (800e144 <stdio_exit_handler+0x14>)
 800e136:	f000 b869 	b.w	800e20c <_fwalk_sglue>
 800e13a:	bf00      	nop
 800e13c:	24000100 	.word	0x24000100
 800e140:	0800ec9d 	.word	0x0800ec9d
 800e144:	2400010c 	.word	0x2400010c

0800e148 <cleanup_stdio>:
 800e148:	6841      	ldr	r1, [r0, #4]
 800e14a:	4b0c      	ldr	r3, [pc, #48]	; (800e17c <cleanup_stdio+0x34>)
 800e14c:	4299      	cmp	r1, r3
 800e14e:	b510      	push	{r4, lr}
 800e150:	4604      	mov	r4, r0
 800e152:	d001      	beq.n	800e158 <cleanup_stdio+0x10>
 800e154:	f000 fda2 	bl	800ec9c <_fflush_r>
 800e158:	68a1      	ldr	r1, [r4, #8]
 800e15a:	4b09      	ldr	r3, [pc, #36]	; (800e180 <cleanup_stdio+0x38>)
 800e15c:	4299      	cmp	r1, r3
 800e15e:	d002      	beq.n	800e166 <cleanup_stdio+0x1e>
 800e160:	4620      	mov	r0, r4
 800e162:	f000 fd9b 	bl	800ec9c <_fflush_r>
 800e166:	68e1      	ldr	r1, [r4, #12]
 800e168:	4b06      	ldr	r3, [pc, #24]	; (800e184 <cleanup_stdio+0x3c>)
 800e16a:	4299      	cmp	r1, r3
 800e16c:	d004      	beq.n	800e178 <cleanup_stdio+0x30>
 800e16e:	4620      	mov	r0, r4
 800e170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e174:	f000 bd92 	b.w	800ec9c <_fflush_r>
 800e178:	bd10      	pop	{r4, pc}
 800e17a:	bf00      	nop
 800e17c:	24000e38 	.word	0x24000e38
 800e180:	24000ea0 	.word	0x24000ea0
 800e184:	24000f08 	.word	0x24000f08

0800e188 <global_stdio_init.part.0>:
 800e188:	b510      	push	{r4, lr}
 800e18a:	4b0b      	ldr	r3, [pc, #44]	; (800e1b8 <global_stdio_init.part.0+0x30>)
 800e18c:	4c0b      	ldr	r4, [pc, #44]	; (800e1bc <global_stdio_init.part.0+0x34>)
 800e18e:	4a0c      	ldr	r2, [pc, #48]	; (800e1c0 <global_stdio_init.part.0+0x38>)
 800e190:	601a      	str	r2, [r3, #0]
 800e192:	4620      	mov	r0, r4
 800e194:	2200      	movs	r2, #0
 800e196:	2104      	movs	r1, #4
 800e198:	f7ff ffa6 	bl	800e0e8 <std>
 800e19c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	2109      	movs	r1, #9
 800e1a4:	f7ff ffa0 	bl	800e0e8 <std>
 800e1a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e1ac:	2202      	movs	r2, #2
 800e1ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1b2:	2112      	movs	r1, #18
 800e1b4:	f7ff bf98 	b.w	800e0e8 <std>
 800e1b8:	24000f70 	.word	0x24000f70
 800e1bc:	24000e38 	.word	0x24000e38
 800e1c0:	0800e131 	.word	0x0800e131

0800e1c4 <__sfp_lock_acquire>:
 800e1c4:	4801      	ldr	r0, [pc, #4]	; (800e1cc <__sfp_lock_acquire+0x8>)
 800e1c6:	f000 b915 	b.w	800e3f4 <__retarget_lock_acquire_recursive>
 800e1ca:	bf00      	nop
 800e1cc:	24000f79 	.word	0x24000f79

0800e1d0 <__sfp_lock_release>:
 800e1d0:	4801      	ldr	r0, [pc, #4]	; (800e1d8 <__sfp_lock_release+0x8>)
 800e1d2:	f000 b910 	b.w	800e3f6 <__retarget_lock_release_recursive>
 800e1d6:	bf00      	nop
 800e1d8:	24000f79 	.word	0x24000f79

0800e1dc <__sinit>:
 800e1dc:	b510      	push	{r4, lr}
 800e1de:	4604      	mov	r4, r0
 800e1e0:	f7ff fff0 	bl	800e1c4 <__sfp_lock_acquire>
 800e1e4:	6a23      	ldr	r3, [r4, #32]
 800e1e6:	b11b      	cbz	r3, 800e1f0 <__sinit+0x14>
 800e1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1ec:	f7ff bff0 	b.w	800e1d0 <__sfp_lock_release>
 800e1f0:	4b04      	ldr	r3, [pc, #16]	; (800e204 <__sinit+0x28>)
 800e1f2:	6223      	str	r3, [r4, #32]
 800e1f4:	4b04      	ldr	r3, [pc, #16]	; (800e208 <__sinit+0x2c>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d1f5      	bne.n	800e1e8 <__sinit+0xc>
 800e1fc:	f7ff ffc4 	bl	800e188 <global_stdio_init.part.0>
 800e200:	e7f2      	b.n	800e1e8 <__sinit+0xc>
 800e202:	bf00      	nop
 800e204:	0800e149 	.word	0x0800e149
 800e208:	24000f70 	.word	0x24000f70

0800e20c <_fwalk_sglue>:
 800e20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e210:	4607      	mov	r7, r0
 800e212:	4688      	mov	r8, r1
 800e214:	4614      	mov	r4, r2
 800e216:	2600      	movs	r6, #0
 800e218:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e21c:	f1b9 0901 	subs.w	r9, r9, #1
 800e220:	d505      	bpl.n	800e22e <_fwalk_sglue+0x22>
 800e222:	6824      	ldr	r4, [r4, #0]
 800e224:	2c00      	cmp	r4, #0
 800e226:	d1f7      	bne.n	800e218 <_fwalk_sglue+0xc>
 800e228:	4630      	mov	r0, r6
 800e22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e22e:	89ab      	ldrh	r3, [r5, #12]
 800e230:	2b01      	cmp	r3, #1
 800e232:	d907      	bls.n	800e244 <_fwalk_sglue+0x38>
 800e234:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e238:	3301      	adds	r3, #1
 800e23a:	d003      	beq.n	800e244 <_fwalk_sglue+0x38>
 800e23c:	4629      	mov	r1, r5
 800e23e:	4638      	mov	r0, r7
 800e240:	47c0      	blx	r8
 800e242:	4306      	orrs	r6, r0
 800e244:	3568      	adds	r5, #104	; 0x68
 800e246:	e7e9      	b.n	800e21c <_fwalk_sglue+0x10>

0800e248 <iprintf>:
 800e248:	b40f      	push	{r0, r1, r2, r3}
 800e24a:	b507      	push	{r0, r1, r2, lr}
 800e24c:	4906      	ldr	r1, [pc, #24]	; (800e268 <iprintf+0x20>)
 800e24e:	ab04      	add	r3, sp, #16
 800e250:	6808      	ldr	r0, [r1, #0]
 800e252:	f853 2b04 	ldr.w	r2, [r3], #4
 800e256:	6881      	ldr	r1, [r0, #8]
 800e258:	9301      	str	r3, [sp, #4]
 800e25a:	f000 f9ef 	bl	800e63c <_vfiprintf_r>
 800e25e:	b003      	add	sp, #12
 800e260:	f85d eb04 	ldr.w	lr, [sp], #4
 800e264:	b004      	add	sp, #16
 800e266:	4770      	bx	lr
 800e268:	24000158 	.word	0x24000158

0800e26c <putchar>:
 800e26c:	4b02      	ldr	r3, [pc, #8]	; (800e278 <putchar+0xc>)
 800e26e:	4601      	mov	r1, r0
 800e270:	6818      	ldr	r0, [r3, #0]
 800e272:	6882      	ldr	r2, [r0, #8]
 800e274:	f000 bd3a 	b.w	800ecec <_putc_r>
 800e278:	24000158 	.word	0x24000158

0800e27c <__sread>:
 800e27c:	b510      	push	{r4, lr}
 800e27e:	460c      	mov	r4, r1
 800e280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e284:	f000 f868 	bl	800e358 <_read_r>
 800e288:	2800      	cmp	r0, #0
 800e28a:	bfab      	itete	ge
 800e28c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e28e:	89a3      	ldrhlt	r3, [r4, #12]
 800e290:	181b      	addge	r3, r3, r0
 800e292:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e296:	bfac      	ite	ge
 800e298:	6563      	strge	r3, [r4, #84]	; 0x54
 800e29a:	81a3      	strhlt	r3, [r4, #12]
 800e29c:	bd10      	pop	{r4, pc}

0800e29e <__swrite>:
 800e29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2a2:	461f      	mov	r7, r3
 800e2a4:	898b      	ldrh	r3, [r1, #12]
 800e2a6:	05db      	lsls	r3, r3, #23
 800e2a8:	4605      	mov	r5, r0
 800e2aa:	460c      	mov	r4, r1
 800e2ac:	4616      	mov	r6, r2
 800e2ae:	d505      	bpl.n	800e2bc <__swrite+0x1e>
 800e2b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2b4:	2302      	movs	r3, #2
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	f000 f83c 	bl	800e334 <_lseek_r>
 800e2bc:	89a3      	ldrh	r3, [r4, #12]
 800e2be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e2c6:	81a3      	strh	r3, [r4, #12]
 800e2c8:	4632      	mov	r2, r6
 800e2ca:	463b      	mov	r3, r7
 800e2cc:	4628      	mov	r0, r5
 800e2ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2d2:	f000 b853 	b.w	800e37c <_write_r>

0800e2d6 <__sseek>:
 800e2d6:	b510      	push	{r4, lr}
 800e2d8:	460c      	mov	r4, r1
 800e2da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2de:	f000 f829 	bl	800e334 <_lseek_r>
 800e2e2:	1c43      	adds	r3, r0, #1
 800e2e4:	89a3      	ldrh	r3, [r4, #12]
 800e2e6:	bf15      	itete	ne
 800e2e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e2ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e2ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e2f2:	81a3      	strheq	r3, [r4, #12]
 800e2f4:	bf18      	it	ne
 800e2f6:	81a3      	strhne	r3, [r4, #12]
 800e2f8:	bd10      	pop	{r4, pc}

0800e2fa <__sclose>:
 800e2fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2fe:	f000 b809 	b.w	800e314 <_close_r>

0800e302 <memset>:
 800e302:	4402      	add	r2, r0
 800e304:	4603      	mov	r3, r0
 800e306:	4293      	cmp	r3, r2
 800e308:	d100      	bne.n	800e30c <memset+0xa>
 800e30a:	4770      	bx	lr
 800e30c:	f803 1b01 	strb.w	r1, [r3], #1
 800e310:	e7f9      	b.n	800e306 <memset+0x4>
	...

0800e314 <_close_r>:
 800e314:	b538      	push	{r3, r4, r5, lr}
 800e316:	4d06      	ldr	r5, [pc, #24]	; (800e330 <_close_r+0x1c>)
 800e318:	2300      	movs	r3, #0
 800e31a:	4604      	mov	r4, r0
 800e31c:	4608      	mov	r0, r1
 800e31e:	602b      	str	r3, [r5, #0]
 800e320:	f7f2 fd19 	bl	8000d56 <_close>
 800e324:	1c43      	adds	r3, r0, #1
 800e326:	d102      	bne.n	800e32e <_close_r+0x1a>
 800e328:	682b      	ldr	r3, [r5, #0]
 800e32a:	b103      	cbz	r3, 800e32e <_close_r+0x1a>
 800e32c:	6023      	str	r3, [r4, #0]
 800e32e:	bd38      	pop	{r3, r4, r5, pc}
 800e330:	24000f74 	.word	0x24000f74

0800e334 <_lseek_r>:
 800e334:	b538      	push	{r3, r4, r5, lr}
 800e336:	4d07      	ldr	r5, [pc, #28]	; (800e354 <_lseek_r+0x20>)
 800e338:	4604      	mov	r4, r0
 800e33a:	4608      	mov	r0, r1
 800e33c:	4611      	mov	r1, r2
 800e33e:	2200      	movs	r2, #0
 800e340:	602a      	str	r2, [r5, #0]
 800e342:	461a      	mov	r2, r3
 800e344:	f7f2 fd2e 	bl	8000da4 <_lseek>
 800e348:	1c43      	adds	r3, r0, #1
 800e34a:	d102      	bne.n	800e352 <_lseek_r+0x1e>
 800e34c:	682b      	ldr	r3, [r5, #0]
 800e34e:	b103      	cbz	r3, 800e352 <_lseek_r+0x1e>
 800e350:	6023      	str	r3, [r4, #0]
 800e352:	bd38      	pop	{r3, r4, r5, pc}
 800e354:	24000f74 	.word	0x24000f74

0800e358 <_read_r>:
 800e358:	b538      	push	{r3, r4, r5, lr}
 800e35a:	4d07      	ldr	r5, [pc, #28]	; (800e378 <_read_r+0x20>)
 800e35c:	4604      	mov	r4, r0
 800e35e:	4608      	mov	r0, r1
 800e360:	4611      	mov	r1, r2
 800e362:	2200      	movs	r2, #0
 800e364:	602a      	str	r2, [r5, #0]
 800e366:	461a      	mov	r2, r3
 800e368:	f7f2 fcbc 	bl	8000ce4 <_read>
 800e36c:	1c43      	adds	r3, r0, #1
 800e36e:	d102      	bne.n	800e376 <_read_r+0x1e>
 800e370:	682b      	ldr	r3, [r5, #0]
 800e372:	b103      	cbz	r3, 800e376 <_read_r+0x1e>
 800e374:	6023      	str	r3, [r4, #0]
 800e376:	bd38      	pop	{r3, r4, r5, pc}
 800e378:	24000f74 	.word	0x24000f74

0800e37c <_write_r>:
 800e37c:	b538      	push	{r3, r4, r5, lr}
 800e37e:	4d07      	ldr	r5, [pc, #28]	; (800e39c <_write_r+0x20>)
 800e380:	4604      	mov	r4, r0
 800e382:	4608      	mov	r0, r1
 800e384:	4611      	mov	r1, r2
 800e386:	2200      	movs	r2, #0
 800e388:	602a      	str	r2, [r5, #0]
 800e38a:	461a      	mov	r2, r3
 800e38c:	f7f2 fcc7 	bl	8000d1e <_write>
 800e390:	1c43      	adds	r3, r0, #1
 800e392:	d102      	bne.n	800e39a <_write_r+0x1e>
 800e394:	682b      	ldr	r3, [r5, #0]
 800e396:	b103      	cbz	r3, 800e39a <_write_r+0x1e>
 800e398:	6023      	str	r3, [r4, #0]
 800e39a:	bd38      	pop	{r3, r4, r5, pc}
 800e39c:	24000f74 	.word	0x24000f74

0800e3a0 <__errno>:
 800e3a0:	4b01      	ldr	r3, [pc, #4]	; (800e3a8 <__errno+0x8>)
 800e3a2:	6818      	ldr	r0, [r3, #0]
 800e3a4:	4770      	bx	lr
 800e3a6:	bf00      	nop
 800e3a8:	24000158 	.word	0x24000158

0800e3ac <__libc_init_array>:
 800e3ac:	b570      	push	{r4, r5, r6, lr}
 800e3ae:	4d0d      	ldr	r5, [pc, #52]	; (800e3e4 <__libc_init_array+0x38>)
 800e3b0:	4c0d      	ldr	r4, [pc, #52]	; (800e3e8 <__libc_init_array+0x3c>)
 800e3b2:	1b64      	subs	r4, r4, r5
 800e3b4:	10a4      	asrs	r4, r4, #2
 800e3b6:	2600      	movs	r6, #0
 800e3b8:	42a6      	cmp	r6, r4
 800e3ba:	d109      	bne.n	800e3d0 <__libc_init_array+0x24>
 800e3bc:	4d0b      	ldr	r5, [pc, #44]	; (800e3ec <__libc_init_array+0x40>)
 800e3be:	4c0c      	ldr	r4, [pc, #48]	; (800e3f0 <__libc_init_array+0x44>)
 800e3c0:	f000 fdf2 	bl	800efa8 <_init>
 800e3c4:	1b64      	subs	r4, r4, r5
 800e3c6:	10a4      	asrs	r4, r4, #2
 800e3c8:	2600      	movs	r6, #0
 800e3ca:	42a6      	cmp	r6, r4
 800e3cc:	d105      	bne.n	800e3da <__libc_init_array+0x2e>
 800e3ce:	bd70      	pop	{r4, r5, r6, pc}
 800e3d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3d4:	4798      	blx	r3
 800e3d6:	3601      	adds	r6, #1
 800e3d8:	e7ee      	b.n	800e3b8 <__libc_init_array+0xc>
 800e3da:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3de:	4798      	blx	r3
 800e3e0:	3601      	adds	r6, #1
 800e3e2:	e7f2      	b.n	800e3ca <__libc_init_array+0x1e>
 800e3e4:	0800f0a4 	.word	0x0800f0a4
 800e3e8:	0800f0a4 	.word	0x0800f0a4
 800e3ec:	0800f0a4 	.word	0x0800f0a4
 800e3f0:	0800f0a8 	.word	0x0800f0a8

0800e3f4 <__retarget_lock_acquire_recursive>:
 800e3f4:	4770      	bx	lr

0800e3f6 <__retarget_lock_release_recursive>:
 800e3f6:	4770      	bx	lr

0800e3f8 <_free_r>:
 800e3f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3fa:	2900      	cmp	r1, #0
 800e3fc:	d044      	beq.n	800e488 <_free_r+0x90>
 800e3fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e402:	9001      	str	r0, [sp, #4]
 800e404:	2b00      	cmp	r3, #0
 800e406:	f1a1 0404 	sub.w	r4, r1, #4
 800e40a:	bfb8      	it	lt
 800e40c:	18e4      	addlt	r4, r4, r3
 800e40e:	f000 f8df 	bl	800e5d0 <__malloc_lock>
 800e412:	4a1e      	ldr	r2, [pc, #120]	; (800e48c <_free_r+0x94>)
 800e414:	9801      	ldr	r0, [sp, #4]
 800e416:	6813      	ldr	r3, [r2, #0]
 800e418:	b933      	cbnz	r3, 800e428 <_free_r+0x30>
 800e41a:	6063      	str	r3, [r4, #4]
 800e41c:	6014      	str	r4, [r2, #0]
 800e41e:	b003      	add	sp, #12
 800e420:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e424:	f000 b8da 	b.w	800e5dc <__malloc_unlock>
 800e428:	42a3      	cmp	r3, r4
 800e42a:	d908      	bls.n	800e43e <_free_r+0x46>
 800e42c:	6825      	ldr	r5, [r4, #0]
 800e42e:	1961      	adds	r1, r4, r5
 800e430:	428b      	cmp	r3, r1
 800e432:	bf01      	itttt	eq
 800e434:	6819      	ldreq	r1, [r3, #0]
 800e436:	685b      	ldreq	r3, [r3, #4]
 800e438:	1949      	addeq	r1, r1, r5
 800e43a:	6021      	streq	r1, [r4, #0]
 800e43c:	e7ed      	b.n	800e41a <_free_r+0x22>
 800e43e:	461a      	mov	r2, r3
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	b10b      	cbz	r3, 800e448 <_free_r+0x50>
 800e444:	42a3      	cmp	r3, r4
 800e446:	d9fa      	bls.n	800e43e <_free_r+0x46>
 800e448:	6811      	ldr	r1, [r2, #0]
 800e44a:	1855      	adds	r5, r2, r1
 800e44c:	42a5      	cmp	r5, r4
 800e44e:	d10b      	bne.n	800e468 <_free_r+0x70>
 800e450:	6824      	ldr	r4, [r4, #0]
 800e452:	4421      	add	r1, r4
 800e454:	1854      	adds	r4, r2, r1
 800e456:	42a3      	cmp	r3, r4
 800e458:	6011      	str	r1, [r2, #0]
 800e45a:	d1e0      	bne.n	800e41e <_free_r+0x26>
 800e45c:	681c      	ldr	r4, [r3, #0]
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	6053      	str	r3, [r2, #4]
 800e462:	440c      	add	r4, r1
 800e464:	6014      	str	r4, [r2, #0]
 800e466:	e7da      	b.n	800e41e <_free_r+0x26>
 800e468:	d902      	bls.n	800e470 <_free_r+0x78>
 800e46a:	230c      	movs	r3, #12
 800e46c:	6003      	str	r3, [r0, #0]
 800e46e:	e7d6      	b.n	800e41e <_free_r+0x26>
 800e470:	6825      	ldr	r5, [r4, #0]
 800e472:	1961      	adds	r1, r4, r5
 800e474:	428b      	cmp	r3, r1
 800e476:	bf04      	itt	eq
 800e478:	6819      	ldreq	r1, [r3, #0]
 800e47a:	685b      	ldreq	r3, [r3, #4]
 800e47c:	6063      	str	r3, [r4, #4]
 800e47e:	bf04      	itt	eq
 800e480:	1949      	addeq	r1, r1, r5
 800e482:	6021      	streq	r1, [r4, #0]
 800e484:	6054      	str	r4, [r2, #4]
 800e486:	e7ca      	b.n	800e41e <_free_r+0x26>
 800e488:	b003      	add	sp, #12
 800e48a:	bd30      	pop	{r4, r5, pc}
 800e48c:	24000f7c 	.word	0x24000f7c

0800e490 <sbrk_aligned>:
 800e490:	b570      	push	{r4, r5, r6, lr}
 800e492:	4e0e      	ldr	r6, [pc, #56]	; (800e4cc <sbrk_aligned+0x3c>)
 800e494:	460c      	mov	r4, r1
 800e496:	6831      	ldr	r1, [r6, #0]
 800e498:	4605      	mov	r5, r0
 800e49a:	b911      	cbnz	r1, 800e4a2 <sbrk_aligned+0x12>
 800e49c:	f000 fcf0 	bl	800ee80 <_sbrk_r>
 800e4a0:	6030      	str	r0, [r6, #0]
 800e4a2:	4621      	mov	r1, r4
 800e4a4:	4628      	mov	r0, r5
 800e4a6:	f000 fceb 	bl	800ee80 <_sbrk_r>
 800e4aa:	1c43      	adds	r3, r0, #1
 800e4ac:	d00a      	beq.n	800e4c4 <sbrk_aligned+0x34>
 800e4ae:	1cc4      	adds	r4, r0, #3
 800e4b0:	f024 0403 	bic.w	r4, r4, #3
 800e4b4:	42a0      	cmp	r0, r4
 800e4b6:	d007      	beq.n	800e4c8 <sbrk_aligned+0x38>
 800e4b8:	1a21      	subs	r1, r4, r0
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	f000 fce0 	bl	800ee80 <_sbrk_r>
 800e4c0:	3001      	adds	r0, #1
 800e4c2:	d101      	bne.n	800e4c8 <sbrk_aligned+0x38>
 800e4c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	bd70      	pop	{r4, r5, r6, pc}
 800e4cc:	24000f80 	.word	0x24000f80

0800e4d0 <_malloc_r>:
 800e4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4d4:	1ccd      	adds	r5, r1, #3
 800e4d6:	f025 0503 	bic.w	r5, r5, #3
 800e4da:	3508      	adds	r5, #8
 800e4dc:	2d0c      	cmp	r5, #12
 800e4de:	bf38      	it	cc
 800e4e0:	250c      	movcc	r5, #12
 800e4e2:	2d00      	cmp	r5, #0
 800e4e4:	4607      	mov	r7, r0
 800e4e6:	db01      	blt.n	800e4ec <_malloc_r+0x1c>
 800e4e8:	42a9      	cmp	r1, r5
 800e4ea:	d905      	bls.n	800e4f8 <_malloc_r+0x28>
 800e4ec:	230c      	movs	r3, #12
 800e4ee:	603b      	str	r3, [r7, #0]
 800e4f0:	2600      	movs	r6, #0
 800e4f2:	4630      	mov	r0, r6
 800e4f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e5cc <_malloc_r+0xfc>
 800e4fc:	f000 f868 	bl	800e5d0 <__malloc_lock>
 800e500:	f8d8 3000 	ldr.w	r3, [r8]
 800e504:	461c      	mov	r4, r3
 800e506:	bb5c      	cbnz	r4, 800e560 <_malloc_r+0x90>
 800e508:	4629      	mov	r1, r5
 800e50a:	4638      	mov	r0, r7
 800e50c:	f7ff ffc0 	bl	800e490 <sbrk_aligned>
 800e510:	1c43      	adds	r3, r0, #1
 800e512:	4604      	mov	r4, r0
 800e514:	d155      	bne.n	800e5c2 <_malloc_r+0xf2>
 800e516:	f8d8 4000 	ldr.w	r4, [r8]
 800e51a:	4626      	mov	r6, r4
 800e51c:	2e00      	cmp	r6, #0
 800e51e:	d145      	bne.n	800e5ac <_malloc_r+0xdc>
 800e520:	2c00      	cmp	r4, #0
 800e522:	d048      	beq.n	800e5b6 <_malloc_r+0xe6>
 800e524:	6823      	ldr	r3, [r4, #0]
 800e526:	4631      	mov	r1, r6
 800e528:	4638      	mov	r0, r7
 800e52a:	eb04 0903 	add.w	r9, r4, r3
 800e52e:	f000 fca7 	bl	800ee80 <_sbrk_r>
 800e532:	4581      	cmp	r9, r0
 800e534:	d13f      	bne.n	800e5b6 <_malloc_r+0xe6>
 800e536:	6821      	ldr	r1, [r4, #0]
 800e538:	1a6d      	subs	r5, r5, r1
 800e53a:	4629      	mov	r1, r5
 800e53c:	4638      	mov	r0, r7
 800e53e:	f7ff ffa7 	bl	800e490 <sbrk_aligned>
 800e542:	3001      	adds	r0, #1
 800e544:	d037      	beq.n	800e5b6 <_malloc_r+0xe6>
 800e546:	6823      	ldr	r3, [r4, #0]
 800e548:	442b      	add	r3, r5
 800e54a:	6023      	str	r3, [r4, #0]
 800e54c:	f8d8 3000 	ldr.w	r3, [r8]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d038      	beq.n	800e5c6 <_malloc_r+0xf6>
 800e554:	685a      	ldr	r2, [r3, #4]
 800e556:	42a2      	cmp	r2, r4
 800e558:	d12b      	bne.n	800e5b2 <_malloc_r+0xe2>
 800e55a:	2200      	movs	r2, #0
 800e55c:	605a      	str	r2, [r3, #4]
 800e55e:	e00f      	b.n	800e580 <_malloc_r+0xb0>
 800e560:	6822      	ldr	r2, [r4, #0]
 800e562:	1b52      	subs	r2, r2, r5
 800e564:	d41f      	bmi.n	800e5a6 <_malloc_r+0xd6>
 800e566:	2a0b      	cmp	r2, #11
 800e568:	d917      	bls.n	800e59a <_malloc_r+0xca>
 800e56a:	1961      	adds	r1, r4, r5
 800e56c:	42a3      	cmp	r3, r4
 800e56e:	6025      	str	r5, [r4, #0]
 800e570:	bf18      	it	ne
 800e572:	6059      	strne	r1, [r3, #4]
 800e574:	6863      	ldr	r3, [r4, #4]
 800e576:	bf08      	it	eq
 800e578:	f8c8 1000 	streq.w	r1, [r8]
 800e57c:	5162      	str	r2, [r4, r5]
 800e57e:	604b      	str	r3, [r1, #4]
 800e580:	4638      	mov	r0, r7
 800e582:	f104 060b 	add.w	r6, r4, #11
 800e586:	f000 f829 	bl	800e5dc <__malloc_unlock>
 800e58a:	f026 0607 	bic.w	r6, r6, #7
 800e58e:	1d23      	adds	r3, r4, #4
 800e590:	1af2      	subs	r2, r6, r3
 800e592:	d0ae      	beq.n	800e4f2 <_malloc_r+0x22>
 800e594:	1b9b      	subs	r3, r3, r6
 800e596:	50a3      	str	r3, [r4, r2]
 800e598:	e7ab      	b.n	800e4f2 <_malloc_r+0x22>
 800e59a:	42a3      	cmp	r3, r4
 800e59c:	6862      	ldr	r2, [r4, #4]
 800e59e:	d1dd      	bne.n	800e55c <_malloc_r+0x8c>
 800e5a0:	f8c8 2000 	str.w	r2, [r8]
 800e5a4:	e7ec      	b.n	800e580 <_malloc_r+0xb0>
 800e5a6:	4623      	mov	r3, r4
 800e5a8:	6864      	ldr	r4, [r4, #4]
 800e5aa:	e7ac      	b.n	800e506 <_malloc_r+0x36>
 800e5ac:	4634      	mov	r4, r6
 800e5ae:	6876      	ldr	r6, [r6, #4]
 800e5b0:	e7b4      	b.n	800e51c <_malloc_r+0x4c>
 800e5b2:	4613      	mov	r3, r2
 800e5b4:	e7cc      	b.n	800e550 <_malloc_r+0x80>
 800e5b6:	230c      	movs	r3, #12
 800e5b8:	603b      	str	r3, [r7, #0]
 800e5ba:	4638      	mov	r0, r7
 800e5bc:	f000 f80e 	bl	800e5dc <__malloc_unlock>
 800e5c0:	e797      	b.n	800e4f2 <_malloc_r+0x22>
 800e5c2:	6025      	str	r5, [r4, #0]
 800e5c4:	e7dc      	b.n	800e580 <_malloc_r+0xb0>
 800e5c6:	605b      	str	r3, [r3, #4]
 800e5c8:	deff      	udf	#255	; 0xff
 800e5ca:	bf00      	nop
 800e5cc:	24000f7c 	.word	0x24000f7c

0800e5d0 <__malloc_lock>:
 800e5d0:	4801      	ldr	r0, [pc, #4]	; (800e5d8 <__malloc_lock+0x8>)
 800e5d2:	f7ff bf0f 	b.w	800e3f4 <__retarget_lock_acquire_recursive>
 800e5d6:	bf00      	nop
 800e5d8:	24000f78 	.word	0x24000f78

0800e5dc <__malloc_unlock>:
 800e5dc:	4801      	ldr	r0, [pc, #4]	; (800e5e4 <__malloc_unlock+0x8>)
 800e5de:	f7ff bf0a 	b.w	800e3f6 <__retarget_lock_release_recursive>
 800e5e2:	bf00      	nop
 800e5e4:	24000f78 	.word	0x24000f78

0800e5e8 <__sfputc_r>:
 800e5e8:	6893      	ldr	r3, [r2, #8]
 800e5ea:	3b01      	subs	r3, #1
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	b410      	push	{r4}
 800e5f0:	6093      	str	r3, [r2, #8]
 800e5f2:	da08      	bge.n	800e606 <__sfputc_r+0x1e>
 800e5f4:	6994      	ldr	r4, [r2, #24]
 800e5f6:	42a3      	cmp	r3, r4
 800e5f8:	db01      	blt.n	800e5fe <__sfputc_r+0x16>
 800e5fa:	290a      	cmp	r1, #10
 800e5fc:	d103      	bne.n	800e606 <__sfputc_r+0x1e>
 800e5fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e602:	f000 bba7 	b.w	800ed54 <__swbuf_r>
 800e606:	6813      	ldr	r3, [r2, #0]
 800e608:	1c58      	adds	r0, r3, #1
 800e60a:	6010      	str	r0, [r2, #0]
 800e60c:	7019      	strb	r1, [r3, #0]
 800e60e:	4608      	mov	r0, r1
 800e610:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e614:	4770      	bx	lr

0800e616 <__sfputs_r>:
 800e616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e618:	4606      	mov	r6, r0
 800e61a:	460f      	mov	r7, r1
 800e61c:	4614      	mov	r4, r2
 800e61e:	18d5      	adds	r5, r2, r3
 800e620:	42ac      	cmp	r4, r5
 800e622:	d101      	bne.n	800e628 <__sfputs_r+0x12>
 800e624:	2000      	movs	r0, #0
 800e626:	e007      	b.n	800e638 <__sfputs_r+0x22>
 800e628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e62c:	463a      	mov	r2, r7
 800e62e:	4630      	mov	r0, r6
 800e630:	f7ff ffda 	bl	800e5e8 <__sfputc_r>
 800e634:	1c43      	adds	r3, r0, #1
 800e636:	d1f3      	bne.n	800e620 <__sfputs_r+0xa>
 800e638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e63c <_vfiprintf_r>:
 800e63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e640:	460d      	mov	r5, r1
 800e642:	b09d      	sub	sp, #116	; 0x74
 800e644:	4614      	mov	r4, r2
 800e646:	4698      	mov	r8, r3
 800e648:	4606      	mov	r6, r0
 800e64a:	b118      	cbz	r0, 800e654 <_vfiprintf_r+0x18>
 800e64c:	6a03      	ldr	r3, [r0, #32]
 800e64e:	b90b      	cbnz	r3, 800e654 <_vfiprintf_r+0x18>
 800e650:	f7ff fdc4 	bl	800e1dc <__sinit>
 800e654:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e656:	07d9      	lsls	r1, r3, #31
 800e658:	d405      	bmi.n	800e666 <_vfiprintf_r+0x2a>
 800e65a:	89ab      	ldrh	r3, [r5, #12]
 800e65c:	059a      	lsls	r2, r3, #22
 800e65e:	d402      	bmi.n	800e666 <_vfiprintf_r+0x2a>
 800e660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e662:	f7ff fec7 	bl	800e3f4 <__retarget_lock_acquire_recursive>
 800e666:	89ab      	ldrh	r3, [r5, #12]
 800e668:	071b      	lsls	r3, r3, #28
 800e66a:	d501      	bpl.n	800e670 <_vfiprintf_r+0x34>
 800e66c:	692b      	ldr	r3, [r5, #16]
 800e66e:	b99b      	cbnz	r3, 800e698 <_vfiprintf_r+0x5c>
 800e670:	4629      	mov	r1, r5
 800e672:	4630      	mov	r0, r6
 800e674:	f000 fbac 	bl	800edd0 <__swsetup_r>
 800e678:	b170      	cbz	r0, 800e698 <_vfiprintf_r+0x5c>
 800e67a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e67c:	07dc      	lsls	r4, r3, #31
 800e67e:	d504      	bpl.n	800e68a <_vfiprintf_r+0x4e>
 800e680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e684:	b01d      	add	sp, #116	; 0x74
 800e686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e68a:	89ab      	ldrh	r3, [r5, #12]
 800e68c:	0598      	lsls	r0, r3, #22
 800e68e:	d4f7      	bmi.n	800e680 <_vfiprintf_r+0x44>
 800e690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e692:	f7ff feb0 	bl	800e3f6 <__retarget_lock_release_recursive>
 800e696:	e7f3      	b.n	800e680 <_vfiprintf_r+0x44>
 800e698:	2300      	movs	r3, #0
 800e69a:	9309      	str	r3, [sp, #36]	; 0x24
 800e69c:	2320      	movs	r3, #32
 800e69e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e6a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6a6:	2330      	movs	r3, #48	; 0x30
 800e6a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e85c <_vfiprintf_r+0x220>
 800e6ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e6b0:	f04f 0901 	mov.w	r9, #1
 800e6b4:	4623      	mov	r3, r4
 800e6b6:	469a      	mov	sl, r3
 800e6b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6bc:	b10a      	cbz	r2, 800e6c2 <_vfiprintf_r+0x86>
 800e6be:	2a25      	cmp	r2, #37	; 0x25
 800e6c0:	d1f9      	bne.n	800e6b6 <_vfiprintf_r+0x7a>
 800e6c2:	ebba 0b04 	subs.w	fp, sl, r4
 800e6c6:	d00b      	beq.n	800e6e0 <_vfiprintf_r+0xa4>
 800e6c8:	465b      	mov	r3, fp
 800e6ca:	4622      	mov	r2, r4
 800e6cc:	4629      	mov	r1, r5
 800e6ce:	4630      	mov	r0, r6
 800e6d0:	f7ff ffa1 	bl	800e616 <__sfputs_r>
 800e6d4:	3001      	adds	r0, #1
 800e6d6:	f000 80a9 	beq.w	800e82c <_vfiprintf_r+0x1f0>
 800e6da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6dc:	445a      	add	r2, fp
 800e6de:	9209      	str	r2, [sp, #36]	; 0x24
 800e6e0:	f89a 3000 	ldrb.w	r3, [sl]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	f000 80a1 	beq.w	800e82c <_vfiprintf_r+0x1f0>
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e6f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6f4:	f10a 0a01 	add.w	sl, sl, #1
 800e6f8:	9304      	str	r3, [sp, #16]
 800e6fa:	9307      	str	r3, [sp, #28]
 800e6fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e700:	931a      	str	r3, [sp, #104]	; 0x68
 800e702:	4654      	mov	r4, sl
 800e704:	2205      	movs	r2, #5
 800e706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e70a:	4854      	ldr	r0, [pc, #336]	; (800e85c <_vfiprintf_r+0x220>)
 800e70c:	f7f1 fdf0 	bl	80002f0 <memchr>
 800e710:	9a04      	ldr	r2, [sp, #16]
 800e712:	b9d8      	cbnz	r0, 800e74c <_vfiprintf_r+0x110>
 800e714:	06d1      	lsls	r1, r2, #27
 800e716:	bf44      	itt	mi
 800e718:	2320      	movmi	r3, #32
 800e71a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e71e:	0713      	lsls	r3, r2, #28
 800e720:	bf44      	itt	mi
 800e722:	232b      	movmi	r3, #43	; 0x2b
 800e724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e728:	f89a 3000 	ldrb.w	r3, [sl]
 800e72c:	2b2a      	cmp	r3, #42	; 0x2a
 800e72e:	d015      	beq.n	800e75c <_vfiprintf_r+0x120>
 800e730:	9a07      	ldr	r2, [sp, #28]
 800e732:	4654      	mov	r4, sl
 800e734:	2000      	movs	r0, #0
 800e736:	f04f 0c0a 	mov.w	ip, #10
 800e73a:	4621      	mov	r1, r4
 800e73c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e740:	3b30      	subs	r3, #48	; 0x30
 800e742:	2b09      	cmp	r3, #9
 800e744:	d94d      	bls.n	800e7e2 <_vfiprintf_r+0x1a6>
 800e746:	b1b0      	cbz	r0, 800e776 <_vfiprintf_r+0x13a>
 800e748:	9207      	str	r2, [sp, #28]
 800e74a:	e014      	b.n	800e776 <_vfiprintf_r+0x13a>
 800e74c:	eba0 0308 	sub.w	r3, r0, r8
 800e750:	fa09 f303 	lsl.w	r3, r9, r3
 800e754:	4313      	orrs	r3, r2
 800e756:	9304      	str	r3, [sp, #16]
 800e758:	46a2      	mov	sl, r4
 800e75a:	e7d2      	b.n	800e702 <_vfiprintf_r+0xc6>
 800e75c:	9b03      	ldr	r3, [sp, #12]
 800e75e:	1d19      	adds	r1, r3, #4
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	9103      	str	r1, [sp, #12]
 800e764:	2b00      	cmp	r3, #0
 800e766:	bfbb      	ittet	lt
 800e768:	425b      	neglt	r3, r3
 800e76a:	f042 0202 	orrlt.w	r2, r2, #2
 800e76e:	9307      	strge	r3, [sp, #28]
 800e770:	9307      	strlt	r3, [sp, #28]
 800e772:	bfb8      	it	lt
 800e774:	9204      	strlt	r2, [sp, #16]
 800e776:	7823      	ldrb	r3, [r4, #0]
 800e778:	2b2e      	cmp	r3, #46	; 0x2e
 800e77a:	d10c      	bne.n	800e796 <_vfiprintf_r+0x15a>
 800e77c:	7863      	ldrb	r3, [r4, #1]
 800e77e:	2b2a      	cmp	r3, #42	; 0x2a
 800e780:	d134      	bne.n	800e7ec <_vfiprintf_r+0x1b0>
 800e782:	9b03      	ldr	r3, [sp, #12]
 800e784:	1d1a      	adds	r2, r3, #4
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	9203      	str	r2, [sp, #12]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	bfb8      	it	lt
 800e78e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e792:	3402      	adds	r4, #2
 800e794:	9305      	str	r3, [sp, #20]
 800e796:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e86c <_vfiprintf_r+0x230>
 800e79a:	7821      	ldrb	r1, [r4, #0]
 800e79c:	2203      	movs	r2, #3
 800e79e:	4650      	mov	r0, sl
 800e7a0:	f7f1 fda6 	bl	80002f0 <memchr>
 800e7a4:	b138      	cbz	r0, 800e7b6 <_vfiprintf_r+0x17a>
 800e7a6:	9b04      	ldr	r3, [sp, #16]
 800e7a8:	eba0 000a 	sub.w	r0, r0, sl
 800e7ac:	2240      	movs	r2, #64	; 0x40
 800e7ae:	4082      	lsls	r2, r0
 800e7b0:	4313      	orrs	r3, r2
 800e7b2:	3401      	adds	r4, #1
 800e7b4:	9304      	str	r3, [sp, #16]
 800e7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ba:	4829      	ldr	r0, [pc, #164]	; (800e860 <_vfiprintf_r+0x224>)
 800e7bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e7c0:	2206      	movs	r2, #6
 800e7c2:	f7f1 fd95 	bl	80002f0 <memchr>
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	d03f      	beq.n	800e84a <_vfiprintf_r+0x20e>
 800e7ca:	4b26      	ldr	r3, [pc, #152]	; (800e864 <_vfiprintf_r+0x228>)
 800e7cc:	bb1b      	cbnz	r3, 800e816 <_vfiprintf_r+0x1da>
 800e7ce:	9b03      	ldr	r3, [sp, #12]
 800e7d0:	3307      	adds	r3, #7
 800e7d2:	f023 0307 	bic.w	r3, r3, #7
 800e7d6:	3308      	adds	r3, #8
 800e7d8:	9303      	str	r3, [sp, #12]
 800e7da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7dc:	443b      	add	r3, r7
 800e7de:	9309      	str	r3, [sp, #36]	; 0x24
 800e7e0:	e768      	b.n	800e6b4 <_vfiprintf_r+0x78>
 800e7e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7e6:	460c      	mov	r4, r1
 800e7e8:	2001      	movs	r0, #1
 800e7ea:	e7a6      	b.n	800e73a <_vfiprintf_r+0xfe>
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	3401      	adds	r4, #1
 800e7f0:	9305      	str	r3, [sp, #20]
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	f04f 0c0a 	mov.w	ip, #10
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7fe:	3a30      	subs	r2, #48	; 0x30
 800e800:	2a09      	cmp	r2, #9
 800e802:	d903      	bls.n	800e80c <_vfiprintf_r+0x1d0>
 800e804:	2b00      	cmp	r3, #0
 800e806:	d0c6      	beq.n	800e796 <_vfiprintf_r+0x15a>
 800e808:	9105      	str	r1, [sp, #20]
 800e80a:	e7c4      	b.n	800e796 <_vfiprintf_r+0x15a>
 800e80c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e810:	4604      	mov	r4, r0
 800e812:	2301      	movs	r3, #1
 800e814:	e7f0      	b.n	800e7f8 <_vfiprintf_r+0x1bc>
 800e816:	ab03      	add	r3, sp, #12
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	462a      	mov	r2, r5
 800e81c:	4b12      	ldr	r3, [pc, #72]	; (800e868 <_vfiprintf_r+0x22c>)
 800e81e:	a904      	add	r1, sp, #16
 800e820:	4630      	mov	r0, r6
 800e822:	f3af 8000 	nop.w
 800e826:	4607      	mov	r7, r0
 800e828:	1c78      	adds	r0, r7, #1
 800e82a:	d1d6      	bne.n	800e7da <_vfiprintf_r+0x19e>
 800e82c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e82e:	07d9      	lsls	r1, r3, #31
 800e830:	d405      	bmi.n	800e83e <_vfiprintf_r+0x202>
 800e832:	89ab      	ldrh	r3, [r5, #12]
 800e834:	059a      	lsls	r2, r3, #22
 800e836:	d402      	bmi.n	800e83e <_vfiprintf_r+0x202>
 800e838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e83a:	f7ff fddc 	bl	800e3f6 <__retarget_lock_release_recursive>
 800e83e:	89ab      	ldrh	r3, [r5, #12]
 800e840:	065b      	lsls	r3, r3, #25
 800e842:	f53f af1d 	bmi.w	800e680 <_vfiprintf_r+0x44>
 800e846:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e848:	e71c      	b.n	800e684 <_vfiprintf_r+0x48>
 800e84a:	ab03      	add	r3, sp, #12
 800e84c:	9300      	str	r3, [sp, #0]
 800e84e:	462a      	mov	r2, r5
 800e850:	4b05      	ldr	r3, [pc, #20]	; (800e868 <_vfiprintf_r+0x22c>)
 800e852:	a904      	add	r1, sp, #16
 800e854:	4630      	mov	r0, r6
 800e856:	f000 f879 	bl	800e94c <_printf_i>
 800e85a:	e7e4      	b.n	800e826 <_vfiprintf_r+0x1ea>
 800e85c:	0800f070 	.word	0x0800f070
 800e860:	0800f07a 	.word	0x0800f07a
 800e864:	00000000 	.word	0x00000000
 800e868:	0800e617 	.word	0x0800e617
 800e86c:	0800f076 	.word	0x0800f076

0800e870 <_printf_common>:
 800e870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e874:	4616      	mov	r6, r2
 800e876:	4699      	mov	r9, r3
 800e878:	688a      	ldr	r2, [r1, #8]
 800e87a:	690b      	ldr	r3, [r1, #16]
 800e87c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e880:	4293      	cmp	r3, r2
 800e882:	bfb8      	it	lt
 800e884:	4613      	movlt	r3, r2
 800e886:	6033      	str	r3, [r6, #0]
 800e888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e88c:	4607      	mov	r7, r0
 800e88e:	460c      	mov	r4, r1
 800e890:	b10a      	cbz	r2, 800e896 <_printf_common+0x26>
 800e892:	3301      	adds	r3, #1
 800e894:	6033      	str	r3, [r6, #0]
 800e896:	6823      	ldr	r3, [r4, #0]
 800e898:	0699      	lsls	r1, r3, #26
 800e89a:	bf42      	ittt	mi
 800e89c:	6833      	ldrmi	r3, [r6, #0]
 800e89e:	3302      	addmi	r3, #2
 800e8a0:	6033      	strmi	r3, [r6, #0]
 800e8a2:	6825      	ldr	r5, [r4, #0]
 800e8a4:	f015 0506 	ands.w	r5, r5, #6
 800e8a8:	d106      	bne.n	800e8b8 <_printf_common+0x48>
 800e8aa:	f104 0a19 	add.w	sl, r4, #25
 800e8ae:	68e3      	ldr	r3, [r4, #12]
 800e8b0:	6832      	ldr	r2, [r6, #0]
 800e8b2:	1a9b      	subs	r3, r3, r2
 800e8b4:	42ab      	cmp	r3, r5
 800e8b6:	dc26      	bgt.n	800e906 <_printf_common+0x96>
 800e8b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e8bc:	1e13      	subs	r3, r2, #0
 800e8be:	6822      	ldr	r2, [r4, #0]
 800e8c0:	bf18      	it	ne
 800e8c2:	2301      	movne	r3, #1
 800e8c4:	0692      	lsls	r2, r2, #26
 800e8c6:	d42b      	bmi.n	800e920 <_printf_common+0xb0>
 800e8c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e8cc:	4649      	mov	r1, r9
 800e8ce:	4638      	mov	r0, r7
 800e8d0:	47c0      	blx	r8
 800e8d2:	3001      	adds	r0, #1
 800e8d4:	d01e      	beq.n	800e914 <_printf_common+0xa4>
 800e8d6:	6823      	ldr	r3, [r4, #0]
 800e8d8:	6922      	ldr	r2, [r4, #16]
 800e8da:	f003 0306 	and.w	r3, r3, #6
 800e8de:	2b04      	cmp	r3, #4
 800e8e0:	bf02      	ittt	eq
 800e8e2:	68e5      	ldreq	r5, [r4, #12]
 800e8e4:	6833      	ldreq	r3, [r6, #0]
 800e8e6:	1aed      	subeq	r5, r5, r3
 800e8e8:	68a3      	ldr	r3, [r4, #8]
 800e8ea:	bf0c      	ite	eq
 800e8ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e8f0:	2500      	movne	r5, #0
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	bfc4      	itt	gt
 800e8f6:	1a9b      	subgt	r3, r3, r2
 800e8f8:	18ed      	addgt	r5, r5, r3
 800e8fa:	2600      	movs	r6, #0
 800e8fc:	341a      	adds	r4, #26
 800e8fe:	42b5      	cmp	r5, r6
 800e900:	d11a      	bne.n	800e938 <_printf_common+0xc8>
 800e902:	2000      	movs	r0, #0
 800e904:	e008      	b.n	800e918 <_printf_common+0xa8>
 800e906:	2301      	movs	r3, #1
 800e908:	4652      	mov	r2, sl
 800e90a:	4649      	mov	r1, r9
 800e90c:	4638      	mov	r0, r7
 800e90e:	47c0      	blx	r8
 800e910:	3001      	adds	r0, #1
 800e912:	d103      	bne.n	800e91c <_printf_common+0xac>
 800e914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e91c:	3501      	adds	r5, #1
 800e91e:	e7c6      	b.n	800e8ae <_printf_common+0x3e>
 800e920:	18e1      	adds	r1, r4, r3
 800e922:	1c5a      	adds	r2, r3, #1
 800e924:	2030      	movs	r0, #48	; 0x30
 800e926:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e92a:	4422      	add	r2, r4
 800e92c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e930:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e934:	3302      	adds	r3, #2
 800e936:	e7c7      	b.n	800e8c8 <_printf_common+0x58>
 800e938:	2301      	movs	r3, #1
 800e93a:	4622      	mov	r2, r4
 800e93c:	4649      	mov	r1, r9
 800e93e:	4638      	mov	r0, r7
 800e940:	47c0      	blx	r8
 800e942:	3001      	adds	r0, #1
 800e944:	d0e6      	beq.n	800e914 <_printf_common+0xa4>
 800e946:	3601      	adds	r6, #1
 800e948:	e7d9      	b.n	800e8fe <_printf_common+0x8e>
	...

0800e94c <_printf_i>:
 800e94c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e950:	7e0f      	ldrb	r7, [r1, #24]
 800e952:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e954:	2f78      	cmp	r7, #120	; 0x78
 800e956:	4691      	mov	r9, r2
 800e958:	4680      	mov	r8, r0
 800e95a:	460c      	mov	r4, r1
 800e95c:	469a      	mov	sl, r3
 800e95e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e962:	d807      	bhi.n	800e974 <_printf_i+0x28>
 800e964:	2f62      	cmp	r7, #98	; 0x62
 800e966:	d80a      	bhi.n	800e97e <_printf_i+0x32>
 800e968:	2f00      	cmp	r7, #0
 800e96a:	f000 80d4 	beq.w	800eb16 <_printf_i+0x1ca>
 800e96e:	2f58      	cmp	r7, #88	; 0x58
 800e970:	f000 80c0 	beq.w	800eaf4 <_printf_i+0x1a8>
 800e974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e97c:	e03a      	b.n	800e9f4 <_printf_i+0xa8>
 800e97e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e982:	2b15      	cmp	r3, #21
 800e984:	d8f6      	bhi.n	800e974 <_printf_i+0x28>
 800e986:	a101      	add	r1, pc, #4	; (adr r1, 800e98c <_printf_i+0x40>)
 800e988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e98c:	0800e9e5 	.word	0x0800e9e5
 800e990:	0800e9f9 	.word	0x0800e9f9
 800e994:	0800e975 	.word	0x0800e975
 800e998:	0800e975 	.word	0x0800e975
 800e99c:	0800e975 	.word	0x0800e975
 800e9a0:	0800e975 	.word	0x0800e975
 800e9a4:	0800e9f9 	.word	0x0800e9f9
 800e9a8:	0800e975 	.word	0x0800e975
 800e9ac:	0800e975 	.word	0x0800e975
 800e9b0:	0800e975 	.word	0x0800e975
 800e9b4:	0800e975 	.word	0x0800e975
 800e9b8:	0800eafd 	.word	0x0800eafd
 800e9bc:	0800ea25 	.word	0x0800ea25
 800e9c0:	0800eab7 	.word	0x0800eab7
 800e9c4:	0800e975 	.word	0x0800e975
 800e9c8:	0800e975 	.word	0x0800e975
 800e9cc:	0800eb1f 	.word	0x0800eb1f
 800e9d0:	0800e975 	.word	0x0800e975
 800e9d4:	0800ea25 	.word	0x0800ea25
 800e9d8:	0800e975 	.word	0x0800e975
 800e9dc:	0800e975 	.word	0x0800e975
 800e9e0:	0800eabf 	.word	0x0800eabf
 800e9e4:	682b      	ldr	r3, [r5, #0]
 800e9e6:	1d1a      	adds	r2, r3, #4
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	602a      	str	r2, [r5, #0]
 800e9ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e9f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	e09f      	b.n	800eb38 <_printf_i+0x1ec>
 800e9f8:	6820      	ldr	r0, [r4, #0]
 800e9fa:	682b      	ldr	r3, [r5, #0]
 800e9fc:	0607      	lsls	r7, r0, #24
 800e9fe:	f103 0104 	add.w	r1, r3, #4
 800ea02:	6029      	str	r1, [r5, #0]
 800ea04:	d501      	bpl.n	800ea0a <_printf_i+0xbe>
 800ea06:	681e      	ldr	r6, [r3, #0]
 800ea08:	e003      	b.n	800ea12 <_printf_i+0xc6>
 800ea0a:	0646      	lsls	r6, r0, #25
 800ea0c:	d5fb      	bpl.n	800ea06 <_printf_i+0xba>
 800ea0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ea12:	2e00      	cmp	r6, #0
 800ea14:	da03      	bge.n	800ea1e <_printf_i+0xd2>
 800ea16:	232d      	movs	r3, #45	; 0x2d
 800ea18:	4276      	negs	r6, r6
 800ea1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea1e:	485a      	ldr	r0, [pc, #360]	; (800eb88 <_printf_i+0x23c>)
 800ea20:	230a      	movs	r3, #10
 800ea22:	e012      	b.n	800ea4a <_printf_i+0xfe>
 800ea24:	682b      	ldr	r3, [r5, #0]
 800ea26:	6820      	ldr	r0, [r4, #0]
 800ea28:	1d19      	adds	r1, r3, #4
 800ea2a:	6029      	str	r1, [r5, #0]
 800ea2c:	0605      	lsls	r5, r0, #24
 800ea2e:	d501      	bpl.n	800ea34 <_printf_i+0xe8>
 800ea30:	681e      	ldr	r6, [r3, #0]
 800ea32:	e002      	b.n	800ea3a <_printf_i+0xee>
 800ea34:	0641      	lsls	r1, r0, #25
 800ea36:	d5fb      	bpl.n	800ea30 <_printf_i+0xe4>
 800ea38:	881e      	ldrh	r6, [r3, #0]
 800ea3a:	4853      	ldr	r0, [pc, #332]	; (800eb88 <_printf_i+0x23c>)
 800ea3c:	2f6f      	cmp	r7, #111	; 0x6f
 800ea3e:	bf0c      	ite	eq
 800ea40:	2308      	moveq	r3, #8
 800ea42:	230a      	movne	r3, #10
 800ea44:	2100      	movs	r1, #0
 800ea46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ea4a:	6865      	ldr	r5, [r4, #4]
 800ea4c:	60a5      	str	r5, [r4, #8]
 800ea4e:	2d00      	cmp	r5, #0
 800ea50:	bfa2      	ittt	ge
 800ea52:	6821      	ldrge	r1, [r4, #0]
 800ea54:	f021 0104 	bicge.w	r1, r1, #4
 800ea58:	6021      	strge	r1, [r4, #0]
 800ea5a:	b90e      	cbnz	r6, 800ea60 <_printf_i+0x114>
 800ea5c:	2d00      	cmp	r5, #0
 800ea5e:	d04b      	beq.n	800eaf8 <_printf_i+0x1ac>
 800ea60:	4615      	mov	r5, r2
 800ea62:	fbb6 f1f3 	udiv	r1, r6, r3
 800ea66:	fb03 6711 	mls	r7, r3, r1, r6
 800ea6a:	5dc7      	ldrb	r7, [r0, r7]
 800ea6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ea70:	4637      	mov	r7, r6
 800ea72:	42bb      	cmp	r3, r7
 800ea74:	460e      	mov	r6, r1
 800ea76:	d9f4      	bls.n	800ea62 <_printf_i+0x116>
 800ea78:	2b08      	cmp	r3, #8
 800ea7a:	d10b      	bne.n	800ea94 <_printf_i+0x148>
 800ea7c:	6823      	ldr	r3, [r4, #0]
 800ea7e:	07de      	lsls	r6, r3, #31
 800ea80:	d508      	bpl.n	800ea94 <_printf_i+0x148>
 800ea82:	6923      	ldr	r3, [r4, #16]
 800ea84:	6861      	ldr	r1, [r4, #4]
 800ea86:	4299      	cmp	r1, r3
 800ea88:	bfde      	ittt	le
 800ea8a:	2330      	movle	r3, #48	; 0x30
 800ea8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ea90:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ea94:	1b52      	subs	r2, r2, r5
 800ea96:	6122      	str	r2, [r4, #16]
 800ea98:	f8cd a000 	str.w	sl, [sp]
 800ea9c:	464b      	mov	r3, r9
 800ea9e:	aa03      	add	r2, sp, #12
 800eaa0:	4621      	mov	r1, r4
 800eaa2:	4640      	mov	r0, r8
 800eaa4:	f7ff fee4 	bl	800e870 <_printf_common>
 800eaa8:	3001      	adds	r0, #1
 800eaaa:	d14a      	bne.n	800eb42 <_printf_i+0x1f6>
 800eaac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eab0:	b004      	add	sp, #16
 800eab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eab6:	6823      	ldr	r3, [r4, #0]
 800eab8:	f043 0320 	orr.w	r3, r3, #32
 800eabc:	6023      	str	r3, [r4, #0]
 800eabe:	4833      	ldr	r0, [pc, #204]	; (800eb8c <_printf_i+0x240>)
 800eac0:	2778      	movs	r7, #120	; 0x78
 800eac2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eac6:	6823      	ldr	r3, [r4, #0]
 800eac8:	6829      	ldr	r1, [r5, #0]
 800eaca:	061f      	lsls	r7, r3, #24
 800eacc:	f851 6b04 	ldr.w	r6, [r1], #4
 800ead0:	d402      	bmi.n	800ead8 <_printf_i+0x18c>
 800ead2:	065f      	lsls	r7, r3, #25
 800ead4:	bf48      	it	mi
 800ead6:	b2b6      	uxthmi	r6, r6
 800ead8:	07df      	lsls	r7, r3, #31
 800eada:	bf48      	it	mi
 800eadc:	f043 0320 	orrmi.w	r3, r3, #32
 800eae0:	6029      	str	r1, [r5, #0]
 800eae2:	bf48      	it	mi
 800eae4:	6023      	strmi	r3, [r4, #0]
 800eae6:	b91e      	cbnz	r6, 800eaf0 <_printf_i+0x1a4>
 800eae8:	6823      	ldr	r3, [r4, #0]
 800eaea:	f023 0320 	bic.w	r3, r3, #32
 800eaee:	6023      	str	r3, [r4, #0]
 800eaf0:	2310      	movs	r3, #16
 800eaf2:	e7a7      	b.n	800ea44 <_printf_i+0xf8>
 800eaf4:	4824      	ldr	r0, [pc, #144]	; (800eb88 <_printf_i+0x23c>)
 800eaf6:	e7e4      	b.n	800eac2 <_printf_i+0x176>
 800eaf8:	4615      	mov	r5, r2
 800eafa:	e7bd      	b.n	800ea78 <_printf_i+0x12c>
 800eafc:	682b      	ldr	r3, [r5, #0]
 800eafe:	6826      	ldr	r6, [r4, #0]
 800eb00:	6961      	ldr	r1, [r4, #20]
 800eb02:	1d18      	adds	r0, r3, #4
 800eb04:	6028      	str	r0, [r5, #0]
 800eb06:	0635      	lsls	r5, r6, #24
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	d501      	bpl.n	800eb10 <_printf_i+0x1c4>
 800eb0c:	6019      	str	r1, [r3, #0]
 800eb0e:	e002      	b.n	800eb16 <_printf_i+0x1ca>
 800eb10:	0670      	lsls	r0, r6, #25
 800eb12:	d5fb      	bpl.n	800eb0c <_printf_i+0x1c0>
 800eb14:	8019      	strh	r1, [r3, #0]
 800eb16:	2300      	movs	r3, #0
 800eb18:	6123      	str	r3, [r4, #16]
 800eb1a:	4615      	mov	r5, r2
 800eb1c:	e7bc      	b.n	800ea98 <_printf_i+0x14c>
 800eb1e:	682b      	ldr	r3, [r5, #0]
 800eb20:	1d1a      	adds	r2, r3, #4
 800eb22:	602a      	str	r2, [r5, #0]
 800eb24:	681d      	ldr	r5, [r3, #0]
 800eb26:	6862      	ldr	r2, [r4, #4]
 800eb28:	2100      	movs	r1, #0
 800eb2a:	4628      	mov	r0, r5
 800eb2c:	f7f1 fbe0 	bl	80002f0 <memchr>
 800eb30:	b108      	cbz	r0, 800eb36 <_printf_i+0x1ea>
 800eb32:	1b40      	subs	r0, r0, r5
 800eb34:	6060      	str	r0, [r4, #4]
 800eb36:	6863      	ldr	r3, [r4, #4]
 800eb38:	6123      	str	r3, [r4, #16]
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb40:	e7aa      	b.n	800ea98 <_printf_i+0x14c>
 800eb42:	6923      	ldr	r3, [r4, #16]
 800eb44:	462a      	mov	r2, r5
 800eb46:	4649      	mov	r1, r9
 800eb48:	4640      	mov	r0, r8
 800eb4a:	47d0      	blx	sl
 800eb4c:	3001      	adds	r0, #1
 800eb4e:	d0ad      	beq.n	800eaac <_printf_i+0x160>
 800eb50:	6823      	ldr	r3, [r4, #0]
 800eb52:	079b      	lsls	r3, r3, #30
 800eb54:	d413      	bmi.n	800eb7e <_printf_i+0x232>
 800eb56:	68e0      	ldr	r0, [r4, #12]
 800eb58:	9b03      	ldr	r3, [sp, #12]
 800eb5a:	4298      	cmp	r0, r3
 800eb5c:	bfb8      	it	lt
 800eb5e:	4618      	movlt	r0, r3
 800eb60:	e7a6      	b.n	800eab0 <_printf_i+0x164>
 800eb62:	2301      	movs	r3, #1
 800eb64:	4632      	mov	r2, r6
 800eb66:	4649      	mov	r1, r9
 800eb68:	4640      	mov	r0, r8
 800eb6a:	47d0      	blx	sl
 800eb6c:	3001      	adds	r0, #1
 800eb6e:	d09d      	beq.n	800eaac <_printf_i+0x160>
 800eb70:	3501      	adds	r5, #1
 800eb72:	68e3      	ldr	r3, [r4, #12]
 800eb74:	9903      	ldr	r1, [sp, #12]
 800eb76:	1a5b      	subs	r3, r3, r1
 800eb78:	42ab      	cmp	r3, r5
 800eb7a:	dcf2      	bgt.n	800eb62 <_printf_i+0x216>
 800eb7c:	e7eb      	b.n	800eb56 <_printf_i+0x20a>
 800eb7e:	2500      	movs	r5, #0
 800eb80:	f104 0619 	add.w	r6, r4, #25
 800eb84:	e7f5      	b.n	800eb72 <_printf_i+0x226>
 800eb86:	bf00      	nop
 800eb88:	0800f081 	.word	0x0800f081
 800eb8c:	0800f092 	.word	0x0800f092

0800eb90 <__sflush_r>:
 800eb90:	898a      	ldrh	r2, [r1, #12]
 800eb92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb96:	4605      	mov	r5, r0
 800eb98:	0710      	lsls	r0, r2, #28
 800eb9a:	460c      	mov	r4, r1
 800eb9c:	d458      	bmi.n	800ec50 <__sflush_r+0xc0>
 800eb9e:	684b      	ldr	r3, [r1, #4]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	dc05      	bgt.n	800ebb0 <__sflush_r+0x20>
 800eba4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	dc02      	bgt.n	800ebb0 <__sflush_r+0x20>
 800ebaa:	2000      	movs	r0, #0
 800ebac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebb2:	2e00      	cmp	r6, #0
 800ebb4:	d0f9      	beq.n	800ebaa <__sflush_r+0x1a>
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ebbc:	682f      	ldr	r7, [r5, #0]
 800ebbe:	6a21      	ldr	r1, [r4, #32]
 800ebc0:	602b      	str	r3, [r5, #0]
 800ebc2:	d032      	beq.n	800ec2a <__sflush_r+0x9a>
 800ebc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ebc6:	89a3      	ldrh	r3, [r4, #12]
 800ebc8:	075a      	lsls	r2, r3, #29
 800ebca:	d505      	bpl.n	800ebd8 <__sflush_r+0x48>
 800ebcc:	6863      	ldr	r3, [r4, #4]
 800ebce:	1ac0      	subs	r0, r0, r3
 800ebd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebd2:	b10b      	cbz	r3, 800ebd8 <__sflush_r+0x48>
 800ebd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebd6:	1ac0      	subs	r0, r0, r3
 800ebd8:	2300      	movs	r3, #0
 800ebda:	4602      	mov	r2, r0
 800ebdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebde:	6a21      	ldr	r1, [r4, #32]
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	47b0      	blx	r6
 800ebe4:	1c43      	adds	r3, r0, #1
 800ebe6:	89a3      	ldrh	r3, [r4, #12]
 800ebe8:	d106      	bne.n	800ebf8 <__sflush_r+0x68>
 800ebea:	6829      	ldr	r1, [r5, #0]
 800ebec:	291d      	cmp	r1, #29
 800ebee:	d82b      	bhi.n	800ec48 <__sflush_r+0xb8>
 800ebf0:	4a29      	ldr	r2, [pc, #164]	; (800ec98 <__sflush_r+0x108>)
 800ebf2:	410a      	asrs	r2, r1
 800ebf4:	07d6      	lsls	r6, r2, #31
 800ebf6:	d427      	bmi.n	800ec48 <__sflush_r+0xb8>
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	6062      	str	r2, [r4, #4]
 800ebfc:	04d9      	lsls	r1, r3, #19
 800ebfe:	6922      	ldr	r2, [r4, #16]
 800ec00:	6022      	str	r2, [r4, #0]
 800ec02:	d504      	bpl.n	800ec0e <__sflush_r+0x7e>
 800ec04:	1c42      	adds	r2, r0, #1
 800ec06:	d101      	bne.n	800ec0c <__sflush_r+0x7c>
 800ec08:	682b      	ldr	r3, [r5, #0]
 800ec0a:	b903      	cbnz	r3, 800ec0e <__sflush_r+0x7e>
 800ec0c:	6560      	str	r0, [r4, #84]	; 0x54
 800ec0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec10:	602f      	str	r7, [r5, #0]
 800ec12:	2900      	cmp	r1, #0
 800ec14:	d0c9      	beq.n	800ebaa <__sflush_r+0x1a>
 800ec16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec1a:	4299      	cmp	r1, r3
 800ec1c:	d002      	beq.n	800ec24 <__sflush_r+0x94>
 800ec1e:	4628      	mov	r0, r5
 800ec20:	f7ff fbea 	bl	800e3f8 <_free_r>
 800ec24:	2000      	movs	r0, #0
 800ec26:	6360      	str	r0, [r4, #52]	; 0x34
 800ec28:	e7c0      	b.n	800ebac <__sflush_r+0x1c>
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	4628      	mov	r0, r5
 800ec2e:	47b0      	blx	r6
 800ec30:	1c41      	adds	r1, r0, #1
 800ec32:	d1c8      	bne.n	800ebc6 <__sflush_r+0x36>
 800ec34:	682b      	ldr	r3, [r5, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d0c5      	beq.n	800ebc6 <__sflush_r+0x36>
 800ec3a:	2b1d      	cmp	r3, #29
 800ec3c:	d001      	beq.n	800ec42 <__sflush_r+0xb2>
 800ec3e:	2b16      	cmp	r3, #22
 800ec40:	d101      	bne.n	800ec46 <__sflush_r+0xb6>
 800ec42:	602f      	str	r7, [r5, #0]
 800ec44:	e7b1      	b.n	800ebaa <__sflush_r+0x1a>
 800ec46:	89a3      	ldrh	r3, [r4, #12]
 800ec48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec4c:	81a3      	strh	r3, [r4, #12]
 800ec4e:	e7ad      	b.n	800ebac <__sflush_r+0x1c>
 800ec50:	690f      	ldr	r7, [r1, #16]
 800ec52:	2f00      	cmp	r7, #0
 800ec54:	d0a9      	beq.n	800ebaa <__sflush_r+0x1a>
 800ec56:	0793      	lsls	r3, r2, #30
 800ec58:	680e      	ldr	r6, [r1, #0]
 800ec5a:	bf08      	it	eq
 800ec5c:	694b      	ldreq	r3, [r1, #20]
 800ec5e:	600f      	str	r7, [r1, #0]
 800ec60:	bf18      	it	ne
 800ec62:	2300      	movne	r3, #0
 800ec64:	eba6 0807 	sub.w	r8, r6, r7
 800ec68:	608b      	str	r3, [r1, #8]
 800ec6a:	f1b8 0f00 	cmp.w	r8, #0
 800ec6e:	dd9c      	ble.n	800ebaa <__sflush_r+0x1a>
 800ec70:	6a21      	ldr	r1, [r4, #32]
 800ec72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec74:	4643      	mov	r3, r8
 800ec76:	463a      	mov	r2, r7
 800ec78:	4628      	mov	r0, r5
 800ec7a:	47b0      	blx	r6
 800ec7c:	2800      	cmp	r0, #0
 800ec7e:	dc06      	bgt.n	800ec8e <__sflush_r+0xfe>
 800ec80:	89a3      	ldrh	r3, [r4, #12]
 800ec82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec86:	81a3      	strh	r3, [r4, #12]
 800ec88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec8c:	e78e      	b.n	800ebac <__sflush_r+0x1c>
 800ec8e:	4407      	add	r7, r0
 800ec90:	eba8 0800 	sub.w	r8, r8, r0
 800ec94:	e7e9      	b.n	800ec6a <__sflush_r+0xda>
 800ec96:	bf00      	nop
 800ec98:	dfbffffe 	.word	0xdfbffffe

0800ec9c <_fflush_r>:
 800ec9c:	b538      	push	{r3, r4, r5, lr}
 800ec9e:	690b      	ldr	r3, [r1, #16]
 800eca0:	4605      	mov	r5, r0
 800eca2:	460c      	mov	r4, r1
 800eca4:	b913      	cbnz	r3, 800ecac <_fflush_r+0x10>
 800eca6:	2500      	movs	r5, #0
 800eca8:	4628      	mov	r0, r5
 800ecaa:	bd38      	pop	{r3, r4, r5, pc}
 800ecac:	b118      	cbz	r0, 800ecb6 <_fflush_r+0x1a>
 800ecae:	6a03      	ldr	r3, [r0, #32]
 800ecb0:	b90b      	cbnz	r3, 800ecb6 <_fflush_r+0x1a>
 800ecb2:	f7ff fa93 	bl	800e1dc <__sinit>
 800ecb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d0f3      	beq.n	800eca6 <_fflush_r+0xa>
 800ecbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ecc0:	07d0      	lsls	r0, r2, #31
 800ecc2:	d404      	bmi.n	800ecce <_fflush_r+0x32>
 800ecc4:	0599      	lsls	r1, r3, #22
 800ecc6:	d402      	bmi.n	800ecce <_fflush_r+0x32>
 800ecc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecca:	f7ff fb93 	bl	800e3f4 <__retarget_lock_acquire_recursive>
 800ecce:	4628      	mov	r0, r5
 800ecd0:	4621      	mov	r1, r4
 800ecd2:	f7ff ff5d 	bl	800eb90 <__sflush_r>
 800ecd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecd8:	07da      	lsls	r2, r3, #31
 800ecda:	4605      	mov	r5, r0
 800ecdc:	d4e4      	bmi.n	800eca8 <_fflush_r+0xc>
 800ecde:	89a3      	ldrh	r3, [r4, #12]
 800ece0:	059b      	lsls	r3, r3, #22
 800ece2:	d4e1      	bmi.n	800eca8 <_fflush_r+0xc>
 800ece4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ece6:	f7ff fb86 	bl	800e3f6 <__retarget_lock_release_recursive>
 800ecea:	e7dd      	b.n	800eca8 <_fflush_r+0xc>

0800ecec <_putc_r>:
 800ecec:	b570      	push	{r4, r5, r6, lr}
 800ecee:	460d      	mov	r5, r1
 800ecf0:	4614      	mov	r4, r2
 800ecf2:	4606      	mov	r6, r0
 800ecf4:	b118      	cbz	r0, 800ecfe <_putc_r+0x12>
 800ecf6:	6a03      	ldr	r3, [r0, #32]
 800ecf8:	b90b      	cbnz	r3, 800ecfe <_putc_r+0x12>
 800ecfa:	f7ff fa6f 	bl	800e1dc <__sinit>
 800ecfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed00:	07d8      	lsls	r0, r3, #31
 800ed02:	d405      	bmi.n	800ed10 <_putc_r+0x24>
 800ed04:	89a3      	ldrh	r3, [r4, #12]
 800ed06:	0599      	lsls	r1, r3, #22
 800ed08:	d402      	bmi.n	800ed10 <_putc_r+0x24>
 800ed0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed0c:	f7ff fb72 	bl	800e3f4 <__retarget_lock_acquire_recursive>
 800ed10:	68a3      	ldr	r3, [r4, #8]
 800ed12:	3b01      	subs	r3, #1
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	60a3      	str	r3, [r4, #8]
 800ed18:	da05      	bge.n	800ed26 <_putc_r+0x3a>
 800ed1a:	69a2      	ldr	r2, [r4, #24]
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	db12      	blt.n	800ed46 <_putc_r+0x5a>
 800ed20:	b2eb      	uxtb	r3, r5
 800ed22:	2b0a      	cmp	r3, #10
 800ed24:	d00f      	beq.n	800ed46 <_putc_r+0x5a>
 800ed26:	6823      	ldr	r3, [r4, #0]
 800ed28:	1c5a      	adds	r2, r3, #1
 800ed2a:	6022      	str	r2, [r4, #0]
 800ed2c:	701d      	strb	r5, [r3, #0]
 800ed2e:	b2ed      	uxtb	r5, r5
 800ed30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed32:	07da      	lsls	r2, r3, #31
 800ed34:	d405      	bmi.n	800ed42 <_putc_r+0x56>
 800ed36:	89a3      	ldrh	r3, [r4, #12]
 800ed38:	059b      	lsls	r3, r3, #22
 800ed3a:	d402      	bmi.n	800ed42 <_putc_r+0x56>
 800ed3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed3e:	f7ff fb5a 	bl	800e3f6 <__retarget_lock_release_recursive>
 800ed42:	4628      	mov	r0, r5
 800ed44:	bd70      	pop	{r4, r5, r6, pc}
 800ed46:	4629      	mov	r1, r5
 800ed48:	4622      	mov	r2, r4
 800ed4a:	4630      	mov	r0, r6
 800ed4c:	f000 f802 	bl	800ed54 <__swbuf_r>
 800ed50:	4605      	mov	r5, r0
 800ed52:	e7ed      	b.n	800ed30 <_putc_r+0x44>

0800ed54 <__swbuf_r>:
 800ed54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed56:	460e      	mov	r6, r1
 800ed58:	4614      	mov	r4, r2
 800ed5a:	4605      	mov	r5, r0
 800ed5c:	b118      	cbz	r0, 800ed66 <__swbuf_r+0x12>
 800ed5e:	6a03      	ldr	r3, [r0, #32]
 800ed60:	b90b      	cbnz	r3, 800ed66 <__swbuf_r+0x12>
 800ed62:	f7ff fa3b 	bl	800e1dc <__sinit>
 800ed66:	69a3      	ldr	r3, [r4, #24]
 800ed68:	60a3      	str	r3, [r4, #8]
 800ed6a:	89a3      	ldrh	r3, [r4, #12]
 800ed6c:	071a      	lsls	r2, r3, #28
 800ed6e:	d525      	bpl.n	800edbc <__swbuf_r+0x68>
 800ed70:	6923      	ldr	r3, [r4, #16]
 800ed72:	b31b      	cbz	r3, 800edbc <__swbuf_r+0x68>
 800ed74:	6823      	ldr	r3, [r4, #0]
 800ed76:	6922      	ldr	r2, [r4, #16]
 800ed78:	1a98      	subs	r0, r3, r2
 800ed7a:	6963      	ldr	r3, [r4, #20]
 800ed7c:	b2f6      	uxtb	r6, r6
 800ed7e:	4283      	cmp	r3, r0
 800ed80:	4637      	mov	r7, r6
 800ed82:	dc04      	bgt.n	800ed8e <__swbuf_r+0x3a>
 800ed84:	4621      	mov	r1, r4
 800ed86:	4628      	mov	r0, r5
 800ed88:	f7ff ff88 	bl	800ec9c <_fflush_r>
 800ed8c:	b9e0      	cbnz	r0, 800edc8 <__swbuf_r+0x74>
 800ed8e:	68a3      	ldr	r3, [r4, #8]
 800ed90:	3b01      	subs	r3, #1
 800ed92:	60a3      	str	r3, [r4, #8]
 800ed94:	6823      	ldr	r3, [r4, #0]
 800ed96:	1c5a      	adds	r2, r3, #1
 800ed98:	6022      	str	r2, [r4, #0]
 800ed9a:	701e      	strb	r6, [r3, #0]
 800ed9c:	6962      	ldr	r2, [r4, #20]
 800ed9e:	1c43      	adds	r3, r0, #1
 800eda0:	429a      	cmp	r2, r3
 800eda2:	d004      	beq.n	800edae <__swbuf_r+0x5a>
 800eda4:	89a3      	ldrh	r3, [r4, #12]
 800eda6:	07db      	lsls	r3, r3, #31
 800eda8:	d506      	bpl.n	800edb8 <__swbuf_r+0x64>
 800edaa:	2e0a      	cmp	r6, #10
 800edac:	d104      	bne.n	800edb8 <__swbuf_r+0x64>
 800edae:	4621      	mov	r1, r4
 800edb0:	4628      	mov	r0, r5
 800edb2:	f7ff ff73 	bl	800ec9c <_fflush_r>
 800edb6:	b938      	cbnz	r0, 800edc8 <__swbuf_r+0x74>
 800edb8:	4638      	mov	r0, r7
 800edba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edbc:	4621      	mov	r1, r4
 800edbe:	4628      	mov	r0, r5
 800edc0:	f000 f806 	bl	800edd0 <__swsetup_r>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	d0d5      	beq.n	800ed74 <__swbuf_r+0x20>
 800edc8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800edcc:	e7f4      	b.n	800edb8 <__swbuf_r+0x64>
	...

0800edd0 <__swsetup_r>:
 800edd0:	b538      	push	{r3, r4, r5, lr}
 800edd2:	4b2a      	ldr	r3, [pc, #168]	; (800ee7c <__swsetup_r+0xac>)
 800edd4:	4605      	mov	r5, r0
 800edd6:	6818      	ldr	r0, [r3, #0]
 800edd8:	460c      	mov	r4, r1
 800edda:	b118      	cbz	r0, 800ede4 <__swsetup_r+0x14>
 800eddc:	6a03      	ldr	r3, [r0, #32]
 800edde:	b90b      	cbnz	r3, 800ede4 <__swsetup_r+0x14>
 800ede0:	f7ff f9fc 	bl	800e1dc <__sinit>
 800ede4:	89a3      	ldrh	r3, [r4, #12]
 800ede6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800edea:	0718      	lsls	r0, r3, #28
 800edec:	d422      	bmi.n	800ee34 <__swsetup_r+0x64>
 800edee:	06d9      	lsls	r1, r3, #27
 800edf0:	d407      	bmi.n	800ee02 <__swsetup_r+0x32>
 800edf2:	2309      	movs	r3, #9
 800edf4:	602b      	str	r3, [r5, #0]
 800edf6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800edfa:	81a3      	strh	r3, [r4, #12]
 800edfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee00:	e034      	b.n	800ee6c <__swsetup_r+0x9c>
 800ee02:	0758      	lsls	r0, r3, #29
 800ee04:	d512      	bpl.n	800ee2c <__swsetup_r+0x5c>
 800ee06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee08:	b141      	cbz	r1, 800ee1c <__swsetup_r+0x4c>
 800ee0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee0e:	4299      	cmp	r1, r3
 800ee10:	d002      	beq.n	800ee18 <__swsetup_r+0x48>
 800ee12:	4628      	mov	r0, r5
 800ee14:	f7ff faf0 	bl	800e3f8 <_free_r>
 800ee18:	2300      	movs	r3, #0
 800ee1a:	6363      	str	r3, [r4, #52]	; 0x34
 800ee1c:	89a3      	ldrh	r3, [r4, #12]
 800ee1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee22:	81a3      	strh	r3, [r4, #12]
 800ee24:	2300      	movs	r3, #0
 800ee26:	6063      	str	r3, [r4, #4]
 800ee28:	6923      	ldr	r3, [r4, #16]
 800ee2a:	6023      	str	r3, [r4, #0]
 800ee2c:	89a3      	ldrh	r3, [r4, #12]
 800ee2e:	f043 0308 	orr.w	r3, r3, #8
 800ee32:	81a3      	strh	r3, [r4, #12]
 800ee34:	6923      	ldr	r3, [r4, #16]
 800ee36:	b94b      	cbnz	r3, 800ee4c <__swsetup_r+0x7c>
 800ee38:	89a3      	ldrh	r3, [r4, #12]
 800ee3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee42:	d003      	beq.n	800ee4c <__swsetup_r+0x7c>
 800ee44:	4621      	mov	r1, r4
 800ee46:	4628      	mov	r0, r5
 800ee48:	f000 f850 	bl	800eeec <__smakebuf_r>
 800ee4c:	89a0      	ldrh	r0, [r4, #12]
 800ee4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee52:	f010 0301 	ands.w	r3, r0, #1
 800ee56:	d00a      	beq.n	800ee6e <__swsetup_r+0x9e>
 800ee58:	2300      	movs	r3, #0
 800ee5a:	60a3      	str	r3, [r4, #8]
 800ee5c:	6963      	ldr	r3, [r4, #20]
 800ee5e:	425b      	negs	r3, r3
 800ee60:	61a3      	str	r3, [r4, #24]
 800ee62:	6923      	ldr	r3, [r4, #16]
 800ee64:	b943      	cbnz	r3, 800ee78 <__swsetup_r+0xa8>
 800ee66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ee6a:	d1c4      	bne.n	800edf6 <__swsetup_r+0x26>
 800ee6c:	bd38      	pop	{r3, r4, r5, pc}
 800ee6e:	0781      	lsls	r1, r0, #30
 800ee70:	bf58      	it	pl
 800ee72:	6963      	ldrpl	r3, [r4, #20]
 800ee74:	60a3      	str	r3, [r4, #8]
 800ee76:	e7f4      	b.n	800ee62 <__swsetup_r+0x92>
 800ee78:	2000      	movs	r0, #0
 800ee7a:	e7f7      	b.n	800ee6c <__swsetup_r+0x9c>
 800ee7c:	24000158 	.word	0x24000158

0800ee80 <_sbrk_r>:
 800ee80:	b538      	push	{r3, r4, r5, lr}
 800ee82:	4d06      	ldr	r5, [pc, #24]	; (800ee9c <_sbrk_r+0x1c>)
 800ee84:	2300      	movs	r3, #0
 800ee86:	4604      	mov	r4, r0
 800ee88:	4608      	mov	r0, r1
 800ee8a:	602b      	str	r3, [r5, #0]
 800ee8c:	f7f1 ff98 	bl	8000dc0 <_sbrk>
 800ee90:	1c43      	adds	r3, r0, #1
 800ee92:	d102      	bne.n	800ee9a <_sbrk_r+0x1a>
 800ee94:	682b      	ldr	r3, [r5, #0]
 800ee96:	b103      	cbz	r3, 800ee9a <_sbrk_r+0x1a>
 800ee98:	6023      	str	r3, [r4, #0]
 800ee9a:	bd38      	pop	{r3, r4, r5, pc}
 800ee9c:	24000f74 	.word	0x24000f74

0800eea0 <__swhatbuf_r>:
 800eea0:	b570      	push	{r4, r5, r6, lr}
 800eea2:	460c      	mov	r4, r1
 800eea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eea8:	2900      	cmp	r1, #0
 800eeaa:	b096      	sub	sp, #88	; 0x58
 800eeac:	4615      	mov	r5, r2
 800eeae:	461e      	mov	r6, r3
 800eeb0:	da0d      	bge.n	800eece <__swhatbuf_r+0x2e>
 800eeb2:	89a3      	ldrh	r3, [r4, #12]
 800eeb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800eeb8:	f04f 0100 	mov.w	r1, #0
 800eebc:	bf0c      	ite	eq
 800eebe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800eec2:	2340      	movne	r3, #64	; 0x40
 800eec4:	2000      	movs	r0, #0
 800eec6:	6031      	str	r1, [r6, #0]
 800eec8:	602b      	str	r3, [r5, #0]
 800eeca:	b016      	add	sp, #88	; 0x58
 800eecc:	bd70      	pop	{r4, r5, r6, pc}
 800eece:	466a      	mov	r2, sp
 800eed0:	f000 f848 	bl	800ef64 <_fstat_r>
 800eed4:	2800      	cmp	r0, #0
 800eed6:	dbec      	blt.n	800eeb2 <__swhatbuf_r+0x12>
 800eed8:	9901      	ldr	r1, [sp, #4]
 800eeda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800eede:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800eee2:	4259      	negs	r1, r3
 800eee4:	4159      	adcs	r1, r3
 800eee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eeea:	e7eb      	b.n	800eec4 <__swhatbuf_r+0x24>

0800eeec <__smakebuf_r>:
 800eeec:	898b      	ldrh	r3, [r1, #12]
 800eeee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eef0:	079d      	lsls	r5, r3, #30
 800eef2:	4606      	mov	r6, r0
 800eef4:	460c      	mov	r4, r1
 800eef6:	d507      	bpl.n	800ef08 <__smakebuf_r+0x1c>
 800eef8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eefc:	6023      	str	r3, [r4, #0]
 800eefe:	6123      	str	r3, [r4, #16]
 800ef00:	2301      	movs	r3, #1
 800ef02:	6163      	str	r3, [r4, #20]
 800ef04:	b002      	add	sp, #8
 800ef06:	bd70      	pop	{r4, r5, r6, pc}
 800ef08:	ab01      	add	r3, sp, #4
 800ef0a:	466a      	mov	r2, sp
 800ef0c:	f7ff ffc8 	bl	800eea0 <__swhatbuf_r>
 800ef10:	9900      	ldr	r1, [sp, #0]
 800ef12:	4605      	mov	r5, r0
 800ef14:	4630      	mov	r0, r6
 800ef16:	f7ff fadb 	bl	800e4d0 <_malloc_r>
 800ef1a:	b948      	cbnz	r0, 800ef30 <__smakebuf_r+0x44>
 800ef1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef20:	059a      	lsls	r2, r3, #22
 800ef22:	d4ef      	bmi.n	800ef04 <__smakebuf_r+0x18>
 800ef24:	f023 0303 	bic.w	r3, r3, #3
 800ef28:	f043 0302 	orr.w	r3, r3, #2
 800ef2c:	81a3      	strh	r3, [r4, #12]
 800ef2e:	e7e3      	b.n	800eef8 <__smakebuf_r+0xc>
 800ef30:	89a3      	ldrh	r3, [r4, #12]
 800ef32:	6020      	str	r0, [r4, #0]
 800ef34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef38:	81a3      	strh	r3, [r4, #12]
 800ef3a:	9b00      	ldr	r3, [sp, #0]
 800ef3c:	6163      	str	r3, [r4, #20]
 800ef3e:	9b01      	ldr	r3, [sp, #4]
 800ef40:	6120      	str	r0, [r4, #16]
 800ef42:	b15b      	cbz	r3, 800ef5c <__smakebuf_r+0x70>
 800ef44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef48:	4630      	mov	r0, r6
 800ef4a:	f000 f81d 	bl	800ef88 <_isatty_r>
 800ef4e:	b128      	cbz	r0, 800ef5c <__smakebuf_r+0x70>
 800ef50:	89a3      	ldrh	r3, [r4, #12]
 800ef52:	f023 0303 	bic.w	r3, r3, #3
 800ef56:	f043 0301 	orr.w	r3, r3, #1
 800ef5a:	81a3      	strh	r3, [r4, #12]
 800ef5c:	89a3      	ldrh	r3, [r4, #12]
 800ef5e:	431d      	orrs	r5, r3
 800ef60:	81a5      	strh	r5, [r4, #12]
 800ef62:	e7cf      	b.n	800ef04 <__smakebuf_r+0x18>

0800ef64 <_fstat_r>:
 800ef64:	b538      	push	{r3, r4, r5, lr}
 800ef66:	4d07      	ldr	r5, [pc, #28]	; (800ef84 <_fstat_r+0x20>)
 800ef68:	2300      	movs	r3, #0
 800ef6a:	4604      	mov	r4, r0
 800ef6c:	4608      	mov	r0, r1
 800ef6e:	4611      	mov	r1, r2
 800ef70:	602b      	str	r3, [r5, #0]
 800ef72:	f7f1 fefc 	bl	8000d6e <_fstat>
 800ef76:	1c43      	adds	r3, r0, #1
 800ef78:	d102      	bne.n	800ef80 <_fstat_r+0x1c>
 800ef7a:	682b      	ldr	r3, [r5, #0]
 800ef7c:	b103      	cbz	r3, 800ef80 <_fstat_r+0x1c>
 800ef7e:	6023      	str	r3, [r4, #0]
 800ef80:	bd38      	pop	{r3, r4, r5, pc}
 800ef82:	bf00      	nop
 800ef84:	24000f74 	.word	0x24000f74

0800ef88 <_isatty_r>:
 800ef88:	b538      	push	{r3, r4, r5, lr}
 800ef8a:	4d06      	ldr	r5, [pc, #24]	; (800efa4 <_isatty_r+0x1c>)
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	4604      	mov	r4, r0
 800ef90:	4608      	mov	r0, r1
 800ef92:	602b      	str	r3, [r5, #0]
 800ef94:	f7f1 fefb 	bl	8000d8e <_isatty>
 800ef98:	1c43      	adds	r3, r0, #1
 800ef9a:	d102      	bne.n	800efa2 <_isatty_r+0x1a>
 800ef9c:	682b      	ldr	r3, [r5, #0]
 800ef9e:	b103      	cbz	r3, 800efa2 <_isatty_r+0x1a>
 800efa0:	6023      	str	r3, [r4, #0]
 800efa2:	bd38      	pop	{r3, r4, r5, pc}
 800efa4:	24000f74 	.word	0x24000f74

0800efa8 <_init>:
 800efa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efaa:	bf00      	nop
 800efac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efae:	bc08      	pop	{r3}
 800efb0:	469e      	mov	lr, r3
 800efb2:	4770      	bx	lr

0800efb4 <_fini>:
 800efb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efb6:	bf00      	nop
 800efb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efba:	bc08      	pop	{r3}
 800efbc:	469e      	mov	lr, r3
 800efbe:	4770      	bx	lr
