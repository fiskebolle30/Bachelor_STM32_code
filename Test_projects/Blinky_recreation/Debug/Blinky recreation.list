
Blinky recreation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002014  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080022c0  080022c0  000122c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080022d0  080022d0  000122d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080022d4  080022d4  000122d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080022d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000010  080022e8  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000030  080022e8  00020030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006a64  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001214  00000000  00000000  00026ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000640  00000000  00000000  00027d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000496  00000000  00000000  00028340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002eb9c  00000000  00000000  000287d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000078ec  00000000  00000000  00057372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012f882  00000000  00000000  0005ec5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000017c8  00000000  00000000  0018e4e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000084  00000000  00000000  0018fca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080022a8 	.word	0x080022a8

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080022a8 	.word	0x080022a8

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f0:	f000 fc74 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f4:	f000 f81e 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f8:	f000 f890 	bl	800041c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, 0); //Turn off the backlight. Why is this enabled in the first place??
 80002fc:	2200      	movs	r2, #0
 80002fe:	2102      	movs	r1, #2
 8000300:	480a      	ldr	r0, [pc, #40]	; (800032c <main+0x40>)
 8000302:	f000 ffb5 	bl	8001270 <HAL_GPIO_WritePin>

  HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin); //Toggle one LED, so LED2 and LED3 will be each others inverse.
 8000306:	2104      	movs	r1, #4
 8000308:	4809      	ldr	r0, [pc, #36]	; (8000330 <main+0x44>)
 800030a:	f000 ffca 	bl	80012a2 <HAL_GPIO_TogglePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);
 800030e:	2104      	movs	r1, #4
 8000310:	4807      	ldr	r0, [pc, #28]	; (8000330 <main+0x44>)
 8000312:	f000 ffc6 	bl	80012a2 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 8000316:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800031a:	4805      	ldr	r0, [pc, #20]	; (8000330 <main+0x44>)
 800031c:	f000 ffc1 	bl	80012a2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000320:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000324:	f000 fcec 	bl	8000d00 <HAL_Delay>
	  HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);
 8000328:	e7f1      	b.n	800030e <main+0x22>
 800032a:	bf00      	nop
 800032c:	58020000 	.word	0x58020000
 8000330:	58021800 	.word	0x58021800

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b09c      	sub	sp, #112	; 0x70
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800033e:	224c      	movs	r2, #76	; 0x4c
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f001 ff84 	bl	8002250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2220      	movs	r2, #32
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f001 ff7e 	bl	8002250 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000354:	4b2f      	ldr	r3, [pc, #188]	; (8000414 <SystemClock_Config+0xe0>)
 8000356:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800035a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800035e:	2004      	movs	r0, #4
 8000360:	f000 ffba 	bl	80012d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000364:	2300      	movs	r3, #0
 8000366:	603b      	str	r3, [r7, #0]
 8000368:	4b2b      	ldr	r3, [pc, #172]	; (8000418 <SystemClock_Config+0xe4>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a2a      	ldr	r2, [pc, #168]	; (8000418 <SystemClock_Config+0xe4>)
 800036e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b28      	ldr	r3, [pc, #160]	; (8000418 <SystemClock_Config+0xe4>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800037c:	603b      	str	r3, [r7, #0]
 800037e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000380:	bf00      	nop
 8000382:	4b25      	ldr	r3, [pc, #148]	; (8000418 <SystemClock_Config+0xe4>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800038a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800038e:	d1f8      	bne.n	8000382 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000390:	2301      	movs	r3, #1
 8000392:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000394:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000398:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039a:	2302      	movs	r3, #2
 800039c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800039e:	2302      	movs	r3, #2
 80003a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80003a2:	230c      	movs	r3, #12
 80003a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 80003a6:	2340      	movs	r3, #64	; 0x40
 80003a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003aa:	2302      	movs	r3, #2
 80003ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80003ae:	2303      	movs	r3, #3
 80003b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80003b2:	2304      	movs	r3, #4
 80003b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80003b6:	2304      	movs	r3, #4
 80003b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003ba:	2300      	movs	r3, #0
 80003bc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003be:	2300      	movs	r3, #0
 80003c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 ffe0 	bl	800138c <HAL_RCC_OscConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80003d2:	f000 fb17 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d6:	233f      	movs	r3, #63	; 0x3f
 80003d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003da:	2303      	movs	r3, #3
 80003dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003de:	2300      	movs	r3, #0
 80003e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80003e2:	2308      	movs	r3, #8
 80003e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80003e6:	2340      	movs	r3, #64	; 0x40
 80003e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003ea:	2340      	movs	r3, #64	; 0x40
 80003ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80003ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80003f4:	2340      	movs	r3, #64	; 0x40
 80003f6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2100      	movs	r1, #0
 80003fc:	4618      	mov	r0, r3
 80003fe:	f001 fbf7 	bl	8001bf0 <HAL_RCC_ClockConfig>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000408:	f000 fafc 	bl	8000a04 <Error_Handler>
  }
}
 800040c:	bf00      	nop
 800040e:	3770      	adds	r7, #112	; 0x70
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	58024400 	.word	0x58024400
 8000418:	58024800 	.word	0x58024800

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b090      	sub	sp, #64	; 0x40
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000432:	4bbf      	ldr	r3, [pc, #764]	; (8000730 <MX_GPIO_Init+0x314>)
 8000434:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000438:	4abd      	ldr	r2, [pc, #756]	; (8000730 <MX_GPIO_Init+0x314>)
 800043a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800043e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000442:	4bbb      	ldr	r3, [pc, #748]	; (8000730 <MX_GPIO_Init+0x314>)
 8000444:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800044c:	62bb      	str	r3, [r7, #40]	; 0x28
 800044e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000450:	4bb7      	ldr	r3, [pc, #732]	; (8000730 <MX_GPIO_Init+0x314>)
 8000452:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000456:	4ab6      	ldr	r2, [pc, #728]	; (8000730 <MX_GPIO_Init+0x314>)
 8000458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800045c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000460:	4bb3      	ldr	r3, [pc, #716]	; (8000730 <MX_GPIO_Init+0x314>)
 8000462:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800046a:	627b      	str	r3, [r7, #36]	; 0x24
 800046c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800046e:	4bb0      	ldr	r3, [pc, #704]	; (8000730 <MX_GPIO_Init+0x314>)
 8000470:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000474:	4aae      	ldr	r2, [pc, #696]	; (8000730 <MX_GPIO_Init+0x314>)
 8000476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800047a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800047e:	4bac      	ldr	r3, [pc, #688]	; (8000730 <MX_GPIO_Init+0x314>)
 8000480:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000488:	623b      	str	r3, [r7, #32]
 800048a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800048c:	4ba8      	ldr	r3, [pc, #672]	; (8000730 <MX_GPIO_Init+0x314>)
 800048e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000492:	4aa7      	ldr	r2, [pc, #668]	; (8000730 <MX_GPIO_Init+0x314>)
 8000494:	f043 0308 	orr.w	r3, r3, #8
 8000498:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800049c:	4ba4      	ldr	r3, [pc, #656]	; (8000730 <MX_GPIO_Init+0x314>)
 800049e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80004a2:	f003 0308 	and.w	r3, r3, #8
 80004a6:	61fb      	str	r3, [r7, #28]
 80004a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004aa:	4ba1      	ldr	r3, [pc, #644]	; (8000730 <MX_GPIO_Init+0x314>)
 80004ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80004b0:	4a9f      	ldr	r2, [pc, #636]	; (8000730 <MX_GPIO_Init+0x314>)
 80004b2:	f043 0304 	orr.w	r3, r3, #4
 80004b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80004ba:	4b9d      	ldr	r3, [pc, #628]	; (8000730 <MX_GPIO_Init+0x314>)
 80004bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80004c0:	f003 0304 	and.w	r3, r3, #4
 80004c4:	61bb      	str	r3, [r7, #24]
 80004c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004c8:	4b99      	ldr	r3, [pc, #612]	; (8000730 <MX_GPIO_Init+0x314>)
 80004ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80004ce:	4a98      	ldr	r2, [pc, #608]	; (8000730 <MX_GPIO_Init+0x314>)
 80004d0:	f043 0310 	orr.w	r3, r3, #16
 80004d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80004d8:	4b95      	ldr	r3, [pc, #596]	; (8000730 <MX_GPIO_Init+0x314>)
 80004da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80004de:	f003 0310 	and.w	r3, r3, #16
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e6:	4b92      	ldr	r3, [pc, #584]	; (8000730 <MX_GPIO_Init+0x314>)
 80004e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80004ec:	4a90      	ldr	r2, [pc, #576]	; (8000730 <MX_GPIO_Init+0x314>)
 80004ee:	f043 0302 	orr.w	r3, r3, #2
 80004f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80004f6:	4b8e      	ldr	r3, [pc, #568]	; (8000730 <MX_GPIO_Init+0x314>)
 80004f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80004fc:	f003 0302 	and.w	r3, r3, #2
 8000500:	613b      	str	r3, [r7, #16]
 8000502:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000504:	4b8a      	ldr	r3, [pc, #552]	; (8000730 <MX_GPIO_Init+0x314>)
 8000506:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800050a:	4a89      	ldr	r2, [pc, #548]	; (8000730 <MX_GPIO_Init+0x314>)
 800050c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000510:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000514:	4b86      	ldr	r3, [pc, #536]	; (8000730 <MX_GPIO_Init+0x314>)
 8000516:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800051a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b83      	ldr	r3, [pc, #524]	; (8000730 <MX_GPIO_Init+0x314>)
 8000524:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000528:	4a81      	ldr	r2, [pc, #516]	; (8000730 <MX_GPIO_Init+0x314>)
 800052a:	f043 0301 	orr.w	r3, r3, #1
 800052e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000532:	4b7f      	ldr	r3, [pc, #508]	; (8000730 <MX_GPIO_Init+0x314>)
 8000534:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000538:	f003 0301 	and.w	r3, r3, #1
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000540:	4b7b      	ldr	r3, [pc, #492]	; (8000730 <MX_GPIO_Init+0x314>)
 8000542:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000546:	4a7a      	ldr	r2, [pc, #488]	; (8000730 <MX_GPIO_Init+0x314>)
 8000548:	f043 0320 	orr.w	r3, r3, #32
 800054c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000550:	4b77      	ldr	r3, [pc, #476]	; (8000730 <MX_GPIO_Init+0x314>)
 8000552:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000556:	f003 0320 	and.w	r3, r3, #32
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800055e:	4b74      	ldr	r3, [pc, #464]	; (8000730 <MX_GPIO_Init+0x314>)
 8000560:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000564:	4a72      	ldr	r2, [pc, #456]	; (8000730 <MX_GPIO_Init+0x314>)
 8000566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800056a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800056e:	4b70      	ldr	r3, [pc, #448]	; (8000730 <MX_GPIO_Init+0x314>)
 8000570:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000578:	603b      	str	r3, [r7, #0]
 800057a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	210e      	movs	r1, #14
 8000580:	486c      	ldr	r0, [pc, #432]	; (8000734 <MX_GPIO_Init+0x318>)
 8000582:	f000 fe75 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f640 0104 	movw	r1, #2052	; 0x804
 800058c:	486a      	ldr	r0, [pc, #424]	; (8000738 <MX_GPIO_Init+0x31c>)
 800058e:	f000 fe6f 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000598:	4868      	ldr	r0, [pc, #416]	; (800073c <MX_GPIO_Init+0x320>)
 800059a:	f000 fe69 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	2108      	movs	r1, #8
 80005a2:	4865      	ldr	r0, [pc, #404]	; (8000738 <MX_GPIO_Init+0x31c>)
 80005a4:	f000 fe64 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2106      	movs	r1, #6
 80005ac:	4863      	ldr	r0, [pc, #396]	; (800073c <MX_GPIO_Init+0x320>)
 80005ae:	f000 fe5f 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_GPIO_Pin WIFI_DATRDY_Pin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 80005b2:	2330      	movs	r3, #48	; 0x30
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80005c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005c4:	4619      	mov	r1, r3
 80005c6:	485b      	ldr	r0, [pc, #364]	; (8000734 <MX_GPIO_Init+0x318>)
 80005c8:	f000 fca2 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNCAS_Pin SDCLK_Pin A15_Pin A14_Pin
                           A11_Pin A10_Pin */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 80005cc:	f248 1333 	movw	r3, #33075	; 0x8133
 80005d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005da:	2303      	movs	r3, #3
 80005dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005de:	230c      	movs	r3, #12
 80005e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005e6:	4619      	mov	r1, r3
 80005e8:	4853      	ldr	r0, [pc, #332]	; (8000738 <MX_GPIO_Init+0x31c>)
 80005ea:	f000 fc91 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B6_Pin LCD_B7_Pin LCD_B4_Pin LCD_B5_Pin
                           LCD_DE_Pin LCD_G7_Pin LCD_G6_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 80005ee:	23ff      	movs	r3, #255	; 0xff
 80005f0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f2:	2302      	movs	r3, #2
 80005f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80005fe:	230e      	movs	r3, #14
 8000600:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000602:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000606:	4619      	mov	r1, r3
 8000608:	484d      	ldr	r0, [pc, #308]	; (8000740 <MX_GPIO_Init+0x324>)
 800060a:	f000 fc81 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S6_SDO_Pin I2S6_SDI_Pin I2S6_CK_Pin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 800060e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000614:	2302      	movs	r3, #2
 8000616:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2300      	movs	r3, #0
 800061e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000620:	2305      	movs	r3, #5
 8000622:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000624:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000628:	4619      	mov	r1, r3
 800062a:	4843      	ldr	r0, [pc, #268]	; (8000738 <MX_GPIO_Init+0x31c>)
 800062c:	f000 fc70 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO6_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8000630:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000634:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000636:	2302      	movs	r3, #2
 8000638:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063e:	2303      	movs	r3, #3
 8000640:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000642:	2309      	movs	r3, #9
 8000644:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800064a:	4619      	mov	r1, r3
 800064c:	483a      	ldr	r0, [pc, #232]	; (8000738 <MX_GPIO_Init+0x31c>)
 800064e:	f000 fc5f 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO7_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000656:	2302      	movs	r3, #2
 8000658:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800065e:	2303      	movs	r3, #3
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000662:	230a      	movs	r3, #10
 8000664:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8000666:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800066a:	4619      	mov	r1, r3
 800066c:	4835      	ldr	r0, [pc, #212]	; (8000744 <MX_GPIO_Init+0x328>)
 800066e:	f000 fc4f 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D2_Pin D0_Pin D1_Pin
                           D13_Pin D15_Pin D14_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8000672:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000678:	2302      	movs	r3, #2
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000680:	2303      	movs	r3, #3
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000684:	230c      	movs	r3, #12
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000688:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800068c:	4619      	mov	r1, r3
 800068e:	482d      	ldr	r0, [pc, #180]	; (8000744 <MX_GPIO_Init+0x328>)
 8000690:	f000 fc3e 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_CK_Pin SDIO1_D3_Pin SDIO1_D1_Pin
                           SDIO1_D0_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D1_Pin
 8000694:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000698:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069a:	2302      	movs	r3, #2
 800069c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a2:	2303      	movs	r3, #3
 80006a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80006a6:	230c      	movs	r3, #12
 80006a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ae:	4619      	mov	r1, r3
 80006b0:	4825      	ldr	r0, [pc, #148]	; (8000748 <MX_GPIO_Init+0x32c>)
 80006b2:	f000 fc2d 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_BOOT_Pin WIFI_WKUP_Pin WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 80006b6:	230e      	movs	r3, #14
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80006c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ca:	4619      	mov	r1, r3
 80006cc:	4819      	ldr	r0, [pc, #100]	; (8000734 <MX_GPIO_Init+0x318>)
 80006ce:	f000 fc1f 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL0_Pin FMC_NBL1_Pin D9_Pin D4_Pin
                           D10_Pin D11_Pin D7_Pin D6_Pin
                           D12_Pin D5_Pin D8_Pin */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 80006d2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d8:	2302      	movs	r3, #2
 80006da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e0:	2303      	movs	r3, #3
 80006e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006e4:	230c      	movs	r3, #12
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ec:	4619      	mov	r1, r3
 80006ee:	4817      	ldr	r0, [pc, #92]	; (800074c <MX_GPIO_Init+0x330>)
 80006f0:	f000 fc0e 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED1_Pin AUDIO_NRST_Pin USER_LED2_Pin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 80006f4:	f640 030c 	movw	r3, #2060	; 0x80c
 80006f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2300      	movs	r3, #0
 8000704:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000706:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800070a:	4619      	mov	r1, r3
 800070c:	480a      	ldr	r0, [pc, #40]	; (8000738 <MX_GPIO_Init+0x31c>)
 800070e:	f000 fbff 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B3_Pin LCD_B2_Pin LCD_B1_Pin LCD_B0_Pin
                           LCD_G4_Pin LCD_G3_Pin LCD_G2_Pin LCD_G1_Pin
                           LCD_R7_Pin LCD_G0_Pin LCD_R1_Pin LCD_R6_Pin
                           LCD_R2_Pin LCD_R5_Pin LCD_R3_Pin LCD_R4_Pin */
  GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 8000712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000724:	230e      	movs	r3, #14
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800072c:	e010      	b.n	8000750 <MX_GPIO_Init+0x334>
 800072e:	bf00      	nop
 8000730:	58024400 	.word	0x58024400
 8000734:	58022000 	.word	0x58022000
 8000738:	58021800 	.word	0x58021800
 800073c:	58020000 	.word	0x58020000
 8000740:	58022800 	.word	0x58022800
 8000744:	58020c00 	.word	0x58020c00
 8000748:	58020800 	.word	0x58020800
 800074c:	58021000 	.word	0x58021000
 8000750:	4619      	mov	r1, r3
 8000752:	48a3      	ldr	r0, [pc, #652]	; (80009e0 <MX_GPIO_Init+0x5c4>)
 8000754:	f000 fbdc 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000758:	2304      	movs	r3, #4
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000764:	2303      	movs	r3, #3
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000768:	230c      	movs	r3, #12
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000770:	4619      	mov	r1, r3
 8000772:	489c      	ldr	r0, [pc, #624]	; (80009e4 <MX_GPIO_Init+0x5c8>)
 8000774:	f000 fbcc 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000784:	2301      	movs	r3, #1
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800078c:	4619      	mov	r1, r3
 800078e:	4896      	ldr	r0, [pc, #600]	; (80009e8 <MX_GPIO_Init+0x5cc>)
 8000790:	f000 fbbe 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8000794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007a6:	2305      	movs	r3, #5
 80007a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ae:	4619      	mov	r1, r3
 80007b0:	488e      	ldr	r0, [pc, #568]	; (80009ec <MX_GPIO_Init+0x5d0>)
 80007b2:	f000 fbad 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LCD_BL_CTRL_Pin LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 80007b6:	f640 0306 	movw	r3, #2054	; 0x806
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007cc:	4619      	mov	r1, r3
 80007ce:	4887      	ldr	r0, [pc, #540]	; (80009ec <MX_GPIO_Init+0x5d0>)
 80007d0:	f000 fb9e 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_RX_Pin VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80007d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007e6:	2307      	movs	r3, #7
 80007e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ee:	4619      	mov	r1, r3
 80007f0:	487e      	ldr	r0, [pc, #504]	; (80009ec <MX_GPIO_Init+0x5d0>)
 80007f2:	f000 fb8d 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKEUP_Pin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 80007f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000800:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800080a:	4619      	mov	r1, r3
 800080c:	4878      	ldr	r0, [pc, #480]	; (80009f0 <MX_GPIO_Init+0x5d4>)
 800080e:	f000 fb7f 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin A0_Pin A2_Pin A4_Pin
                           A3_Pin A5_Pin A7_Pin SDNRAS_Pin
                           A9_Pin A8_Pin A6_Pin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000812:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000824:	230c      	movs	r3, #12
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000828:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800082c:	4619      	mov	r1, r3
 800082e:	4871      	ldr	r0, [pc, #452]	; (80009f4 <MX_GPIO_Init+0x5d8>)
 8000830:	f000 fb6e 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000846:	2300      	movs	r3, #0
 8000848:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800084e:	4619      	mov	r1, r3
 8000850:	4866      	ldr	r0, [pc, #408]	; (80009ec <MX_GPIO_Init+0x5d0>)
 8000852:	f000 fb5d 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8000856:	2340      	movs	r3, #64	; 0x40
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000862:	2303      	movs	r3, #3
 8000864:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000866:	230a      	movs	r3, #10
 8000868:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800086e:	4619      	mov	r1, r3
 8000870:	4861      	ldr	r0, [pc, #388]	; (80009f8 <MX_GPIO_Init+0x5dc>)
 8000872:	f000 fb4d 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_CLK_Pin LCD_VSYNC_Pin LCD_R0_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 8000876:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000888:	230e      	movs	r3, #14
 800088a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800088c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000890:	4619      	mov	r1, r3
 8000892:	4855      	ldr	r0, [pc, #340]	; (80009e8 <MX_GPIO_Init+0x5cc>)
 8000894:	f000 fb3c 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO3_Pin OCSPI1_IO2_Pin OCSPI1_IO1_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO3_Pin|OCSPI1_IO2_Pin|OCSPI1_IO1_Pin;
 8000898:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80008aa:	230a      	movs	r3, #10
 80008ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008b2:	4619      	mov	r1, r3
 80008b4:	484f      	ldr	r0, [pc, #316]	; (80009f4 <MX_GPIO_Init+0x5d8>)
 80008b6:	f000 fb2b 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 80008ba:	230c      	movs	r3, #12
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ca:	2305      	movs	r3, #5
 80008cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008d2:	4619      	mov	r1, r3
 80008d4:	4846      	ldr	r0, [pc, #280]	; (80009f0 <MX_GPIO_Init+0x5d4>)
 80008d6:	f000 fb1b 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C4_SDA_Pin I2C4_SCL_Pin */
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 80008da:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e0:	2312      	movs	r3, #18
 80008e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80008ec:	2304      	movs	r3, #4
 80008ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f4:	4619      	mov	r1, r3
 80008f6:	483b      	ldr	r0, [pc, #236]	; (80009e4 <MX_GPIO_Init+0x5c8>)
 80008f8:	f000 fb0a 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO0_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO0_Pin;
 80008fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800090e:	2309      	movs	r3, #9
 8000910:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO0_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000916:	4619      	mov	r1, r3
 8000918:	4832      	ldr	r0, [pc, #200]	; (80009e4 <MX_GPIO_Init+0x5c8>)
 800091a:	f000 faf9 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO4_Pin OCSPI1_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 800091e:	2322      	movs	r3, #34	; 0x22
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800092e:	230a      	movs	r3, #10
 8000930:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000936:	4619      	mov	r1, r3
 8000938:	482d      	ldr	r0, [pc, #180]	; (80009f0 <MX_GPIO_Init+0x5d4>)
 800093a:	f000 fae9 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800093e:	2304      	movs	r3, #4
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000942:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000946:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000950:	4619      	mov	r1, r3
 8000952:	482a      	ldr	r0, [pc, #168]	; (80009fc <MX_GPIO_Init+0x5e0>)
 8000954:	f000 fadc 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNE1_Pin SDNWE_Pin SDCKE1_Pin */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000958:	23e0      	movs	r3, #224	; 0xe0
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000968:	230c      	movs	r3, #12
 800096a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800096c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000970:	4619      	mov	r1, r3
 8000972:	4822      	ldr	r0, [pc, #136]	; (80009fc <MX_GPIO_Init+0x5e0>)
 8000974:	f000 facc 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO5_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 8000978:	2308      	movs	r3, #8
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000988:	2309      	movs	r3, #9
 800098a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000990:	4619      	mov	r1, r3
 8000992:	481a      	ldr	r0, [pc, #104]	; (80009fc <MX_GPIO_Init+0x5e0>)
 8000994:	f000 fabc 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S6_WS_Pin I2S6_MCK_Pin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 8000998:	2309      	movs	r3, #9
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80009a8:	2305      	movs	r3, #5
 80009aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009b0:	4619      	mov	r1, r3
 80009b2:	480e      	ldr	r0, [pc, #56]	; (80009ec <MX_GPIO_Init+0x5d0>)
 80009b4:	f000 faac 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_CLK_Pin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 80009b8:	2304      	movs	r3, #4
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80009c8:	2309      	movs	r3, #9
 80009ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d0:	4619      	mov	r1, r3
 80009d2:	480b      	ldr	r0, [pc, #44]	; (8000a00 <MX_GPIO_Init+0x5e4>)
 80009d4:	f000 fa9c 	bl	8000f10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d8:	bf00      	nop
 80009da:	3740      	adds	r7, #64	; 0x40
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	58022400 	.word	0x58022400
 80009e4:	58020c00 	.word	0x58020c00
 80009e8:	58022000 	.word	0x58022000
 80009ec:	58020000 	.word	0x58020000
 80009f0:	58020800 	.word	0x58020800
 80009f4:	58021400 	.word	0x58021400
 80009f8:	58021800 	.word	0x58021800
 80009fc:	58021c00 	.word	0x58021c00
 8000a00:	58020400 	.word	0x58020400

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <Error_Handler+0x8>
	...

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <HAL_MspInit+0x30>)
 8000a18:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a1c:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_MspInit+0x30>)
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_MspInit+0x30>)
 8000a28:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a2c:	f003 0302 	and.w	r3, r3, #2
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	58024400 	.word	0x58024400

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a90:	f000 f916 	bl	8000cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a9c:	4b32      	ldr	r3, [pc, #200]	; (8000b68 <SystemInit+0xd0>)
 8000a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa2:	4a31      	ldr	r2, [pc, #196]	; (8000b68 <SystemInit+0xd0>)
 8000aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aac:	4b2f      	ldr	r3, [pc, #188]	; (8000b6c <SystemInit+0xd4>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f003 030f 	and.w	r3, r3, #15
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	d807      	bhi.n	8000ac8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	; (8000b6c <SystemInit+0xd4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f023 030f 	bic.w	r3, r3, #15
 8000ac0:	4a2a      	ldr	r2, [pc, #168]	; (8000b6c <SystemInit+0xd4>)
 8000ac2:	f043 0303 	orr.w	r3, r3, #3
 8000ac6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ac8:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <SystemInit+0xd8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a28      	ldr	r2, [pc, #160]	; (8000b70 <SystemInit+0xd8>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ad4:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <SystemInit+0xd8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ada:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <SystemInit+0xd8>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	4924      	ldr	r1, [pc, #144]	; (8000b70 <SystemInit+0xd8>)
 8000ae0:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <SystemInit+0xdc>)
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <SystemInit+0xd4>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f003 030c 	and.w	r3, r3, #12
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d007      	beq.n	8000b02 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000af2:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <SystemInit+0xd4>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f023 030f 	bic.w	r3, r3, #15
 8000afa:	4a1c      	ldr	r2, [pc, #112]	; (8000b6c <SystemInit+0xd4>)
 8000afc:	f043 0303 	orr.w	r3, r3, #3
 8000b00:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000b02:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <SystemInit+0xd8>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000b08:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <SystemInit+0xd8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <SystemInit+0xd8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b14:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <SystemInit+0xd8>)
 8000b16:	4a18      	ldr	r2, [pc, #96]	; (8000b78 <SystemInit+0xe0>)
 8000b18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <SystemInit+0xd8>)
 8000b1c:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <SystemInit+0xe4>)
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <SystemInit+0xd8>)
 8000b22:	4a17      	ldr	r2, [pc, #92]	; (8000b80 <SystemInit+0xe8>)
 8000b24:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <SystemInit+0xd8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b2c:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <SystemInit+0xd8>)
 8000b2e:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <SystemInit+0xe8>)
 8000b30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <SystemInit+0xd8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b38:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <SystemInit+0xd8>)
 8000b3a:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <SystemInit+0xe8>)
 8000b3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <SystemInit+0xd8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <SystemInit+0xd8>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a09      	ldr	r2, [pc, #36]	; (8000b70 <SystemInit+0xd8>)
 8000b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <SystemInit+0xd8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <SystemInit+0xec>)
 8000b58:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b5c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00
 8000b6c:	52002000 	.word	0x52002000
 8000b70:	58024400 	.word	0x58024400
 8000b74:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b78:	02020200 	.word	0x02020200
 8000b7c:	01ff0000 	.word	0x01ff0000
 8000b80:	01010280 	.word	0x01010280
 8000b84:	52004000 	.word	0x52004000

08000b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b8c:	f7ff ff84 	bl	8000a98 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b92:	490d      	ldr	r1, [pc, #52]	; (8000bc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	; (8000bd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f001 fb53 	bl	8002260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bba:	f7ff fb97 	bl	80002ec <main>
  bx  lr
 8000bbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000bc4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bc8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000bcc:	080022d8 	.word	0x080022d8
  ldr r2, =_sbss
 8000bd0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000bd4:	24000030 	.word	0x24000030

08000bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be2:	2003      	movs	r0, #3
 8000be4:	f000 f962 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000be8:	f001 f9b8 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8000bec:	4602      	mov	r2, r0
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_Init+0x68>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	0a1b      	lsrs	r3, r3, #8
 8000bf4:	f003 030f 	and.w	r3, r3, #15
 8000bf8:	4913      	ldr	r1, [pc, #76]	; (8000c48 <HAL_Init+0x6c>)
 8000bfa:	5ccb      	ldrb	r3, [r1, r3]
 8000bfc:	f003 031f 	and.w	r3, r3, #31
 8000c00:	fa22 f303 	lsr.w	r3, r2, r3
 8000c04:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_Init+0x68>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <HAL_Init+0x6c>)
 8000c10:	5cd3      	ldrb	r3, [r2, r3]
 8000c12:	f003 031f 	and.w	r3, r3, #31
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	fa22 f303 	lsr.w	r3, r2, r3
 8000c1c:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <HAL_Init+0x70>)
 8000c1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c20:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <HAL_Init+0x74>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 f814 	bl	8000c54 <HAL_InitTick>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e002      	b.n	8000c3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c36:	f7ff feeb 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	58024400 	.word	0x58024400
 8000c48:	080022c0 	.word	0x080022c0
 8000c4c:	24000004 	.word	0x24000004
 8000c50:	24000000 	.word	0x24000000

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_InitTick+0x60>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d101      	bne.n	8000c68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e021      	b.n	8000cac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <HAL_InitTick+0x64>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_InitTick+0x60>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f939 	bl	8000ef6 <HAL_SYSTICK_Config>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00e      	b.n	8000cac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	d80a      	bhi.n	8000caa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c94:	2200      	movs	r2, #0
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 f911 	bl	8000ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca0:	4a06      	ldr	r2, [pc, #24]	; (8000cbc <HAL_InitTick+0x68>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e000      	b.n	8000cac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	2400000c 	.word	0x2400000c
 8000cb8:	24000000 	.word	0x24000000
 8000cbc:	24000008 	.word	0x24000008

08000cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	2400000c 	.word	0x2400000c
 8000ce4:	2400002c 	.word	0x2400002c

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	2400002c 	.word	0x2400002c

08000d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d08:	f7ff ffee 	bl	8000ce8 <HAL_GetTick>
 8000d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d18:	d005      	beq.n	8000d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_Delay+0x44>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d26:	bf00      	nop
 8000d28:	f7ff ffde 	bl	8000ce8 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d8f7      	bhi.n	8000d28 <HAL_Delay+0x28>
  {
  }
}
 8000d38:	bf00      	nop
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2400000c 	.word	0x2400000c

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <__NVIC_SetPriorityGrouping+0x40>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	4313      	orrs	r3, r2
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <__NVIC_SetPriorityGrouping+0x40>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00
 8000d8c:	05fa0000 	.word	0x05fa0000

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db0a      	blt.n	8000dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	490c      	ldr	r1, [pc, #48]	; (8000df8 <__NVIC_SetPriority+0x4c>)
 8000dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd4:	e00a      	b.n	8000dec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4908      	ldr	r1, [pc, #32]	; (8000dfc <__NVIC_SetPriority+0x50>)
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	3b04      	subs	r3, #4
 8000de4:	0112      	lsls	r2, r2, #4
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	440b      	add	r3, r1
 8000dea:	761a      	strb	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f1c3 0307 	rsb	r3, r3, #7
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	bf28      	it	cs
 8000e1e:	2304      	movcs	r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3304      	adds	r3, #4
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d902      	bls.n	8000e30 <NVIC_EncodePriority+0x30>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3b03      	subs	r3, #3
 8000e2e:	e000      	b.n	8000e32 <NVIC_EncodePriority+0x32>
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43d9      	mvns	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	4313      	orrs	r3, r2
         );
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3724      	adds	r7, #36	; 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e78:	d301      	bcc.n	8000e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00f      	b.n	8000e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <SysTick_Config+0x40>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e86:	210f      	movs	r1, #15
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e8c:	f7ff ff8e 	bl	8000dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <SysTick_Config+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <SysTick_Config+0x40>)
 8000e98:	2207      	movs	r2, #7
 8000e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff47 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed0:	f7ff ff5e 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f7ff ff90 	bl	8000e00 <NVIC_EncodePriority>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff5f 	bl	8000dac <__NVIC_SetPriority>
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffb2 	bl	8000e68 <SysTick_Config>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f1e:	4b89      	ldr	r3, [pc, #548]	; (8001144 <HAL_GPIO_Init+0x234>)
 8000f20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f22:	e194      	b.n	800124e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	2101      	movs	r1, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 8186 	beq.w	8001248 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d005      	beq.n	8000f54 <HAL_GPIO_Init+0x44>
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d130      	bne.n	8000fb6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68da      	ldr	r2, [r3, #12]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	091b      	lsrs	r3, r3, #4
 8000fa0:	f003 0201 	and.w	r2, r3, #1
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	2b03      	cmp	r3, #3
 8000fc0:	d017      	beq.n	8000ff2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d123      	bne.n	8001046 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	08da      	lsrs	r2, r3, #3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3208      	adds	r2, #8
 8001006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	220f      	movs	r2, #15
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	691a      	ldr	r2, [r3, #16]
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	08da      	lsrs	r2, r3, #3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3208      	adds	r2, #8
 8001040:	69b9      	ldr	r1, [r7, #24]
 8001042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	2203      	movs	r2, #3
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0203 	and.w	r2, r3, #3
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 80e0 	beq.w	8001248 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001088:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <HAL_GPIO_Init+0x238>)
 800108a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800108e:	4a2e      	ldr	r2, [pc, #184]	; (8001148 <HAL_GPIO_Init+0x238>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001098:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <HAL_GPIO_Init+0x238>)
 800109a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a6:	4a29      	ldr	r2, [pc, #164]	; (800114c <HAL_GPIO_Init+0x23c>)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a20      	ldr	r2, [pc, #128]	; (8001150 <HAL_GPIO_Init+0x240>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d052      	beq.n	8001178 <HAL_GPIO_Init+0x268>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a1f      	ldr	r2, [pc, #124]	; (8001154 <HAL_GPIO_Init+0x244>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d031      	beq.n	800113e <HAL_GPIO_Init+0x22e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a1e      	ldr	r2, [pc, #120]	; (8001158 <HAL_GPIO_Init+0x248>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d02b      	beq.n	800113a <HAL_GPIO_Init+0x22a>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a1d      	ldr	r2, [pc, #116]	; (800115c <HAL_GPIO_Init+0x24c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d025      	beq.n	8001136 <HAL_GPIO_Init+0x226>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <HAL_GPIO_Init+0x250>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d01f      	beq.n	8001132 <HAL_GPIO_Init+0x222>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a1b      	ldr	r2, [pc, #108]	; (8001164 <HAL_GPIO_Init+0x254>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d019      	beq.n	800112e <HAL_GPIO_Init+0x21e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a1a      	ldr	r2, [pc, #104]	; (8001168 <HAL_GPIO_Init+0x258>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d013      	beq.n	800112a <HAL_GPIO_Init+0x21a>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a19      	ldr	r2, [pc, #100]	; (800116c <HAL_GPIO_Init+0x25c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d00d      	beq.n	8001126 <HAL_GPIO_Init+0x216>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a18      	ldr	r2, [pc, #96]	; (8001170 <HAL_GPIO_Init+0x260>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d007      	beq.n	8001122 <HAL_GPIO_Init+0x212>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a17      	ldr	r2, [pc, #92]	; (8001174 <HAL_GPIO_Init+0x264>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d101      	bne.n	800111e <HAL_GPIO_Init+0x20e>
 800111a:	2309      	movs	r3, #9
 800111c:	e02d      	b.n	800117a <HAL_GPIO_Init+0x26a>
 800111e:	230a      	movs	r3, #10
 8001120:	e02b      	b.n	800117a <HAL_GPIO_Init+0x26a>
 8001122:	2308      	movs	r3, #8
 8001124:	e029      	b.n	800117a <HAL_GPIO_Init+0x26a>
 8001126:	2307      	movs	r3, #7
 8001128:	e027      	b.n	800117a <HAL_GPIO_Init+0x26a>
 800112a:	2306      	movs	r3, #6
 800112c:	e025      	b.n	800117a <HAL_GPIO_Init+0x26a>
 800112e:	2305      	movs	r3, #5
 8001130:	e023      	b.n	800117a <HAL_GPIO_Init+0x26a>
 8001132:	2304      	movs	r3, #4
 8001134:	e021      	b.n	800117a <HAL_GPIO_Init+0x26a>
 8001136:	2303      	movs	r3, #3
 8001138:	e01f      	b.n	800117a <HAL_GPIO_Init+0x26a>
 800113a:	2302      	movs	r3, #2
 800113c:	e01d      	b.n	800117a <HAL_GPIO_Init+0x26a>
 800113e:	2301      	movs	r3, #1
 8001140:	e01b      	b.n	800117a <HAL_GPIO_Init+0x26a>
 8001142:	bf00      	nop
 8001144:	58000080 	.word	0x58000080
 8001148:	58024400 	.word	0x58024400
 800114c:	58000400 	.word	0x58000400
 8001150:	58020000 	.word	0x58020000
 8001154:	58020400 	.word	0x58020400
 8001158:	58020800 	.word	0x58020800
 800115c:	58020c00 	.word	0x58020c00
 8001160:	58021000 	.word	0x58021000
 8001164:	58021400 	.word	0x58021400
 8001168:	58021800 	.word	0x58021800
 800116c:	58021c00 	.word	0x58021c00
 8001170:	58022000 	.word	0x58022000
 8001174:	58022400 	.word	0x58022400
 8001178:	2300      	movs	r3, #0
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	f002 0203 	and.w	r2, r2, #3
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	4093      	lsls	r3, r2
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800118a:	4938      	ldr	r1, [pc, #224]	; (800126c <HAL_GPIO_Init+0x35c>)
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3302      	adds	r3, #2
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80011be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80011ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	3301      	adds	r3, #1
 800124c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fa22 f303 	lsr.w	r3, r2, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	f47f ae63 	bne.w	8000f24 <HAL_GPIO_Init+0x14>
  }
}
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	3724      	adds	r7, #36	; 0x24
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	58000400 	.word	0x58000400

08001270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
 800127c:	4613      	mov	r3, r2
 800127e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001280:	787b      	ldrb	r3, [r7, #1]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800128c:	e003      	b.n	8001296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800128e:	887b      	ldrh	r3, [r7, #2]
 8001290:	041a      	lsls	r2, r3, #16
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	619a      	str	r2, [r3, #24]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b085      	sub	sp, #20
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	460b      	mov	r3, r1
 80012ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012b4:	887a      	ldrh	r2, [r7, #2]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	4013      	ands	r3, r2
 80012ba:	041a      	lsls	r2, r3, #16
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	43d9      	mvns	r1, r3
 80012c0:	887b      	ldrh	r3, [r7, #2]
 80012c2:	400b      	ands	r3, r1
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	619a      	str	r2, [r3, #24]
}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80012e0:	4b29      	ldr	r3, [pc, #164]	; (8001388 <HAL_PWREx_ConfigSupply+0xb0>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	2b06      	cmp	r3, #6
 80012ea:	d00a      	beq.n	8001302 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80012ec:	4b26      	ldr	r3, [pc, #152]	; (8001388 <HAL_PWREx_ConfigSupply+0xb0>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d001      	beq.n	80012fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e040      	b.n	8001380 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	e03e      	b.n	8001380 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001302:	4b21      	ldr	r3, [pc, #132]	; (8001388 <HAL_PWREx_ConfigSupply+0xb0>)
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800130a:	491f      	ldr	r1, [pc, #124]	; (8001388 <HAL_PWREx_ConfigSupply+0xb0>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4313      	orrs	r3, r2
 8001310:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001312:	f7ff fce9 	bl	8000ce8 <HAL_GetTick>
 8001316:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001318:	e009      	b.n	800132e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800131a:	f7ff fce5 	bl	8000ce8 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001328:	d901      	bls.n	800132e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e028      	b.n	8001380 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <HAL_PWREx_ConfigSupply+0xb0>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800133a:	d1ee      	bne.n	800131a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b1e      	cmp	r3, #30
 8001340:	d008      	beq.n	8001354 <HAL_PWREx_ConfigSupply+0x7c>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b2e      	cmp	r3, #46	; 0x2e
 8001346:	d005      	beq.n	8001354 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b1d      	cmp	r3, #29
 800134c:	d002      	beq.n	8001354 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b2d      	cmp	r3, #45	; 0x2d
 8001352:	d114      	bne.n	800137e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001354:	f7ff fcc8 	bl	8000ce8 <HAL_GetTick>
 8001358:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800135a:	e009      	b.n	8001370 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800135c:	f7ff fcc4 	bl	8000ce8 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800136a:	d901      	bls.n	8001370 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e007      	b.n	8001380 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_PWREx_ConfigSupply+0xb0>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800137c:	d1ee      	bne.n	800135c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	58024800 	.word	0x58024800

0800138c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	; 0x30
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d102      	bne.n	80013a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	f000 bc1f 	b.w	8001bde <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80b3 	beq.w	8001514 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ae:	4b95      	ldr	r3, [pc, #596]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013b8:	4b92      	ldr	r3, [pc, #584]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 80013ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80013be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c0:	2b10      	cmp	r3, #16
 80013c2:	d007      	beq.n	80013d4 <HAL_RCC_OscConfig+0x48>
 80013c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c6:	2b18      	cmp	r3, #24
 80013c8:	d112      	bne.n	80013f0 <HAL_RCC_OscConfig+0x64>
 80013ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d10d      	bne.n	80013f0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d4:	4b8b      	ldr	r3, [pc, #556]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 8098 	beq.w	8001512 <HAL_RCC_OscConfig+0x186>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f040 8093 	bne.w	8001512 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e3f6      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f8:	d106      	bne.n	8001408 <HAL_RCC_OscConfig+0x7c>
 80013fa:	4b82      	ldr	r3, [pc, #520]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a81      	ldr	r2, [pc, #516]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 8001400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e058      	b.n	80014ba <HAL_RCC_OscConfig+0x12e>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d112      	bne.n	8001436 <HAL_RCC_OscConfig+0xaa>
 8001410:	4b7c      	ldr	r3, [pc, #496]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a7b      	ldr	r2, [pc, #492]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 8001416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b79      	ldr	r3, [pc, #484]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a78      	ldr	r2, [pc, #480]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 8001422:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b76      	ldr	r3, [pc, #472]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a75      	ldr	r2, [pc, #468]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 800142e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	e041      	b.n	80014ba <HAL_RCC_OscConfig+0x12e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800143e:	d112      	bne.n	8001466 <HAL_RCC_OscConfig+0xda>
 8001440:	4b70      	ldr	r3, [pc, #448]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a6f      	ldr	r2, [pc, #444]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 8001446:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b6d      	ldr	r3, [pc, #436]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a6c      	ldr	r2, [pc, #432]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 8001452:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b6a      	ldr	r3, [pc, #424]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a69      	ldr	r2, [pc, #420]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 800145e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	e029      	b.n	80014ba <HAL_RCC_OscConfig+0x12e>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800146e:	d112      	bne.n	8001496 <HAL_RCC_OscConfig+0x10a>
 8001470:	4b64      	ldr	r3, [pc, #400]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a63      	ldr	r2, [pc, #396]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 8001476:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b61      	ldr	r3, [pc, #388]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a60      	ldr	r2, [pc, #384]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 8001482:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b5e      	ldr	r3, [pc, #376]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a5d      	ldr	r2, [pc, #372]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 800148e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	e011      	b.n	80014ba <HAL_RCC_OscConfig+0x12e>
 8001496:	4b5b      	ldr	r3, [pc, #364]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a5a      	ldr	r2, [pc, #360]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 800149c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b58      	ldr	r3, [pc, #352]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a57      	ldr	r2, [pc, #348]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 80014a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b55      	ldr	r3, [pc, #340]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a54      	ldr	r2, [pc, #336]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 80014b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014b8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d013      	beq.n	80014ea <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c2:	f7ff fc11 	bl	8000ce8 <HAL_GetTick>
 80014c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ca:	f7ff fc0d 	bl	8000ce8 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b64      	cmp	r3, #100	; 0x64
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e380      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014dc:	4b49      	ldr	r3, [pc, #292]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x13e>
 80014e8:	e014      	b.n	8001514 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ea:	f7ff fbfd 	bl	8000ce8 <HAL_GetTick>
 80014ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f2:	f7ff fbf9 	bl	8000ce8 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b64      	cmp	r3, #100	; 0x64
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e36c      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001504:	4b3f      	ldr	r3, [pc, #252]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1f0      	bne.n	80014f2 <HAL_RCC_OscConfig+0x166>
 8001510:	e000      	b.n	8001514 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001512:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 808c 	beq.w	800163a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001522:	4b38      	ldr	r3, [pc, #224]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800152a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800152c:	4b35      	ldr	r3, [pc, #212]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 800152e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001530:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d007      	beq.n	8001548 <HAL_RCC_OscConfig+0x1bc>
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	2b18      	cmp	r3, #24
 800153c:	d137      	bne.n	80015ae <HAL_RCC_OscConfig+0x222>
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d132      	bne.n	80015ae <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001548:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_OscConfig+0x1d4>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e33e      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001560:	4b28      	ldr	r3, [pc, #160]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 0219 	bic.w	r2, r3, #25
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	4925      	ldr	r1, [pc, #148]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001572:	f7ff fbb9 	bl	8000ce8 <HAL_GetTick>
 8001576:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157a:	f7ff fbb5 	bl	8000ce8 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e328      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001598:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	061b      	lsls	r3, r3, #24
 80015a6:	4917      	ldr	r1, [pc, #92]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ac:	e045      	b.n	800163a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d028      	beq.n	8001608 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 0219 	bic.w	r2, r3, #25
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	4910      	ldr	r1, [pc, #64]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c8:	f7ff fb8e 	bl	8000ce8 <HAL_GetTick>
 80015cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d0:	f7ff fb8a 	bl	8000ce8 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e2fd      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	061b      	lsls	r3, r3, #24
 80015fc:	4901      	ldr	r1, [pc, #4]	; (8001604 <HAL_RCC_OscConfig+0x278>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	604b      	str	r3, [r1, #4]
 8001602:	e01a      	b.n	800163a <HAL_RCC_OscConfig+0x2ae>
 8001604:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001608:	4b97      	ldr	r3, [pc, #604]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a96      	ldr	r2, [pc, #600]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff fb68 	bl	8000ce8 <HAL_GetTick>
 8001618:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161c:	f7ff fb64 	bl	8000ce8 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e2d7      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800162e:	4b8e      	ldr	r3, [pc, #568]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0310 	and.w	r3, r3, #16
 8001642:	2b00      	cmp	r3, #0
 8001644:	d06a      	beq.n	800171c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001646:	4b88      	ldr	r3, [pc, #544]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800164e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001650:	4b85      	ldr	r3, [pc, #532]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	2b08      	cmp	r3, #8
 800165a:	d007      	beq.n	800166c <HAL_RCC_OscConfig+0x2e0>
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	2b18      	cmp	r3, #24
 8001660:	d11b      	bne.n	800169a <HAL_RCC_OscConfig+0x30e>
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b01      	cmp	r3, #1
 800166a:	d116      	bne.n	800169a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800166c:	4b7e      	ldr	r3, [pc, #504]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <HAL_RCC_OscConfig+0x2f8>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	2b80      	cmp	r3, #128	; 0x80
 800167e:	d001      	beq.n	8001684 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e2ac      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001684:	4b78      	ldr	r3, [pc, #480]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	061b      	lsls	r3, r3, #24
 8001692:	4975      	ldr	r1, [pc, #468]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 8001694:	4313      	orrs	r3, r2
 8001696:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001698:	e040      	b.n	800171c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d023      	beq.n	80016ea <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016a2:	4b71      	ldr	r3, [pc, #452]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a70      	ldr	r2, [pc, #448]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 80016a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff fb1b 	bl	8000ce8 <HAL_GetTick>
 80016b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80016b6:	f7ff fb17 	bl	8000ce8 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e28a      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016c8:	4b67      	ldr	r3, [pc, #412]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016d4:	4b64      	ldr	r3, [pc, #400]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	061b      	lsls	r3, r3, #24
 80016e2:	4961      	ldr	r1, [pc, #388]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	60cb      	str	r3, [r1, #12]
 80016e8:	e018      	b.n	800171c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80016ea:	4b5f      	ldr	r3, [pc, #380]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a5e      	ldr	r2, [pc, #376]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 80016f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f6:	f7ff faf7 	bl	8000ce8 <HAL_GetTick>
 80016fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80016fe:	f7ff faf3 	bl	8000ce8 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e266      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001710:	4b55      	ldr	r3, [pc, #340]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f0      	bne.n	80016fe <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b00      	cmp	r3, #0
 8001726:	d036      	beq.n	8001796 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d019      	beq.n	8001764 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001730:	4b4d      	ldr	r3, [pc, #308]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 8001732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001734:	4a4c      	ldr	r2, [pc, #304]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173c:	f7ff fad4 	bl	8000ce8 <HAL_GetTick>
 8001740:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001744:	f7ff fad0 	bl	8000ce8 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e243      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001756:	4b44      	ldr	r3, [pc, #272]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 8001758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x3b8>
 8001762:	e018      	b.n	8001796 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001764:	4b40      	ldr	r3, [pc, #256]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 8001766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001768:	4a3f      	ldr	r2, [pc, #252]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001770:	f7ff faba 	bl	8000ce8 <HAL_GetTick>
 8001774:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001778:	f7ff fab6 	bl	8000ce8 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e229      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800178a:	4b37      	ldr	r3, [pc, #220]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 800178c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0320 	and.w	r3, r3, #32
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d036      	beq.n	8001810 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d019      	beq.n	80017de <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017aa:	4b2f      	ldr	r3, [pc, #188]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a2e      	ldr	r2, [pc, #184]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 80017b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017b6:	f7ff fa97 	bl	8000ce8 <HAL_GetTick>
 80017ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017be:	f7ff fa93 	bl	8000ce8 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e206      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017d0:	4b25      	ldr	r3, [pc, #148]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x432>
 80017dc:	e018      	b.n	8001810 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017de:	4b22      	ldr	r3, [pc, #136]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a21      	ldr	r2, [pc, #132]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 80017e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017ea:	f7ff fa7d 	bl	8000ce8 <HAL_GetTick>
 80017ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f2:	f7ff fa79 	bl	8000ce8 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e1ec      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f0      	bne.n	80017f2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80af 	beq.w	800197c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_RCC_OscConfig+0x4e0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <HAL_RCC_OscConfig+0x4e0>)
 8001824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001828:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800182a:	f7ff fa5d 	bl	8000ce8 <HAL_GetTick>
 800182e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001832:	f7ff fa59 	bl	8000ce8 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b64      	cmp	r3, #100	; 0x64
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e1cc      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_RCC_OscConfig+0x4e0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d10b      	bne.n	8001870 <HAL_RCC_OscConfig+0x4e4>
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 800185a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185c:	4a02      	ldr	r2, [pc, #8]	; (8001868 <HAL_RCC_OscConfig+0x4dc>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6713      	str	r3, [r2, #112]	; 0x70
 8001864:	e05b      	b.n	800191e <HAL_RCC_OscConfig+0x592>
 8001866:	bf00      	nop
 8001868:	58024400 	.word	0x58024400
 800186c:	58024800 	.word	0x58024800
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d112      	bne.n	800189e <HAL_RCC_OscConfig+0x512>
 8001878:	4b9d      	ldr	r3, [pc, #628]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 800187a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187c:	4a9c      	ldr	r2, [pc, #624]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 800187e:	f023 0301 	bic.w	r3, r3, #1
 8001882:	6713      	str	r3, [r2, #112]	; 0x70
 8001884:	4b9a      	ldr	r3, [pc, #616]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001888:	4a99      	ldr	r2, [pc, #612]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 800188a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800188e:	6713      	str	r3, [r2, #112]	; 0x70
 8001890:	4b97      	ldr	r3, [pc, #604]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001894:	4a96      	ldr	r2, [pc, #600]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001896:	f023 0304 	bic.w	r3, r3, #4
 800189a:	6713      	str	r3, [r2, #112]	; 0x70
 800189c:	e03f      	b.n	800191e <HAL_RCC_OscConfig+0x592>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b05      	cmp	r3, #5
 80018a4:	d112      	bne.n	80018cc <HAL_RCC_OscConfig+0x540>
 80018a6:	4b92      	ldr	r3, [pc, #584]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018aa:	4a91      	ldr	r2, [pc, #580]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	6713      	str	r3, [r2, #112]	; 0x70
 80018b2:	4b8f      	ldr	r3, [pc, #572]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 80018b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b6:	4a8e      	ldr	r2, [pc, #568]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 80018b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018bc:	6713      	str	r3, [r2, #112]	; 0x70
 80018be:	4b8c      	ldr	r3, [pc, #560]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 80018c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c2:	4a8b      	ldr	r2, [pc, #556]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ca:	e028      	b.n	800191e <HAL_RCC_OscConfig+0x592>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b85      	cmp	r3, #133	; 0x85
 80018d2:	d112      	bne.n	80018fa <HAL_RCC_OscConfig+0x56e>
 80018d4:	4b86      	ldr	r3, [pc, #536]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 80018d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d8:	4a85      	ldr	r2, [pc, #532]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	6713      	str	r3, [r2, #112]	; 0x70
 80018e0:	4b83      	ldr	r3, [pc, #524]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 80018e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e4:	4a82      	ldr	r2, [pc, #520]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 80018e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ea:	6713      	str	r3, [r2, #112]	; 0x70
 80018ec:	4b80      	ldr	r3, [pc, #512]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f0:	4a7f      	ldr	r2, [pc, #508]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6713      	str	r3, [r2, #112]	; 0x70
 80018f8:	e011      	b.n	800191e <HAL_RCC_OscConfig+0x592>
 80018fa:	4b7d      	ldr	r3, [pc, #500]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 80018fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fe:	4a7c      	ldr	r2, [pc, #496]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001900:	f023 0301 	bic.w	r3, r3, #1
 8001904:	6713      	str	r3, [r2, #112]	; 0x70
 8001906:	4b7a      	ldr	r3, [pc, #488]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190a:	4a79      	ldr	r2, [pc, #484]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 800190c:	f023 0304 	bic.w	r3, r3, #4
 8001910:	6713      	str	r3, [r2, #112]	; 0x70
 8001912:	4b77      	ldr	r3, [pc, #476]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	4a76      	ldr	r2, [pc, #472]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800191c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d015      	beq.n	8001952 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001926:	f7ff f9df 	bl	8000ce8 <HAL_GetTick>
 800192a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800192c:	e00a      	b.n	8001944 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7ff f9db 	bl	8000ce8 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f241 3288 	movw	r2, #5000	; 0x1388
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e14c      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001944:	4b6a      	ldr	r3, [pc, #424]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0ee      	beq.n	800192e <HAL_RCC_OscConfig+0x5a2>
 8001950:	e014      	b.n	800197c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001952:	f7ff f9c9 	bl	8000ce8 <HAL_GetTick>
 8001956:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001958:	e00a      	b.n	8001970 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	f7ff f9c5 	bl	8000ce8 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	f241 3288 	movw	r2, #5000	; 0x1388
 8001968:	4293      	cmp	r3, r2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e136      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001970:	4b5f      	ldr	r3, [pc, #380]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1ee      	bne.n	800195a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 812b 	beq.w	8001bdc <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001986:	4b5a      	ldr	r3, [pc, #360]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800198e:	2b18      	cmp	r3, #24
 8001990:	f000 80bb 	beq.w	8001b0a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	2b02      	cmp	r3, #2
 800199a:	f040 8095 	bne.w	8001ac8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199e:	4b54      	ldr	r3, [pc, #336]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a53      	ldr	r2, [pc, #332]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 80019a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019aa:	f7ff f99d 	bl	8000ce8 <HAL_GetTick>
 80019ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b2:	f7ff f999 	bl	8000ce8 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e10c      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019c4:	4b4a      	ldr	r3, [pc, #296]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f0      	bne.n	80019b2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d0:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 80019d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019d4:	4b47      	ldr	r3, [pc, #284]	; (8001af4 <HAL_RCC_OscConfig+0x768>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019e0:	0112      	lsls	r2, r2, #4
 80019e2:	430a      	orrs	r2, r1
 80019e4:	4942      	ldr	r1, [pc, #264]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	628b      	str	r3, [r1, #40]	; 0x28
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	3b01      	subs	r3, #1
 80019f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f8:	3b01      	subs	r3, #1
 80019fa:	025b      	lsls	r3, r3, #9
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a04:	3b01      	subs	r3, #1
 8001a06:	041b      	lsls	r3, r3, #16
 8001a08:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a12:	3b01      	subs	r3, #1
 8001a14:	061b      	lsls	r3, r3, #24
 8001a16:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001a1a:	4935      	ldr	r1, [pc, #212]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001a20:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	4a32      	ldr	r2, [pc, #200]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001a26:	f023 0301 	bic.w	r3, r3, #1
 8001a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a2c:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a30:	4b31      	ldr	r3, [pc, #196]	; (8001af8 <HAL_RCC_OscConfig+0x76c>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a38:	00d2      	lsls	r2, r2, #3
 8001a3a:	492d      	ldr	r1, [pc, #180]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a40:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	f023 020c 	bic.w	r2, r3, #12
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	4928      	ldr	r1, [pc, #160]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a52:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	f023 0202 	bic.w	r2, r3, #2
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4924      	ldr	r1, [pc, #144]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a64:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	4a21      	ldr	r2, [pc, #132]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a70:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	4a1e      	ldr	r2, [pc, #120]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	4a1b      	ldr	r2, [pc, #108]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001a82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	4a18      	ldr	r2, [pc, #96]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a15      	ldr	r2, [pc, #84]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f922 	bl	8000ce8 <HAL_GetTick>
 8001aa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff f91e 	bl	8000ce8 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e091      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x71c>
 8001ac6:	e089      	b.n	8001bdc <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <HAL_RCC_OscConfig+0x764>)
 8001ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7ff f908 	bl	8000ce8 <HAL_GetTick>
 8001ad8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ada:	e00f      	b.n	8001afc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff f904 	bl	8000ce8 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d908      	bls.n	8001afc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e077      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
 8001aee:	bf00      	nop
 8001af0:	58024400 	.word	0x58024400
 8001af4:	fffffc0c 	.word	0xfffffc0c
 8001af8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001afc:	4b3a      	ldr	r3, [pc, #232]	; (8001be8 <HAL_RCC_OscConfig+0x85c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1e9      	bne.n	8001adc <HAL_RCC_OscConfig+0x750>
 8001b08:	e068      	b.n	8001bdc <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b0a:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <HAL_RCC_OscConfig+0x85c>)
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b10:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <HAL_RCC_OscConfig+0x85c>)
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d031      	beq.n	8001b82 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	f003 0203 	and.w	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d12a      	bne.n	8001b82 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	091b      	lsrs	r3, r3, #4
 8001b30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d122      	bne.n	8001b82 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d11a      	bne.n	8001b82 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	0a5b      	lsrs	r3, r3, #9
 8001b50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b58:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d111      	bne.n	8001b82 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	0c1b      	lsrs	r3, r3, #16
 8001b62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d108      	bne.n	8001b82 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	0e1b      	lsrs	r3, r3, #24
 8001b74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d001      	beq.n	8001b86 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e02b      	b.n	8001bde <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_RCC_OscConfig+0x85c>)
 8001b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8a:	08db      	lsrs	r3, r3, #3
 8001b8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b90:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d01f      	beq.n	8001bdc <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_RCC_OscConfig+0x85c>)
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	4a11      	ldr	r2, [pc, #68]	; (8001be8 <HAL_RCC_OscConfig+0x85c>)
 8001ba2:	f023 0301 	bic.w	r3, r3, #1
 8001ba6:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ba8:	f7ff f89e 	bl	8000ce8 <HAL_GetTick>
 8001bac:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001bae:	bf00      	nop
 8001bb0:	f7ff f89a 	bl	8000ce8 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d0f9      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_RCC_OscConfig+0x85c>)
 8001bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_RCC_OscConfig+0x860>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bc8:	00d2      	lsls	r2, r2, #3
 8001bca:	4907      	ldr	r1, [pc, #28]	; (8001be8 <HAL_RCC_OscConfig+0x85c>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_RCC_OscConfig+0x85c>)
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <HAL_RCC_OscConfig+0x85c>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3730      	adds	r7, #48	; 0x30
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	58024400 	.word	0x58024400
 8001bec:	ffff0007 	.word	0xffff0007

08001bf0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e19c      	b.n	8001f3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c04:	4b8a      	ldr	r3, [pc, #552]	; (8001e30 <HAL_RCC_ClockConfig+0x240>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 030f 	and.w	r3, r3, #15
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d910      	bls.n	8001c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b87      	ldr	r3, [pc, #540]	; (8001e30 <HAL_RCC_ClockConfig+0x240>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 020f 	bic.w	r2, r3, #15
 8001c1a:	4985      	ldr	r1, [pc, #532]	; (8001e30 <HAL_RCC_ClockConfig+0x240>)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b83      	ldr	r3, [pc, #524]	; (8001e30 <HAL_RCC_ClockConfig+0x240>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e184      	b.n	8001f3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d010      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	4b7b      	ldr	r3, [pc, #492]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d908      	bls.n	8001c62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c50:	4b78      	ldr	r3, [pc, #480]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	4975      	ldr	r1, [pc, #468]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d010      	beq.n	8001c90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	4b70      	ldr	r3, [pc, #448]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d908      	bls.n	8001c90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c7e:	4b6d      	ldr	r3, [pc, #436]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	496a      	ldr	r1, [pc, #424]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d010      	beq.n	8001cbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699a      	ldr	r2, [r3, #24]
 8001ca0:	4b64      	ldr	r3, [pc, #400]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d908      	bls.n	8001cbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cac:	4b61      	ldr	r3, [pc, #388]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	495e      	ldr	r1, [pc, #376]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0320 	and.w	r3, r3, #32
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d010      	beq.n	8001cec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69da      	ldr	r2, [r3, #28]
 8001cce:	4b59      	ldr	r3, [pc, #356]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d908      	bls.n	8001cec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001cda:	4b56      	ldr	r3, [pc, #344]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	4953      	ldr	r1, [pc, #332]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d010      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	4b4d      	ldr	r3, [pc, #308]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d908      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d08:	4b4a      	ldr	r3, [pc, #296]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f023 020f 	bic.w	r2, r3, #15
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4947      	ldr	r1, [pc, #284]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d055      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d26:	4b43      	ldr	r3, [pc, #268]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	4940      	ldr	r1, [pc, #256]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d107      	bne.n	8001d50 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d40:	4b3c      	ldr	r3, [pc, #240]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d121      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0f6      	b.n	8001f3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d107      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d58:	4b36      	ldr	r3, [pc, #216]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d115      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0ea      	b.n	8001f3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d107      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d70:	4b30      	ldr	r3, [pc, #192]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0de      	b.n	8001f3e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d80:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0d6      	b.n	8001f3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d90:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	f023 0207 	bic.w	r2, r3, #7
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4925      	ldr	r1, [pc, #148]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001da2:	f7fe ffa1 	bl	8000ce8 <HAL_GetTick>
 8001da6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da8:	e00a      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001daa:	f7fe ff9d 	bl	8000ce8 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e0be      	b.n	8001f3e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc0:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d1eb      	bne.n	8001daa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d010      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d208      	bcs.n	8001e00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f023 020f 	bic.w	r2, r3, #15
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	490e      	ldr	r1, [pc, #56]	; (8001e34 <HAL_RCC_ClockConfig+0x244>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_RCC_ClockConfig+0x240>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d214      	bcs.n	8001e38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_RCC_ClockConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 020f 	bic.w	r2, r3, #15
 8001e16:	4906      	ldr	r1, [pc, #24]	; (8001e30 <HAL_RCC_ClockConfig+0x240>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <HAL_RCC_ClockConfig+0x240>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e086      	b.n	8001f3e <HAL_RCC_ClockConfig+0x34e>
 8001e30:	52002000 	.word	0x52002000
 8001e34:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d010      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	4b3f      	ldr	r3, [pc, #252]	; (8001f48 <HAL_RCC_ClockConfig+0x358>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d208      	bcs.n	8001e66 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e54:	4b3c      	ldr	r3, [pc, #240]	; (8001f48 <HAL_RCC_ClockConfig+0x358>)
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	4939      	ldr	r1, [pc, #228]	; (8001f48 <HAL_RCC_ClockConfig+0x358>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d010      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <HAL_RCC_ClockConfig+0x358>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d208      	bcs.n	8001e94 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e82:	4b31      	ldr	r3, [pc, #196]	; (8001f48 <HAL_RCC_ClockConfig+0x358>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	492e      	ldr	r1, [pc, #184]	; (8001f48 <HAL_RCC_ClockConfig+0x358>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d010      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699a      	ldr	r2, [r3, #24]
 8001ea4:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <HAL_RCC_ClockConfig+0x358>)
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d208      	bcs.n	8001ec2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001eb0:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <HAL_RCC_ClockConfig+0x358>)
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	4922      	ldr	r1, [pc, #136]	; (8001f48 <HAL_RCC_ClockConfig+0x358>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d010      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69da      	ldr	r2, [r3, #28]
 8001ed2:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_RCC_ClockConfig+0x358>)
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d208      	bcs.n	8001ef0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_RCC_ClockConfig+0x358>)
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	4917      	ldr	r1, [pc, #92]	; (8001f48 <HAL_RCC_ClockConfig+0x358>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001ef0:	f000 f834 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_RCC_ClockConfig+0x358>)
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	f003 030f 	and.w	r3, r3, #15
 8001f00:	4912      	ldr	r1, [pc, #72]	; (8001f4c <HAL_RCC_ClockConfig+0x35c>)
 8001f02:	5ccb      	ldrb	r3, [r1, r3]
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_RCC_ClockConfig+0x358>)
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <HAL_RCC_ClockConfig+0x35c>)
 8001f18:	5cd3      	ldrb	r3, [r2, r3]
 8001f1a:	f003 031f 	and.w	r3, r3, #31
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	fa22 f303 	lsr.w	r3, r2, r3
 8001f24:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <HAL_RCC_ClockConfig+0x360>)
 8001f26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f28:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <HAL_RCC_ClockConfig+0x364>)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_RCC_ClockConfig+0x368>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fe8e 	bl	8000c54 <HAL_InitTick>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	58024400 	.word	0x58024400
 8001f4c:	080022c0 	.word	0x080022c0
 8001f50:	24000004 	.word	0x24000004
 8001f54:	24000000 	.word	0x24000000
 8001f58:	24000008 	.word	0x24000008

08001f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b089      	sub	sp, #36	; 0x24
 8001f60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f62:	4bb3      	ldr	r3, [pc, #716]	; (8002230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f6a:	2b18      	cmp	r3, #24
 8001f6c:	f200 8155 	bhi.w	800221a <HAL_RCC_GetSysClockFreq+0x2be>
 8001f70:	a201      	add	r2, pc, #4	; (adr r2, 8001f78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f76:	bf00      	nop
 8001f78:	08001fdd 	.word	0x08001fdd
 8001f7c:	0800221b 	.word	0x0800221b
 8001f80:	0800221b 	.word	0x0800221b
 8001f84:	0800221b 	.word	0x0800221b
 8001f88:	0800221b 	.word	0x0800221b
 8001f8c:	0800221b 	.word	0x0800221b
 8001f90:	0800221b 	.word	0x0800221b
 8001f94:	0800221b 	.word	0x0800221b
 8001f98:	08002003 	.word	0x08002003
 8001f9c:	0800221b 	.word	0x0800221b
 8001fa0:	0800221b 	.word	0x0800221b
 8001fa4:	0800221b 	.word	0x0800221b
 8001fa8:	0800221b 	.word	0x0800221b
 8001fac:	0800221b 	.word	0x0800221b
 8001fb0:	0800221b 	.word	0x0800221b
 8001fb4:	0800221b 	.word	0x0800221b
 8001fb8:	08002009 	.word	0x08002009
 8001fbc:	0800221b 	.word	0x0800221b
 8001fc0:	0800221b 	.word	0x0800221b
 8001fc4:	0800221b 	.word	0x0800221b
 8001fc8:	0800221b 	.word	0x0800221b
 8001fcc:	0800221b 	.word	0x0800221b
 8001fd0:	0800221b 	.word	0x0800221b
 8001fd4:	0800221b 	.word	0x0800221b
 8001fd8:	0800200f 	.word	0x0800200f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fdc:	4b94      	ldr	r3, [pc, #592]	; (8002230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d009      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001fe8:	4b91      	ldr	r3, [pc, #580]	; (8002230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	08db      	lsrs	r3, r3, #3
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	4a90      	ldr	r2, [pc, #576]	; (8002234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001ffa:	e111      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001ffc:	4b8d      	ldr	r3, [pc, #564]	; (8002234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ffe:	61bb      	str	r3, [r7, #24]
      break;
 8002000:	e10e      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002002:	4b8d      	ldr	r3, [pc, #564]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002004:	61bb      	str	r3, [r7, #24]
      break;
 8002006:	e10b      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002008:	4b8c      	ldr	r3, [pc, #560]	; (800223c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800200a:	61bb      	str	r3, [r7, #24]
      break;
 800200c:	e108      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800200e:	4b88      	ldr	r3, [pc, #544]	; (8002230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002018:	4b85      	ldr	r3, [pc, #532]	; (8002230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002022:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002024:	4b82      	ldr	r3, [pc, #520]	; (8002230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800202e:	4b80      	ldr	r3, [pc, #512]	; (8002230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002032:	08db      	lsrs	r3, r3, #3
 8002034:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	fb02 f303 	mul.w	r3, r2, r3
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002046:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80e1 	beq.w	8002214 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b02      	cmp	r3, #2
 8002056:	f000 8083 	beq.w	8002160 <HAL_RCC_GetSysClockFreq+0x204>
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b02      	cmp	r3, #2
 800205e:	f200 80a1 	bhi.w	80021a4 <HAL_RCC_GetSysClockFreq+0x248>
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x114>
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d056      	beq.n	800211c <HAL_RCC_GetSysClockFreq+0x1c0>
 800206e:	e099      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002070:	4b6f      	ldr	r3, [pc, #444]	; (8002230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0320 	and.w	r3, r3, #32
 8002078:	2b00      	cmp	r3, #0
 800207a:	d02d      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800207c:	4b6c      	ldr	r3, [pc, #432]	; (8002230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	4a6b      	ldr	r2, [pc, #428]	; (8002234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
 800208c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020a6:	4b62      	ldr	r3, [pc, #392]	; (8002230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ae:	ee07 3a90 	vmov	s15, r3
 80020b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80020ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002240 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80020d6:	e087      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	ee07 3a90 	vmov	s15, r3
 80020de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002244 <HAL_RCC_GetSysClockFreq+0x2e8>
 80020e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020ea:	4b51      	ldr	r3, [pc, #324]	; (8002230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f2:	ee07 3a90 	vmov	s15, r3
 80020f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80020fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002240 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800210a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800210e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002116:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800211a:	e065      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	ee07 3a90 	vmov	s15, r3
 8002122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002126:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002248 <HAL_RCC_GetSysClockFreq+0x2ec>
 800212a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800212e:	4b40      	ldr	r3, [pc, #256]	; (8002230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800213e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002142:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002240 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800214a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800214e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800215e:	e043      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800216a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800224c <HAL_RCC_GetSysClockFreq+0x2f0>
 800216e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002172:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002182:	ed97 6a02 	vldr	s12, [r7, #8]
 8002186:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002240 <HAL_RCC_GetSysClockFreq+0x2e4>
 800218a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800218e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800219a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021a2:	e021      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	ee07 3a90 	vmov	s15, r3
 80021aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002248 <HAL_RCC_GetSysClockFreq+0x2ec>
 80021b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021be:	ee07 3a90 	vmov	s15, r3
 80021c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80021ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002240 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	0a5b      	lsrs	r3, r3, #9
 80021ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021f2:	3301      	adds	r3, #1
 80021f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	ee07 3a90 	vmov	s15, r3
 80021fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002200:	edd7 6a07 	vldr	s13, [r7, #28]
 8002204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800220c:	ee17 3a90 	vmov	r3, s15
 8002210:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002212:	e005      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	61bb      	str	r3, [r7, #24]
      break;
 8002218:	e002      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800221a:	4b07      	ldr	r3, [pc, #28]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800221c:	61bb      	str	r3, [r7, #24]
      break;
 800221e:	bf00      	nop
  }

  return sysclockfreq;
 8002220:	69bb      	ldr	r3, [r7, #24]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	58024400 	.word	0x58024400
 8002234:	03d09000 	.word	0x03d09000
 8002238:	003d0900 	.word	0x003d0900
 800223c:	016e3600 	.word	0x016e3600
 8002240:	46000000 	.word	0x46000000
 8002244:	4c742400 	.word	0x4c742400
 8002248:	4a742400 	.word	0x4a742400
 800224c:	4bb71b00 	.word	0x4bb71b00

08002250 <memset>:
 8002250:	4402      	add	r2, r0
 8002252:	4603      	mov	r3, r0
 8002254:	4293      	cmp	r3, r2
 8002256:	d100      	bne.n	800225a <memset+0xa>
 8002258:	4770      	bx	lr
 800225a:	f803 1b01 	strb.w	r1, [r3], #1
 800225e:	e7f9      	b.n	8002254 <memset+0x4>

08002260 <__libc_init_array>:
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	4d0d      	ldr	r5, [pc, #52]	; (8002298 <__libc_init_array+0x38>)
 8002264:	4c0d      	ldr	r4, [pc, #52]	; (800229c <__libc_init_array+0x3c>)
 8002266:	1b64      	subs	r4, r4, r5
 8002268:	10a4      	asrs	r4, r4, #2
 800226a:	2600      	movs	r6, #0
 800226c:	42a6      	cmp	r6, r4
 800226e:	d109      	bne.n	8002284 <__libc_init_array+0x24>
 8002270:	4d0b      	ldr	r5, [pc, #44]	; (80022a0 <__libc_init_array+0x40>)
 8002272:	4c0c      	ldr	r4, [pc, #48]	; (80022a4 <__libc_init_array+0x44>)
 8002274:	f000 f818 	bl	80022a8 <_init>
 8002278:	1b64      	subs	r4, r4, r5
 800227a:	10a4      	asrs	r4, r4, #2
 800227c:	2600      	movs	r6, #0
 800227e:	42a6      	cmp	r6, r4
 8002280:	d105      	bne.n	800228e <__libc_init_array+0x2e>
 8002282:	bd70      	pop	{r4, r5, r6, pc}
 8002284:	f855 3b04 	ldr.w	r3, [r5], #4
 8002288:	4798      	blx	r3
 800228a:	3601      	adds	r6, #1
 800228c:	e7ee      	b.n	800226c <__libc_init_array+0xc>
 800228e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002292:	4798      	blx	r3
 8002294:	3601      	adds	r6, #1
 8002296:	e7f2      	b.n	800227e <__libc_init_array+0x1e>
 8002298:	080022d0 	.word	0x080022d0
 800229c:	080022d0 	.word	0x080022d0
 80022a0:	080022d0 	.word	0x080022d0
 80022a4:	080022d4 	.word	0x080022d4

080022a8 <_init>:
 80022a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022aa:	bf00      	nop
 80022ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ae:	bc08      	pop	{r3}
 80022b0:	469e      	mov	lr, r3
 80022b2:	4770      	bx	lr

080022b4 <_fini>:
 80022b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b6:	bf00      	nop
 80022b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ba:	bc08      	pop	{r3}
 80022bc:	469e      	mov	lr, r3
 80022be:	4770      	bx	lr
