
Audiograb-dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4e4  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800b790  0800b790  0000c790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b808  0800b808  0000c808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800b80c  0800b80c  0000c80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000104  24000000  0800b810  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ce4  24000104  0800b914  0000d104  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000de8  0800b914  0000dde8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000d104  2**0
                  CONTENTS, READONLY
  9 .debug_info   000180a1  00000000  00000000  0000d132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003d4c  00000000  00000000  000251d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001240  00000000  00000000  00028f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000da3  00000000  00000000  0002a160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000349a8  00000000  00000000  0002af03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001a824  00000000  00000000  0005f8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013b339  00000000  00000000  0007a0cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001b5408  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004a18  00000000  00000000  001b544c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000072  00000000  00000000  001b9e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000104 	.word	0x24000104
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800b778 	.word	0x0800b778

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000108 	.word	0x24000108
 80002e8:	0800b778 	.word	0x0800b778

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f0:	f000 fdd4 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f4:	f000 f80a 	bl	800030c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80002f8:	f000 f888 	bl	800040c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fc:	f000 f8f4 	bl	80004e8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000300:	f000 f8a2 	bl	8000448 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8000304:	f00a fc4e 	bl	800aba4 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000308:	bf00      	nop
 800030a:	e7fd      	b.n	8000308 <main+0x1c>

0800030c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b09c      	sub	sp, #112	@ 0x70
 8000310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000312:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000316:	224c      	movs	r2, #76	@ 0x4c
 8000318:	2100      	movs	r1, #0
 800031a:	4618      	mov	r0, r3
 800031c:	f00b fa00 	bl	800b720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	2220      	movs	r2, #32
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f00b f9fa 	bl	800b720 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800032c:	4b35      	ldr	r3, [pc, #212]	@ (8000404 <SystemClock_Config+0xf8>)
 800032e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000332:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000336:	2004      	movs	r0, #4
 8000338:	f002 fe68 	bl	800300c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800033c:	2300      	movs	r3, #0
 800033e:	603b      	str	r3, [r7, #0]
 8000340:	4b31      	ldr	r3, [pc, #196]	@ (8000408 <SystemClock_Config+0xfc>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a30      	ldr	r2, [pc, #192]	@ (8000408 <SystemClock_Config+0xfc>)
 8000346:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b2e      	ldr	r3, [pc, #184]	@ (8000408 <SystemClock_Config+0xfc>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000358:	bf00      	nop
 800035a:	4b2b      	ldr	r3, [pc, #172]	@ (8000408 <SystemClock_Config+0xfc>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000362:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000366:	d1f8      	bne.n	800035a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000368:	2303      	movs	r3, #3
 800036a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800036c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000370:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000372:	2301      	movs	r3, #1
 8000374:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000376:	2340      	movs	r3, #64	@ 0x40
 8000378:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037a:	2302      	movs	r3, #2
 800037c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800037e:	2302      	movs	r3, #2
 8000380:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000382:	230c      	movs	r3, #12
 8000384:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000386:	2340      	movs	r3, #64	@ 0x40
 8000388:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800038a:	2302      	movs	r3, #2
 800038c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800038e:	2303      	movs	r3, #3
 8000390:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000392:	2304      	movs	r3, #4
 8000394:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000396:	2304      	movs	r3, #4
 8000398:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800039a:	2300      	movs	r3, #0
 800039c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800039e:	2300      	movs	r3, #0
 80003a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 fe9a 	bl	80030e0 <HAL_RCC_OscConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80003b2:	f000 fb71 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b6:	233f      	movs	r3, #63	@ 0x3f
 80003b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ba:	2303      	movs	r3, #3
 80003bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80003c2:	2308      	movs	r3, #8
 80003c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80003c6:	2340      	movs	r3, #64	@ 0x40
 80003c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003ca:	2340      	movs	r3, #64	@ 0x40
 80003cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80003ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80003d4:	2340      	movs	r3, #64	@ 0x40
 80003d6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2100      	movs	r1, #0
 80003dc:	4618      	mov	r0, r3
 80003de:	f003 fab1 	bl	8003944 <HAL_RCC_ClockConfig>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80003e8:	f000 fb56 	bl	8000a98 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80003ec:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80003f0:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
 80003f4:	2000      	movs	r0, #0
 80003f6:	f003 fc5b 	bl	8003cb0 <HAL_RCC_MCOConfig>
}
 80003fa:	bf00      	nop
 80003fc:	3770      	adds	r7, #112	@ 0x70
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	58024400 	.word	0x58024400
 8000408:	58024800 	.word	0x58024800

0800040c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b0b0      	sub	sp, #192	@ 0xc0
 8000410:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000412:	463b      	mov	r3, r7
 8000414:	22c0      	movs	r2, #192	@ 0xc0
 8000416:	2100      	movs	r1, #0
 8000418:	4618      	mov	r0, r3
 800041a:	f00b f981 	bl	800b720 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800041e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000422:	f04f 0300 	mov.w	r3, #0
 8000426:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800042a:	2300      	movs	r3, #0
 800042c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800042e:	463b      	mov	r3, r7
 8000430:	4618      	mov	r0, r3
 8000432:	f003 fe51 	bl	80040d8 <HAL_RCCEx_PeriphCLKConfig>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 800043c:	f000 fb2c 	bl	8000a98 <Error_Handler>
  }
}
 8000440:	bf00      	nop
 8000442:	37c0      	adds	r7, #192	@ 0xc0
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800044c:	4b24      	ldr	r3, [pc, #144]	@ (80004e0 <MX_SPI2_Init+0x98>)
 800044e:	4a25      	ldr	r2, [pc, #148]	@ (80004e4 <MX_SPI2_Init+0x9c>)
 8000450:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000452:	4b23      	ldr	r3, [pc, #140]	@ (80004e0 <MX_SPI2_Init+0x98>)
 8000454:	2200      	movs	r2, #0
 8000456:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000458:	4b21      	ldr	r3, [pc, #132]	@ (80004e0 <MX_SPI2_Init+0x98>)
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800045e:	4b20      	ldr	r3, [pc, #128]	@ (80004e0 <MX_SPI2_Init+0x98>)
 8000460:	2207      	movs	r2, #7
 8000462:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000464:	4b1e      	ldr	r3, [pc, #120]	@ (80004e0 <MX_SPI2_Init+0x98>)
 8000466:	2200      	movs	r2, #0
 8000468:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800046a:	4b1d      	ldr	r3, [pc, #116]	@ (80004e0 <MX_SPI2_Init+0x98>)
 800046c:	2200      	movs	r2, #0
 800046e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000470:	4b1b      	ldr	r3, [pc, #108]	@ (80004e0 <MX_SPI2_Init+0x98>)
 8000472:	2200      	movs	r2, #0
 8000474:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000476:	4b1a      	ldr	r3, [pc, #104]	@ (80004e0 <MX_SPI2_Init+0x98>)
 8000478:	2200      	movs	r2, #0
 800047a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800047c:	4b18      	ldr	r3, [pc, #96]	@ (80004e0 <MX_SPI2_Init+0x98>)
 800047e:	2200      	movs	r2, #0
 8000480:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000482:	4b17      	ldr	r3, [pc, #92]	@ (80004e0 <MX_SPI2_Init+0x98>)
 8000484:	2200      	movs	r2, #0
 8000486:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000488:	4b15      	ldr	r3, [pc, #84]	@ (80004e0 <MX_SPI2_Init+0x98>)
 800048a:	2200      	movs	r2, #0
 800048c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800048e:	4b14      	ldr	r3, [pc, #80]	@ (80004e0 <MX_SPI2_Init+0x98>)
 8000490:	2200      	movs	r2, #0
 8000492:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000494:	4b12      	ldr	r3, [pc, #72]	@ (80004e0 <MX_SPI2_Init+0x98>)
 8000496:	2200      	movs	r2, #0
 8000498:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800049a:	4b11      	ldr	r3, [pc, #68]	@ (80004e0 <MX_SPI2_Init+0x98>)
 800049c:	2200      	movs	r2, #0
 800049e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <MX_SPI2_Init+0x98>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	@ (80004e0 <MX_SPI2_Init+0x98>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <MX_SPI2_Init+0x98>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80004b2:	4b0b      	ldr	r3, [pc, #44]	@ (80004e0 <MX_SPI2_Init+0x98>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80004b8:	4b09      	ldr	r3, [pc, #36]	@ (80004e0 <MX_SPI2_Init+0x98>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80004be:	4b08      	ldr	r3, [pc, #32]	@ (80004e0 <MX_SPI2_Init+0x98>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80004c4:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <MX_SPI2_Init+0x98>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004ca:	4805      	ldr	r0, [pc, #20]	@ (80004e0 <MX_SPI2_Init+0x98>)
 80004cc:	f005 f926 	bl	800571c <HAL_SPI_Init>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_SPI2_Init+0x92>
  {
    Error_Handler();
 80004d6:	f000 fadf 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	24000120 	.word	0x24000120
 80004e4:	40003800 	.word	0x40003800

080004e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b090      	sub	sp, #64	@ 0x40
 80004ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80004fe:	4bbf      	ldr	r3, [pc, #764]	@ (80007fc <MX_GPIO_Init+0x314>)
 8000500:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000504:	4abd      	ldr	r2, [pc, #756]	@ (80007fc <MX_GPIO_Init+0x314>)
 8000506:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800050a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800050e:	4bbb      	ldr	r3, [pc, #748]	@ (80007fc <MX_GPIO_Init+0x314>)
 8000510:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000518:	62bb      	str	r3, [r7, #40]	@ 0x28
 800051a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051c:	4bb7      	ldr	r3, [pc, #732]	@ (80007fc <MX_GPIO_Init+0x314>)
 800051e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000522:	4ab6      	ldr	r2, [pc, #728]	@ (80007fc <MX_GPIO_Init+0x314>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800052c:	4bb3      	ldr	r3, [pc, #716]	@ (80007fc <MX_GPIO_Init+0x314>)
 800052e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000532:	f003 0302 	and.w	r3, r3, #2
 8000536:	627b      	str	r3, [r7, #36]	@ 0x24
 8000538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800053a:	4bb0      	ldr	r3, [pc, #704]	@ (80007fc <MX_GPIO_Init+0x314>)
 800053c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000540:	4aae      	ldr	r2, [pc, #696]	@ (80007fc <MX_GPIO_Init+0x314>)
 8000542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000546:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800054a:	4bac      	ldr	r3, [pc, #688]	@ (80007fc <MX_GPIO_Init+0x314>)
 800054c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000554:	623b      	str	r3, [r7, #32]
 8000556:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000558:	4ba8      	ldr	r3, [pc, #672]	@ (80007fc <MX_GPIO_Init+0x314>)
 800055a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800055e:	4aa7      	ldr	r2, [pc, #668]	@ (80007fc <MX_GPIO_Init+0x314>)
 8000560:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000564:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000568:	4ba4      	ldr	r3, [pc, #656]	@ (80007fc <MX_GPIO_Init+0x314>)
 800056a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800056e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000572:	61fb      	str	r3, [r7, #28]
 8000574:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000576:	4ba1      	ldr	r3, [pc, #644]	@ (80007fc <MX_GPIO_Init+0x314>)
 8000578:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800057c:	4a9f      	ldr	r2, [pc, #636]	@ (80007fc <MX_GPIO_Init+0x314>)
 800057e:	f043 0308 	orr.w	r3, r3, #8
 8000582:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000586:	4b9d      	ldr	r3, [pc, #628]	@ (80007fc <MX_GPIO_Init+0x314>)
 8000588:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800058c:	f003 0308 	and.w	r3, r3, #8
 8000590:	61bb      	str	r3, [r7, #24]
 8000592:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000594:	4b99      	ldr	r3, [pc, #612]	@ (80007fc <MX_GPIO_Init+0x314>)
 8000596:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800059a:	4a98      	ldr	r2, [pc, #608]	@ (80007fc <MX_GPIO_Init+0x314>)
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80005a4:	4b95      	ldr	r3, [pc, #596]	@ (80007fc <MX_GPIO_Init+0x314>)
 80005a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005b2:	4b92      	ldr	r3, [pc, #584]	@ (80007fc <MX_GPIO_Init+0x314>)
 80005b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005b8:	4a90      	ldr	r2, [pc, #576]	@ (80007fc <MX_GPIO_Init+0x314>)
 80005ba:	f043 0310 	orr.w	r3, r3, #16
 80005be:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80005c2:	4b8e      	ldr	r3, [pc, #568]	@ (80007fc <MX_GPIO_Init+0x314>)
 80005c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005c8:	f003 0310 	and.w	r3, r3, #16
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80005d0:	4b8a      	ldr	r3, [pc, #552]	@ (80007fc <MX_GPIO_Init+0x314>)
 80005d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005d6:	4a89      	ldr	r2, [pc, #548]	@ (80007fc <MX_GPIO_Init+0x314>)
 80005d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005dc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80005e0:	4b86      	ldr	r3, [pc, #536]	@ (80007fc <MX_GPIO_Init+0x314>)
 80005e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b83      	ldr	r3, [pc, #524]	@ (80007fc <MX_GPIO_Init+0x314>)
 80005f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80005f4:	4a81      	ldr	r2, [pc, #516]	@ (80007fc <MX_GPIO_Init+0x314>)
 80005f6:	f043 0301 	orr.w	r3, r3, #1
 80005fa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80005fe:	4b7f      	ldr	r3, [pc, #508]	@ (80007fc <MX_GPIO_Init+0x314>)
 8000600:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800060c:	4b7b      	ldr	r3, [pc, #492]	@ (80007fc <MX_GPIO_Init+0x314>)
 800060e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000612:	4a7a      	ldr	r2, [pc, #488]	@ (80007fc <MX_GPIO_Init+0x314>)
 8000614:	f043 0320 	orr.w	r3, r3, #32
 8000618:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800061c:	4b77      	ldr	r3, [pc, #476]	@ (80007fc <MX_GPIO_Init+0x314>)
 800061e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000622:	f003 0320 	and.w	r3, r3, #32
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062a:	4b74      	ldr	r3, [pc, #464]	@ (80007fc <MX_GPIO_Init+0x314>)
 800062c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000630:	4a72      	ldr	r2, [pc, #456]	@ (80007fc <MX_GPIO_Init+0x314>)
 8000632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000636:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800063a:	4b70      	ldr	r3, [pc, #448]	@ (80007fc <MX_GPIO_Init+0x314>)
 800063c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	210e      	movs	r1, #14
 800064c:	486c      	ldr	r0, [pc, #432]	@ (8000800 <MX_GPIO_Init+0x318>)
 800064e:	f001 f9f7 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f640 0104 	movw	r1, #2052	@ 0x804
 8000658:	486a      	ldr	r0, [pc, #424]	@ (8000804 <MX_GPIO_Init+0x31c>)
 800065a:	f001 f9f1 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000664:	4868      	ldr	r0, [pc, #416]	@ (8000808 <MX_GPIO_Init+0x320>)
 8000666:	f001 f9eb 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2108      	movs	r1, #8
 800066e:	4865      	ldr	r0, [pc, #404]	@ (8000804 <MX_GPIO_Init+0x31c>)
 8000670:	f001 f9e6 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2106      	movs	r1, #6
 8000678:	4863      	ldr	r0, [pc, #396]	@ (8000808 <MX_GPIO_Init+0x320>)
 800067a:	f001 f9e1 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_GPIO_Pin WIFI_DATRDY_Pin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 800067e:	2330      	movs	r3, #48	@ 0x30
 8000680:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000682:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000686:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800068c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000690:	4619      	mov	r1, r3
 8000692:	485b      	ldr	r0, [pc, #364]	@ (8000800 <MX_GPIO_Init+0x318>)
 8000694:	f001 f824 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNCAS_Pin SDCLK_Pin A15_Pin A14_Pin
                           A11_Pin A10_Pin */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000698:	f248 1333 	movw	r3, #33075	@ 0x8133
 800069c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a6:	2303      	movs	r3, #3
 80006a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006aa:	230c      	movs	r3, #12
 80006ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006b2:	4619      	mov	r1, r3
 80006b4:	4853      	ldr	r0, [pc, #332]	@ (8000804 <MX_GPIO_Init+0x31c>)
 80006b6:	f001 f813 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B6_Pin LCD_B7_Pin LCD_B4_Pin LCD_B5_Pin
                           LCD_DE_Pin LCD_G7_Pin LCD_G6_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 80006ba:	23ff      	movs	r3, #255	@ 0xff
 80006bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80006ca:	230e      	movs	r3, #14
 80006cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80006ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006d2:	4619      	mov	r1, r3
 80006d4:	484d      	ldr	r0, [pc, #308]	@ (800080c <MX_GPIO_Init+0x324>)
 80006d6:	f001 f803 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S6_SDO_Pin I2S6_SDI_Pin I2S6_CK_Pin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 80006da:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80006de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	2302      	movs	r3, #2
 80006e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80006ec:	2305      	movs	r3, #5
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006f4:	4619      	mov	r1, r3
 80006f6:	4843      	ldr	r0, [pc, #268]	@ (8000804 <MX_GPIO_Init+0x31c>)
 80006f8:	f000 fff2 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO6_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 80006fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000700:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070a:	2303      	movs	r3, #3
 800070c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800070e:	2309      	movs	r3, #9
 8000710:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000716:	4619      	mov	r1, r3
 8000718:	483a      	ldr	r0, [pc, #232]	@ (8000804 <MX_GPIO_Init+0x31c>)
 800071a:	f000 ffe1 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO7_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 800071e:	2380      	movs	r3, #128	@ 0x80
 8000720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072a:	2303      	movs	r3, #3
 800072c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800072e:	230a      	movs	r3, #10
 8000730:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000736:	4619      	mov	r1, r3
 8000738:	4835      	ldr	r0, [pc, #212]	@ (8000810 <MX_GPIO_Init+0x328>)
 800073a:	f000 ffd1 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D2_Pin D0_Pin D1_Pin
                           D13_Pin D15_Pin D14_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 800073e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000742:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000750:	230c      	movs	r3, #12
 8000752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000754:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000758:	4619      	mov	r1, r3
 800075a:	482d      	ldr	r0, [pc, #180]	@ (8000810 <MX_GPIO_Init+0x328>)
 800075c:	f000 ffc0 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_CK_Pin SDIO1_D3_Pin SDIO1_D1_Pin
                           SDIO1_D0_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D1_Pin
 8000760:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000764:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |SDIO1_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000772:	230c      	movs	r3, #12
 8000774:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000776:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800077a:	4619      	mov	r1, r3
 800077c:	4825      	ldr	r0, [pc, #148]	@ (8000814 <MX_GPIO_Init+0x32c>)
 800077e:	f000 ffaf 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_BOOT_Pin WIFI_WKUP_Pin WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8000782:	230e      	movs	r3, #14
 8000784:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000792:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000796:	4619      	mov	r1, r3
 8000798:	4819      	ldr	r0, [pc, #100]	@ (8000800 <MX_GPIO_Init+0x318>)
 800079a:	f000 ffa1 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL0_Pin FMC_NBL1_Pin D9_Pin D4_Pin
                           D10_Pin D11_Pin D7_Pin D6_Pin
                           D12_Pin D5_Pin D8_Pin */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 800079e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80007a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ac:	2303      	movs	r3, #3
 80007ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007b0:	230c      	movs	r3, #12
 80007b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007b8:	4619      	mov	r1, r3
 80007ba:	4817      	ldr	r0, [pc, #92]	@ (8000818 <MX_GPIO_Init+0x330>)
 80007bc:	f000 ff90 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED1_Pin AUDIO_NRST_Pin USER_LED2_Pin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 80007c0:	f640 030c 	movw	r3, #2060	@ 0x80c
 80007c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007d6:	4619      	mov	r1, r3
 80007d8:	480a      	ldr	r0, [pc, #40]	@ (8000804 <MX_GPIO_Init+0x31c>)
 80007da:	f000 ff81 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B3_Pin LCD_B2_Pin LCD_B1_Pin LCD_B0_Pin
                           LCD_G4_Pin LCD_G3_Pin LCD_G2_Pin LCD_G1_Pin
                           LCD_R7_Pin LCD_G0_Pin LCD_R1_Pin LCD_R6_Pin
                           LCD_R2_Pin LCD_R5_Pin LCD_R3_Pin LCD_R4_Pin */
  GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 80007de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80007f0:	230e      	movs	r3, #14
 80007f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80007f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007f8:	e010      	b.n	800081c <MX_GPIO_Init+0x334>
 80007fa:	bf00      	nop
 80007fc:	58024400 	.word	0x58024400
 8000800:	58022000 	.word	0x58022000
 8000804:	58021800 	.word	0x58021800
 8000808:	58020000 	.word	0x58020000
 800080c:	58022800 	.word	0x58022800
 8000810:	58020c00 	.word	0x58020c00
 8000814:	58020800 	.word	0x58020800
 8000818:	58021000 	.word	0x58021000
 800081c:	4619      	mov	r1, r3
 800081e:	4895      	ldr	r0, [pc, #596]	@ (8000a74 <MX_GPIO_Init+0x58c>)
 8000820:	f000 ff5e 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000824:	2304      	movs	r3, #4
 8000826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000830:	2303      	movs	r3, #3
 8000832:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000834:	230c      	movs	r3, #12
 8000836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800083c:	4619      	mov	r1, r3
 800083e:	488e      	ldr	r0, [pc, #568]	@ (8000a78 <MX_GPIO_Init+0x590>)
 8000840:	f000 ff4e 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000844:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000848:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800084a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800084e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000850:	2301      	movs	r3, #1
 8000852:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000858:	4619      	mov	r1, r3
 800085a:	4888      	ldr	r0, [pc, #544]	@ (8000a7c <MX_GPIO_Init+0x594>)
 800085c:	f000 ff40 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LCD_BL_CTRL_Pin LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 8000860:	f640 0306 	movw	r3, #2054	@ 0x806
 8000864:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000876:	4619      	mov	r1, r3
 8000878:	4881      	ldr	r0, [pc, #516]	@ (8000a80 <MX_GPIO_Init+0x598>)
 800087a:	f000 ff31 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_RX_Pin VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 800087e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000890:	2307      	movs	r3, #7
 8000892:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000898:	4619      	mov	r1, r3
 800089a:	4879      	ldr	r0, [pc, #484]	@ (8000a80 <MX_GPIO_Init+0x598>)
 800089c:	f000 ff20 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKEUP_Pin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008b4:	4619      	mov	r1, r3
 80008b6:	4873      	ldr	r0, [pc, #460]	@ (8000a84 <MX_GPIO_Init+0x59c>)
 80008b8:	f000 ff12 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin A0_Pin A2_Pin A4_Pin
                           A3_Pin A5_Pin A7_Pin SDNRAS_Pin
                           A9_Pin A8_Pin A6_Pin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 80008bc:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80008c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008ce:	230c      	movs	r3, #12
 80008d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008d6:	4619      	mov	r1, r3
 80008d8:	486b      	ldr	r0, [pc, #428]	@ (8000a88 <MX_GPIO_Init+0x5a0>)
 80008da:	f000 ff01 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 80008de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80008f0:	2300      	movs	r3, #0
 80008f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008f8:	4619      	mov	r1, r3
 80008fa:	4861      	ldr	r0, [pc, #388]	@ (8000a80 <MX_GPIO_Init+0x598>)
 80008fc:	f000 fef0 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8000900:	2340      	movs	r3, #64	@ 0x40
 8000902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000910:	230a      	movs	r3, #10
 8000912:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000918:	4619      	mov	r1, r3
 800091a:	485c      	ldr	r0, [pc, #368]	@ (8000a8c <MX_GPIO_Init+0x5a4>)
 800091c:	f000 fee0 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_CLK_Pin LCD_VSYNC_Pin LCD_R0_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 8000920:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000932:	230e      	movs	r3, #14
 8000934:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000936:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800093a:	4619      	mov	r1, r3
 800093c:	484f      	ldr	r0, [pc, #316]	@ (8000a7c <MX_GPIO_Init+0x594>)
 800093e:	f000 fecf 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO3_Pin OCSPI1_IO2_Pin OCSPI1_IO1_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO3_Pin|OCSPI1_IO2_Pin|OCSPI1_IO1_Pin;
 8000942:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000954:	230a      	movs	r3, #10
 8000956:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000958:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800095c:	4619      	mov	r1, r3
 800095e:	484a      	ldr	r0, [pc, #296]	@ (8000a88 <MX_GPIO_Init+0x5a0>)
 8000960:	f000 febe 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C4_SDA_Pin I2C4_SCL_Pin */
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8000964:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800096a:	2312      	movs	r3, #18
 800096c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000976:	2304      	movs	r3, #4
 8000978:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800097e:	4619      	mov	r1, r3
 8000980:	483d      	ldr	r0, [pc, #244]	@ (8000a78 <MX_GPIO_Init+0x590>)
 8000982:	f000 fead 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO0_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO0_Pin;
 8000986:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000998:	2309      	movs	r3, #9
 800099a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(OCSPI1_IO0_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009a0:	4619      	mov	r1, r3
 80009a2:	4835      	ldr	r0, [pc, #212]	@ (8000a78 <MX_GPIO_Init+0x590>)
 80009a4:	f000 fe9c 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO4_Pin OCSPI1_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 80009a8:	2322      	movs	r3, #34	@ 0x22
 80009aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80009b8:	230a      	movs	r3, #10
 80009ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009c0:	4619      	mov	r1, r3
 80009c2:	4830      	ldr	r0, [pc, #192]	@ (8000a84 <MX_GPIO_Init+0x59c>)
 80009c4:	f000 fe8c 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80009c8:	2304      	movs	r3, #4
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009da:	4619      	mov	r1, r3
 80009dc:	482c      	ldr	r0, [pc, #176]	@ (8000a90 <MX_GPIO_Init+0x5a8>)
 80009de:	f000 fe7f 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNE1_Pin SDNWE_Pin SDCKE1_Pin */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 80009e2:	23e0      	movs	r3, #224	@ 0xe0
 80009e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009f2:	230c      	movs	r3, #12
 80009f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80009f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009fa:	4619      	mov	r1, r3
 80009fc:	4824      	ldr	r0, [pc, #144]	@ (8000a90 <MX_GPIO_Init+0x5a8>)
 80009fe:	f000 fe6f 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO5_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 8000a02:	2308      	movs	r3, #8
 8000a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000a12:	2309      	movs	r3, #9
 8000a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	481c      	ldr	r0, [pc, #112]	@ (8000a90 <MX_GPIO_Init+0x5a8>)
 8000a1e:	f000 fe5f 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S6_WS_Pin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin;
 8000a22:	2301      	movs	r3, #1
 8000a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000a32:	2305      	movs	r3, #5
 8000a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(I2S6_WS_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4810      	ldr	r0, [pc, #64]	@ (8000a80 <MX_GPIO_Init+0x598>)
 8000a3e:	f000 fe4f 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_CLK_Pin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8000a42:	2304      	movs	r3, #4
 8000a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000a52:	2309      	movs	r3, #9
 8000a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <MX_GPIO_Init+0x5ac>)
 8000a5e:	f000 fe3f 	bl	80016e0 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_CLOSE);
 8000a62:	2100      	movs	r1, #0
 8000a64:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8000a68:	f000 face 	bl	8001008 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a6c:	bf00      	nop
 8000a6e:	3740      	adds	r7, #64	@ 0x40
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	58022400 	.word	0x58022400
 8000a78:	58020c00 	.word	0x58020c00
 8000a7c:	58022000 	.word	0x58022000
 8000a80:	58020000 	.word	0x58020000
 8000a84:	58020800 	.word	0x58020800
 8000a88:	58021400 	.word	0x58021400
 8000a8c:	58021800 	.word	0x58021800
 8000a90:	58021c00 	.word	0x58021c00
 8000a94:	58020400 	.word	0x58020400

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <Error_Handler+0x8>

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <HAL_MspInit+0x30>)
 8000aac:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ab0:	4a08      	ldr	r2, [pc, #32]	@ (8000ad4 <HAL_MspInit+0x30>)
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000aba:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_MspInit+0x30>)
 8000abc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ac0:	f003 0302 	and.w	r3, r3, #2
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	58024400 	.word	0x58024400

08000ad8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b0bc      	sub	sp, #240	@ 0xf0
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af0:	f107 0318 	add.w	r3, r7, #24
 8000af4:	22c0      	movs	r2, #192	@ 0xc0
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f00a fe11 	bl	800b720 <memset>
  if(hspi->Instance==SPI2)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a50      	ldr	r2, [pc, #320]	@ (8000c44 <HAL_SPI_MspInit+0x16c>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	f040 8098 	bne.w	8000c3a <HAL_SPI_MspInit+0x162>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000b0a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b0e:	f04f 0300 	mov.w	r3, #0
 8000b12:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8000b16:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b1c:	f107 0318 	add.w	r3, r7, #24
 8000b20:	4618      	mov	r0, r3
 8000b22:	f003 fad9 	bl	80040d8 <HAL_RCCEx_PeriphCLKConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8000b2c:	f7ff ffb4 	bl	8000a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b30:	4b45      	ldr	r3, [pc, #276]	@ (8000c48 <HAL_SPI_MspInit+0x170>)
 8000b32:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000b36:	4a44      	ldr	r2, [pc, #272]	@ (8000c48 <HAL_SPI_MspInit+0x170>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000b40:	4b41      	ldr	r3, [pc, #260]	@ (8000c48 <HAL_SPI_MspInit+0x170>)
 8000b42:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000b46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c48 <HAL_SPI_MspInit+0x170>)
 8000b50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b54:	4a3c      	ldr	r2, [pc, #240]	@ (8000c48 <HAL_SPI_MspInit+0x170>)
 8000b56:	f043 0302 	orr.w	r3, r3, #2
 8000b5a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b5e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c48 <HAL_SPI_MspInit+0x170>)
 8000b60:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b36      	ldr	r3, [pc, #216]	@ (8000c48 <HAL_SPI_MspInit+0x170>)
 8000b6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b72:	4a35      	ldr	r2, [pc, #212]	@ (8000c48 <HAL_SPI_MspInit+0x170>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b7c:	4b32      	ldr	r3, [pc, #200]	@ (8000c48 <HAL_SPI_MspInit+0x170>)
 8000b7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c48 <HAL_SPI_MspInit+0x170>)
 8000b8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b90:	4a2d      	ldr	r2, [pc, #180]	@ (8000c48 <HAL_SPI_MspInit+0x170>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c48 <HAL_SPI_MspInit+0x170>)
 8000b9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
    PB9     ------> SPI2_NSS
    PA12     ------> SPI2_SCK
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ba8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bc2:	2305      	movs	r3, #5
 8000bc4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000bcc:	4619      	mov	r1, r3
 8000bce:	481f      	ldr	r0, [pc, #124]	@ (8000c4c <HAL_SPI_MspInit+0x174>)
 8000bd0:	f000 fd86 	bl	80016e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8000bd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bd8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bee:	2305      	movs	r3, #5
 8000bf0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4815      	ldr	r0, [pc, #84]	@ (8000c50 <HAL_SPI_MspInit+0x178>)
 8000bfc:	f000 fd70 	bl	80016e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000c00:	230c      	movs	r3, #12
 8000c02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c18:	2305      	movs	r3, #5
 8000c1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c22:	4619      	mov	r1, r3
 8000c24:	480b      	ldr	r0, [pc, #44]	@ (8000c54 <HAL_SPI_MspInit+0x17c>)
 8000c26:	f000 fd5b 	bl	80016e0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2024      	movs	r0, #36	@ 0x24
 8000c30:	f000 fadb 	bl	80011ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000c34:	2024      	movs	r0, #36	@ 0x24
 8000c36:	f000 faf2 	bl	800121e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000c3a:	bf00      	nop
 8000c3c:	37f0      	adds	r7, #240	@ 0xf0
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40003800 	.word	0x40003800
 8000c48:	58024400 	.word	0x58024400
 8000c4c:	58020400 	.word	0x58020400
 8000c50:	58020000 	.word	0x58020000
 8000c54:	58020800 	.word	0x58020800

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <NMI_Handler+0x4>

08000c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <MemManage_Handler+0x4>

08000c70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cae:	f000 f967 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000cbc:	4802      	ldr	r0, [pc, #8]	@ (8000cc8 <SPI2_IRQHandler+0x10>)
 8000cbe:	f004 fe51 	bl	8005964 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	24000120 	.word	0x24000120

08000ccc <OTG_HS_WKUP_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS wake-up interrupt through EXTI line.
  */
void OTG_HS_WKUP_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_WKUP_IRQn 0 */

  /* USER CODE END OTG_HS_WKUP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000cd0:	4802      	ldr	r0, [pc, #8]	@ (8000cdc <OTG_HS_WKUP_IRQHandler+0x10>)
 8000cd2:	f001 f80f 	bl	8001cf4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_WKUP_IRQn 1 */

  /* USER CODE END OTG_HS_WKUP_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2400068c 	.word	0x2400068c

08000ce0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000ce4:	4802      	ldr	r0, [pc, #8]	@ (8000cf0 <OTG_HS_IRQHandler+0x10>)
 8000ce6:	f001 f805 	bl	8001cf4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2400068c 	.word	0x2400068c

08000cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cf8:	4b3e      	ldr	r3, [pc, #248]	@ (8000df4 <SystemInit+0x100>)
 8000cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cfe:	4a3d      	ldr	r2, [pc, #244]	@ (8000df4 <SystemInit+0x100>)
 8000d00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d08:	4b3b      	ldr	r3, [pc, #236]	@ (8000df8 <SystemInit+0x104>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 030f 	and.w	r3, r3, #15
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d807      	bhi.n	8000d24 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d14:	4b38      	ldr	r3, [pc, #224]	@ (8000df8 <SystemInit+0x104>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f023 030f 	bic.w	r3, r3, #15
 8000d1c:	4a36      	ldr	r2, [pc, #216]	@ (8000df8 <SystemInit+0x104>)
 8000d1e:	f043 0303 	orr.w	r3, r3, #3
 8000d22:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d24:	4b35      	ldr	r3, [pc, #212]	@ (8000dfc <SystemInit+0x108>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a34      	ldr	r2, [pc, #208]	@ (8000dfc <SystemInit+0x108>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d30:	4b32      	ldr	r3, [pc, #200]	@ (8000dfc <SystemInit+0x108>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d36:	4b31      	ldr	r3, [pc, #196]	@ (8000dfc <SystemInit+0x108>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	4930      	ldr	r1, [pc, #192]	@ (8000dfc <SystemInit+0x108>)
 8000d3c:	4b30      	ldr	r3, [pc, #192]	@ (8000e00 <SystemInit+0x10c>)
 8000d3e:	4013      	ands	r3, r2
 8000d40:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d42:	4b2d      	ldr	r3, [pc, #180]	@ (8000df8 <SystemInit+0x104>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 030c 	and.w	r3, r3, #12
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d007      	beq.n	8000d5e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000df8 <SystemInit+0x104>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f023 030f 	bic.w	r3, r3, #15
 8000d56:	4a28      	ldr	r2, [pc, #160]	@ (8000df8 <SystemInit+0x104>)
 8000d58:	f043 0303 	orr.w	r3, r3, #3
 8000d5c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d5e:	4b27      	ldr	r3, [pc, #156]	@ (8000dfc <SystemInit+0x108>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d64:	4b25      	ldr	r3, [pc, #148]	@ (8000dfc <SystemInit+0x108>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d6a:	4b24      	ldr	r3, [pc, #144]	@ (8000dfc <SystemInit+0x108>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d70:	4b22      	ldr	r3, [pc, #136]	@ (8000dfc <SystemInit+0x108>)
 8000d72:	4a24      	ldr	r2, [pc, #144]	@ (8000e04 <SystemInit+0x110>)
 8000d74:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d76:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <SystemInit+0x108>)
 8000d78:	4a23      	ldr	r2, [pc, #140]	@ (8000e08 <SystemInit+0x114>)
 8000d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dfc <SystemInit+0x108>)
 8000d7e:	4a23      	ldr	r2, [pc, #140]	@ (8000e0c <SystemInit+0x118>)
 8000d80:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d82:	4b1e      	ldr	r3, [pc, #120]	@ (8000dfc <SystemInit+0x108>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d88:	4b1c      	ldr	r3, [pc, #112]	@ (8000dfc <SystemInit+0x108>)
 8000d8a:	4a20      	ldr	r2, [pc, #128]	@ (8000e0c <SystemInit+0x118>)
 8000d8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dfc <SystemInit+0x108>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d94:	4b19      	ldr	r3, [pc, #100]	@ (8000dfc <SystemInit+0x108>)
 8000d96:	4a1d      	ldr	r2, [pc, #116]	@ (8000e0c <SystemInit+0x118>)
 8000d98:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <SystemInit+0x108>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000da0:	4b16      	ldr	r3, [pc, #88]	@ (8000dfc <SystemInit+0x108>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a15      	ldr	r2, [pc, #84]	@ (8000dfc <SystemInit+0x108>)
 8000da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000daa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dac:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <SystemInit+0x108>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000db2:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <SystemInit+0x108>)
 8000db4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000db8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d113      	bne.n	8000de8 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <SystemInit+0x108>)
 8000dc2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000dc6:	4a0d      	ldr	r2, [pc, #52]	@ (8000dfc <SystemInit+0x108>)
 8000dc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dcc:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <SystemInit+0x11c>)
 8000dd2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000dd6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <SystemInit+0x108>)
 8000dda:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000dde:	4a07      	ldr	r2, [pc, #28]	@ (8000dfc <SystemInit+0x108>)
 8000de0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000de4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00
 8000df8:	52002000 	.word	0x52002000
 8000dfc:	58024400 	.word	0x58024400
 8000e00:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e04:	02020200 	.word	0x02020200
 8000e08:	01ff0000 	.word	0x01ff0000
 8000e0c:	01010280 	.word	0x01010280
 8000e10:	52004000 	.word	0x52004000

08000e14 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000e18:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <ExitRun0Mode+0x2c>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	4a08      	ldr	r2, [pc, #32]	@ (8000e40 <ExitRun0Mode+0x2c>)
 8000e1e:	f023 0302 	bic.w	r3, r3, #2
 8000e22:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000e24:	bf00      	nop
 8000e26:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <ExitRun0Mode+0x2c>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0f9      	beq.n	8000e26 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000e32:	bf00      	nop
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	58024800 	.word	0x58024800

08000e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e44:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000e80 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000e48:	f7ff ffe4 	bl	8000e14 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e4c:	f7ff ff52 	bl	8000cf4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e50:	480c      	ldr	r0, [pc, #48]	@ (8000e84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e52:	490d      	ldr	r1, [pc, #52]	@ (8000e88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e54:	4a0d      	ldr	r2, [pc, #52]	@ (8000e8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a0a      	ldr	r2, [pc, #40]	@ (8000e90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e68:	4c0a      	ldr	r4, [pc, #40]	@ (8000e94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e76:	f00a fc5b 	bl	800b730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff fa37 	bl	80002ec <main>
  bx  lr
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e80:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000e84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e88:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8000e8c:	0800b810 	.word	0x0800b810
  ldr r2, =_sbss
 8000e90:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 8000e94:	24000de8 	.word	0x24000de8

08000e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea2:	2003      	movs	r0, #3
 8000ea4:	f000 f996 	bl	80011d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000ea8:	f002 ff6c 	bl	8003d84 <HAL_RCC_GetSysClockFreq>
 8000eac:	4602      	mov	r2, r0
 8000eae:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <HAL_Init+0x68>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	f003 030f 	and.w	r3, r3, #15
 8000eb8:	4913      	ldr	r1, [pc, #76]	@ (8000f08 <HAL_Init+0x6c>)
 8000eba:	5ccb      	ldrb	r3, [r1, r3]
 8000ebc:	f003 031f 	and.w	r3, r3, #31
 8000ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <HAL_Init+0x68>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	4a0e      	ldr	r2, [pc, #56]	@ (8000f08 <HAL_Init+0x6c>)
 8000ed0:	5cd3      	ldrb	r3, [r2, r3]
 8000ed2:	f003 031f 	and.w	r3, r3, #31
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8000edc:	4a0b      	ldr	r2, [pc, #44]	@ (8000f0c <HAL_Init+0x70>)
 8000ede:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ee0:	4a0b      	ldr	r2, [pc, #44]	@ (8000f10 <HAL_Init+0x74>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 f814 	bl	8000f14 <HAL_InitTick>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e002      	b.n	8000efc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef6:	f7ff fdd5 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	58024400 	.word	0x58024400
 8000f08:	0800b7d4 	.word	0x0800b7d4
 8000f0c:	24000004 	.word	0x24000004
 8000f10:	24000000 	.word	0x24000000

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f1c:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <HAL_InitTick+0x60>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e021      	b.n	8000f6c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f28:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <HAL_InitTick+0x64>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <HAL_InitTick+0x60>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f97b 	bl	800123a <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00e      	b.n	8000f6c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d80a      	bhi.n	8000f6a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f5c:	f000 f945 	bl	80011ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f60:	4a06      	ldr	r2, [pc, #24]	@ (8000f7c <HAL_InitTick+0x68>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2400000c 	.word	0x2400000c
 8000f78:	24000000 	.word	0x24000000
 8000f7c:	24000008 	.word	0x24000008

08000f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <HAL_IncTick+0x20>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_IncTick+0x24>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <HAL_IncTick+0x24>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	2400000c 	.word	0x2400000c
 8000fa4:	240001a8 	.word	0x240001a8

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b03      	ldr	r3, [pc, #12]	@ (8000fbc <HAL_GetTick+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	240001a8 	.word	0x240001a8

08000fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc8:	f7ff ffee 	bl	8000fa8 <HAL_GetTick>
 8000fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fd8:	d005      	beq.n	8000fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fda:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <HAL_Delay+0x44>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fe6:	bf00      	nop
 8000fe8:	f7ff ffde 	bl	8000fa8 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d8f7      	bhi.n	8000fe8 <HAL_Delay+0x28>
  {
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2400000c 	.word	0x2400000c

08001008 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001012:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	43db      	mvns	r3, r3
 800101a:	401a      	ands	r2, r3
 800101c:	4904      	ldr	r1, [pc, #16]	@ (8001030 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	4313      	orrs	r3, r2
 8001022:	604b      	str	r3, [r1, #4]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	58000400 	.word	0x58000400

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <__NVIC_SetPriorityGrouping+0x40>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 800105e:	4313      	orrs	r3, r2
 8001060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001062:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <__NVIC_SetPriorityGrouping+0x40>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	60d3      	str	r3, [r2, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00
 8001078:	05fa0000 	.word	0x05fa0000

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	db0b      	blt.n	80010c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	f003 021f 	and.w	r2, r3, #31
 80010b0:	4907      	ldr	r1, [pc, #28]	@ (80010d0 <__NVIC_EnableIRQ+0x38>)
 80010b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	2001      	movs	r0, #1
 80010ba:	fa00 f202 	lsl.w	r2, r0, r2
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000e100 	.word	0xe000e100

080010d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	db0a      	blt.n	80010fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	490c      	ldr	r1, [pc, #48]	@ (8001120 <__NVIC_SetPriority+0x4c>)
 80010ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	440b      	add	r3, r1
 80010f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010fc:	e00a      	b.n	8001114 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4908      	ldr	r1, [pc, #32]	@ (8001124 <__NVIC_SetPriority+0x50>)
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	3b04      	subs	r3, #4
 800110c:	0112      	lsls	r2, r2, #4
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	440b      	add	r3, r1
 8001112:	761a      	strb	r2, [r3, #24]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000e100 	.word	0xe000e100
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	@ 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f1c3 0307 	rsb	r3, r3, #7
 8001142:	2b04      	cmp	r3, #4
 8001144:	bf28      	it	cs
 8001146:	2304      	movcs	r3, #4
 8001148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3304      	adds	r3, #4
 800114e:	2b06      	cmp	r3, #6
 8001150:	d902      	bls.n	8001158 <NVIC_EncodePriority+0x30>
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3b03      	subs	r3, #3
 8001156:	e000      	b.n	800115a <NVIC_EncodePriority+0x32>
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43da      	mvns	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	401a      	ands	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001170:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	43d9      	mvns	r1, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	4313      	orrs	r3, r2
         );
}
 8001182:	4618      	mov	r0, r3
 8001184:	3724      	adds	r7, #36	@ 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011a0:	d301      	bcc.n	80011a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00f      	b.n	80011c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <SysTick_Config+0x40>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ae:	210f      	movs	r1, #15
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011b4:	f7ff ff8e 	bl	80010d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b8:	4b05      	ldr	r3, [pc, #20]	@ (80011d0 <SysTick_Config+0x40>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011be:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <SysTick_Config+0x40>)
 80011c0:	2207      	movs	r2, #7
 80011c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	e000e010 	.word	0xe000e010

080011d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff29 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011f8:	f7ff ff40 	bl	800107c <__NVIC_GetPriorityGrouping>
 80011fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	6978      	ldr	r0, [r7, #20]
 8001204:	f7ff ff90 	bl	8001128 <NVIC_EncodePriority>
 8001208:	4602      	mov	r2, r0
 800120a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff5f 	bl	80010d4 <__NVIC_SetPriority>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff33 	bl	8001098 <__NVIC_EnableIRQ>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffa4 	bl	8001190 <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e237      	b.n	80016d6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d004      	beq.n	800127c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2280      	movs	r2, #128	@ 0x80
 8001276:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e22c      	b.n	80016d6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a5c      	ldr	r2, [pc, #368]	@ (80013f4 <HAL_DMA_Abort_IT+0x1a0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d04a      	beq.n	800131c <HAL_DMA_Abort_IT+0xc8>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a5b      	ldr	r2, [pc, #364]	@ (80013f8 <HAL_DMA_Abort_IT+0x1a4>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d045      	beq.n	800131c <HAL_DMA_Abort_IT+0xc8>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a59      	ldr	r2, [pc, #356]	@ (80013fc <HAL_DMA_Abort_IT+0x1a8>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d040      	beq.n	800131c <HAL_DMA_Abort_IT+0xc8>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a58      	ldr	r2, [pc, #352]	@ (8001400 <HAL_DMA_Abort_IT+0x1ac>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d03b      	beq.n	800131c <HAL_DMA_Abort_IT+0xc8>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a56      	ldr	r2, [pc, #344]	@ (8001404 <HAL_DMA_Abort_IT+0x1b0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d036      	beq.n	800131c <HAL_DMA_Abort_IT+0xc8>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a55      	ldr	r2, [pc, #340]	@ (8001408 <HAL_DMA_Abort_IT+0x1b4>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d031      	beq.n	800131c <HAL_DMA_Abort_IT+0xc8>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a53      	ldr	r2, [pc, #332]	@ (800140c <HAL_DMA_Abort_IT+0x1b8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d02c      	beq.n	800131c <HAL_DMA_Abort_IT+0xc8>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a52      	ldr	r2, [pc, #328]	@ (8001410 <HAL_DMA_Abort_IT+0x1bc>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d027      	beq.n	800131c <HAL_DMA_Abort_IT+0xc8>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a50      	ldr	r2, [pc, #320]	@ (8001414 <HAL_DMA_Abort_IT+0x1c0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d022      	beq.n	800131c <HAL_DMA_Abort_IT+0xc8>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a4f      	ldr	r2, [pc, #316]	@ (8001418 <HAL_DMA_Abort_IT+0x1c4>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d01d      	beq.n	800131c <HAL_DMA_Abort_IT+0xc8>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a4d      	ldr	r2, [pc, #308]	@ (800141c <HAL_DMA_Abort_IT+0x1c8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d018      	beq.n	800131c <HAL_DMA_Abort_IT+0xc8>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a4c      	ldr	r2, [pc, #304]	@ (8001420 <HAL_DMA_Abort_IT+0x1cc>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d013      	beq.n	800131c <HAL_DMA_Abort_IT+0xc8>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a4a      	ldr	r2, [pc, #296]	@ (8001424 <HAL_DMA_Abort_IT+0x1d0>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00e      	beq.n	800131c <HAL_DMA_Abort_IT+0xc8>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a49      	ldr	r2, [pc, #292]	@ (8001428 <HAL_DMA_Abort_IT+0x1d4>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d009      	beq.n	800131c <HAL_DMA_Abort_IT+0xc8>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a47      	ldr	r2, [pc, #284]	@ (800142c <HAL_DMA_Abort_IT+0x1d8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d004      	beq.n	800131c <HAL_DMA_Abort_IT+0xc8>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a46      	ldr	r2, [pc, #280]	@ (8001430 <HAL_DMA_Abort_IT+0x1dc>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d101      	bne.n	8001320 <HAL_DMA_Abort_IT+0xcc>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <HAL_DMA_Abort_IT+0xce>
 8001320:	2300      	movs	r3, #0
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 8086 	beq.w	8001434 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2204      	movs	r2, #4
 800132c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a2f      	ldr	r2, [pc, #188]	@ (80013f4 <HAL_DMA_Abort_IT+0x1a0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d04a      	beq.n	80013d0 <HAL_DMA_Abort_IT+0x17c>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a2e      	ldr	r2, [pc, #184]	@ (80013f8 <HAL_DMA_Abort_IT+0x1a4>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d045      	beq.n	80013d0 <HAL_DMA_Abort_IT+0x17c>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a2c      	ldr	r2, [pc, #176]	@ (80013fc <HAL_DMA_Abort_IT+0x1a8>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d040      	beq.n	80013d0 <HAL_DMA_Abort_IT+0x17c>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a2b      	ldr	r2, [pc, #172]	@ (8001400 <HAL_DMA_Abort_IT+0x1ac>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d03b      	beq.n	80013d0 <HAL_DMA_Abort_IT+0x17c>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a29      	ldr	r2, [pc, #164]	@ (8001404 <HAL_DMA_Abort_IT+0x1b0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d036      	beq.n	80013d0 <HAL_DMA_Abort_IT+0x17c>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a28      	ldr	r2, [pc, #160]	@ (8001408 <HAL_DMA_Abort_IT+0x1b4>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d031      	beq.n	80013d0 <HAL_DMA_Abort_IT+0x17c>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a26      	ldr	r2, [pc, #152]	@ (800140c <HAL_DMA_Abort_IT+0x1b8>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d02c      	beq.n	80013d0 <HAL_DMA_Abort_IT+0x17c>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a25      	ldr	r2, [pc, #148]	@ (8001410 <HAL_DMA_Abort_IT+0x1bc>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d027      	beq.n	80013d0 <HAL_DMA_Abort_IT+0x17c>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a23      	ldr	r2, [pc, #140]	@ (8001414 <HAL_DMA_Abort_IT+0x1c0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d022      	beq.n	80013d0 <HAL_DMA_Abort_IT+0x17c>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a22      	ldr	r2, [pc, #136]	@ (8001418 <HAL_DMA_Abort_IT+0x1c4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d01d      	beq.n	80013d0 <HAL_DMA_Abort_IT+0x17c>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a20      	ldr	r2, [pc, #128]	@ (800141c <HAL_DMA_Abort_IT+0x1c8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d018      	beq.n	80013d0 <HAL_DMA_Abort_IT+0x17c>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001420 <HAL_DMA_Abort_IT+0x1cc>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d013      	beq.n	80013d0 <HAL_DMA_Abort_IT+0x17c>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001424 <HAL_DMA_Abort_IT+0x1d0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00e      	beq.n	80013d0 <HAL_DMA_Abort_IT+0x17c>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001428 <HAL_DMA_Abort_IT+0x1d4>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d009      	beq.n	80013d0 <HAL_DMA_Abort_IT+0x17c>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a1a      	ldr	r2, [pc, #104]	@ (800142c <HAL_DMA_Abort_IT+0x1d8>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d004      	beq.n	80013d0 <HAL_DMA_Abort_IT+0x17c>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a19      	ldr	r2, [pc, #100]	@ (8001430 <HAL_DMA_Abort_IT+0x1dc>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d108      	bne.n	80013e2 <HAL_DMA_Abort_IT+0x18e>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0201 	bic.w	r2, r2, #1
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	e178      	b.n	80016d4 <HAL_DMA_Abort_IT+0x480>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0201 	bic.w	r2, r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e16f      	b.n	80016d4 <HAL_DMA_Abort_IT+0x480>
 80013f4:	40020010 	.word	0x40020010
 80013f8:	40020028 	.word	0x40020028
 80013fc:	40020040 	.word	0x40020040
 8001400:	40020058 	.word	0x40020058
 8001404:	40020070 	.word	0x40020070
 8001408:	40020088 	.word	0x40020088
 800140c:	400200a0 	.word	0x400200a0
 8001410:	400200b8 	.word	0x400200b8
 8001414:	40020410 	.word	0x40020410
 8001418:	40020428 	.word	0x40020428
 800141c:	40020440 	.word	0x40020440
 8001420:	40020458 	.word	0x40020458
 8001424:	40020470 	.word	0x40020470
 8001428:	40020488 	.word	0x40020488
 800142c:	400204a0 	.word	0x400204a0
 8001430:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 020e 	bic.w	r2, r2, #14
 8001442:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a6c      	ldr	r2, [pc, #432]	@ (80015fc <HAL_DMA_Abort_IT+0x3a8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d04a      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x290>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a6b      	ldr	r2, [pc, #428]	@ (8001600 <HAL_DMA_Abort_IT+0x3ac>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d045      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x290>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a69      	ldr	r2, [pc, #420]	@ (8001604 <HAL_DMA_Abort_IT+0x3b0>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d040      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x290>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a68      	ldr	r2, [pc, #416]	@ (8001608 <HAL_DMA_Abort_IT+0x3b4>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d03b      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x290>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a66      	ldr	r2, [pc, #408]	@ (800160c <HAL_DMA_Abort_IT+0x3b8>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d036      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x290>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a65      	ldr	r2, [pc, #404]	@ (8001610 <HAL_DMA_Abort_IT+0x3bc>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d031      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x290>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a63      	ldr	r2, [pc, #396]	@ (8001614 <HAL_DMA_Abort_IT+0x3c0>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d02c      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x290>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a62      	ldr	r2, [pc, #392]	@ (8001618 <HAL_DMA_Abort_IT+0x3c4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d027      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x290>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a60      	ldr	r2, [pc, #384]	@ (800161c <HAL_DMA_Abort_IT+0x3c8>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d022      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x290>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a5f      	ldr	r2, [pc, #380]	@ (8001620 <HAL_DMA_Abort_IT+0x3cc>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d01d      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x290>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a5d      	ldr	r2, [pc, #372]	@ (8001624 <HAL_DMA_Abort_IT+0x3d0>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d018      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x290>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a5c      	ldr	r2, [pc, #368]	@ (8001628 <HAL_DMA_Abort_IT+0x3d4>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d013      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x290>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a5a      	ldr	r2, [pc, #360]	@ (800162c <HAL_DMA_Abort_IT+0x3d8>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d00e      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x290>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a59      	ldr	r2, [pc, #356]	@ (8001630 <HAL_DMA_Abort_IT+0x3dc>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d009      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x290>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a57      	ldr	r2, [pc, #348]	@ (8001634 <HAL_DMA_Abort_IT+0x3e0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d004      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x290>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a56      	ldr	r2, [pc, #344]	@ (8001638 <HAL_DMA_Abort_IT+0x3e4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d108      	bne.n	80014f6 <HAL_DMA_Abort_IT+0x2a2>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0201 	bic.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	e007      	b.n	8001506 <HAL_DMA_Abort_IT+0x2b2>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0201 	bic.w	r2, r2, #1
 8001504:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a3c      	ldr	r2, [pc, #240]	@ (80015fc <HAL_DMA_Abort_IT+0x3a8>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d072      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a3a      	ldr	r2, [pc, #232]	@ (8001600 <HAL_DMA_Abort_IT+0x3ac>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d06d      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a39      	ldr	r2, [pc, #228]	@ (8001604 <HAL_DMA_Abort_IT+0x3b0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d068      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a37      	ldr	r2, [pc, #220]	@ (8001608 <HAL_DMA_Abort_IT+0x3b4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d063      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a36      	ldr	r2, [pc, #216]	@ (800160c <HAL_DMA_Abort_IT+0x3b8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d05e      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a34      	ldr	r2, [pc, #208]	@ (8001610 <HAL_DMA_Abort_IT+0x3bc>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d059      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a33      	ldr	r2, [pc, #204]	@ (8001614 <HAL_DMA_Abort_IT+0x3c0>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d054      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a31      	ldr	r2, [pc, #196]	@ (8001618 <HAL_DMA_Abort_IT+0x3c4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d04f      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a30      	ldr	r2, [pc, #192]	@ (800161c <HAL_DMA_Abort_IT+0x3c8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d04a      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a2e      	ldr	r2, [pc, #184]	@ (8001620 <HAL_DMA_Abort_IT+0x3cc>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d045      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a2d      	ldr	r2, [pc, #180]	@ (8001624 <HAL_DMA_Abort_IT+0x3d0>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d040      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a2b      	ldr	r2, [pc, #172]	@ (8001628 <HAL_DMA_Abort_IT+0x3d4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d03b      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a2a      	ldr	r2, [pc, #168]	@ (800162c <HAL_DMA_Abort_IT+0x3d8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d036      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a28      	ldr	r2, [pc, #160]	@ (8001630 <HAL_DMA_Abort_IT+0x3dc>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d031      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a27      	ldr	r2, [pc, #156]	@ (8001634 <HAL_DMA_Abort_IT+0x3e0>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d02c      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a25      	ldr	r2, [pc, #148]	@ (8001638 <HAL_DMA_Abort_IT+0x3e4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d027      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a24      	ldr	r2, [pc, #144]	@ (800163c <HAL_DMA_Abort_IT+0x3e8>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d022      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a22      	ldr	r2, [pc, #136]	@ (8001640 <HAL_DMA_Abort_IT+0x3ec>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d01d      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a21      	ldr	r2, [pc, #132]	@ (8001644 <HAL_DMA_Abort_IT+0x3f0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d018      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001648 <HAL_DMA_Abort_IT+0x3f4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d013      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a1e      	ldr	r2, [pc, #120]	@ (800164c <HAL_DMA_Abort_IT+0x3f8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d00e      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001650 <HAL_DMA_Abort_IT+0x3fc>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d009      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001654 <HAL_DMA_Abort_IT+0x400>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d004      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x3a2>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a19      	ldr	r2, [pc, #100]	@ (8001658 <HAL_DMA_Abort_IT+0x404>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d132      	bne.n	800165c <HAL_DMA_Abort_IT+0x408>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e031      	b.n	800165e <HAL_DMA_Abort_IT+0x40a>
 80015fa:	bf00      	nop
 80015fc:	40020010 	.word	0x40020010
 8001600:	40020028 	.word	0x40020028
 8001604:	40020040 	.word	0x40020040
 8001608:	40020058 	.word	0x40020058
 800160c:	40020070 	.word	0x40020070
 8001610:	40020088 	.word	0x40020088
 8001614:	400200a0 	.word	0x400200a0
 8001618:	400200b8 	.word	0x400200b8
 800161c:	40020410 	.word	0x40020410
 8001620:	40020428 	.word	0x40020428
 8001624:	40020440 	.word	0x40020440
 8001628:	40020458 	.word	0x40020458
 800162c:	40020470 	.word	0x40020470
 8001630:	40020488 	.word	0x40020488
 8001634:	400204a0 	.word	0x400204a0
 8001638:	400204b8 	.word	0x400204b8
 800163c:	58025408 	.word	0x58025408
 8001640:	5802541c 	.word	0x5802541c
 8001644:	58025430 	.word	0x58025430
 8001648:	58025444 	.word	0x58025444
 800164c:	58025458 	.word	0x58025458
 8001650:	5802546c 	.word	0x5802546c
 8001654:	58025480 	.word	0x58025480
 8001658:	58025494 	.word	0x58025494
 800165c:	2300      	movs	r3, #0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d028      	beq.n	80016b4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800166c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001670:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001676:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800167c:	f003 031f 	and.w	r3, r3, #31
 8001680:	2201      	movs	r2, #1
 8001682:	409a      	lsls	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001690:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00c      	beq.n	80016b4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80016a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80016b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	@ 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80016ee:	4b89      	ldr	r3, [pc, #548]	@ (8001914 <HAL_GPIO_Init+0x234>)
 80016f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016f2:	e194      	b.n	8001a1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2101      	movs	r1, #1
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8186 	beq.w	8001a18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b01      	cmp	r3, #1
 8001716:	d005      	beq.n	8001724 <HAL_GPIO_Init+0x44>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d130      	bne.n	8001786 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800175a:	2201      	movs	r2, #1
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	091b      	lsrs	r3, r3, #4
 8001770:	f003 0201 	and.w	r2, r3, #1
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	2b03      	cmp	r3, #3
 8001790:	d017      	beq.n	80017c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	2203      	movs	r2, #3
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d123      	bne.n	8001816 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	08da      	lsrs	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3208      	adds	r2, #8
 80017d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	220f      	movs	r2, #15
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	691a      	ldr	r2, [r3, #16]
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	69b9      	ldr	r1, [r7, #24]
 8001812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	2203      	movs	r2, #3
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0203 	and.w	r2, r3, #3
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 80e0 	beq.w	8001a18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001858:	4b2f      	ldr	r3, [pc, #188]	@ (8001918 <HAL_GPIO_Init+0x238>)
 800185a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800185e:	4a2e      	ldr	r2, [pc, #184]	@ (8001918 <HAL_GPIO_Init+0x238>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001868:	4b2b      	ldr	r3, [pc, #172]	@ (8001918 <HAL_GPIO_Init+0x238>)
 800186a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001876:	4a29      	ldr	r2, [pc, #164]	@ (800191c <HAL_GPIO_Init+0x23c>)
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	3302      	adds	r3, #2
 800187e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	220f      	movs	r2, #15
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a20      	ldr	r2, [pc, #128]	@ (8001920 <HAL_GPIO_Init+0x240>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d052      	beq.n	8001948 <HAL_GPIO_Init+0x268>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001924 <HAL_GPIO_Init+0x244>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d031      	beq.n	800190e <HAL_GPIO_Init+0x22e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001928 <HAL_GPIO_Init+0x248>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d02b      	beq.n	800190a <HAL_GPIO_Init+0x22a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a1d      	ldr	r2, [pc, #116]	@ (800192c <HAL_GPIO_Init+0x24c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d025      	beq.n	8001906 <HAL_GPIO_Init+0x226>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001930 <HAL_GPIO_Init+0x250>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d01f      	beq.n	8001902 <HAL_GPIO_Init+0x222>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001934 <HAL_GPIO_Init+0x254>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d019      	beq.n	80018fe <HAL_GPIO_Init+0x21e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001938 <HAL_GPIO_Init+0x258>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0x21a>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a19      	ldr	r2, [pc, #100]	@ (800193c <HAL_GPIO_Init+0x25c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d00d      	beq.n	80018f6 <HAL_GPIO_Init+0x216>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a18      	ldr	r2, [pc, #96]	@ (8001940 <HAL_GPIO_Init+0x260>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d007      	beq.n	80018f2 <HAL_GPIO_Init+0x212>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a17      	ldr	r2, [pc, #92]	@ (8001944 <HAL_GPIO_Init+0x264>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_GPIO_Init+0x20e>
 80018ea:	2309      	movs	r3, #9
 80018ec:	e02d      	b.n	800194a <HAL_GPIO_Init+0x26a>
 80018ee:	230a      	movs	r3, #10
 80018f0:	e02b      	b.n	800194a <HAL_GPIO_Init+0x26a>
 80018f2:	2308      	movs	r3, #8
 80018f4:	e029      	b.n	800194a <HAL_GPIO_Init+0x26a>
 80018f6:	2307      	movs	r3, #7
 80018f8:	e027      	b.n	800194a <HAL_GPIO_Init+0x26a>
 80018fa:	2306      	movs	r3, #6
 80018fc:	e025      	b.n	800194a <HAL_GPIO_Init+0x26a>
 80018fe:	2305      	movs	r3, #5
 8001900:	e023      	b.n	800194a <HAL_GPIO_Init+0x26a>
 8001902:	2304      	movs	r3, #4
 8001904:	e021      	b.n	800194a <HAL_GPIO_Init+0x26a>
 8001906:	2303      	movs	r3, #3
 8001908:	e01f      	b.n	800194a <HAL_GPIO_Init+0x26a>
 800190a:	2302      	movs	r3, #2
 800190c:	e01d      	b.n	800194a <HAL_GPIO_Init+0x26a>
 800190e:	2301      	movs	r3, #1
 8001910:	e01b      	b.n	800194a <HAL_GPIO_Init+0x26a>
 8001912:	bf00      	nop
 8001914:	58000080 	.word	0x58000080
 8001918:	58024400 	.word	0x58024400
 800191c:	58000400 	.word	0x58000400
 8001920:	58020000 	.word	0x58020000
 8001924:	58020400 	.word	0x58020400
 8001928:	58020800 	.word	0x58020800
 800192c:	58020c00 	.word	0x58020c00
 8001930:	58021000 	.word	0x58021000
 8001934:	58021400 	.word	0x58021400
 8001938:	58021800 	.word	0x58021800
 800193c:	58021c00 	.word	0x58021c00
 8001940:	58022000 	.word	0x58022000
 8001944:	58022400 	.word	0x58022400
 8001948:	2300      	movs	r3, #0
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	f002 0203 	and.w	r2, r2, #3
 8001950:	0092      	lsls	r2, r2, #2
 8001952:	4093      	lsls	r3, r2
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800195a:	4938      	ldr	r1, [pc, #224]	@ (8001a3c <HAL_GPIO_Init+0x35c>)
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	089b      	lsrs	r3, r3, #2
 8001960:	3302      	adds	r3, #2
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800198e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80019bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f47f ae63 	bne.w	80016f4 <HAL_GPIO_Init+0x14>
  }
}
 8001a2e:	bf00      	nop
 8001a30:	bf00      	nop
 8001a32:	3724      	adds	r7, #36	@ 0x24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	58000400 	.word	0x58000400

08001a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	807b      	strh	r3, [r7, #2]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a50:	787b      	ldrb	r3, [r7, #1]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001a5c:	e003      	b.n	8001a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a5e:	887b      	ldrh	r3, [r7, #2]
 8001a60:	041a      	lsls	r2, r3, #16
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	619a      	str	r2, [r3, #24]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af02      	add	r7, sp, #8
 8001a78:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0fe      	b.n	8001c82 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d106      	bne.n	8001a9e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f009 fa29 	bl	800aef0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f004 fb55 	bl	800615a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7c1a      	ldrb	r2, [r3, #16]
 8001ab8:	f88d 2000 	strb.w	r2, [sp]
 8001abc:	3304      	adds	r3, #4
 8001abe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ac0:	f004 fa26 	bl	8005f10 <USB_CoreInit>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d005      	beq.n	8001ad6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2202      	movs	r2, #2
 8001ace:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e0d5      	b.n	8001c82 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f004 fb4d 	bl	800617c <USB_SetCurrentMode>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0c6      	b.n	8001c82 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	73fb      	strb	r3, [r7, #15]
 8001af8:	e04a      	b.n	8001b90 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001afa:	7bfa      	ldrb	r2, [r7, #15]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	3315      	adds	r3, #21
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	3314      	adds	r3, #20
 8001b1e:	7bfa      	ldrb	r2, [r7, #15]
 8001b20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	b298      	uxth	r0, r3
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4413      	add	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	332e      	adds	r3, #46	@ 0x2e
 8001b36:	4602      	mov	r2, r0
 8001b38:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	3318      	adds	r3, #24
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	331c      	adds	r3, #28
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	3320      	adds	r3, #32
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	3324      	adds	r3, #36	@ 0x24
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	791b      	ldrb	r3, [r3, #4]
 8001b94:	7bfa      	ldrb	r2, [r7, #15]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d3af      	bcc.n	8001afa <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	73fb      	strb	r3, [r7, #15]
 8001b9e:	e044      	b.n	8001c2a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bb6:	7bfa      	ldrb	r2, [r7, #15]
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bcc:	7bfa      	ldrb	r2, [r7, #15]
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4413      	add	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	440b      	add	r3, r1
 8001bf0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bf8:	7bfa      	ldrb	r2, [r7, #15]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4413      	add	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	4413      	add	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	3301      	adds	r3, #1
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	791b      	ldrb	r3, [r3, #4]
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d3b5      	bcc.n	8001ba0 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6818      	ldr	r0, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7c1a      	ldrb	r2, [r3, #16]
 8001c3c:	f88d 2000 	strb.w	r2, [sp]
 8001c40:	3304      	adds	r3, #4
 8001c42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c44:	f004 fae6 	bl	8006214 <USB_DevInit>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d005      	beq.n	8001c5a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2202      	movs	r2, #2
 8001c52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e013      	b.n	8001c82 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7b1b      	ldrb	r3, [r3, #12]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d102      	bne.n	8001c76 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f001 f99b 	bl	8002fac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f005 fb29 	bl	80072d2 <USB_DevDisconnect>

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d101      	bne.n	8001ca6 <HAL_PCD_Start+0x1c>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e022      	b.n	8001cec <HAL_PCD_Start+0x62>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d009      	beq.n	8001cce <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d105      	bne.n	8001cce <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cc6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f004 fa30 	bl	8006138 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f005 fad7 	bl	8007290 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b08d      	sub	sp, #52	@ 0x34
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f005 fb95 	bl	800743a <USB_GetMode>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f040 84b9 	bne.w	800268a <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f005 faf9 	bl	8007314 <USB_ReadInterrupts>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 84af 	beq.w	8002688 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	0a1b      	lsrs	r3, r3, #8
 8001d34:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f005 fae6 	bl	8007314 <USB_ReadInterrupts>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d107      	bne.n	8001d62 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	695a      	ldr	r2, [r3, #20]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f002 0202 	and.w	r2, r2, #2
 8001d60:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f005 fad4 	bl	8007314 <USB_ReadInterrupts>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b10      	cmp	r3, #16
 8001d74:	d161      	bne.n	8001e3a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	699a      	ldr	r2, [r3, #24]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0210 	bic.w	r2, r2, #16
 8001d84:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	f003 020f 	and.w	r2, r3, #15
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	3304      	adds	r3, #4
 8001da4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001dac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001db0:	d124      	bne.n	8001dfc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d035      	beq.n	8001e2a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001dc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	6a38      	ldr	r0, [r7, #32]
 8001dd2:	f005 f90b 	bl	8006fec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001de2:	441a      	add	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	695a      	ldr	r2, [r3, #20]
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001df4:	441a      	add	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	615a      	str	r2, [r3, #20]
 8001dfa:	e016      	b.n	8001e2a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001e02:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001e06:	d110      	bne.n	8001e2a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001e0e:	2208      	movs	r2, #8
 8001e10:	4619      	mov	r1, r3
 8001e12:	6a38      	ldr	r0, [r7, #32]
 8001e14:	f005 f8ea 	bl	8006fec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	695a      	ldr	r2, [r3, #20]
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	091b      	lsrs	r3, r3, #4
 8001e20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e24:	441a      	add	r2, r3
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699a      	ldr	r2, [r3, #24]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 0210 	orr.w	r2, r2, #16
 8001e38:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f005 fa68 	bl	8007314 <USB_ReadInterrupts>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e4a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001e4e:	f040 80a7 	bne.w	8001fa0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f005 fa6d 	bl	800733a <USB_ReadDevAllOutEpInterrupt>
 8001e60:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001e62:	e099      	b.n	8001f98 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 808e 	beq.w	8001f8c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	4611      	mov	r1, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f005 fa91 	bl	80073a2 <USB_ReadDevOutEPInterrupt>
 8001e80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00c      	beq.n	8001ea6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8e:	015a      	lsls	r2, r3, #5
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 fefd 	bl	8002ca0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00c      	beq.n	8001eca <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	2308      	movs	r3, #8
 8001ec0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ec2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 ffd3 	bl	8002e70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2310      	movs	r3, #16
 8001ee4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d030      	beq.n	8001f52 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef8:	2b80      	cmp	r3, #128	@ 0x80
 8001efa:	d109      	bne.n	8001f10 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	69fa      	ldr	r2, [r7, #28]
 8001f06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f0e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	3304      	adds	r3, #4
 8001f24:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	78db      	ldrb	r3, [r3, #3]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d108      	bne.n	8001f40 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2200      	movs	r2, #0
 8001f32:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	4619      	mov	r1, r3
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f009 f9bc 	bl	800b2b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	2302      	movs	r3, #2
 8001f50:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	f003 0320 	and.w	r3, r3, #32
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f68:	461a      	mov	r2, r3
 8001f6a:	2320      	movs	r3, #32
 8001f6c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d009      	beq.n	8001f8c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f84:	461a      	mov	r2, r3
 8001f86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f8a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	3301      	adds	r3, #1
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f94:	085b      	lsrs	r3, r3, #1
 8001f96:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f47f af62 	bne.w	8001e64 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f005 f9b5 	bl	8007314 <USB_ReadInterrupts>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001fb4:	f040 80db 	bne.w	800216e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f005 f9d6 	bl	800736e <USB_ReadDevAllInEpInterrupt>
 8001fc2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001fc8:	e0cd      	b.n	8002166 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80c2 	beq.w	800215a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f005 f9fc 	bl	80073de <USB_ReadDevInEPInterrupt>
 8001fe6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d057      	beq.n	80020a2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	43db      	mvns	r3, r3
 800200c:	69f9      	ldr	r1, [r7, #28]
 800200e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002012:	4013      	ands	r3, r2
 8002014:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	4413      	add	r3, r2
 800201e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002022:	461a      	mov	r2, r3
 8002024:	2301      	movs	r3, #1
 8002026:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	799b      	ldrb	r3, [r3, #6]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d132      	bne.n	8002096 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	3320      	adds	r3, #32
 8002040:	6819      	ldr	r1, [r3, #0]
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4403      	add	r3, r0
 8002050:	331c      	adds	r3, #28
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4419      	add	r1, r3
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4403      	add	r3, r0
 8002064:	3320      	adds	r3, #32
 8002066:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206a:	2b00      	cmp	r3, #0
 800206c:	d113      	bne.n	8002096 <HAL_PCD_IRQHandler+0x3a2>
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	3324      	adds	r3, #36	@ 0x24
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d108      	bne.n	8002096 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800208e:	461a      	mov	r2, r3
 8002090:	2101      	movs	r1, #1
 8002092:	f005 fa05 	bl	80074a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	b2db      	uxtb	r3, r3
 800209a:	4619      	mov	r1, r3
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f009 f886 	bl	800b1ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020b8:	461a      	mov	r2, r3
 80020ba:	2308      	movs	r3, #8
 80020bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80020c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020d4:	461a      	mov	r2, r3
 80020d6:	2310      	movs	r3, #16
 80020d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80020e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020f0:	461a      	mov	r2, r3
 80020f2:	2340      	movs	r3, #64	@ 0x40
 80020f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d023      	beq.n	8002148 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002100:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002102:	6a38      	ldr	r0, [r7, #32]
 8002104:	f004 f9e4 	bl	80064d0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	3310      	adds	r3, #16
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4413      	add	r3, r2
 8002118:	3304      	adds	r3, #4
 800211a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	78db      	ldrb	r3, [r3, #3]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d108      	bne.n	8002136 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2200      	movs	r2, #0
 8002128:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	b2db      	uxtb	r3, r3
 800212e:	4619      	mov	r1, r3
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f009 f8d3 	bl	800b2dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	015a      	lsls	r2, r3, #5
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	4413      	add	r3, r2
 800213e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002142:	461a      	mov	r2, r3
 8002144:	2302      	movs	r3, #2
 8002146:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002152:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fd17 	bl	8002b88 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	3301      	adds	r3, #1
 800215e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002162:	085b      	lsrs	r3, r3, #1
 8002164:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002168:	2b00      	cmp	r3, #0
 800216a:	f47f af2e 	bne.w	8001fca <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f005 f8ce 	bl	8007314 <USB_ReadInterrupts>
 8002178:	4603      	mov	r3, r0
 800217a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800217e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002182:	d122      	bne.n	80021ca <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d108      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021aa:	2100      	movs	r1, #0
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 ff21 	bl	8002ff4 <HAL_PCDEx_LPM_Callback>
 80021b2:	e002      	b.n	80021ba <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f009 f871 	bl	800b29c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80021c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f005 f8a0 	bl	8007314 <USB_ReadInterrupts>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021de:	d112      	bne.n	8002206 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d102      	bne.n	80021f6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f009 f82d 	bl	800b250 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695a      	ldr	r2, [r3, #20]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002204:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f005 f882 	bl	8007314 <USB_ReadInterrupts>
 8002210:	4603      	mov	r3, r0
 8002212:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002216:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800221a:	d121      	bne.n	8002260 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800222a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002232:	2b00      	cmp	r3, #0
 8002234:	d111      	bne.n	800225a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	f003 020f 	and.w	r2, r3, #15
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002250:	2101      	movs	r1, #1
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 fece 	bl	8002ff4 <HAL_PCDEx_LPM_Callback>
 8002258:	e002      	b.n	8002260 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f008 fff8 	bl	800b250 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f005 f855 	bl	8007314 <USB_ReadInterrupts>
 800226a:	4603      	mov	r3, r0
 800226c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002274:	f040 80b7 	bne.w	80023e6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	69fa      	ldr	r2, [r7, #28]
 8002282:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002286:	f023 0301 	bic.w	r3, r3, #1
 800228a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2110      	movs	r1, #16
 8002292:	4618      	mov	r0, r3
 8002294:	f004 f91c 	bl	80064d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002298:	2300      	movs	r3, #0
 800229a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800229c:	e046      	b.n	800232c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800229e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022aa:	461a      	mov	r2, r3
 80022ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80022b0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80022b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022c2:	0151      	lsls	r1, r2, #5
 80022c4:	69fa      	ldr	r2, [r7, #28]
 80022c6:	440a      	add	r2, r1
 80022c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80022cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80022d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022de:	461a      	mov	r2, r3
 80022e0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80022e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80022e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022f6:	0151      	lsls	r1, r2, #5
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	440a      	add	r2, r1
 80022fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002300:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002304:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	4413      	add	r3, r2
 800230e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002316:	0151      	lsls	r1, r2, #5
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	440a      	add	r2, r1
 800231c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002320:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002324:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002328:	3301      	adds	r3, #1
 800232a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	791b      	ldrb	r3, [r3, #4]
 8002330:	461a      	mov	r2, r3
 8002332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002334:	4293      	cmp	r3, r2
 8002336:	d3b2      	bcc.n	800229e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002346:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800234a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7bdb      	ldrb	r3, [r3, #15]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d016      	beq.n	8002382 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800235a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002364:	f043 030b 	orr.w	r3, r3, #11
 8002368:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800237a:	f043 030b 	orr.w	r3, r3, #11
 800237e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002380:	e015      	b.n	80023ae <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002390:	4619      	mov	r1, r3
 8002392:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002396:	4313      	orrs	r3, r2
 8002398:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023a8:	f043 030b 	orr.w	r3, r3, #11
 80023ac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023bc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80023c0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023d0:	461a      	mov	r2, r3
 80023d2:	f005 f865 	bl	80074a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80023e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f004 ff92 	bl	8007314 <USB_ReadInterrupts>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023fa:	d123      	bne.n	8002444 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f005 f829 	bl	8007458 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f004 f8d9 	bl	80065c2 <USB_GetDevSpeed>
 8002410:	4603      	mov	r3, r0
 8002412:	461a      	mov	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681c      	ldr	r4, [r3, #0]
 800241c:	f001 fe2c 	bl	8004078 <HAL_RCC_GetHCLKFreq>
 8002420:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002426:	461a      	mov	r2, r3
 8002428:	4620      	mov	r0, r4
 800242a:	f003 fde3 	bl	8005ff4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f008 fee5 	bl	800b1fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002442:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f004 ff63 	bl	8007314 <USB_ReadInterrupts>
 800244e:	4603      	mov	r3, r0
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b08      	cmp	r3, #8
 8002456:	d10a      	bne.n	800246e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f008 fec2 	bl	800b1e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695a      	ldr	r2, [r3, #20]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f002 0208 	and.w	r2, r2, #8
 800246c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f004 ff4e 	bl	8007314 <USB_ReadInterrupts>
 8002478:	4603      	mov	r3, r0
 800247a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800247e:	2b80      	cmp	r3, #128	@ 0x80
 8002480:	d123      	bne.n	80024ca <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800248e:	2301      	movs	r3, #1
 8002490:	627b      	str	r3, [r7, #36]	@ 0x24
 8002492:	e014      	b.n	80024be <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d105      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	4619      	mov	r1, r3
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fb0a 	bl	8002acc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ba:	3301      	adds	r3, #1
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	791b      	ldrb	r3, [r3, #4]
 80024c2:	461a      	mov	r2, r3
 80024c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d3e4      	bcc.n	8002494 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f004 ff20 	bl	8007314 <USB_ReadInterrupts>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024de:	d13c      	bne.n	800255a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024e0:	2301      	movs	r3, #1
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024e4:	e02b      	b.n	800253e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80024e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	3318      	adds	r3, #24
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d115      	bne.n	8002538 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800250c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800250e:	2b00      	cmp	r3, #0
 8002510:	da12      	bge.n	8002538 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	3317      	adds	r3, #23
 8002522:	2201      	movs	r2, #1
 8002524:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002528:	b2db      	uxtb	r3, r3
 800252a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800252e:	b2db      	uxtb	r3, r3
 8002530:	4619      	mov	r1, r3
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 faca 	bl	8002acc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	3301      	adds	r3, #1
 800253c:	627b      	str	r3, [r7, #36]	@ 0x24
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	791b      	ldrb	r3, [r3, #4]
 8002542:	461a      	mov	r2, r3
 8002544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002546:	4293      	cmp	r3, r2
 8002548:	d3cd      	bcc.n	80024e6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695a      	ldr	r2, [r3, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002558:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f004 fed8 	bl	8007314 <USB_ReadInterrupts>
 8002564:	4603      	mov	r3, r0
 8002566:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800256a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800256e:	d156      	bne.n	800261e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002570:	2301      	movs	r3, #1
 8002572:	627b      	str	r3, [r7, #36]	@ 0x24
 8002574:	e045      	b.n	8002602 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	4413      	add	r3, r2
 800257e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d12e      	bne.n	80025fc <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800259e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	da2b      	bge.n	80025fc <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	0c1a      	lsrs	r2, r3, #16
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80025ae:	4053      	eors	r3, r2
 80025b0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d121      	bne.n	80025fc <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10a      	bne.n	80025fc <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025f8:	6053      	str	r3, [r2, #4]
            break;
 80025fa:	e008      	b.n	800260e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	3301      	adds	r3, #1
 8002600:	627b      	str	r3, [r7, #36]	@ 0x24
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	791b      	ldrb	r3, [r3, #4]
 8002606:	461a      	mov	r2, r3
 8002608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260a:	4293      	cmp	r3, r2
 800260c:	d3b3      	bcc.n	8002576 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800261c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f004 fe76 	bl	8007314 <USB_ReadInterrupts>
 8002628:	4603      	mov	r3, r0
 800262a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800262e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002632:	d10a      	bne.n	800264a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f008 fe63 	bl	800b300 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002648:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f004 fe60 	bl	8007314 <USB_ReadInterrupts>
 8002654:	4603      	mov	r3, r0
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b04      	cmp	r3, #4
 800265c:	d115      	bne.n	800268a <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f008 fe53 	bl	800b31c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6859      	ldr	r1, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	430a      	orrs	r2, r1
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	e000      	b.n	800268a <HAL_PCD_IRQHandler+0x996>
      return;
 8002688:	bf00      	nop
    }
  }
}
 800268a:	3734      	adds	r7, #52	@ 0x34
 800268c:	46bd      	mov	sp, r7
 800268e:	bd90      	pop	{r4, r7, pc}

08002690 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_PCD_SetAddress+0x1a>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e012      	b.n	80026d0 <HAL_PCD_SetAddress+0x40>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	4611      	mov	r1, r2
 80026c0:	4618      	mov	r0, r3
 80026c2:	f004 fdbf 	bl	8007244 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	4608      	mov	r0, r1
 80026e2:	4611      	mov	r1, r2
 80026e4:	461a      	mov	r2, r3
 80026e6:	4603      	mov	r3, r0
 80026e8:	70fb      	strb	r3, [r7, #3]
 80026ea:	460b      	mov	r3, r1
 80026ec:	803b      	strh	r3, [r7, #0]
 80026ee:	4613      	mov	r3, r2
 80026f0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	da0f      	bge.n	800271e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	f003 020f 	and.w	r2, r3, #15
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	3310      	adds	r3, #16
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	3304      	adds	r3, #4
 8002714:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	705a      	strb	r2, [r3, #1]
 800271c:	e00f      	b.n	800273e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	f003 020f 	and.w	r2, r3, #15
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	4413      	add	r3, r2
 8002734:	3304      	adds	r3, #4
 8002736:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	f003 030f 	and.w	r3, r3, #15
 8002744:	b2da      	uxtb	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800274a:	883b      	ldrh	r3, [r7, #0]
 800274c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	78ba      	ldrb	r2, [r7, #2]
 8002758:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	785b      	ldrb	r3, [r3, #1]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d004      	beq.n	800276c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800276c:	78bb      	ldrb	r3, [r7, #2]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d102      	bne.n	8002778 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_PCD_EP_Open+0xae>
 8002782:	2302      	movs	r3, #2
 8002784:	e00e      	b.n	80027a4 <HAL_PCD_EP_Open+0xcc>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68f9      	ldr	r1, [r7, #12]
 8002794:	4618      	mov	r0, r3
 8002796:	f003 ff39 	bl	800660c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80027a2:	7afb      	ldrb	r3, [r7, #11]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	da0f      	bge.n	80027e0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	f003 020f 	and.w	r2, r3, #15
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	3310      	adds	r3, #16
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	4413      	add	r3, r2
 80027d4:	3304      	adds	r3, #4
 80027d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2201      	movs	r2, #1
 80027dc:	705a      	strb	r2, [r3, #1]
 80027de:	e00f      	b.n	8002800 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	f003 020f 	and.w	r2, r3, #15
 80027e6:	4613      	mov	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	3304      	adds	r3, #4
 80027f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002800:	78fb      	ldrb	r3, [r7, #3]
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	b2da      	uxtb	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_PCD_EP_Close+0x6e>
 8002816:	2302      	movs	r3, #2
 8002818:	e00e      	b.n	8002838 <HAL_PCD_EP_Close+0x8c>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68f9      	ldr	r1, [r7, #12]
 8002828:	4618      	mov	r0, r3
 800282a:	f003 ff77 	bl	800671c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	460b      	mov	r3, r1
 800284e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002850:	7afb      	ldrb	r3, [r7, #11]
 8002852:	f003 020f 	and.w	r2, r3, #15
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4413      	add	r3, r2
 8002866:	3304      	adds	r3, #4
 8002868:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2200      	movs	r2, #0
 800287a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2200      	movs	r2, #0
 8002880:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002882:	7afb      	ldrb	r3, [r7, #11]
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	b2da      	uxtb	r2, r3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	799b      	ldrb	r3, [r3, #6]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d102      	bne.n	800289c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	799b      	ldrb	r3, [r3, #6]
 80028a4:	461a      	mov	r2, r3
 80028a6:	6979      	ldr	r1, [r7, #20]
 80028a8:	f004 f814 	bl	80068d4 <USB_EPStartXfer>

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	f003 020f 	and.w	r2, r3, #15
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80028d8:	681b      	ldr	r3, [r3, #0]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b086      	sub	sp, #24
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
 80028f2:	460b      	mov	r3, r1
 80028f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f6:	7afb      	ldrb	r3, [r7, #11]
 80028f8:	f003 020f 	and.w	r2, r3, #15
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	3310      	adds	r3, #16
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4413      	add	r3, r2
 800290a:	3304      	adds	r3, #4
 800290c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2200      	movs	r2, #0
 800291e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2201      	movs	r2, #1
 8002924:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002926:	7afb      	ldrb	r3, [r7, #11]
 8002928:	f003 030f 	and.w	r3, r3, #15
 800292c:	b2da      	uxtb	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	799b      	ldrb	r3, [r3, #6]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d102      	bne.n	8002940 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	799b      	ldrb	r3, [r3, #6]
 8002948:	461a      	mov	r2, r3
 800294a:	6979      	ldr	r1, [r7, #20]
 800294c:	f003 ffc2 	bl	80068d4 <USB_EPStartXfer>

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b084      	sub	sp, #16
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	7912      	ldrb	r2, [r2, #4]
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e04f      	b.n	8002a18 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800297c:	2b00      	cmp	r3, #0
 800297e:	da0f      	bge.n	80029a0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002980:	78fb      	ldrb	r3, [r7, #3]
 8002982:	f003 020f 	and.w	r2, r3, #15
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	3310      	adds	r3, #16
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	4413      	add	r3, r2
 8002994:	3304      	adds	r3, #4
 8002996:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	705a      	strb	r2, [r3, #1]
 800299e:	e00d      	b.n	80029bc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	3304      	adds	r3, #4
 80029b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2201      	movs	r2, #1
 80029c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_PCD_EP_SetStall+0x82>
 80029d8:	2302      	movs	r3, #2
 80029da:	e01d      	b.n	8002a18 <HAL_PCD_EP_SetStall+0xbe>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68f9      	ldr	r1, [r7, #12]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f004 fb56 	bl	800709c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	7999      	ldrb	r1, [r3, #6]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f004 fd49 	bl	80074a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	7912      	ldrb	r2, [r2, #4]
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e042      	b.n	8002ac4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	da0f      	bge.n	8002a66 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	f003 020f 	and.w	r2, r3, #15
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	3310      	adds	r3, #16
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2201      	movs	r2, #1
 8002a62:	705a      	strb	r2, [r3, #1]
 8002a64:	e00f      	b.n	8002a86 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a66:	78fb      	ldrb	r3, [r7, #3]
 8002a68:	f003 020f 	and.w	r2, r3, #15
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_PCD_EP_ClrStall+0x86>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e00e      	b.n	8002ac4 <HAL_PCD_EP_ClrStall+0xa4>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68f9      	ldr	r1, [r7, #12]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f004 fb5f 	bl	8007178 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002ad8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	da0c      	bge.n	8002afa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	f003 020f 	and.w	r2, r3, #15
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	3310      	adds	r3, #16
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	3304      	adds	r3, #4
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	e00c      	b.n	8002b14 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002afa:	78fb      	ldrb	r3, [r7, #3]
 8002afc:	f003 020f 	and.w	r2, r3, #15
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	4413      	add	r3, r2
 8002b10:	3304      	adds	r3, #4
 8002b12:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68f9      	ldr	r1, [r7, #12]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f004 f97e 	bl	8006e1c <USB_EPStopXfer>
 8002b20:	4603      	mov	r3, r0
 8002b22:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002b24:	7afb      	ldrb	r3, [r7, #11]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	460b      	mov	r3, r1
 8002b38:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_PCD_EP_Flush+0x1a>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e01b      	b.n	8002b80 <HAL_PCD_EP_Flush+0x52>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8002b50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	da09      	bge.n	8002b6c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	4619      	mov	r1, r3
 8002b64:	4610      	mov	r0, r2
 8002b66:	f003 fcb3 	bl	80064d0 <USB_FlushTxFifo>
 8002b6a:	e004      	b.n	8002b76 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f003 fcdf 	bl	8006534 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	@ 0x28
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	3310      	adds	r3, #16
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	4413      	add	r3, r2
 8002bac:	3304      	adds	r3, #4
 8002bae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	695a      	ldr	r2, [r3, #20]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d901      	bls.n	8002bc0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e06b      	b.n	8002c98 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d902      	bls.n	8002bdc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	3303      	adds	r3, #3
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002be4:	e02a      	b.n	8002c3c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d902      	bls.n	8002c02 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3303      	adds	r3, #3
 8002c06:	089b      	lsrs	r3, r3, #2
 8002c08:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	68d9      	ldr	r1, [r3, #12]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	6978      	ldr	r0, [r7, #20]
 8002c20:	f004 f9a6 	bl	8006f70 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	441a      	add	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	441a      	add	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d809      	bhi.n	8002c66 <PCD_WriteEmptyTxFifo+0xde>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d203      	bcs.n	8002c66 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1bf      	bne.n	8002be6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d811      	bhi.n	8002c96 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	2201      	movs	r2, #1
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	6939      	ldr	r1, [r7, #16]
 8002c8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002c92:	4013      	ands	r3, r2
 8002c94:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3720      	adds	r7, #32
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	333c      	adds	r3, #60	@ 0x3c
 8002cb8:	3304      	adds	r3, #4
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	799b      	ldrb	r3, [r3, #6]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d17b      	bne.n	8002dce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d015      	beq.n	8002d0c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	4a61      	ldr	r2, [pc, #388]	@ (8002e68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	f240 80b9 	bls.w	8002e5c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80b3 	beq.w	8002e5c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d02:	461a      	mov	r2, r3
 8002d04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d08:	6093      	str	r3, [r2, #8]
 8002d0a:	e0a7      	b.n	8002e5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d22:	461a      	mov	r2, r3
 8002d24:	2320      	movs	r3, #32
 8002d26:	6093      	str	r3, [r2, #8]
 8002d28:	e098      	b.n	8002e5c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f040 8093 	bne.w	8002e5c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	4a4b      	ldr	r2, [pc, #300]	@ (8002e68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d90f      	bls.n	8002d5e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d54:	461a      	mov	r2, r3
 8002d56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d5a:	6093      	str	r3, [r2, #8]
 8002d5c:	e07e      	b.n	8002e5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	4613      	mov	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	4413      	add	r3, r2
 8002d70:	3304      	adds	r3, #4
 8002d72:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a1a      	ldr	r2, [r3, #32]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	0159      	lsls	r1, r3, #5
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	440b      	add	r3, r1
 8002d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8a:	1ad2      	subs	r2, r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d114      	bne.n	8002dc0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002da8:	461a      	mov	r2, r3
 8002daa:	2101      	movs	r1, #1
 8002dac:	f004 fb78 	bl	80074a0 <USB_EP0_OutStart>
 8002db0:	e006      	b.n	8002dc0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	441a      	add	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f008 f9d6 	bl	800b178 <HAL_PCD_DataOutStageCallback>
 8002dcc:	e046      	b.n	8002e5c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	4a26      	ldr	r2, [pc, #152]	@ (8002e6c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d124      	bne.n	8002e20 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dec:	461a      	mov	r2, r3
 8002dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002df2:	6093      	str	r3, [r2, #8]
 8002df4:	e032      	b.n	8002e5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	2320      	movs	r3, #32
 8002e10:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	4619      	mov	r1, r3
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f008 f9ad 	bl	800b178 <HAL_PCD_DataOutStageCallback>
 8002e1e:	e01d      	b.n	8002e5c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d114      	bne.n	8002e50 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d108      	bne.n	8002e50 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	f004 fb28 	bl	80074a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	4619      	mov	r1, r3
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f008 f98e 	bl	800b178 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3720      	adds	r7, #32
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	4f54300a 	.word	0x4f54300a
 8002e6c:	4f54310a 	.word	0x4f54310a

08002e70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	333c      	adds	r3, #60	@ 0x3c
 8002e88:	3304      	adds	r3, #4
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4a15      	ldr	r2, [pc, #84]	@ (8002ef8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d90e      	bls.n	8002ec4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d009      	beq.n	8002ec4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ec2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f008 f945 	bl	800b154 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d90c      	bls.n	8002eec <PCD_EP_OutSetupPacket_int+0x7c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	799b      	ldrb	r3, [r3, #6]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d108      	bne.n	8002eec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	f004 fada 	bl	80074a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	4f54300a 	.word	0x4f54300a

08002efc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	70fb      	strb	r3, [r7, #3]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f12:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d107      	bne.n	8002f2a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f1a:	883b      	ldrh	r3, [r7, #0]
 8002f1c:	0419      	lsls	r1, r3, #16
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f28:	e028      	b.n	8002f7c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f30:	0c1b      	lsrs	r3, r3, #16
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	4413      	add	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f38:	2300      	movs	r3, #0
 8002f3a:	73fb      	strb	r3, [r7, #15]
 8002f3c:	e00d      	b.n	8002f5a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	3340      	adds	r3, #64	@ 0x40
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	0c1b      	lsrs	r3, r3, #16
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	4413      	add	r3, r2
 8002f52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	3301      	adds	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
 8002f5a:	7bfa      	ldrb	r2, [r7, #15]
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d3ec      	bcc.n	8002f3e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f64:	883b      	ldrh	r3, [r7, #0]
 8002f66:	0418      	lsls	r0, r3, #16
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6819      	ldr	r1, [r3, #0]
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	4302      	orrs	r2, r0
 8002f74:	3340      	adds	r3, #64	@ 0x40
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	460b      	mov	r3, r1
 8002f94:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	887a      	ldrh	r2, [r7, #2]
 8002f9c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002fda:	4b05      	ldr	r3, [pc, #20]	@ (8002ff0 <HAL_PCDEx_ActivateLPM+0x44>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	10000003 	.word	0x10000003

08002ff4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003014:	4b29      	ldr	r3, [pc, #164]	@ (80030bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	2b06      	cmp	r3, #6
 800301e:	d00a      	beq.n	8003036 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003020:	4b26      	ldr	r3, [pc, #152]	@ (80030bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	429a      	cmp	r2, r3
 800302c:	d001      	beq.n	8003032 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e040      	b.n	80030b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e03e      	b.n	80030b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003036:	4b21      	ldr	r3, [pc, #132]	@ (80030bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800303e:	491f      	ldr	r1, [pc, #124]	@ (80030bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4313      	orrs	r3, r2
 8003044:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003046:	f7fd ffaf 	bl	8000fa8 <HAL_GetTick>
 800304a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800304c:	e009      	b.n	8003062 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800304e:	f7fd ffab 	bl	8000fa8 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800305c:	d901      	bls.n	8003062 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e028      	b.n	80030b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003062:	4b16      	ldr	r3, [pc, #88]	@ (80030bc <HAL_PWREx_ConfigSupply+0xb0>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800306a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800306e:	d1ee      	bne.n	800304e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b1e      	cmp	r3, #30
 8003074:	d008      	beq.n	8003088 <HAL_PWREx_ConfigSupply+0x7c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b2e      	cmp	r3, #46	@ 0x2e
 800307a:	d005      	beq.n	8003088 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b1d      	cmp	r3, #29
 8003080:	d002      	beq.n	8003088 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b2d      	cmp	r3, #45	@ 0x2d
 8003086:	d114      	bne.n	80030b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003088:	f7fd ff8e 	bl	8000fa8 <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800308e:	e009      	b.n	80030a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003090:	f7fd ff8a 	bl	8000fa8 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800309e:	d901      	bls.n	80030a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e007      	b.n	80030b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80030a4:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <HAL_PWREx_ConfigSupply+0xb0>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030b0:	d1ee      	bne.n	8003090 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	58024800 	.word	0x58024800

080030c0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80030c4:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4a04      	ldr	r2, [pc, #16]	@ (80030dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80030ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030ce:	60d3      	str	r3, [r2, #12]
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	58024800 	.word	0x58024800

080030e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08c      	sub	sp, #48	@ 0x30
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d102      	bne.n	80030f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	f000 bc1f 	b.w	8003932 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80b3 	beq.w	8003268 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003102:	4b95      	ldr	r3, [pc, #596]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800310a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800310c:	4b92      	ldr	r3, [pc, #584]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 800310e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003110:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003114:	2b10      	cmp	r3, #16
 8003116:	d007      	beq.n	8003128 <HAL_RCC_OscConfig+0x48>
 8003118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800311a:	2b18      	cmp	r3, #24
 800311c:	d112      	bne.n	8003144 <HAL_RCC_OscConfig+0x64>
 800311e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d10d      	bne.n	8003144 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003128:	4b8b      	ldr	r3, [pc, #556]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8098 	beq.w	8003266 <HAL_RCC_OscConfig+0x186>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	f040 8093 	bne.w	8003266 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e3f6      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800314c:	d106      	bne.n	800315c <HAL_RCC_OscConfig+0x7c>
 800314e:	4b82      	ldr	r3, [pc, #520]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a81      	ldr	r2, [pc, #516]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 8003154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	e058      	b.n	800320e <HAL_RCC_OscConfig+0x12e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d112      	bne.n	800318a <HAL_RCC_OscConfig+0xaa>
 8003164:	4b7c      	ldr	r3, [pc, #496]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a7b      	ldr	r2, [pc, #492]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 800316a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b79      	ldr	r3, [pc, #484]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a78      	ldr	r2, [pc, #480]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 8003176:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	4b76      	ldr	r3, [pc, #472]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a75      	ldr	r2, [pc, #468]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 8003182:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	e041      	b.n	800320e <HAL_RCC_OscConfig+0x12e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003192:	d112      	bne.n	80031ba <HAL_RCC_OscConfig+0xda>
 8003194:	4b70      	ldr	r3, [pc, #448]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a6f      	ldr	r2, [pc, #444]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 800319a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b6d      	ldr	r3, [pc, #436]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a6c      	ldr	r2, [pc, #432]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 80031a6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	4b6a      	ldr	r3, [pc, #424]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a69      	ldr	r2, [pc, #420]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 80031b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	e029      	b.n	800320e <HAL_RCC_OscConfig+0x12e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80031c2:	d112      	bne.n	80031ea <HAL_RCC_OscConfig+0x10a>
 80031c4:	4b64      	ldr	r3, [pc, #400]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a63      	ldr	r2, [pc, #396]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 80031ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4b61      	ldr	r3, [pc, #388]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a60      	ldr	r2, [pc, #384]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 80031d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4b5e      	ldr	r3, [pc, #376]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a5d      	ldr	r2, [pc, #372]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 80031e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	e011      	b.n	800320e <HAL_RCC_OscConfig+0x12e>
 80031ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a5a      	ldr	r2, [pc, #360]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 80031f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	4b58      	ldr	r3, [pc, #352]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a57      	ldr	r2, [pc, #348]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 80031fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4b55      	ldr	r3, [pc, #340]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a54      	ldr	r2, [pc, #336]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 8003208:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800320c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d013      	beq.n	800323e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003216:	f7fd fec7 	bl	8000fa8 <HAL_GetTick>
 800321a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800321e:	f7fd fec3 	bl	8000fa8 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b64      	cmp	r3, #100	@ 0x64
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e380      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003230:	4b49      	ldr	r3, [pc, #292]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x13e>
 800323c:	e014      	b.n	8003268 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323e:	f7fd feb3 	bl	8000fa8 <HAL_GetTick>
 8003242:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003246:	f7fd feaf 	bl	8000fa8 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b64      	cmp	r3, #100	@ 0x64
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e36c      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003258:	4b3f      	ldr	r3, [pc, #252]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f0      	bne.n	8003246 <HAL_RCC_OscConfig+0x166>
 8003264:	e000      	b.n	8003268 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003266:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 808c 	beq.w	800338e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003276:	4b38      	ldr	r3, [pc, #224]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800327e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003280:	4b35      	ldr	r3, [pc, #212]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 8003282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003284:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <HAL_RCC_OscConfig+0x1bc>
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	2b18      	cmp	r3, #24
 8003290:	d137      	bne.n	8003302 <HAL_RCC_OscConfig+0x222>
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d132      	bne.n	8003302 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800329c:	4b2e      	ldr	r3, [pc, #184]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_OscConfig+0x1d4>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e33e      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80032b4:	4b28      	ldr	r3, [pc, #160]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f023 0219 	bic.w	r2, r3, #25
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4925      	ldr	r1, [pc, #148]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c6:	f7fd fe6f 	bl	8000fa8 <HAL_GetTick>
 80032ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ce:	f7fd fe6b 	bl	8000fa8 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e328      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	061b      	lsls	r3, r3, #24
 80032fa:	4917      	ldr	r1, [pc, #92]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003300:	e045      	b.n	800338e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d028      	beq.n	800335c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800330a:	4b13      	ldr	r3, [pc, #76]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f023 0219 	bic.w	r2, r3, #25
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	4910      	ldr	r1, [pc, #64]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 8003318:	4313      	orrs	r3, r2
 800331a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fd fe44 	bl	8000fa8 <HAL_GetTick>
 8003320:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003324:	f7fd fe40 	bl	8000fa8 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e2fd      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003336:	4b08      	ldr	r3, [pc, #32]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003342:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	061b      	lsls	r3, r3, #24
 8003350:	4901      	ldr	r1, [pc, #4]	@ (8003358 <HAL_RCC_OscConfig+0x278>)
 8003352:	4313      	orrs	r3, r2
 8003354:	604b      	str	r3, [r1, #4]
 8003356:	e01a      	b.n	800338e <HAL_RCC_OscConfig+0x2ae>
 8003358:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800335c:	4b97      	ldr	r3, [pc, #604]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a96      	ldr	r2, [pc, #600]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 8003362:	f023 0301 	bic.w	r3, r3, #1
 8003366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fd fe1e 	bl	8000fa8 <HAL_GetTick>
 800336c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003370:	f7fd fe1a 	bl	8000fa8 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e2d7      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003382:	4b8e      	ldr	r3, [pc, #568]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	2b00      	cmp	r3, #0
 8003398:	d06a      	beq.n	8003470 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800339a:	4b88      	ldr	r3, [pc, #544]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033a4:	4b85      	ldr	r3, [pc, #532]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 80033a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d007      	beq.n	80033c0 <HAL_RCC_OscConfig+0x2e0>
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	2b18      	cmp	r3, #24
 80033b4:	d11b      	bne.n	80033ee <HAL_RCC_OscConfig+0x30e>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d116      	bne.n	80033ee <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033c0:	4b7e      	ldr	r3, [pc, #504]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_OscConfig+0x2f8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	2b80      	cmp	r3, #128	@ 0x80
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e2ac      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033d8:	4b78      	ldr	r3, [pc, #480]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	061b      	lsls	r3, r3, #24
 80033e6:	4975      	ldr	r1, [pc, #468]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033ec:	e040      	b.n	8003470 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d023      	beq.n	800343e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80033f6:	4b71      	ldr	r3, [pc, #452]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a70      	ldr	r2, [pc, #448]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 80033fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003402:	f7fd fdd1 	bl	8000fa8 <HAL_GetTick>
 8003406:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800340a:	f7fd fdcd 	bl	8000fa8 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e28a      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800341c:	4b67      	ldr	r3, [pc, #412]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003428:	4b64      	ldr	r3, [pc, #400]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	061b      	lsls	r3, r3, #24
 8003436:	4961      	ldr	r1, [pc, #388]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 8003438:	4313      	orrs	r3, r2
 800343a:	60cb      	str	r3, [r1, #12]
 800343c:	e018      	b.n	8003470 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800343e:	4b5f      	ldr	r3, [pc, #380]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a5e      	ldr	r2, [pc, #376]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 8003444:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344a:	f7fd fdad 	bl	8000fa8 <HAL_GetTick>
 800344e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003452:	f7fd fda9 	bl	8000fa8 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e266      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003464:	4b55      	ldr	r3, [pc, #340]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f0      	bne.n	8003452 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d036      	beq.n	80034ea <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d019      	beq.n	80034b8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003484:	4b4d      	ldr	r3, [pc, #308]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 8003486:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003488:	4a4c      	ldr	r2, [pc, #304]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003490:	f7fd fd8a 	bl	8000fa8 <HAL_GetTick>
 8003494:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003498:	f7fd fd86 	bl	8000fa8 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e243      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034aa:	4b44      	ldr	r3, [pc, #272]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 80034ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0x3b8>
 80034b6:	e018      	b.n	80034ea <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b8:	4b40      	ldr	r3, [pc, #256]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 80034ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034bc:	4a3f      	ldr	r2, [pc, #252]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 80034be:	f023 0301 	bic.w	r3, r3, #1
 80034c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c4:	f7fd fd70 	bl	8000fa8 <HAL_GetTick>
 80034c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034cc:	f7fd fd6c 	bl	8000fa8 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e229      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034de:	4b37      	ldr	r3, [pc, #220]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 80034e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d036      	beq.n	8003564 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d019      	beq.n	8003532 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034fe:	4b2f      	ldr	r3, [pc, #188]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a2e      	ldr	r2, [pc, #184]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 8003504:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003508:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800350a:	f7fd fd4d 	bl	8000fa8 <HAL_GetTick>
 800350e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003512:	f7fd fd49 	bl	8000fa8 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e206      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003524:	4b25      	ldr	r3, [pc, #148]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x432>
 8003530:	e018      	b.n	8003564 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003532:	4b22      	ldr	r3, [pc, #136]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a21      	ldr	r2, [pc, #132]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 8003538:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800353c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800353e:	f7fd fd33 	bl	8000fa8 <HAL_GetTick>
 8003542:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003546:	f7fd fd2f 	bl	8000fa8 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e1ec      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003558:	4b18      	ldr	r3, [pc, #96]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1f0      	bne.n	8003546 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80af 	beq.w	80036d0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003572:	4b13      	ldr	r3, [pc, #76]	@ (80035c0 <HAL_RCC_OscConfig+0x4e0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a12      	ldr	r2, [pc, #72]	@ (80035c0 <HAL_RCC_OscConfig+0x4e0>)
 8003578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800357c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800357e:	f7fd fd13 	bl	8000fa8 <HAL_GetTick>
 8003582:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003586:	f7fd fd0f 	bl	8000fa8 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b64      	cmp	r3, #100	@ 0x64
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e1cc      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003598:	4b09      	ldr	r3, [pc, #36]	@ (80035c0 <HAL_RCC_OscConfig+0x4e0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d10b      	bne.n	80035c4 <HAL_RCC_OscConfig+0x4e4>
 80035ac:	4b03      	ldr	r3, [pc, #12]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b0:	4a02      	ldr	r2, [pc, #8]	@ (80035bc <HAL_RCC_OscConfig+0x4dc>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80035b8:	e05b      	b.n	8003672 <HAL_RCC_OscConfig+0x592>
 80035ba:	bf00      	nop
 80035bc:	58024400 	.word	0x58024400
 80035c0:	58024800 	.word	0x58024800
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d112      	bne.n	80035f2 <HAL_RCC_OscConfig+0x512>
 80035cc:	4b9d      	ldr	r3, [pc, #628]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80035ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d0:	4a9c      	ldr	r2, [pc, #624]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80035d8:	4b9a      	ldr	r3, [pc, #616]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035dc:	4a99      	ldr	r2, [pc, #612]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80035de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035e4:	4b97      	ldr	r3, [pc, #604]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e8:	4a96      	ldr	r2, [pc, #600]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80035ea:	f023 0304 	bic.w	r3, r3, #4
 80035ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80035f0:	e03f      	b.n	8003672 <HAL_RCC_OscConfig+0x592>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b05      	cmp	r3, #5
 80035f8:	d112      	bne.n	8003620 <HAL_RCC_OscConfig+0x540>
 80035fa:	4b92      	ldr	r3, [pc, #584]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fe:	4a91      	ldr	r2, [pc, #580]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 8003600:	f043 0304 	orr.w	r3, r3, #4
 8003604:	6713      	str	r3, [r2, #112]	@ 0x70
 8003606:	4b8f      	ldr	r3, [pc, #572]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360a:	4a8e      	ldr	r2, [pc, #568]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 800360c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003610:	6713      	str	r3, [r2, #112]	@ 0x70
 8003612:	4b8c      	ldr	r3, [pc, #560]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003616:	4a8b      	ldr	r2, [pc, #556]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	6713      	str	r3, [r2, #112]	@ 0x70
 800361e:	e028      	b.n	8003672 <HAL_RCC_OscConfig+0x592>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b85      	cmp	r3, #133	@ 0x85
 8003626:	d112      	bne.n	800364e <HAL_RCC_OscConfig+0x56e>
 8003628:	4b86      	ldr	r3, [pc, #536]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 800362a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800362c:	4a85      	ldr	r2, [pc, #532]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 800362e:	f043 0304 	orr.w	r3, r3, #4
 8003632:	6713      	str	r3, [r2, #112]	@ 0x70
 8003634:	4b83      	ldr	r3, [pc, #524]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003638:	4a82      	ldr	r2, [pc, #520]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 800363a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800363e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003640:	4b80      	ldr	r3, [pc, #512]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003644:	4a7f      	ldr	r2, [pc, #508]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	6713      	str	r3, [r2, #112]	@ 0x70
 800364c:	e011      	b.n	8003672 <HAL_RCC_OscConfig+0x592>
 800364e:	4b7d      	ldr	r3, [pc, #500]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003652:	4a7c      	ldr	r2, [pc, #496]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	6713      	str	r3, [r2, #112]	@ 0x70
 800365a:	4b7a      	ldr	r3, [pc, #488]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365e:	4a79      	ldr	r2, [pc, #484]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 8003660:	f023 0304 	bic.w	r3, r3, #4
 8003664:	6713      	str	r3, [r2, #112]	@ 0x70
 8003666:	4b77      	ldr	r3, [pc, #476]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366a:	4a76      	ldr	r2, [pc, #472]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 800366c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003670:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d015      	beq.n	80036a6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367a:	f7fd fc95 	bl	8000fa8 <HAL_GetTick>
 800367e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003680:	e00a      	b.n	8003698 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003682:	f7fd fc91 	bl	8000fa8 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003690:	4293      	cmp	r3, r2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e14c      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003698:	4b6a      	ldr	r3, [pc, #424]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0ee      	beq.n	8003682 <HAL_RCC_OscConfig+0x5a2>
 80036a4:	e014      	b.n	80036d0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a6:	f7fd fc7f 	bl	8000fa8 <HAL_GetTick>
 80036aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036ac:	e00a      	b.n	80036c4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ae:	f7fd fc7b 	bl	8000fa8 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036bc:	4293      	cmp	r3, r2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e136      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036c4:	4b5f      	ldr	r3, [pc, #380]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1ee      	bne.n	80036ae <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 812b 	beq.w	8003930 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80036da:	4b5a      	ldr	r3, [pc, #360]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036e2:	2b18      	cmp	r3, #24
 80036e4:	f000 80bb 	beq.w	800385e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	f040 8095 	bne.w	800381c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f2:	4b54      	ldr	r3, [pc, #336]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a53      	ldr	r2, [pc, #332]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80036f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fe:	f7fd fc53 	bl	8000fa8 <HAL_GetTick>
 8003702:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003706:	f7fd fc4f 	bl	8000fa8 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e10c      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003718:	4b4a      	ldr	r3, [pc, #296]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f0      	bne.n	8003706 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003724:	4b47      	ldr	r3, [pc, #284]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 8003726:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003728:	4b47      	ldr	r3, [pc, #284]	@ (8003848 <HAL_RCC_OscConfig+0x768>)
 800372a:	4013      	ands	r3, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003734:	0112      	lsls	r2, r2, #4
 8003736:	430a      	orrs	r2, r1
 8003738:	4942      	ldr	r1, [pc, #264]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 800373a:	4313      	orrs	r3, r2
 800373c:	628b      	str	r3, [r1, #40]	@ 0x28
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003742:	3b01      	subs	r3, #1
 8003744:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800374c:	3b01      	subs	r3, #1
 800374e:	025b      	lsls	r3, r3, #9
 8003750:	b29b      	uxth	r3, r3
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003758:	3b01      	subs	r3, #1
 800375a:	041b      	lsls	r3, r3, #16
 800375c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003766:	3b01      	subs	r3, #1
 8003768:	061b      	lsls	r3, r3, #24
 800376a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800376e:	4935      	ldr	r1, [pc, #212]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 8003770:	4313      	orrs	r3, r2
 8003772:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003774:	4b33      	ldr	r3, [pc, #204]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 8003776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003778:	4a32      	ldr	r2, [pc, #200]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 800377a:	f023 0301 	bic.w	r3, r3, #1
 800377e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003780:	4b30      	ldr	r3, [pc, #192]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 8003782:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003784:	4b31      	ldr	r3, [pc, #196]	@ (800384c <HAL_RCC_OscConfig+0x76c>)
 8003786:	4013      	ands	r3, r2
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800378c:	00d2      	lsls	r2, r2, #3
 800378e:	492d      	ldr	r1, [pc, #180]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 8003790:	4313      	orrs	r3, r2
 8003792:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003794:	4b2b      	ldr	r3, [pc, #172]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 8003796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003798:	f023 020c 	bic.w	r2, r3, #12
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a0:	4928      	ldr	r1, [pc, #160]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80037a6:	4b27      	ldr	r3, [pc, #156]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80037a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037aa:	f023 0202 	bic.w	r2, r3, #2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b2:	4924      	ldr	r1, [pc, #144]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80037b8:	4b22      	ldr	r3, [pc, #136]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80037ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037bc:	4a21      	ldr	r2, [pc, #132]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80037be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80037c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80037ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80037d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80037d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80037d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80037dc:	4b19      	ldr	r3, [pc, #100]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80037de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e0:	4a18      	ldr	r2, [pc, #96]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e8:	4b16      	ldr	r3, [pc, #88]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a15      	ldr	r2, [pc, #84]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 80037ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fd fbd8 	bl	8000fa8 <HAL_GetTick>
 80037f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fc:	f7fd fbd4 	bl	8000fa8 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e091      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800380e:	4b0d      	ldr	r3, [pc, #52]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0x71c>
 800381a:	e089      	b.n	8003930 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381c:	4b09      	ldr	r3, [pc, #36]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a08      	ldr	r2, [pc, #32]	@ (8003844 <HAL_RCC_OscConfig+0x764>)
 8003822:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fd fbbe 	bl	8000fa8 <HAL_GetTick>
 800382c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800382e:	e00f      	b.n	8003850 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003830:	f7fd fbba 	bl	8000fa8 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d908      	bls.n	8003850 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e077      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
 8003842:	bf00      	nop
 8003844:	58024400 	.word	0x58024400
 8003848:	fffffc0c 	.word	0xfffffc0c
 800384c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003850:	4b3a      	ldr	r3, [pc, #232]	@ (800393c <HAL_RCC_OscConfig+0x85c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e9      	bne.n	8003830 <HAL_RCC_OscConfig+0x750>
 800385c:	e068      	b.n	8003930 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800385e:	4b37      	ldr	r3, [pc, #220]	@ (800393c <HAL_RCC_OscConfig+0x85c>)
 8003860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003862:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003864:	4b35      	ldr	r3, [pc, #212]	@ (800393c <HAL_RCC_OscConfig+0x85c>)
 8003866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003868:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	2b01      	cmp	r3, #1
 8003870:	d031      	beq.n	80038d6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f003 0203 	and.w	r2, r3, #3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800387c:	429a      	cmp	r2, r3
 800387e:	d12a      	bne.n	80038d6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d122      	bne.n	80038d6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800389c:	429a      	cmp	r2, r3
 800389e:	d11a      	bne.n	80038d6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	0a5b      	lsrs	r3, r3, #9
 80038a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ac:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d111      	bne.n	80038d6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	0c1b      	lsrs	r3, r3, #16
 80038b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d108      	bne.n	80038d6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	0e1b      	lsrs	r3, r3, #24
 80038c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d001      	beq.n	80038da <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e02b      	b.n	8003932 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80038da:	4b18      	ldr	r3, [pc, #96]	@ (800393c <HAL_RCC_OscConfig+0x85c>)
 80038dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038de:	08db      	lsrs	r3, r3, #3
 80038e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038e4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d01f      	beq.n	8003930 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80038f0:	4b12      	ldr	r3, [pc, #72]	@ (800393c <HAL_RCC_OscConfig+0x85c>)
 80038f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f4:	4a11      	ldr	r2, [pc, #68]	@ (800393c <HAL_RCC_OscConfig+0x85c>)
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038fc:	f7fd fb54 	bl	8000fa8 <HAL_GetTick>
 8003900:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003902:	bf00      	nop
 8003904:	f7fd fb50 	bl	8000fa8 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	4293      	cmp	r3, r2
 800390e:	d0f9      	beq.n	8003904 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003910:	4b0a      	ldr	r3, [pc, #40]	@ (800393c <HAL_RCC_OscConfig+0x85c>)
 8003912:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003914:	4b0a      	ldr	r3, [pc, #40]	@ (8003940 <HAL_RCC_OscConfig+0x860>)
 8003916:	4013      	ands	r3, r2
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800391c:	00d2      	lsls	r2, r2, #3
 800391e:	4907      	ldr	r1, [pc, #28]	@ (800393c <HAL_RCC_OscConfig+0x85c>)
 8003920:	4313      	orrs	r3, r2
 8003922:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003924:	4b05      	ldr	r3, [pc, #20]	@ (800393c <HAL_RCC_OscConfig+0x85c>)
 8003926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003928:	4a04      	ldr	r2, [pc, #16]	@ (800393c <HAL_RCC_OscConfig+0x85c>)
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3730      	adds	r7, #48	@ 0x30
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	58024400 	.word	0x58024400
 8003940:	ffff0007 	.word	0xffff0007

08003944 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e19c      	b.n	8003c92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003958:	4b8a      	ldr	r3, [pc, #552]	@ (8003b84 <HAL_RCC_ClockConfig+0x240>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d910      	bls.n	8003988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b87      	ldr	r3, [pc, #540]	@ (8003b84 <HAL_RCC_ClockConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 020f 	bic.w	r2, r3, #15
 800396e:	4985      	ldr	r1, [pc, #532]	@ (8003b84 <HAL_RCC_ClockConfig+0x240>)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b83      	ldr	r3, [pc, #524]	@ (8003b84 <HAL_RCC_ClockConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e184      	b.n	8003c92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d010      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	4b7b      	ldr	r3, [pc, #492]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d908      	bls.n	80039b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039a4:	4b78      	ldr	r3, [pc, #480]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	4975      	ldr	r1, [pc, #468]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d010      	beq.n	80039e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	4b70      	ldr	r3, [pc, #448]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d908      	bls.n	80039e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	496a      	ldr	r1, [pc, #424]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d010      	beq.n	8003a12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	699a      	ldr	r2, [r3, #24]
 80039f4:	4b64      	ldr	r3, [pc, #400]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d908      	bls.n	8003a12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a00:	4b61      	ldr	r3, [pc, #388]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	495e      	ldr	r1, [pc, #376]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d010      	beq.n	8003a40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	4b59      	ldr	r3, [pc, #356]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d908      	bls.n	8003a40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a2e:	4b56      	ldr	r3, [pc, #344]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	4953      	ldr	r1, [pc, #332]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d010      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	4b4d      	ldr	r3, [pc, #308]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d908      	bls.n	8003a6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a5c:	4b4a      	ldr	r3, [pc, #296]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	f023 020f 	bic.w	r2, r3, #15
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	4947      	ldr	r1, [pc, #284]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d055      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a7a:	4b43      	ldr	r3, [pc, #268]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	4940      	ldr	r1, [pc, #256]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d107      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a94:	4b3c      	ldr	r3, [pc, #240]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d121      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0f6      	b.n	8003c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d107      	bne.n	8003abc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003aac:	4b36      	ldr	r3, [pc, #216]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d115      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0ea      	b.n	8003c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d107      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ac4:	4b30      	ldr	r3, [pc, #192]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d109      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0de      	b.n	8003c92 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0d6      	b.n	8003c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ae4:	4b28      	ldr	r3, [pc, #160]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f023 0207 	bic.w	r2, r3, #7
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4925      	ldr	r1, [pc, #148]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af6:	f7fd fa57 	bl	8000fa8 <HAL_GetTick>
 8003afa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afc:	e00a      	b.n	8003b14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003afe:	f7fd fa53 	bl	8000fa8 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e0be      	b.n	8003c92 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b14:	4b1c      	ldr	r3, [pc, #112]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d1eb      	bne.n	8003afe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d010      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	4b14      	ldr	r3, [pc, #80]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d208      	bcs.n	8003b54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b42:	4b11      	ldr	r3, [pc, #68]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f023 020f 	bic.w	r2, r3, #15
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	490e      	ldr	r1, [pc, #56]	@ (8003b88 <HAL_RCC_ClockConfig+0x244>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b54:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <HAL_RCC_ClockConfig+0x240>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d214      	bcs.n	8003b8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b62:	4b08      	ldr	r3, [pc, #32]	@ (8003b84 <HAL_RCC_ClockConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 020f 	bic.w	r2, r3, #15
 8003b6a:	4906      	ldr	r1, [pc, #24]	@ (8003b84 <HAL_RCC_ClockConfig+0x240>)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b72:	4b04      	ldr	r3, [pc, #16]	@ (8003b84 <HAL_RCC_ClockConfig+0x240>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d005      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e086      	b.n	8003c92 <HAL_RCC_ClockConfig+0x34e>
 8003b84:	52002000 	.word	0x52002000
 8003b88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d010      	beq.n	8003bba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	4b3f      	ldr	r3, [pc, #252]	@ (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d208      	bcs.n	8003bba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ba8:	4b3c      	ldr	r3, [pc, #240]	@ (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	4939      	ldr	r1, [pc, #228]	@ (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d010      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	4b34      	ldr	r3, [pc, #208]	@ (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d208      	bcs.n	8003be8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003bd6:	4b31      	ldr	r3, [pc, #196]	@ (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	492e      	ldr	r1, [pc, #184]	@ (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d010      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699a      	ldr	r2, [r3, #24]
 8003bf8:	4b28      	ldr	r3, [pc, #160]	@ (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d208      	bcs.n	8003c16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c04:	4b25      	ldr	r3, [pc, #148]	@ (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	4922      	ldr	r1, [pc, #136]	@ (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d010      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69da      	ldr	r2, [r3, #28]
 8003c26:	4b1d      	ldr	r3, [pc, #116]	@ (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d208      	bcs.n	8003c44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003c32:	4b1a      	ldr	r3, [pc, #104]	@ (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	4917      	ldr	r1, [pc, #92]	@ (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003c44:	f000 f89e 	bl	8003d84 <HAL_RCC_GetSysClockFreq>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b14      	ldr	r3, [pc, #80]	@ (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	4912      	ldr	r1, [pc, #72]	@ (8003ca0 <HAL_RCC_ClockConfig+0x35c>)
 8003c56:	5ccb      	ldrb	r3, [r1, r3]
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c60:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003c62:	4b0e      	ldr	r3, [pc, #56]	@ (8003c9c <HAL_RCC_ClockConfig+0x358>)
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	4a0d      	ldr	r2, [pc, #52]	@ (8003ca0 <HAL_RCC_ClockConfig+0x35c>)
 8003c6c:	5cd3      	ldrb	r3, [r2, r3]
 8003c6e:	f003 031f 	and.w	r3, r3, #31
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	fa22 f303 	lsr.w	r3, r2, r3
 8003c78:	4a0a      	ldr	r2, [pc, #40]	@ (8003ca4 <HAL_RCC_ClockConfig+0x360>)
 8003c7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8003ca8 <HAL_RCC_ClockConfig+0x364>)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003c82:	4b0a      	ldr	r3, [pc, #40]	@ (8003cac <HAL_RCC_ClockConfig+0x368>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fd f944 	bl	8000f14 <HAL_InitTick>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	58024400 	.word	0x58024400
 8003ca0:	0800b7d4 	.word	0x0800b7d4
 8003ca4:	24000004 	.word	0x24000004
 8003ca8:	24000000 	.word	0x24000000
 8003cac:	24000008 	.word	0x24000008

08003cb0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08c      	sub	sp, #48	@ 0x30
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d12a      	bne.n	8003d18 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d78 <HAL_RCC_MCOConfig+0xc8>)
 8003cc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003cc8:	4a2b      	ldr	r2, [pc, #172]	@ (8003d78 <HAL_RCC_MCOConfig+0xc8>)
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003cd2:	4b29      	ldr	r3, [pc, #164]	@ (8003d78 <HAL_RCC_MCOConfig+0xc8>)
 8003cd4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003ce0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cea:	2303      	movs	r3, #3
 8003cec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003cf6:	f107 031c 	add.w	r3, r7, #28
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	481f      	ldr	r0, [pc, #124]	@ (8003d7c <HAL_RCC_MCOConfig+0xcc>)
 8003cfe:	f7fd fcef 	bl	80016e0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003d02:	4b1d      	ldr	r3, [pc, #116]	@ (8003d78 <HAL_RCC_MCOConfig+0xc8>)
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8003d0a:	68b9      	ldr	r1, [r7, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	430b      	orrs	r3, r1
 8003d10:	4919      	ldr	r1, [pc, #100]	@ (8003d78 <HAL_RCC_MCOConfig+0xc8>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8003d16:	e02a      	b.n	8003d6e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8003d18:	4b17      	ldr	r3, [pc, #92]	@ (8003d78 <HAL_RCC_MCOConfig+0xc8>)
 8003d1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003d1e:	4a16      	ldr	r2, [pc, #88]	@ (8003d78 <HAL_RCC_MCOConfig+0xc8>)
 8003d20:	f043 0304 	orr.w	r3, r3, #4
 8003d24:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003d28:	4b13      	ldr	r3, [pc, #76]	@ (8003d78 <HAL_RCC_MCOConfig+0xc8>)
 8003d2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003d36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d40:	2303      	movs	r3, #3
 8003d42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003d4c:	f107 031c 	add.w	r3, r7, #28
 8003d50:	4619      	mov	r1, r3
 8003d52:	480b      	ldr	r0, [pc, #44]	@ (8003d80 <HAL_RCC_MCOConfig+0xd0>)
 8003d54:	f7fd fcc4 	bl	80016e0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003d58:	4b07      	ldr	r3, [pc, #28]	@ (8003d78 <HAL_RCC_MCOConfig+0xc8>)
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	01d9      	lsls	r1, r3, #7
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	430b      	orrs	r3, r1
 8003d68:	4903      	ldr	r1, [pc, #12]	@ (8003d78 <HAL_RCC_MCOConfig+0xc8>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	610b      	str	r3, [r1, #16]
}
 8003d6e:	bf00      	nop
 8003d70:	3730      	adds	r7, #48	@ 0x30
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	58024400 	.word	0x58024400
 8003d7c:	58020000 	.word	0x58020000
 8003d80:	58020800 	.word	0x58020800

08003d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b089      	sub	sp, #36	@ 0x24
 8003d88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d8a:	4bb3      	ldr	r3, [pc, #716]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d92:	2b18      	cmp	r3, #24
 8003d94:	f200 8155 	bhi.w	8004042 <HAL_RCC_GetSysClockFreq+0x2be>
 8003d98:	a201      	add	r2, pc, #4	@ (adr r2, 8003da0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9e:	bf00      	nop
 8003da0:	08003e05 	.word	0x08003e05
 8003da4:	08004043 	.word	0x08004043
 8003da8:	08004043 	.word	0x08004043
 8003dac:	08004043 	.word	0x08004043
 8003db0:	08004043 	.word	0x08004043
 8003db4:	08004043 	.word	0x08004043
 8003db8:	08004043 	.word	0x08004043
 8003dbc:	08004043 	.word	0x08004043
 8003dc0:	08003e2b 	.word	0x08003e2b
 8003dc4:	08004043 	.word	0x08004043
 8003dc8:	08004043 	.word	0x08004043
 8003dcc:	08004043 	.word	0x08004043
 8003dd0:	08004043 	.word	0x08004043
 8003dd4:	08004043 	.word	0x08004043
 8003dd8:	08004043 	.word	0x08004043
 8003ddc:	08004043 	.word	0x08004043
 8003de0:	08003e31 	.word	0x08003e31
 8003de4:	08004043 	.word	0x08004043
 8003de8:	08004043 	.word	0x08004043
 8003dec:	08004043 	.word	0x08004043
 8003df0:	08004043 	.word	0x08004043
 8003df4:	08004043 	.word	0x08004043
 8003df8:	08004043 	.word	0x08004043
 8003dfc:	08004043 	.word	0x08004043
 8003e00:	08003e37 	.word	0x08003e37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e04:	4b94      	ldr	r3, [pc, #592]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d009      	beq.n	8003e24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e10:	4b91      	ldr	r3, [pc, #580]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	08db      	lsrs	r3, r3, #3
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	4a90      	ldr	r2, [pc, #576]	@ (800405c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003e22:	e111      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003e24:	4b8d      	ldr	r3, [pc, #564]	@ (800405c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e26:	61bb      	str	r3, [r7, #24]
      break;
 8003e28:	e10e      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003e2a:	4b8d      	ldr	r3, [pc, #564]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e2c:	61bb      	str	r3, [r7, #24]
      break;
 8003e2e:	e10b      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003e30:	4b8c      	ldr	r3, [pc, #560]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003e32:	61bb      	str	r3, [r7, #24]
      break;
 8003e34:	e108      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e36:	4b88      	ldr	r3, [pc, #544]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003e40:	4b85      	ldr	r3, [pc, #532]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e44:	091b      	lsrs	r3, r3, #4
 8003e46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e4a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e4c:	4b82      	ldr	r3, [pc, #520]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003e56:	4b80      	ldr	r3, [pc, #512]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e5a:	08db      	lsrs	r3, r3, #3
 8003e5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	ee07 3a90 	vmov	s15, r3
 8003e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 80e1 	beq.w	800403c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	f000 8083 	beq.w	8003f88 <HAL_RCC_GetSysClockFreq+0x204>
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	f200 80a1 	bhi.w	8003fcc <HAL_RCC_GetSysClockFreq+0x248>
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0x114>
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d056      	beq.n	8003f44 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e96:	e099      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e98:	4b6f      	ldr	r3, [pc, #444]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d02d      	beq.n	8003f00 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ea4:	4b6c      	ldr	r3, [pc, #432]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	08db      	lsrs	r3, r3, #3
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	4a6b      	ldr	r2, [pc, #428]	@ (800405c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	ee07 3a90 	vmov	s15, r3
 8003ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	ee07 3a90 	vmov	s15, r3
 8003ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ece:	4b62      	ldr	r3, [pc, #392]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed6:	ee07 3a90 	vmov	s15, r3
 8003eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ede:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ee2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004068 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003efa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003efe:	e087      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f0a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800406c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f12:	4b51      	ldr	r3, [pc, #324]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f1a:	ee07 3a90 	vmov	s15, r3
 8003f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f22:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f26:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004068 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f42:	e065      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f4e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004070 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f56:	4b40      	ldr	r3, [pc, #256]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f6a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004068 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f86:	e043      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f92:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004074 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004068 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003fca:	e021      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004070 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fde:	4b1e      	ldr	r3, [pc, #120]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe6:	ee07 3a90 	vmov	s15, r3
 8003fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ff2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004068 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800400a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800400e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004010:	4b11      	ldr	r3, [pc, #68]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004014:	0a5b      	lsrs	r3, r3, #9
 8004016:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800401a:	3301      	adds	r3, #1
 800401c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	ee07 3a90 	vmov	s15, r3
 8004024:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004028:	edd7 6a07 	vldr	s13, [r7, #28]
 800402c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004034:	ee17 3a90 	vmov	r3, s15
 8004038:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800403a:	e005      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	61bb      	str	r3, [r7, #24]
      break;
 8004040:	e002      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004042:	4b07      	ldr	r3, [pc, #28]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004044:	61bb      	str	r3, [r7, #24]
      break;
 8004046:	bf00      	nop
  }

  return sysclockfreq;
 8004048:	69bb      	ldr	r3, [r7, #24]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3724      	adds	r7, #36	@ 0x24
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	58024400 	.word	0x58024400
 800405c:	03d09000 	.word	0x03d09000
 8004060:	003d0900 	.word	0x003d0900
 8004064:	016e3600 	.word	0x016e3600
 8004068:	46000000 	.word	0x46000000
 800406c:	4c742400 	.word	0x4c742400
 8004070:	4a742400 	.word	0x4a742400
 8004074:	4bb71b00 	.word	0x4bb71b00

08004078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800407e:	f7ff fe81 	bl	8003d84 <HAL_RCC_GetSysClockFreq>
 8004082:	4602      	mov	r2, r0
 8004084:	4b10      	ldr	r3, [pc, #64]	@ (80040c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	0a1b      	lsrs	r3, r3, #8
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	490f      	ldr	r1, [pc, #60]	@ (80040cc <HAL_RCC_GetHCLKFreq+0x54>)
 8004090:	5ccb      	ldrb	r3, [r1, r3]
 8004092:	f003 031f 	and.w	r3, r3, #31
 8004096:	fa22 f303 	lsr.w	r3, r2, r3
 800409a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800409c:	4b0a      	ldr	r3, [pc, #40]	@ (80040c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	4a09      	ldr	r2, [pc, #36]	@ (80040cc <HAL_RCC_GetHCLKFreq+0x54>)
 80040a6:	5cd3      	ldrb	r3, [r2, r3]
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	fa22 f303 	lsr.w	r3, r2, r3
 80040b2:	4a07      	ldr	r2, [pc, #28]	@ (80040d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80040b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040b6:	4a07      	ldr	r2, [pc, #28]	@ (80040d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80040bc:	4b04      	ldr	r3, [pc, #16]	@ (80040d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80040be:	681b      	ldr	r3, [r3, #0]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	58024400 	.word	0x58024400
 80040cc:	0800b7d4 	.word	0x0800b7d4
 80040d0:	24000004 	.word	0x24000004
 80040d4:	24000000 	.word	0x24000000

080040d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040dc:	b0c8      	sub	sp, #288	@ 0x120
 80040de:	af00      	add	r7, sp, #0
 80040e0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040e4:	2300      	movs	r3, #0
 80040e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040ea:	2300      	movs	r3, #0
 80040ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80040fc:	2500      	movs	r5, #0
 80040fe:	ea54 0305 	orrs.w	r3, r4, r5
 8004102:	d049      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800410a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800410e:	d02f      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004110:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004114:	d828      	bhi.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004116:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800411a:	d01a      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800411c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004120:	d822      	bhi.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004126:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800412a:	d007      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800412c:	e01c      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800412e:	4ba7      	ldr	r3, [pc, #668]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004132:	4aa6      	ldr	r2, [pc, #664]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004138:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800413a:	e01a      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800413c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004140:	3308      	adds	r3, #8
 8004142:	2102      	movs	r1, #2
 8004144:	4618      	mov	r0, r3
 8004146:	f001 f985 	bl	8005454 <RCCEx_PLL2_Config>
 800414a:	4603      	mov	r3, r0
 800414c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004150:	e00f      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004152:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004156:	3328      	adds	r3, #40	@ 0x28
 8004158:	2102      	movs	r1, #2
 800415a:	4618      	mov	r0, r3
 800415c:	f001 fa2c 	bl	80055b8 <RCCEx_PLL3_Config>
 8004160:	4603      	mov	r3, r0
 8004162:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004166:	e004      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800416e:	e000      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004172:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800417a:	4b94      	ldr	r3, [pc, #592]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800417c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800417e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004182:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004188:	4a90      	ldr	r2, [pc, #576]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800418a:	430b      	orrs	r3, r1
 800418c:	6513      	str	r3, [r2, #80]	@ 0x50
 800418e:	e003      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004190:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004194:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800419c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80041a4:	f04f 0900 	mov.w	r9, #0
 80041a8:	ea58 0309 	orrs.w	r3, r8, r9
 80041ac:	d047      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80041ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d82a      	bhi.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80041b8:	a201      	add	r2, pc, #4	@ (adr r2, 80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80041ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041be:	bf00      	nop
 80041c0:	080041d5 	.word	0x080041d5
 80041c4:	080041e3 	.word	0x080041e3
 80041c8:	080041f9 	.word	0x080041f9
 80041cc:	08004217 	.word	0x08004217
 80041d0:	08004217 	.word	0x08004217
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041d4:	4b7d      	ldr	r3, [pc, #500]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d8:	4a7c      	ldr	r2, [pc, #496]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041e0:	e01a      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041e6:	3308      	adds	r3, #8
 80041e8:	2100      	movs	r1, #0
 80041ea:	4618      	mov	r0, r3
 80041ec:	f001 f932 	bl	8005454 <RCCEx_PLL2_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041f6:	e00f      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041fc:	3328      	adds	r3, #40	@ 0x28
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f001 f9d9 	bl	80055b8 <RCCEx_PLL3_Config>
 8004206:	4603      	mov	r3, r0
 8004208:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800420c:	e004      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004214:	e000      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004218:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004220:	4b6a      	ldr	r3, [pc, #424]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004224:	f023 0107 	bic.w	r1, r3, #7
 8004228:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800422c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800422e:	4a67      	ldr	r2, [pc, #412]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004230:	430b      	orrs	r3, r1
 8004232:	6513      	str	r3, [r2, #80]	@ 0x50
 8004234:	e003      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004236:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800423a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800423e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800424a:	f04f 0b00 	mov.w	fp, #0
 800424e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004252:	d054      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004254:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800425e:	d036      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004260:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004264:	d82f      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800426a:	d032      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800426c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004270:	d829      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004272:	2bc0      	cmp	r3, #192	@ 0xc0
 8004274:	d02f      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004276:	2bc0      	cmp	r3, #192	@ 0xc0
 8004278:	d825      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800427a:	2b80      	cmp	r3, #128	@ 0x80
 800427c:	d018      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800427e:	2b80      	cmp	r3, #128	@ 0x80
 8004280:	d821      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004286:	2b40      	cmp	r3, #64	@ 0x40
 8004288:	d007      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800428a:	e01c      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800428c:	4b4f      	ldr	r3, [pc, #316]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800428e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004290:	4a4e      	ldr	r2, [pc, #312]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004296:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004298:	e01e      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800429a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800429e:	3308      	adds	r3, #8
 80042a0:	2100      	movs	r1, #0
 80042a2:	4618      	mov	r0, r3
 80042a4:	f001 f8d6 	bl	8005454 <RCCEx_PLL2_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80042ae:	e013      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042b4:	3328      	adds	r3, #40	@ 0x28
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f001 f97d 	bl	80055b8 <RCCEx_PLL3_Config>
 80042be:	4603      	mov	r3, r0
 80042c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80042c4:	e008      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80042cc:	e004      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80042ce:	bf00      	nop
 80042d0:	e002      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80042d2:	bf00      	nop
 80042d4:	e000      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80042d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80042e0:	4b3a      	ldr	r3, [pc, #232]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042e4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80042e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ee:	4a37      	ldr	r2, [pc, #220]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042f0:	430b      	orrs	r3, r1
 80042f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80042f4:	e003      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80042fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004306:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800430a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800430e:	2300      	movs	r3, #0
 8004310:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004314:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004318:	460b      	mov	r3, r1
 800431a:	4313      	orrs	r3, r2
 800431c:	d05c      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800431e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004324:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004328:	d03b      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800432a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800432e:	d834      	bhi.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004334:	d037      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004336:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800433a:	d82e      	bhi.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800433c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004340:	d033      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004342:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004346:	d828      	bhi.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800434c:	d01a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800434e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004352:	d822      	bhi.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800435c:	d007      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800435e:	e01c      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004360:	4b1a      	ldr	r3, [pc, #104]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004364:	4a19      	ldr	r2, [pc, #100]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800436a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800436c:	e01e      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800436e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004372:	3308      	adds	r3, #8
 8004374:	2100      	movs	r1, #0
 8004376:	4618      	mov	r0, r3
 8004378:	f001 f86c 	bl	8005454 <RCCEx_PLL2_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004382:	e013      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004388:	3328      	adds	r3, #40	@ 0x28
 800438a:	2100      	movs	r1, #0
 800438c:	4618      	mov	r0, r3
 800438e:	f001 f913 	bl	80055b8 <RCCEx_PLL3_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004398:	e008      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80043a0:	e004      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80043a2:	bf00      	nop
 80043a4:	e002      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80043a6:	bf00      	nop
 80043a8:	e000      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80043aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10d      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80043b4:	4b05      	ldr	r3, [pc, #20]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80043bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c2:	4a02      	ldr	r2, [pc, #8]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043c4:	430b      	orrs	r3, r1
 80043c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80043c8:	e006      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80043ca:	bf00      	nop
 80043cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80043d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80043e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80043e8:	2300      	movs	r3, #0
 80043ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80043ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80043f2:	460b      	mov	r3, r1
 80043f4:	4313      	orrs	r3, r2
 80043f6:	d03a      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80043f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043fe:	2b30      	cmp	r3, #48	@ 0x30
 8004400:	d01f      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004402:	2b30      	cmp	r3, #48	@ 0x30
 8004404:	d819      	bhi.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004406:	2b20      	cmp	r3, #32
 8004408:	d00c      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800440a:	2b20      	cmp	r3, #32
 800440c:	d815      	bhi.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d019      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004412:	2b10      	cmp	r3, #16
 8004414:	d111      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004416:	4bae      	ldr	r3, [pc, #696]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441a:	4aad      	ldr	r2, [pc, #692]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800441c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004420:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004422:	e011      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004424:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004428:	3308      	adds	r3, #8
 800442a:	2102      	movs	r1, #2
 800442c:	4618      	mov	r0, r3
 800442e:	f001 f811 	bl	8005454 <RCCEx_PLL2_Config>
 8004432:	4603      	mov	r3, r0
 8004434:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004438:	e006      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004440:	e002      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004442:	bf00      	nop
 8004444:	e000      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004448:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10a      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004450:	4b9f      	ldr	r3, [pc, #636]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004454:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004458:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800445c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800445e:	4a9c      	ldr	r2, [pc, #624]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004460:	430b      	orrs	r3, r1
 8004462:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004464:	e003      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004466:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800446a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800446e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004476:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800447a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800447e:	2300      	movs	r3, #0
 8004480:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004484:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004488:	460b      	mov	r3, r1
 800448a:	4313      	orrs	r3, r2
 800448c:	d051      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800448e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004492:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004494:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004498:	d035      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800449a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800449e:	d82e      	bhi.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x426>
 80044a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80044a4:	d031      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80044a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80044aa:	d828      	bhi.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x426>
 80044ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044b0:	d01a      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80044b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044b6:	d822      	bhi.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x426>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80044bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c0:	d007      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80044c2:	e01c      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044c4:	4b82      	ldr	r3, [pc, #520]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c8:	4a81      	ldr	r2, [pc, #516]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80044d0:	e01c      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044d6:	3308      	adds	r3, #8
 80044d8:	2100      	movs	r1, #0
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 ffba 	bl	8005454 <RCCEx_PLL2_Config>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80044e6:	e011      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044ec:	3328      	adds	r3, #40	@ 0x28
 80044ee:	2100      	movs	r1, #0
 80044f0:	4618      	mov	r0, r3
 80044f2:	f001 f861 	bl	80055b8 <RCCEx_PLL3_Config>
 80044f6:	4603      	mov	r3, r0
 80044f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80044fc:	e006      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004504:	e002      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004506:	bf00      	nop
 8004508:	e000      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800450a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800450c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004514:	4b6e      	ldr	r3, [pc, #440]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004518:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800451c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004520:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004522:	4a6b      	ldr	r2, [pc, #428]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004524:	430b      	orrs	r3, r1
 8004526:	6513      	str	r3, [r2, #80]	@ 0x50
 8004528:	e003      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800452e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004532:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800453e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004542:	2300      	movs	r3, #0
 8004544:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004548:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800454c:	460b      	mov	r3, r1
 800454e:	4313      	orrs	r3, r2
 8004550:	d053      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004552:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004556:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004558:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800455c:	d033      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800455e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004562:	d82c      	bhi.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004564:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004568:	d02f      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800456a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800456e:	d826      	bhi.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004570:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004574:	d02b      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004576:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800457a:	d820      	bhi.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800457c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004580:	d012      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004582:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004586:	d81a      	bhi.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004588:	2b00      	cmp	r3, #0
 800458a:	d022      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800458c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004590:	d115      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004592:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004596:	3308      	adds	r3, #8
 8004598:	2101      	movs	r1, #1
 800459a:	4618      	mov	r0, r3
 800459c:	f000 ff5a 	bl	8005454 <RCCEx_PLL2_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80045a6:	e015      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045ac:	3328      	adds	r3, #40	@ 0x28
 80045ae:	2101      	movs	r1, #1
 80045b0:	4618      	mov	r0, r3
 80045b2:	f001 f801 	bl	80055b8 <RCCEx_PLL3_Config>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80045bc:	e00a      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80045c4:	e006      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80045c6:	bf00      	nop
 80045c8:	e004      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80045ca:	bf00      	nop
 80045cc:	e002      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80045ce:	bf00      	nop
 80045d0:	e000      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80045d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10a      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80045dc:	4b3c      	ldr	r3, [pc, #240]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80045e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045ea:	4a39      	ldr	r2, [pc, #228]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045ec:	430b      	orrs	r3, r1
 80045ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80045f0:	e003      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80045fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004606:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800460a:	2300      	movs	r3, #0
 800460c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004610:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004614:	460b      	mov	r3, r1
 8004616:	4313      	orrs	r3, r2
 8004618:	d060      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800461a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800461e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004622:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004626:	d039      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004628:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800462c:	d832      	bhi.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800462e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004632:	d035      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004634:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004638:	d82c      	bhi.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800463a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800463e:	d031      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004644:	d826      	bhi.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004646:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800464a:	d02d      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800464c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004650:	d820      	bhi.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004652:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004656:	d012      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004658:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800465c:	d81a      	bhi.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800465e:	2b00      	cmp	r3, #0
 8004660:	d024      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004662:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004666:	d115      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800466c:	3308      	adds	r3, #8
 800466e:	2101      	movs	r1, #1
 8004670:	4618      	mov	r0, r3
 8004672:	f000 feef 	bl	8005454 <RCCEx_PLL2_Config>
 8004676:	4603      	mov	r3, r0
 8004678:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800467c:	e017      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800467e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004682:	3328      	adds	r3, #40	@ 0x28
 8004684:	2101      	movs	r1, #1
 8004686:	4618      	mov	r0, r3
 8004688:	f000 ff96 	bl	80055b8 <RCCEx_PLL3_Config>
 800468c:	4603      	mov	r3, r0
 800468e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004692:	e00c      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800469a:	e008      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800469c:	bf00      	nop
 800469e:	e006      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80046a0:	bf00      	nop
 80046a2:	e004      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80046a4:	bf00      	nop
 80046a6:	e002      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80046a8:	bf00      	nop
 80046aa:	e000      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80046ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10e      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80046b6:	4b06      	ldr	r3, [pc, #24]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80046be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80046c6:	4a02      	ldr	r2, [pc, #8]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046c8:	430b      	orrs	r3, r1
 80046ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80046cc:	e006      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80046ce:	bf00      	nop
 80046d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80046e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046ec:	2300      	movs	r3, #0
 80046ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80046f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046f6:	460b      	mov	r3, r1
 80046f8:	4313      	orrs	r3, r2
 80046fa:	d037      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80046fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004700:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004702:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004706:	d00e      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004708:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800470c:	d816      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800470e:	2b00      	cmp	r3, #0
 8004710:	d018      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004712:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004716:	d111      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004718:	4bc4      	ldr	r3, [pc, #784]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800471a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471c:	4ac3      	ldr	r2, [pc, #780]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800471e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004722:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004724:	e00f      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004726:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800472a:	3308      	adds	r3, #8
 800472c:	2101      	movs	r1, #1
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fe90 	bl	8005454 <RCCEx_PLL2_Config>
 8004734:	4603      	mov	r3, r0
 8004736:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800473a:	e004      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004742:	e000      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004746:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10a      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800474e:	4bb7      	ldr	r3, [pc, #732]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004752:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004756:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800475a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800475c:	4ab3      	ldr	r2, [pc, #716]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800475e:	430b      	orrs	r3, r1
 8004760:	6513      	str	r3, [r2, #80]	@ 0x50
 8004762:	e003      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004764:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004768:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800476c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004778:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800477c:	2300      	movs	r3, #0
 800477e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004782:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004786:	460b      	mov	r3, r1
 8004788:	4313      	orrs	r3, r2
 800478a:	d039      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800478c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004792:	2b03      	cmp	r3, #3
 8004794:	d81c      	bhi.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004796:	a201      	add	r2, pc, #4	@ (adr r2, 800479c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479c:	080047d9 	.word	0x080047d9
 80047a0:	080047ad 	.word	0x080047ad
 80047a4:	080047bb 	.word	0x080047bb
 80047a8:	080047d9 	.word	0x080047d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ac:	4b9f      	ldr	r3, [pc, #636]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b0:	4a9e      	ldr	r2, [pc, #632]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80047b8:	e00f      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047be:	3308      	adds	r3, #8
 80047c0:	2102      	movs	r1, #2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fe46 	bl	8005454 <RCCEx_PLL2_Config>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80047ce:	e004      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80047d6:	e000      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80047d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80047e2:	4b92      	ldr	r3, [pc, #584]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047e6:	f023 0103 	bic.w	r1, r3, #3
 80047ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047f0:	4a8e      	ldr	r2, [pc, #568]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047f2:	430b      	orrs	r3, r1
 80047f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047f6:	e003      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80047fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004808:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800480c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004810:	2300      	movs	r3, #0
 8004812:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004816:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800481a:	460b      	mov	r3, r1
 800481c:	4313      	orrs	r3, r2
 800481e:	f000 8099 	beq.w	8004954 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004822:	4b83      	ldr	r3, [pc, #524]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a82      	ldr	r2, [pc, #520]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800482c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800482e:	f7fc fbbb 	bl	8000fa8 <HAL_GetTick>
 8004832:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004836:	e00b      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004838:	f7fc fbb6 	bl	8000fa8 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b64      	cmp	r3, #100	@ 0x64
 8004846:	d903      	bls.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800484e:	e005      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004850:	4b77      	ldr	r3, [pc, #476]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0ed      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800485c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004860:	2b00      	cmp	r3, #0
 8004862:	d173      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004864:	4b71      	ldr	r3, [pc, #452]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004866:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800486c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004870:	4053      	eors	r3, r2
 8004872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004876:	2b00      	cmp	r3, #0
 8004878:	d015      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800487a:	4b6c      	ldr	r3, [pc, #432]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004882:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004886:	4b69      	ldr	r3, [pc, #420]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488a:	4a68      	ldr	r2, [pc, #416]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800488c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004890:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004892:	4b66      	ldr	r3, [pc, #408]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004896:	4a65      	ldr	r2, [pc, #404]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004898:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800489c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800489e:	4a63      	ldr	r2, [pc, #396]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80048a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80048ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048b2:	d118      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fc fb78 	bl	8000fa8 <HAL_GetTick>
 80048b8:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048bc:	e00d      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048be:	f7fc fb73 	bl	8000fa8 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80048c8:	1ad2      	subs	r2, r2, r3
 80048ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d903      	bls.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80048d8:	e005      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048da:	4b54      	ldr	r3, [pc, #336]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0eb      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80048e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d129      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80048f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048fe:	d10e      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004900:	4b4a      	ldr	r3, [pc, #296]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004908:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800490c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004910:	091a      	lsrs	r2, r3, #4
 8004912:	4b48      	ldr	r3, [pc, #288]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004914:	4013      	ands	r3, r2
 8004916:	4a45      	ldr	r2, [pc, #276]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004918:	430b      	orrs	r3, r1
 800491a:	6113      	str	r3, [r2, #16]
 800491c:	e005      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800491e:	4b43      	ldr	r3, [pc, #268]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	4a42      	ldr	r2, [pc, #264]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004924:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004928:	6113      	str	r3, [r2, #16]
 800492a:	4b40      	ldr	r3, [pc, #256]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800492c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800492e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004932:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800493a:	4a3c      	ldr	r2, [pc, #240]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800493c:	430b      	orrs	r3, r1
 800493e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004940:	e008      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004942:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004946:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800494a:	e003      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004950:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004954:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	f002 0301 	and.w	r3, r2, #1
 8004960:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004964:	2300      	movs	r3, #0
 8004966:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800496a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800496e:	460b      	mov	r3, r1
 8004970:	4313      	orrs	r3, r2
 8004972:	f000 8090 	beq.w	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004976:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800497a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800497e:	2b28      	cmp	r3, #40	@ 0x28
 8004980:	d870      	bhi.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004982:	a201      	add	r2, pc, #4	@ (adr r2, 8004988 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004988:	08004a6d 	.word	0x08004a6d
 800498c:	08004a65 	.word	0x08004a65
 8004990:	08004a65 	.word	0x08004a65
 8004994:	08004a65 	.word	0x08004a65
 8004998:	08004a65 	.word	0x08004a65
 800499c:	08004a65 	.word	0x08004a65
 80049a0:	08004a65 	.word	0x08004a65
 80049a4:	08004a65 	.word	0x08004a65
 80049a8:	08004a39 	.word	0x08004a39
 80049ac:	08004a65 	.word	0x08004a65
 80049b0:	08004a65 	.word	0x08004a65
 80049b4:	08004a65 	.word	0x08004a65
 80049b8:	08004a65 	.word	0x08004a65
 80049bc:	08004a65 	.word	0x08004a65
 80049c0:	08004a65 	.word	0x08004a65
 80049c4:	08004a65 	.word	0x08004a65
 80049c8:	08004a4f 	.word	0x08004a4f
 80049cc:	08004a65 	.word	0x08004a65
 80049d0:	08004a65 	.word	0x08004a65
 80049d4:	08004a65 	.word	0x08004a65
 80049d8:	08004a65 	.word	0x08004a65
 80049dc:	08004a65 	.word	0x08004a65
 80049e0:	08004a65 	.word	0x08004a65
 80049e4:	08004a65 	.word	0x08004a65
 80049e8:	08004a6d 	.word	0x08004a6d
 80049ec:	08004a65 	.word	0x08004a65
 80049f0:	08004a65 	.word	0x08004a65
 80049f4:	08004a65 	.word	0x08004a65
 80049f8:	08004a65 	.word	0x08004a65
 80049fc:	08004a65 	.word	0x08004a65
 8004a00:	08004a65 	.word	0x08004a65
 8004a04:	08004a65 	.word	0x08004a65
 8004a08:	08004a6d 	.word	0x08004a6d
 8004a0c:	08004a65 	.word	0x08004a65
 8004a10:	08004a65 	.word	0x08004a65
 8004a14:	08004a65 	.word	0x08004a65
 8004a18:	08004a65 	.word	0x08004a65
 8004a1c:	08004a65 	.word	0x08004a65
 8004a20:	08004a65 	.word	0x08004a65
 8004a24:	08004a65 	.word	0x08004a65
 8004a28:	08004a6d 	.word	0x08004a6d
 8004a2c:	58024400 	.word	0x58024400
 8004a30:	58024800 	.word	0x58024800
 8004a34:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a3c:	3308      	adds	r3, #8
 8004a3e:	2101      	movs	r1, #1
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fd07 	bl	8005454 <RCCEx_PLL2_Config>
 8004a46:	4603      	mov	r3, r0
 8004a48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a4c:	e00f      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a52:	3328      	adds	r3, #40	@ 0x28
 8004a54:	2101      	movs	r1, #1
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fdae 	bl	80055b8 <RCCEx_PLL3_Config>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a62:	e004      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a6a:	e000      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a6e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10b      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004a76:	4bc0      	ldr	r3, [pc, #768]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a86:	4abc      	ldr	r2, [pc, #752]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a8c:	e003      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a92:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9e:	f002 0302 	and.w	r3, r2, #2
 8004aa2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004aac:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	d043      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004abe:	2b05      	cmp	r3, #5
 8004ac0:	d824      	bhi.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8004ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac8:	08004b15 	.word	0x08004b15
 8004acc:	08004ae1 	.word	0x08004ae1
 8004ad0:	08004af7 	.word	0x08004af7
 8004ad4:	08004b15 	.word	0x08004b15
 8004ad8:	08004b15 	.word	0x08004b15
 8004adc:	08004b15 	.word	0x08004b15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fcb3 	bl	8005454 <RCCEx_PLL2_Config>
 8004aee:	4603      	mov	r3, r0
 8004af0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004af4:	e00f      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004afa:	3328      	adds	r3, #40	@ 0x28
 8004afc:	2101      	movs	r1, #1
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fd5a 	bl	80055b8 <RCCEx_PLL3_Config>
 8004b04:	4603      	mov	r3, r0
 8004b06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b0a:	e004      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004b12:	e000      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10b      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004b1e:	4b96      	ldr	r3, [pc, #600]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b22:	f023 0107 	bic.w	r1, r3, #7
 8004b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b2e:	4a92      	ldr	r2, [pc, #584]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b30:	430b      	orrs	r3, r1
 8004b32:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b34:	e003      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b3a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b46:	f002 0304 	and.w	r3, r2, #4
 8004b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b54:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	d043      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b66:	2b05      	cmp	r3, #5
 8004b68:	d824      	bhi.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b70 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b70:	08004bbd 	.word	0x08004bbd
 8004b74:	08004b89 	.word	0x08004b89
 8004b78:	08004b9f 	.word	0x08004b9f
 8004b7c:	08004bbd 	.word	0x08004bbd
 8004b80:	08004bbd 	.word	0x08004bbd
 8004b84:	08004bbd 	.word	0x08004bbd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	2101      	movs	r1, #1
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 fc5f 	bl	8005454 <RCCEx_PLL2_Config>
 8004b96:	4603      	mov	r3, r0
 8004b98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b9c:	e00f      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ba2:	3328      	adds	r3, #40	@ 0x28
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fd06 	bl	80055b8 <RCCEx_PLL3_Config>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004bb2:	e004      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004bba:	e000      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bbe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10b      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bc6:	4b6c      	ldr	r3, [pc, #432]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bca:	f023 0107 	bic.w	r1, r3, #7
 8004bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bd6:	4a68      	ldr	r2, [pc, #416]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004bd8:	430b      	orrs	r3, r1
 8004bda:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bdc:	e003      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bde:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004be2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	f002 0320 	and.w	r3, r2, #32
 8004bf2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004bfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c00:	460b      	mov	r3, r1
 8004c02:	4313      	orrs	r3, r2
 8004c04:	d055      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c12:	d033      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c18:	d82c      	bhi.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c1e:	d02f      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c24:	d826      	bhi.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004c26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c2a:	d02b      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004c2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c30:	d820      	bhi.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004c32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c36:	d012      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004c38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c3c:	d81a      	bhi.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d022      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004c42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c46:	d115      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	2100      	movs	r1, #0
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fbff 	bl	8005454 <RCCEx_PLL2_Config>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c5c:	e015      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c62:	3328      	adds	r3, #40	@ 0x28
 8004c64:	2102      	movs	r1, #2
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fca6 	bl	80055b8 <RCCEx_PLL3_Config>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c72:	e00a      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c7a:	e006      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004c7c:	bf00      	nop
 8004c7e:	e004      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004c80:	bf00      	nop
 8004c82:	e002      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004c84:	bf00      	nop
 8004c86:	e000      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10b      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c92:	4b39      	ldr	r3, [pc, #228]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c96:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ca2:	4a35      	ldr	r2, [pc, #212]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ca8:	e003      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004caa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004cc8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	d058      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004cda:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004cde:	d033      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004ce0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004ce4:	d82c      	bhi.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cea:	d02f      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf0:	d826      	bhi.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004cf2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cf6:	d02b      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004cf8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cfc:	d820      	bhi.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004cfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d02:	d012      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d08:	d81a      	bhi.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d022      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d12:	d115      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d18:	3308      	adds	r3, #8
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 fb99 	bl	8005454 <RCCEx_PLL2_Config>
 8004d22:	4603      	mov	r3, r0
 8004d24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d28:	e015      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d2e:	3328      	adds	r3, #40	@ 0x28
 8004d30:	2102      	movs	r1, #2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fc40 	bl	80055b8 <RCCEx_PLL3_Config>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d3e:	e00a      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d46:	e006      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004d48:	bf00      	nop
 8004d4a:	e004      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004d4c:	bf00      	nop
 8004d4e:	e002      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004d50:	bf00      	nop
 8004d52:	e000      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004d54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10e      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d5e:	4b06      	ldr	r3, [pc, #24]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d62:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004d6e:	4a02      	ldr	r2, [pc, #8]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004d70:	430b      	orrs	r3, r1
 8004d72:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d74:	e006      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004d76:	bf00      	nop
 8004d78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004d90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d94:	2300      	movs	r3, #0
 8004d96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d9a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4313      	orrs	r3, r2
 8004da2:	d055      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004da8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004dac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004db0:	d033      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004db2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004db6:	d82c      	bhi.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dbc:	d02f      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004dbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dc2:	d826      	bhi.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004dc4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004dc8:	d02b      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004dca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004dce:	d820      	bhi.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004dd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dd4:	d012      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004dd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dda:	d81a      	bhi.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d022      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004de0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004de4:	d115      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dea:	3308      	adds	r3, #8
 8004dec:	2100      	movs	r1, #0
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 fb30 	bl	8005454 <RCCEx_PLL2_Config>
 8004df4:	4603      	mov	r3, r0
 8004df6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004dfa:	e015      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e00:	3328      	adds	r3, #40	@ 0x28
 8004e02:	2102      	movs	r1, #2
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fbd7 	bl	80055b8 <RCCEx_PLL3_Config>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e10:	e00a      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004e18:	e006      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004e1a:	bf00      	nop
 8004e1c:	e004      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004e1e:	bf00      	nop
 8004e20:	e002      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004e22:	bf00      	nop
 8004e24:	e000      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10b      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e30:	4ba1      	ldr	r3, [pc, #644]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e34:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004e40:	4a9d      	ldr	r2, [pc, #628]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e42:	430b      	orrs	r3, r1
 8004e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e46:	e003      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e4c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	f002 0308 	and.w	r3, r2, #8
 8004e5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e60:	2300      	movs	r3, #0
 8004e62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e66:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	d01e      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e7c:	d10c      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e82:	3328      	adds	r3, #40	@ 0x28
 8004e84:	2102      	movs	r1, #2
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fb96 	bl	80055b8 <RCCEx_PLL3_Config>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004e98:	4b87      	ldr	r3, [pc, #540]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ea8:	4a83      	ldr	r2, [pc, #524]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	f002 0310 	and.w	r3, r2, #16
 8004eba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ec4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	d01e      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ed2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eda:	d10c      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ee0:	3328      	adds	r3, #40	@ 0x28
 8004ee2:	2102      	movs	r1, #2
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fb67 	bl	80055b8 <RCCEx_PLL3_Config>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ef6:	4b70      	ldr	r3, [pc, #448]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004efa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004f06:	4a6c      	ldr	r2, [pc, #432]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004f18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f22:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004f26:	460b      	mov	r3, r1
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	d03e      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f38:	d022      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004f3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f3e:	d81b      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f48:	d00b      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004f4a:	e015      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f50:	3308      	adds	r3, #8
 8004f52:	2100      	movs	r1, #0
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fa7d 	bl	8005454 <RCCEx_PLL2_Config>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f60:	e00f      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f66:	3328      	adds	r3, #40	@ 0x28
 8004f68:	2102      	movs	r1, #2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fb24 	bl	80055b8 <RCCEx_PLL3_Config>
 8004f70:	4603      	mov	r3, r0
 8004f72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f76:	e004      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f7e:	e000      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10b      	bne.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f8a:	4b4b      	ldr	r3, [pc, #300]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f8e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f9a:	4a47      	ldr	r2, [pc, #284]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fa0:	e003      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fa6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004fb6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fb8:	2300      	movs	r3, #0
 8004fba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004fbc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	d03b      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004fd2:	d01f      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004fd4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004fd8:	d818      	bhi.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fde:	d003      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004fe0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fe4:	d007      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004fe6:	e011      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fe8:	4b33      	ldr	r3, [pc, #204]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fec:	4a32      	ldr	r2, [pc, #200]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004ff4:	e00f      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ffa:	3328      	adds	r3, #40	@ 0x28
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fada 	bl	80055b8 <RCCEx_PLL3_Config>
 8005004:	4603      	mov	r3, r0
 8005006:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800500a:	e004      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005012:	e000      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8005014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005016:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10b      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800501e:	4b26      	ldr	r3, [pc, #152]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005022:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005026:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800502a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800502e:	4a22      	ldr	r2, [pc, #136]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005030:	430b      	orrs	r3, r1
 8005032:	6553      	str	r3, [r2, #84]	@ 0x54
 8005034:	e003      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005036:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800503a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800503e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005046:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800504a:	673b      	str	r3, [r7, #112]	@ 0x70
 800504c:	2300      	movs	r3, #0
 800504e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005050:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005054:	460b      	mov	r3, r1
 8005056:	4313      	orrs	r3, r2
 8005058:	d034      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800505a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800505e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8005064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005068:	d007      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800506a:	e011      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800506c:	4b12      	ldr	r3, [pc, #72]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800506e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005070:	4a11      	ldr	r2, [pc, #68]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005076:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005078:	e00e      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800507a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800507e:	3308      	adds	r3, #8
 8005080:	2102      	movs	r1, #2
 8005082:	4618      	mov	r0, r3
 8005084:	f000 f9e6 	bl	8005454 <RCCEx_PLL2_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800508e:	e003      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005096:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005098:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10d      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80050a0:	4b05      	ldr	r3, [pc, #20]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80050a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ae:	4a02      	ldr	r2, [pc, #8]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80050b0:	430b      	orrs	r3, r1
 80050b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050b4:	e006      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80050b6:	bf00      	nop
 80050b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80050d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050d2:	2300      	movs	r3, #0
 80050d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80050da:	460b      	mov	r3, r1
 80050dc:	4313      	orrs	r3, r2
 80050de:	d00c      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80050e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050e4:	3328      	adds	r3, #40	@ 0x28
 80050e6:	2102      	movs	r1, #2
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 fa65 	bl	80055b8 <RCCEx_PLL3_Config>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80050fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005102:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005106:	663b      	str	r3, [r7, #96]	@ 0x60
 8005108:	2300      	movs	r3, #0
 800510a:	667b      	str	r3, [r7, #100]	@ 0x64
 800510c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005110:	460b      	mov	r3, r1
 8005112:	4313      	orrs	r3, r2
 8005114:	d038      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005116:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800511e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005122:	d018      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005124:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005128:	d811      	bhi.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800512a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800512e:	d014      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005134:	d80b      	bhi.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005136:	2b00      	cmp	r3, #0
 8005138:	d011      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800513a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800513e:	d106      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005140:	4bc3      	ldr	r3, [pc, #780]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005144:	4ac2      	ldr	r2, [pc, #776]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800514a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800514c:	e008      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005154:	e004      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005156:	bf00      	nop
 8005158:	e002      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800515a:	bf00      	nop
 800515c:	e000      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800515e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005160:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10b      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005168:	4bb9      	ldr	r3, [pc, #740]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800516a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800516c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005170:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005178:	4ab5      	ldr	r2, [pc, #724]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800517a:	430b      	orrs	r3, r1
 800517c:	6553      	str	r3, [r2, #84]	@ 0x54
 800517e:	e003      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005180:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005184:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005194:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005196:	2300      	movs	r3, #0
 8005198:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800519a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800519e:	460b      	mov	r3, r1
 80051a0:	4313      	orrs	r3, r2
 80051a2:	d009      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051a4:	4baa      	ldr	r3, [pc, #680]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80051ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051b2:	4aa7      	ldr	r2, [pc, #668]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051b4:	430b      	orrs	r3, r1
 80051b6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80051c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80051c6:	2300      	movs	r3, #0
 80051c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80051ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80051ce:	460b      	mov	r3, r1
 80051d0:	4313      	orrs	r3, r2
 80051d2:	d009      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051d4:	4b9e      	ldr	r3, [pc, #632]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051d8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80051dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e2:	4a9b      	ldr	r2, [pc, #620]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051e4:	430b      	orrs	r3, r1
 80051e6:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80051e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80051f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051f6:	2300      	movs	r3, #0
 80051f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051fa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80051fe:	460b      	mov	r3, r1
 8005200:	4313      	orrs	r3, r2
 8005202:	d009      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005204:	4b92      	ldr	r3, [pc, #584]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005208:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800520c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005212:	4a8f      	ldr	r2, [pc, #572]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005214:	430b      	orrs	r3, r1
 8005216:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800521c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005220:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005224:	643b      	str	r3, [r7, #64]	@ 0x40
 8005226:	2300      	movs	r3, #0
 8005228:	647b      	str	r3, [r7, #68]	@ 0x44
 800522a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800522e:	460b      	mov	r3, r1
 8005230:	4313      	orrs	r3, r2
 8005232:	d00e      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005234:	4b86      	ldr	r3, [pc, #536]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	4a85      	ldr	r2, [pc, #532]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800523a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800523e:	6113      	str	r3, [r2, #16]
 8005240:	4b83      	ldr	r3, [pc, #524]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005242:	6919      	ldr	r1, [r3, #16]
 8005244:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005248:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800524c:	4a80      	ldr	r2, [pc, #512]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800524e:	430b      	orrs	r3, r1
 8005250:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005252:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800525e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005260:	2300      	movs	r3, #0
 8005262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005264:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005268:	460b      	mov	r3, r1
 800526a:	4313      	orrs	r3, r2
 800526c:	d009      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800526e:	4b78      	ldr	r3, [pc, #480]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005272:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005276:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800527a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527c:	4a74      	ldr	r2, [pc, #464]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800527e:	430b      	orrs	r3, r1
 8005280:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005282:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800528e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005290:	2300      	movs	r3, #0
 8005292:	637b      	str	r3, [r7, #52]	@ 0x34
 8005294:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005298:	460b      	mov	r3, r1
 800529a:	4313      	orrs	r3, r2
 800529c:	d00a      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800529e:	4b6c      	ldr	r3, [pc, #432]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80052a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80052a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052ae:	4a68      	ldr	r2, [pc, #416]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80052b0:	430b      	orrs	r3, r1
 80052b2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80052b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052bc:	2100      	movs	r1, #0
 80052be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052c6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80052ca:	460b      	mov	r3, r1
 80052cc:	4313      	orrs	r3, r2
 80052ce:	d011      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052d4:	3308      	adds	r3, #8
 80052d6:	2100      	movs	r1, #0
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 f8bb 	bl	8005454 <RCCEx_PLL2_Config>
 80052de:	4603      	mov	r3, r0
 80052e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80052e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80052f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	2100      	movs	r1, #0
 80052fe:	6239      	str	r1, [r7, #32]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	627b      	str	r3, [r7, #36]	@ 0x24
 8005306:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800530a:	460b      	mov	r3, r1
 800530c:	4313      	orrs	r3, r2
 800530e:	d011      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005310:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005314:	3308      	adds	r3, #8
 8005316:	2101      	movs	r1, #1
 8005318:	4618      	mov	r0, r3
 800531a:	f000 f89b 	bl	8005454 <RCCEx_PLL2_Config>
 800531e:	4603      	mov	r3, r0
 8005320:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005324:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800532c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005330:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005334:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533c:	2100      	movs	r1, #0
 800533e:	61b9      	str	r1, [r7, #24]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	61fb      	str	r3, [r7, #28]
 8005346:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800534a:	460b      	mov	r3, r1
 800534c:	4313      	orrs	r3, r2
 800534e:	d011      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005350:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005354:	3308      	adds	r3, #8
 8005356:	2102      	movs	r1, #2
 8005358:	4618      	mov	r0, r3
 800535a:	f000 f87b 	bl	8005454 <RCCEx_PLL2_Config>
 800535e:	4603      	mov	r3, r0
 8005360:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005364:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005370:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005374:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	2100      	movs	r1, #0
 800537e:	6139      	str	r1, [r7, #16]
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800538a:	460b      	mov	r3, r1
 800538c:	4313      	orrs	r3, r2
 800538e:	d011      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005390:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005394:	3328      	adds	r3, #40	@ 0x28
 8005396:	2100      	movs	r1, #0
 8005398:	4618      	mov	r0, r3
 800539a:	f000 f90d 	bl	80055b8 <RCCEx_PLL3_Config>
 800539e:	4603      	mov	r3, r0
 80053a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80053a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80053b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053bc:	2100      	movs	r1, #0
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80053ca:	460b      	mov	r3, r1
 80053cc:	4313      	orrs	r3, r2
 80053ce:	d011      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053d4:	3328      	adds	r3, #40	@ 0x28
 80053d6:	2101      	movs	r1, #1
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 f8ed 	bl	80055b8 <RCCEx_PLL3_Config>
 80053de:	4603      	mov	r3, r0
 80053e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80053e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80053f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fc:	2100      	movs	r1, #0
 80053fe:	6039      	str	r1, [r7, #0]
 8005400:	f003 0320 	and.w	r3, r3, #32
 8005404:	607b      	str	r3, [r7, #4]
 8005406:	e9d7 1200 	ldrd	r1, r2, [r7]
 800540a:	460b      	mov	r3, r1
 800540c:	4313      	orrs	r3, r2
 800540e:	d011      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005414:	3328      	adds	r3, #40	@ 0x28
 8005416:	2102      	movs	r1, #2
 8005418:	4618      	mov	r0, r3
 800541a:	f000 f8cd 	bl	80055b8 <RCCEx_PLL3_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005424:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005430:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005434:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	e000      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
}
 8005442:	4618      	mov	r0, r3
 8005444:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005448:	46bd      	mov	sp, r7
 800544a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800544e:	bf00      	nop
 8005450:	58024400 	.word	0x58024400

08005454 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005462:	4b53      	ldr	r3, [pc, #332]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 8005464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	2b03      	cmp	r3, #3
 800546c:	d101      	bne.n	8005472 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e099      	b.n	80055a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005472:	4b4f      	ldr	r3, [pc, #316]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a4e      	ldr	r2, [pc, #312]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 8005478:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800547c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800547e:	f7fb fd93 	bl	8000fa8 <HAL_GetTick>
 8005482:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005484:	e008      	b.n	8005498 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005486:	f7fb fd8f 	bl	8000fa8 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d901      	bls.n	8005498 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e086      	b.n	80055a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005498:	4b45      	ldr	r3, [pc, #276]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1f0      	bne.n	8005486 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80054a4:	4b42      	ldr	r3, [pc, #264]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 80054a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	031b      	lsls	r3, r3, #12
 80054b2:	493f      	ldr	r1, [pc, #252]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	3b01      	subs	r3, #1
 80054be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	025b      	lsls	r3, r3, #9
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	041b      	lsls	r3, r3, #16
 80054d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	061b      	lsls	r3, r3, #24
 80054e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80054e8:	4931      	ldr	r1, [pc, #196]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80054ee:	4b30      	ldr	r3, [pc, #192]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 80054f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	492d      	ldr	r1, [pc, #180]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005500:	4b2b      	ldr	r3, [pc, #172]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	f023 0220 	bic.w	r2, r3, #32
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	4928      	ldr	r1, [pc, #160]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 800550e:	4313      	orrs	r3, r2
 8005510:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005512:	4b27      	ldr	r3, [pc, #156]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 8005514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005516:	4a26      	ldr	r2, [pc, #152]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 8005518:	f023 0310 	bic.w	r3, r3, #16
 800551c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800551e:	4b24      	ldr	r3, [pc, #144]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 8005520:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005522:	4b24      	ldr	r3, [pc, #144]	@ (80055b4 <RCCEx_PLL2_Config+0x160>)
 8005524:	4013      	ands	r3, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	69d2      	ldr	r2, [r2, #28]
 800552a:	00d2      	lsls	r2, r2, #3
 800552c:	4920      	ldr	r1, [pc, #128]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 800552e:	4313      	orrs	r3, r2
 8005530:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005532:	4b1f      	ldr	r3, [pc, #124]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 8005534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005536:	4a1e      	ldr	r2, [pc, #120]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 8005538:	f043 0310 	orr.w	r3, r3, #16
 800553c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d106      	bne.n	8005552 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005544:	4b1a      	ldr	r3, [pc, #104]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 8005546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005548:	4a19      	ldr	r2, [pc, #100]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 800554a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800554e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005550:	e00f      	b.n	8005572 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d106      	bne.n	8005566 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005558:	4b15      	ldr	r3, [pc, #84]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 800555a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555c:	4a14      	ldr	r2, [pc, #80]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 800555e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005562:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005564:	e005      	b.n	8005572 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005566:	4b12      	ldr	r3, [pc, #72]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 8005568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556a:	4a11      	ldr	r2, [pc, #68]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 800556c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005570:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005572:	4b0f      	ldr	r3, [pc, #60]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a0e      	ldr	r2, [pc, #56]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 8005578:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800557c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800557e:	f7fb fd13 	bl	8000fa8 <HAL_GetTick>
 8005582:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005584:	e008      	b.n	8005598 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005586:	f7fb fd0f 	bl	8000fa8 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e006      	b.n	80055a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005598:	4b05      	ldr	r3, [pc, #20]	@ (80055b0 <RCCEx_PLL2_Config+0x15c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0f0      	beq.n	8005586 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	58024400 	.word	0x58024400
 80055b4:	ffff0007 	.word	0xffff0007

080055b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055c6:	4b53      	ldr	r3, [pc, #332]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 80055c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d101      	bne.n	80055d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e099      	b.n	800570a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80055d6:	4b4f      	ldr	r3, [pc, #316]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a4e      	ldr	r2, [pc, #312]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 80055dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e2:	f7fb fce1 	bl	8000fa8 <HAL_GetTick>
 80055e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055e8:	e008      	b.n	80055fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80055ea:	f7fb fcdd 	bl	8000fa8 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e086      	b.n	800570a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055fc:	4b45      	ldr	r3, [pc, #276]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1f0      	bne.n	80055ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005608:	4b42      	ldr	r3, [pc, #264]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 800560a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	051b      	lsls	r3, r3, #20
 8005616:	493f      	ldr	r1, [pc, #252]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 8005618:	4313      	orrs	r3, r2
 800561a:	628b      	str	r3, [r1, #40]	@ 0x28
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	3b01      	subs	r3, #1
 8005622:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	3b01      	subs	r3, #1
 800562c:	025b      	lsls	r3, r3, #9
 800562e:	b29b      	uxth	r3, r3
 8005630:	431a      	orrs	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	3b01      	subs	r3, #1
 8005638:	041b      	lsls	r3, r3, #16
 800563a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	3b01      	subs	r3, #1
 8005646:	061b      	lsls	r3, r3, #24
 8005648:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800564c:	4931      	ldr	r1, [pc, #196]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 800564e:	4313      	orrs	r3, r2
 8005650:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005652:	4b30      	ldr	r3, [pc, #192]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 8005654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005656:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	492d      	ldr	r1, [pc, #180]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 8005660:	4313      	orrs	r3, r2
 8005662:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005664:	4b2b      	ldr	r3, [pc, #172]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 8005666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005668:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	4928      	ldr	r1, [pc, #160]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 8005672:	4313      	orrs	r3, r2
 8005674:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005676:	4b27      	ldr	r3, [pc, #156]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 8005678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567a:	4a26      	ldr	r2, [pc, #152]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 800567c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005680:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005682:	4b24      	ldr	r3, [pc, #144]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 8005684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005686:	4b24      	ldr	r3, [pc, #144]	@ (8005718 <RCCEx_PLL3_Config+0x160>)
 8005688:	4013      	ands	r3, r2
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	69d2      	ldr	r2, [r2, #28]
 800568e:	00d2      	lsls	r2, r2, #3
 8005690:	4920      	ldr	r1, [pc, #128]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 8005692:	4313      	orrs	r3, r2
 8005694:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005696:	4b1f      	ldr	r3, [pc, #124]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 8005698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569a:	4a1e      	ldr	r2, [pc, #120]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 800569c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d106      	bne.n	80056b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80056a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 80056aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ac:	4a19      	ldr	r2, [pc, #100]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 80056ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80056b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80056b4:	e00f      	b.n	80056d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d106      	bne.n	80056ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80056bc:	4b15      	ldr	r3, [pc, #84]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 80056be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c0:	4a14      	ldr	r2, [pc, #80]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 80056c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80056c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80056c8:	e005      	b.n	80056d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80056ca:	4b12      	ldr	r3, [pc, #72]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 80056cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ce:	4a11      	ldr	r2, [pc, #68]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 80056d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80056d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a0e      	ldr	r2, [pc, #56]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 80056dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e2:	f7fb fc61 	bl	8000fa8 <HAL_GetTick>
 80056e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056e8:	e008      	b.n	80056fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056ea:	f7fb fc5d 	bl	8000fa8 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d901      	bls.n	80056fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e006      	b.n	800570a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056fc:	4b05      	ldr	r3, [pc, #20]	@ (8005714 <RCCEx_PLL3_Config+0x15c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0f0      	beq.n	80056ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005708:	7bfb      	ldrb	r3, [r7, #15]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	58024400 	.word	0x58024400
 8005718:	ffff0007 	.word	0xffff0007

0800571c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e10f      	b.n	800594e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a87      	ldr	r2, [pc, #540]	@ (8005958 <HAL_SPI_Init+0x23c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00f      	beq.n	800575e <HAL_SPI_Init+0x42>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a86      	ldr	r2, [pc, #536]	@ (800595c <HAL_SPI_Init+0x240>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00a      	beq.n	800575e <HAL_SPI_Init+0x42>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a84      	ldr	r2, [pc, #528]	@ (8005960 <HAL_SPI_Init+0x244>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d005      	beq.n	800575e <HAL_SPI_Init+0x42>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	2b0f      	cmp	r3, #15
 8005758:	d901      	bls.n	800575e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e0f7      	b.n	800594e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fbba 	bl	8005ed8 <SPI_GetPacketSize>
 8005764:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a7b      	ldr	r2, [pc, #492]	@ (8005958 <HAL_SPI_Init+0x23c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d00c      	beq.n	800578a <HAL_SPI_Init+0x6e>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a79      	ldr	r2, [pc, #484]	@ (800595c <HAL_SPI_Init+0x240>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d007      	beq.n	800578a <HAL_SPI_Init+0x6e>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a78      	ldr	r2, [pc, #480]	@ (8005960 <HAL_SPI_Init+0x244>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d002      	beq.n	800578a <HAL_SPI_Init+0x6e>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b08      	cmp	r3, #8
 8005788:	d811      	bhi.n	80057ae <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800578e:	4a72      	ldr	r2, [pc, #456]	@ (8005958 <HAL_SPI_Init+0x23c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d009      	beq.n	80057a8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a70      	ldr	r2, [pc, #448]	@ (800595c <HAL_SPI_Init+0x240>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d004      	beq.n	80057a8 <HAL_SPI_Init+0x8c>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a6f      	ldr	r2, [pc, #444]	@ (8005960 <HAL_SPI_Init+0x244>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d104      	bne.n	80057b2 <HAL_SPI_Init+0x96>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b10      	cmp	r3, #16
 80057ac:	d901      	bls.n	80057b2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e0cd      	b.n	800594e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fb f986 	bl	8000ad8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0201 	bic.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80057ee:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057f8:	d119      	bne.n	800582e <HAL_SPI_Init+0x112>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005802:	d103      	bne.n	800580c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005808:	2b00      	cmp	r3, #0
 800580a:	d008      	beq.n	800581e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10c      	bne.n	800582e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005818:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800581c:	d107      	bne.n	800582e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800582c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00f      	beq.n	800585a <HAL_SPI_Init+0x13e>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	2b06      	cmp	r3, #6
 8005840:	d90b      	bls.n	800585a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	e007      	b.n	800586a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005868:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69da      	ldr	r2, [r3, #28]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005872:	431a      	orrs	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800587c:	ea42 0103 	orr.w	r1, r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005894:	431a      	orrs	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	431a      	orrs	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	431a      	orrs	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058ca:	ea42 0103 	orr.w	r1, r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d113      	bne.n	800590a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058f4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005908:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0201 	bic.w	r2, r2, #1
 8005918:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	40013000 	.word	0x40013000
 800595c:	40003800 	.word	0x40003800
 8005960:	40003c00 	.word	0x40003c00

08005964 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08a      	sub	sp, #40	@ 0x28
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800597c:	6a3a      	ldr	r2, [r7, #32]
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	4013      	ands	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800598c:	2300      	movs	r3, #0
 800598e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005996:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3330      	adds	r3, #48	@ 0x30
 800599e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d010      	beq.n	80059cc <HAL_SPI_IRQHandler+0x68>
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00b      	beq.n	80059cc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059c2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f9c3 	bl	8005d50 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80059ca:	e192      	b.n	8005cf2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d113      	bne.n	80059fe <HAL_SPI_IRQHandler+0x9a>
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	f003 0320 	and.w	r3, r3, #32
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10e      	bne.n	80059fe <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d009      	beq.n	80059fe <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	4798      	blx	r3
    hspi->RxISR(hspi);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	4798      	blx	r3
    handled = 1UL;
 80059fa:	2301      	movs	r3, #1
 80059fc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10f      	bne.n	8005a28 <HAL_SPI_IRQHandler+0xc4>
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d105      	bne.n	8005a28 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	4798      	blx	r3
    handled = 1UL;
 8005a24:	2301      	movs	r3, #1
 8005a26:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	f003 0320 	and.w	r3, r3, #32
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10f      	bne.n	8005a52 <HAL_SPI_IRQHandler+0xee>
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d105      	bne.n	8005a52 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4798      	blx	r3
    handled = 1UL;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f040 8147 	bne.w	8005ce8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	f003 0308 	and.w	r3, r3, #8
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 808b 	beq.w	8005b7c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	699a      	ldr	r2, [r3, #24]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0208 	orr.w	r2, r2, #8
 8005a74:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	699a      	ldr	r2, [r3, #24]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0210 	orr.w	r2, r2, #16
 8005a84:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	699a      	ldr	r2, [r3, #24]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a94:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0208 	bic.w	r2, r2, #8
 8005aa4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d13d      	bne.n	8005b30 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8005ab4:	e036      	b.n	8005b24 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	2b0f      	cmp	r3, #15
 8005abc:	d90b      	bls.n	8005ad6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ac6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005ac8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ace:	1d1a      	adds	r2, r3, #4
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	665a      	str	r2, [r3, #100]	@ 0x64
 8005ad4:	e01d      	b.n	8005b12 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	2b07      	cmp	r3, #7
 8005adc:	d90b      	bls.n	8005af6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	8812      	ldrh	r2, [r2, #0]
 8005ae6:	b292      	uxth	r2, r2
 8005ae8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aee:	1c9a      	adds	r2, r3, #2
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	665a      	str	r2, [r3, #100]	@ 0x64
 8005af4:	e00d      	b.n	8005b12 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b02:	7812      	ldrb	r2, [r2, #0]
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1c2      	bne.n	8005ab6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f931 	bl	8005d98 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f8f7 	bl	8005d3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005b4e:	e0d0      	b.n	8005cf2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8005b50:	7cfb      	ldrb	r3, [r7, #19]
 8005b52:	2b05      	cmp	r3, #5
 8005b54:	d103      	bne.n	8005b5e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f8e6 	bl	8005d28 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8005b5c:	e0c6      	b.n	8005cec <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8005b5e:	7cfb      	ldrb	r3, [r7, #19]
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	d103      	bne.n	8005b6c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f8d5 	bl	8005d14 <HAL_SPI_RxCpltCallback>
    return;
 8005b6a:	e0bf      	b.n	8005cec <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005b6c:	7cfb      	ldrb	r3, [r7, #19]
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	f040 80bc 	bne.w	8005cec <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f8c3 	bl	8005d00 <HAL_SPI_TxCpltCallback>
    return;
 8005b7a:	e0b7      	b.n	8005cec <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 80b5 	beq.w	8005cf2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00f      	beq.n	8005bb2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b98:	f043 0204 	orr.w	r2, r3, #4
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	699a      	ldr	r2, [r3, #24]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bb0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00f      	beq.n	8005bdc <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bc2:	f043 0201 	orr.w	r2, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bda:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00f      	beq.n	8005c06 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bec:	f043 0208 	orr.w	r2, r3, #8
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	699a      	ldr	r2, [r3, #24]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c04:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	f003 0320 	and.w	r3, r3, #32
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00f      	beq.n	8005c30 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c16:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699a      	ldr	r2, [r3, #24]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0220 	orr.w	r2, r2, #32
 8005c2e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d05a      	beq.n	8005cf0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0201 	bic.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6919      	ldr	r1, [r3, #16]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	4b28      	ldr	r3, [pc, #160]	@ (8005cf8 <HAL_SPI_IRQHandler+0x394>)
 8005c56:	400b      	ands	r3, r1
 8005c58:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005c60:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005c64:	d138      	bne.n	8005cd8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005c74:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d013      	beq.n	8005ca6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c82:	4a1e      	ldr	r2, [pc, #120]	@ (8005cfc <HAL_SPI_IRQHandler+0x398>)
 8005c84:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fb fae2 	bl	8001254 <HAL_DMA_Abort_IT>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d007      	beq.n	8005ca6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c9c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d020      	beq.n	8005cf0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cb2:	4a12      	ldr	r2, [pc, #72]	@ (8005cfc <HAL_SPI_IRQHandler+0x398>)
 8005cb4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fb faca 	bl	8001254 <HAL_DMA_Abort_IT>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d014      	beq.n	8005cf0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ccc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005cd6:	e00b      	b.n	8005cf0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f82b 	bl	8005d3c <HAL_SPI_ErrorCallback>
    return;
 8005ce6:	e003      	b.n	8005cf0 <HAL_SPI_IRQHandler+0x38c>
    return;
 8005ce8:	bf00      	nop
 8005cea:	e002      	b.n	8005cf2 <HAL_SPI_IRQHandler+0x38e>
    return;
 8005cec:	bf00      	nop
 8005cee:	e000      	b.n	8005cf2 <HAL_SPI_IRQHandler+0x38e>
    return;
 8005cf0:	bf00      	nop
  }
}
 8005cf2:	3728      	adds	r7, #40	@ 0x28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	fffffc94 	.word	0xfffffc94
 8005cfc:	08005d65 	.word	0x08005d65

08005d00 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d70:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f7ff ffd6 	bl	8005d3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d90:	bf00      	nop
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0208 	orr.w	r2, r2, #8
 8005db6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0210 	orr.w	r2, r2, #16
 8005dc6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0201 	bic.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6919      	ldr	r1, [r3, #16]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	4b3c      	ldr	r3, [pc, #240]	@ (8005ed4 <SPI_CloseTransfer+0x13c>)
 8005de4:	400b      	ands	r3, r1
 8005de6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005df6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d014      	beq.n	8005e2e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f003 0320 	and.w	r3, r3, #32
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00f      	beq.n	8005e2e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	699a      	ldr	r2, [r3, #24]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0220 	orr.w	r2, r2, #32
 8005e2c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	d014      	beq.n	8005e64 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00f      	beq.n	8005e64 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e4a:	f043 0204 	orr.w	r2, r3, #4
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699a      	ldr	r2, [r3, #24]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e62:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00f      	beq.n	8005e8e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e74:	f043 0201 	orr.w	r2, r3, #1
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	699a      	ldr	r2, [r3, #24]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e8c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00f      	beq.n	8005eb8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e9e:	f043 0208 	orr.w	r2, r3, #8
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699a      	ldr	r2, [r3, #24]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005eb6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005ec8:	bf00      	nop
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	fffffc90 	.word	0xfffffc90

08005ed8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee4:	095b      	lsrs	r3, r3, #5
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	3307      	adds	r3, #7
 8005ef6:	08db      	lsrs	r3, r3, #3
 8005ef8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	fb02 f303 	mul.w	r3, r2, r3
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
	...

08005f10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f10:	b084      	sub	sp, #16
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	f107 001c 	add.w	r0, r7, #28
 8005f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f22:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d121      	bne.n	8005f6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8005fec <USB_CoreInit+0xdc>)
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d105      	bne.n	8005f62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f001 fafa 	bl	800755c <USB_CoreReset>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	73fb      	strb	r3, [r7, #15]
 8005f6c:	e01b      	b.n	8005fa6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f001 faee 	bl	800755c <USB_CoreReset>
 8005f80:	4603      	mov	r3, r0
 8005f82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f84:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d106      	bne.n	8005f9a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f90:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f98:	e005      	b.n	8005fa6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005fa6:	7fbb      	ldrb	r3, [r7, #30]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d116      	bne.n	8005fda <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005fba:	4b0d      	ldr	r3, [pc, #52]	@ (8005ff0 <USB_CoreInit+0xe0>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f043 0206 	orr.w	r2, r3, #6
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f043 0220 	orr.w	r2, r3, #32
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fe6:	b004      	add	sp, #16
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	ffbdffbf 	.word	0xffbdffbf
 8005ff0:	03ee0000 	.word	0x03ee0000

08005ff4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	4613      	mov	r3, r2
 8006000:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006002:	79fb      	ldrb	r3, [r7, #7]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d165      	bne.n	80060d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	4a41      	ldr	r2, [pc, #260]	@ (8006110 <USB_SetTurnaroundTime+0x11c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d906      	bls.n	800601e <USB_SetTurnaroundTime+0x2a>
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4a40      	ldr	r2, [pc, #256]	@ (8006114 <USB_SetTurnaroundTime+0x120>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d202      	bcs.n	800601e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006018:	230f      	movs	r3, #15
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	e062      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	4a3c      	ldr	r2, [pc, #240]	@ (8006114 <USB_SetTurnaroundTime+0x120>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d306      	bcc.n	8006034 <USB_SetTurnaroundTime+0x40>
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	4a3b      	ldr	r2, [pc, #236]	@ (8006118 <USB_SetTurnaroundTime+0x124>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d202      	bcs.n	8006034 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800602e:	230e      	movs	r3, #14
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	e057      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	4a38      	ldr	r2, [pc, #224]	@ (8006118 <USB_SetTurnaroundTime+0x124>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d306      	bcc.n	800604a <USB_SetTurnaroundTime+0x56>
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4a37      	ldr	r2, [pc, #220]	@ (800611c <USB_SetTurnaroundTime+0x128>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d202      	bcs.n	800604a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006044:	230d      	movs	r3, #13
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	e04c      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	4a33      	ldr	r2, [pc, #204]	@ (800611c <USB_SetTurnaroundTime+0x128>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d306      	bcc.n	8006060 <USB_SetTurnaroundTime+0x6c>
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	4a32      	ldr	r2, [pc, #200]	@ (8006120 <USB_SetTurnaroundTime+0x12c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d802      	bhi.n	8006060 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800605a:	230c      	movs	r3, #12
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	e041      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4a2f      	ldr	r2, [pc, #188]	@ (8006120 <USB_SetTurnaroundTime+0x12c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d906      	bls.n	8006076 <USB_SetTurnaroundTime+0x82>
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	4a2e      	ldr	r2, [pc, #184]	@ (8006124 <USB_SetTurnaroundTime+0x130>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d802      	bhi.n	8006076 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006070:	230b      	movs	r3, #11
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	e036      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	4a2a      	ldr	r2, [pc, #168]	@ (8006124 <USB_SetTurnaroundTime+0x130>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d906      	bls.n	800608c <USB_SetTurnaroundTime+0x98>
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	4a29      	ldr	r2, [pc, #164]	@ (8006128 <USB_SetTurnaroundTime+0x134>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d802      	bhi.n	800608c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006086:	230a      	movs	r3, #10
 8006088:	617b      	str	r3, [r7, #20]
 800608a:	e02b      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	4a26      	ldr	r2, [pc, #152]	@ (8006128 <USB_SetTurnaroundTime+0x134>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d906      	bls.n	80060a2 <USB_SetTurnaroundTime+0xae>
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	4a25      	ldr	r2, [pc, #148]	@ (800612c <USB_SetTurnaroundTime+0x138>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d202      	bcs.n	80060a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800609c:	2309      	movs	r3, #9
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	e020      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	4a21      	ldr	r2, [pc, #132]	@ (800612c <USB_SetTurnaroundTime+0x138>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d306      	bcc.n	80060b8 <USB_SetTurnaroundTime+0xc4>
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	4a20      	ldr	r2, [pc, #128]	@ (8006130 <USB_SetTurnaroundTime+0x13c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d802      	bhi.n	80060b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80060b2:	2308      	movs	r3, #8
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	e015      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	4a1d      	ldr	r2, [pc, #116]	@ (8006130 <USB_SetTurnaroundTime+0x13c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d906      	bls.n	80060ce <USB_SetTurnaroundTime+0xda>
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006134 <USB_SetTurnaroundTime+0x140>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d202      	bcs.n	80060ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80060c8:	2307      	movs	r3, #7
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	e00a      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80060ce:	2306      	movs	r3, #6
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	e007      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80060d4:	79fb      	ldrb	r3, [r7, #7]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d102      	bne.n	80060e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80060da:	2309      	movs	r3, #9
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	e001      	b.n	80060e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80060e0:	2309      	movs	r3, #9
 80060e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	029b      	lsls	r3, r3, #10
 80060f8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80060fc:	431a      	orrs	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	371c      	adds	r7, #28
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	00d8acbf 	.word	0x00d8acbf
 8006114:	00e4e1c0 	.word	0x00e4e1c0
 8006118:	00f42400 	.word	0x00f42400
 800611c:	01067380 	.word	0x01067380
 8006120:	011a499f 	.word	0x011a499f
 8006124:	01312cff 	.word	0x01312cff
 8006128:	014ca43f 	.word	0x014ca43f
 800612c:	016e3600 	.word	0x016e3600
 8006130:	01a6ab1f 	.word	0x01a6ab1f
 8006134:	01e84800 	.word	0x01e84800

08006138 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f043 0201 	orr.w	r2, r3, #1
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f023 0201 	bic.w	r2, r3, #1
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d115      	bne.n	80061ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061aa:	200a      	movs	r0, #10
 80061ac:	f7fa ff08 	bl	8000fc0 <HAL_Delay>
      ms += 10U;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	330a      	adds	r3, #10
 80061b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f001 f93f 	bl	800743a <USB_GetMode>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d01e      	beq.n	8006200 <USB_SetCurrentMode+0x84>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80061c6:	d9f0      	bls.n	80061aa <USB_SetCurrentMode+0x2e>
 80061c8:	e01a      	b.n	8006200 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061ca:	78fb      	ldrb	r3, [r7, #3]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d115      	bne.n	80061fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061dc:	200a      	movs	r0, #10
 80061de:	f7fa feef 	bl	8000fc0 <HAL_Delay>
      ms += 10U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	330a      	adds	r3, #10
 80061e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f001 f926 	bl	800743a <USB_GetMode>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d005      	beq.n	8006200 <USB_SetCurrentMode+0x84>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80061f8:	d9f0      	bls.n	80061dc <USB_SetCurrentMode+0x60>
 80061fa:	e001      	b.n	8006200 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e005      	b.n	800620c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2bc8      	cmp	r3, #200	@ 0xc8
 8006204:	d101      	bne.n	800620a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e000      	b.n	800620c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006214:	b084      	sub	sp, #16
 8006216:	b580      	push	{r7, lr}
 8006218:	b086      	sub	sp, #24
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800622e:	2300      	movs	r3, #0
 8006230:	613b      	str	r3, [r7, #16]
 8006232:	e009      	b.n	8006248 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	3340      	adds	r3, #64	@ 0x40
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	2200      	movs	r2, #0
 8006240:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	3301      	adds	r3, #1
 8006246:	613b      	str	r3, [r7, #16]
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	2b0e      	cmp	r3, #14
 800624c:	d9f2      	bls.n	8006234 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800624e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006252:	2b00      	cmp	r3, #0
 8006254:	d11c      	bne.n	8006290 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006264:	f043 0302 	orr.w	r3, r3, #2
 8006268:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	e005      	b.n	800629c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006294:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062a2:	461a      	mov	r2, r3
 80062a4:	2300      	movs	r3, #0
 80062a6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062a8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d10d      	bne.n	80062cc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80062b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d104      	bne.n	80062c2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062b8:	2100      	movs	r1, #0
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f968 	bl	8006590 <USB_SetDevSpeed>
 80062c0:	e008      	b.n	80062d4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062c2:	2101      	movs	r1, #1
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f963 	bl	8006590 <USB_SetDevSpeed>
 80062ca:	e003      	b.n	80062d4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062cc:	2103      	movs	r1, #3
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f95e 	bl	8006590 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062d4:	2110      	movs	r1, #16
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f8fa 	bl	80064d0 <USB_FlushTxFifo>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f924 	bl	8006534 <USB_FlushRxFifo>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062fc:	461a      	mov	r2, r3
 80062fe:	2300      	movs	r3, #0
 8006300:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006308:	461a      	mov	r2, r3
 800630a:	2300      	movs	r3, #0
 800630c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006314:	461a      	mov	r2, r3
 8006316:	2300      	movs	r3, #0
 8006318:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800631a:	2300      	movs	r3, #0
 800631c:	613b      	str	r3, [r7, #16]
 800631e:	e043      	b.n	80063a8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006332:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006336:	d118      	bne.n	800636a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10a      	bne.n	8006354 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800634a:	461a      	mov	r2, r3
 800634c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006350:	6013      	str	r3, [r2, #0]
 8006352:	e013      	b.n	800637c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006360:	461a      	mov	r2, r3
 8006362:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	e008      	b.n	800637c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4413      	add	r3, r2
 8006372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006376:	461a      	mov	r2, r3
 8006378:	2300      	movs	r3, #0
 800637a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006388:	461a      	mov	r2, r3
 800638a:	2300      	movs	r3, #0
 800638c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4413      	add	r3, r2
 8006396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800639a:	461a      	mov	r2, r3
 800639c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	3301      	adds	r3, #1
 80063a6:	613b      	str	r3, [r7, #16]
 80063a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063ac:	461a      	mov	r2, r3
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d3b5      	bcc.n	8006320 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063b4:	2300      	movs	r3, #0
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	e043      	b.n	8006442 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063d0:	d118      	bne.n	8006404 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10a      	bne.n	80063ee <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e4:	461a      	mov	r2, r3
 80063e6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	e013      	b.n	8006416 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063fa:	461a      	mov	r2, r3
 80063fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	e008      	b.n	8006416 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006410:	461a      	mov	r2, r3
 8006412:	2300      	movs	r3, #0
 8006414:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4413      	add	r3, r2
 800641e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006422:	461a      	mov	r2, r3
 8006424:	2300      	movs	r3, #0
 8006426:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006434:	461a      	mov	r2, r3
 8006436:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800643a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	3301      	adds	r3, #1
 8006440:	613b      	str	r3, [r7, #16]
 8006442:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006446:	461a      	mov	r2, r3
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	4293      	cmp	r3, r2
 800644c:	d3b5      	bcc.n	80063ba <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800645c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006460:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800646e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006470:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006474:	2b00      	cmp	r3, #0
 8006476:	d105      	bne.n	8006484 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	f043 0210 	orr.w	r2, r3, #16
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699a      	ldr	r2, [r3, #24]
 8006488:	4b0f      	ldr	r3, [pc, #60]	@ (80064c8 <USB_DevInit+0x2b4>)
 800648a:	4313      	orrs	r3, r2
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006490:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006494:	2b00      	cmp	r3, #0
 8006496:	d005      	beq.n	80064a4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	f043 0208 	orr.w	r2, r3, #8
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d105      	bne.n	80064b8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	699a      	ldr	r2, [r3, #24]
 80064b0:	4b06      	ldr	r3, [pc, #24]	@ (80064cc <USB_DevInit+0x2b8>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064c4:	b004      	add	sp, #16
 80064c6:	4770      	bx	lr
 80064c8:	803c3800 	.word	0x803c3800
 80064cc:	40000004 	.word	0x40000004

080064d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3301      	adds	r3, #1
 80064e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064ea:	d901      	bls.n	80064f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e01b      	b.n	8006528 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	daf2      	bge.n	80064de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	019b      	lsls	r3, r3, #6
 8006500:	f043 0220 	orr.w	r2, r3, #32
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3301      	adds	r3, #1
 800650c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006514:	d901      	bls.n	800651a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e006      	b.n	8006528 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f003 0320 	and.w	r3, r3, #32
 8006522:	2b20      	cmp	r3, #32
 8006524:	d0f0      	beq.n	8006508 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	3301      	adds	r3, #1
 8006544:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800654c:	d901      	bls.n	8006552 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e018      	b.n	8006584 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	daf2      	bge.n	8006540 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2210      	movs	r2, #16
 8006562:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3301      	adds	r3, #1
 8006568:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006570:	d901      	bls.n	8006576 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e006      	b.n	8006584 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0310 	and.w	r3, r3, #16
 800657e:	2b10      	cmp	r3, #16
 8006580:	d0f0      	beq.n	8006564 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	460b      	mov	r3, r1
 800659a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	78fb      	ldrb	r3, [r7, #3]
 80065aa:	68f9      	ldr	r1, [r7, #12]
 80065ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065b0:	4313      	orrs	r3, r2
 80065b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b087      	sub	sp, #28
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 0306 	and.w	r3, r3, #6
 80065da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d102      	bne.n	80065e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80065e2:	2300      	movs	r3, #0
 80065e4:	75fb      	strb	r3, [r7, #23]
 80065e6:	e00a      	b.n	80065fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d002      	beq.n	80065f4 <USB_GetDevSpeed+0x32>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b06      	cmp	r3, #6
 80065f2:	d102      	bne.n	80065fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80065f4:	2302      	movs	r3, #2
 80065f6:	75fb      	strb	r3, [r7, #23]
 80065f8:	e001      	b.n	80065fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80065fa:	230f      	movs	r3, #15
 80065fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006600:	4618      	mov	r0, r3
 8006602:	371c      	adds	r7, #28
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	785b      	ldrb	r3, [r3, #1]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d139      	bne.n	800669c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800662e:	69da      	ldr	r2, [r3, #28]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	f003 030f 	and.w	r3, r3, #15
 8006638:	2101      	movs	r1, #1
 800663a:	fa01 f303 	lsl.w	r3, r1, r3
 800663e:	b29b      	uxth	r3, r3
 8006640:	68f9      	ldr	r1, [r7, #12]
 8006642:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006646:	4313      	orrs	r3, r2
 8006648:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d153      	bne.n	8006708 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	791b      	ldrb	r3, [r3, #4]
 800667a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800667c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	059b      	lsls	r3, r3, #22
 8006682:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006684:	431a      	orrs	r2, r3
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	0159      	lsls	r1, r3, #5
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	440b      	add	r3, r1
 800668e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006692:	4619      	mov	r1, r3
 8006694:	4b20      	ldr	r3, [pc, #128]	@ (8006718 <USB_ActivateEndpoint+0x10c>)
 8006696:	4313      	orrs	r3, r2
 8006698:	600b      	str	r3, [r1, #0]
 800669a:	e035      	b.n	8006708 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a2:	69da      	ldr	r2, [r3, #28]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	f003 030f 	and.w	r3, r3, #15
 80066ac:	2101      	movs	r1, #1
 80066ae:	fa01 f303 	lsl.w	r3, r1, r3
 80066b2:	041b      	lsls	r3, r3, #16
 80066b4:	68f9      	ldr	r1, [r7, #12]
 80066b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066ba:	4313      	orrs	r3, r2
 80066bc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d119      	bne.n	8006708 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	791b      	ldrb	r3, [r3, #4]
 80066ee:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80066f0:	430b      	orrs	r3, r1
 80066f2:	431a      	orrs	r2, r3
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	0159      	lsls	r1, r3, #5
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	440b      	add	r3, r1
 80066fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006700:	4619      	mov	r1, r3
 8006702:	4b05      	ldr	r3, [pc, #20]	@ (8006718 <USB_ActivateEndpoint+0x10c>)
 8006704:	4313      	orrs	r3, r2
 8006706:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	10008000 	.word	0x10008000

0800671c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	785b      	ldrb	r3, [r3, #1]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d161      	bne.n	80067fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800674a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800674e:	d11f      	bne.n	8006790 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	0151      	lsls	r1, r2, #5
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	440a      	add	r2, r1
 8006766:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800676a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800676e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	0151      	lsls	r1, r2, #5
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	440a      	add	r2, r1
 8006786:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800678a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800678e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006796:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	f003 030f 	and.w	r3, r3, #15
 80067a0:	2101      	movs	r1, #1
 80067a2:	fa01 f303 	lsl.w	r3, r1, r3
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	43db      	mvns	r3, r3
 80067aa:	68f9      	ldr	r1, [r7, #12]
 80067ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067b0:	4013      	ands	r3, r2
 80067b2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ba:	69da      	ldr	r2, [r3, #28]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	f003 030f 	and.w	r3, r3, #15
 80067c4:	2101      	movs	r1, #1
 80067c6:	fa01 f303 	lsl.w	r3, r1, r3
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	43db      	mvns	r3, r3
 80067ce:	68f9      	ldr	r1, [r7, #12]
 80067d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067d4:	4013      	ands	r3, r2
 80067d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	0159      	lsls	r1, r3, #5
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	440b      	add	r3, r1
 80067ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f2:	4619      	mov	r1, r3
 80067f4:	4b35      	ldr	r3, [pc, #212]	@ (80068cc <USB_DeactivateEndpoint+0x1b0>)
 80067f6:	4013      	ands	r3, r2
 80067f8:	600b      	str	r3, [r1, #0]
 80067fa:	e060      	b.n	80068be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800680e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006812:	d11f      	bne.n	8006854 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	0151      	lsls	r1, r2, #5
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	440a      	add	r2, r1
 800682a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800682e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006832:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4413      	add	r3, r2
 800683c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	0151      	lsls	r1, r2, #5
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	440a      	add	r2, r1
 800684a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800684e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006852:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800685a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	f003 030f 	and.w	r3, r3, #15
 8006864:	2101      	movs	r1, #1
 8006866:	fa01 f303 	lsl.w	r3, r1, r3
 800686a:	041b      	lsls	r3, r3, #16
 800686c:	43db      	mvns	r3, r3
 800686e:	68f9      	ldr	r1, [r7, #12]
 8006870:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006874:	4013      	ands	r3, r2
 8006876:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800687e:	69da      	ldr	r2, [r3, #28]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	f003 030f 	and.w	r3, r3, #15
 8006888:	2101      	movs	r1, #1
 800688a:	fa01 f303 	lsl.w	r3, r1, r3
 800688e:	041b      	lsls	r3, r3, #16
 8006890:	43db      	mvns	r3, r3
 8006892:	68f9      	ldr	r1, [r7, #12]
 8006894:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006898:	4013      	ands	r3, r2
 800689a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	0159      	lsls	r1, r3, #5
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	440b      	add	r3, r1
 80068b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b6:	4619      	mov	r1, r3
 80068b8:	4b05      	ldr	r3, [pc, #20]	@ (80068d0 <USB_DeactivateEndpoint+0x1b4>)
 80068ba:	4013      	ands	r3, r2
 80068bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	ec337800 	.word	0xec337800
 80068d0:	eff37800 	.word	0xeff37800

080068d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08a      	sub	sp, #40	@ 0x28
 80068d8:	af02      	add	r7, sp, #8
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	4613      	mov	r3, r2
 80068e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	785b      	ldrb	r3, [r3, #1]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	f040 8185 	bne.w	8006c00 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d132      	bne.n	8006964 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	0159      	lsls	r1, r3, #5
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	440b      	add	r3, r1
 8006914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006918:	4619      	mov	r1, r3
 800691a:	4ba7      	ldr	r3, [pc, #668]	@ (8006bb8 <USB_EPStartXfer+0x2e4>)
 800691c:	4013      	ands	r3, r2
 800691e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	0151      	lsls	r1, r2, #5
 8006932:	69fa      	ldr	r2, [r7, #28]
 8006934:	440a      	add	r2, r1
 8006936:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800693a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800693e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800694c:	691a      	ldr	r2, [r3, #16]
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	0159      	lsls	r1, r3, #5
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	440b      	add	r3, r1
 8006956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800695a:	4619      	mov	r1, r3
 800695c:	4b97      	ldr	r3, [pc, #604]	@ (8006bbc <USB_EPStartXfer+0x2e8>)
 800695e:	4013      	ands	r3, r2
 8006960:	610b      	str	r3, [r1, #16]
 8006962:	e097      	b.n	8006a94 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006970:	691a      	ldr	r2, [r3, #16]
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	0159      	lsls	r1, r3, #5
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	440b      	add	r3, r1
 800697a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800697e:	4619      	mov	r1, r3
 8006980:	4b8e      	ldr	r3, [pc, #568]	@ (8006bbc <USB_EPStartXfer+0x2e8>)
 8006982:	4013      	ands	r3, r2
 8006984:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	4413      	add	r3, r2
 800698e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006992:	691a      	ldr	r2, [r3, #16]
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	0159      	lsls	r1, r3, #5
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	440b      	add	r3, r1
 800699c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a0:	4619      	mov	r1, r3
 80069a2:	4b85      	ldr	r3, [pc, #532]	@ (8006bb8 <USB_EPStartXfer+0x2e4>)
 80069a4:	4013      	ands	r3, r2
 80069a6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d11a      	bne.n	80069e4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	691a      	ldr	r2, [r3, #16]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d903      	bls.n	80069c2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	0151      	lsls	r1, r2, #5
 80069d4:	69fa      	ldr	r2, [r7, #28]
 80069d6:	440a      	add	r2, r1
 80069d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80069e0:	6113      	str	r3, [r2, #16]
 80069e2:	e044      	b.n	8006a6e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	691a      	ldr	r2, [r3, #16]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	4413      	add	r3, r2
 80069ee:	1e5a      	subs	r2, r3, #1
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a06:	691a      	ldr	r2, [r3, #16]
 8006a08:	8afb      	ldrh	r3, [r7, #22]
 8006a0a:	04d9      	lsls	r1, r3, #19
 8006a0c:	4b6c      	ldr	r3, [pc, #432]	@ (8006bc0 <USB_EPStartXfer+0x2ec>)
 8006a0e:	400b      	ands	r3, r1
 8006a10:	69b9      	ldr	r1, [r7, #24]
 8006a12:	0148      	lsls	r0, r1, #5
 8006a14:	69f9      	ldr	r1, [r7, #28]
 8006a16:	4401      	add	r1, r0
 8006a18:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	791b      	ldrb	r3, [r3, #4]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d122      	bne.n	8006a6e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	0151      	lsls	r1, r2, #5
 8006a3a:	69fa      	ldr	r2, [r7, #28]
 8006a3c:	440a      	add	r2, r1
 8006a3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a42:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006a46:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a54:	691a      	ldr	r2, [r3, #16]
 8006a56:	8afb      	ldrh	r3, [r7, #22]
 8006a58:	075b      	lsls	r3, r3, #29
 8006a5a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006a5e:	69b9      	ldr	r1, [r7, #24]
 8006a60:	0148      	lsls	r0, r1, #5
 8006a62:	69f9      	ldr	r1, [r7, #28]
 8006a64:	4401      	add	r1, r0
 8006a66:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a7a:	691a      	ldr	r2, [r3, #16]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a84:	69b9      	ldr	r1, [r7, #24]
 8006a86:	0148      	lsls	r0, r1, #5
 8006a88:	69f9      	ldr	r1, [r7, #28]
 8006a8a:	4401      	add	r1, r0
 8006a8c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a90:	4313      	orrs	r3, r2
 8006a92:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a94:	79fb      	ldrb	r3, [r7, #7]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d14b      	bne.n	8006b32 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d009      	beq.n	8006ab6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aae:	461a      	mov	r2, r3
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	791b      	ldrb	r3, [r3, #4]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d128      	bne.n	8006b10 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d110      	bne.n	8006af0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	0151      	lsls	r1, r2, #5
 8006ae0:	69fa      	ldr	r2, [r7, #28]
 8006ae2:	440a      	add	r2, r1
 8006ae4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ae8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	e00f      	b.n	8006b10 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	0151      	lsls	r1, r2, #5
 8006b02:	69fa      	ldr	r2, [r7, #28]
 8006b04:	440a      	add	r2, r1
 8006b06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b0e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	0151      	lsls	r1, r2, #5
 8006b22:	69fa      	ldr	r2, [r7, #28]
 8006b24:	440a      	add	r2, r1
 8006b26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b2a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006b2e:	6013      	str	r3, [r2, #0]
 8006b30:	e169      	b.n	8006e06 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	0151      	lsls	r1, r2, #5
 8006b44:	69fa      	ldr	r2, [r7, #28]
 8006b46:	440a      	add	r2, r1
 8006b48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b4c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006b50:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	791b      	ldrb	r3, [r3, #4]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d015      	beq.n	8006b86 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 8151 	beq.w	8006e06 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	f003 030f 	and.w	r3, r3, #15
 8006b74:	2101      	movs	r1, #1
 8006b76:	fa01 f303 	lsl.w	r3, r1, r3
 8006b7a:	69f9      	ldr	r1, [r7, #28]
 8006b7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b80:	4313      	orrs	r3, r2
 8006b82:	634b      	str	r3, [r1, #52]	@ 0x34
 8006b84:	e13f      	b.n	8006e06 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d116      	bne.n	8006bc4 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	0151      	lsls	r1, r2, #5
 8006ba8:	69fa      	ldr	r2, [r7, #28]
 8006baa:	440a      	add	r2, r1
 8006bac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bb0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	e015      	b.n	8006be4 <USB_EPStartXfer+0x310>
 8006bb8:	e007ffff 	.word	0xe007ffff
 8006bbc:	fff80000 	.word	0xfff80000
 8006bc0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	0151      	lsls	r1, r2, #5
 8006bd6:	69fa      	ldr	r2, [r7, #28]
 8006bd8:	440a      	add	r2, r1
 8006bda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006be2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	68d9      	ldr	r1, [r3, #12]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	781a      	ldrb	r2, [r3, #0]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	b298      	uxth	r0, r3
 8006bf2:	79fb      	ldrb	r3, [r7, #7]
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 f9b9 	bl	8006f70 <USB_WritePacket>
 8006bfe:	e102      	b.n	8006e06 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c0c:	691a      	ldr	r2, [r3, #16]
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	0159      	lsls	r1, r3, #5
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	440b      	add	r3, r1
 8006c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4b7c      	ldr	r3, [pc, #496]	@ (8006e10 <USB_EPStartXfer+0x53c>)
 8006c1e:	4013      	ands	r3, r2
 8006c20:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c2e:	691a      	ldr	r2, [r3, #16]
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	0159      	lsls	r1, r3, #5
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	440b      	add	r3, r1
 8006c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4b75      	ldr	r3, [pc, #468]	@ (8006e14 <USB_EPStartXfer+0x540>)
 8006c40:	4013      	ands	r3, r2
 8006c42:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d12f      	bne.n	8006caa <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	689a      	ldr	r2, [r3, #8]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	689a      	ldr	r2, [r3, #8]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c6e:	691a      	ldr	r2, [r3, #16]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c78:	69b9      	ldr	r1, [r7, #24]
 8006c7a:	0148      	lsls	r0, r1, #5
 8006c7c:	69f9      	ldr	r1, [r7, #28]
 8006c7e:	4401      	add	r1, r0
 8006c80:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c84:	4313      	orrs	r3, r2
 8006c86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	0151      	lsls	r1, r2, #5
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ca2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ca6:	6113      	str	r3, [r2, #16]
 8006ca8:	e05f      	b.n	8006d6a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d123      	bne.n	8006cfa <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cbe:	691a      	ldr	r2, [r3, #16]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cc8:	69b9      	ldr	r1, [r7, #24]
 8006cca:	0148      	lsls	r0, r1, #5
 8006ccc:	69f9      	ldr	r1, [r7, #28]
 8006cce:	4401      	add	r1, r0
 8006cd0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	0151      	lsls	r1, r2, #5
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	440a      	add	r2, r1
 8006cee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cf2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cf6:	6113      	str	r3, [r2, #16]
 8006cf8:	e037      	b.n	8006d6a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	691a      	ldr	r2, [r3, #16]
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	4413      	add	r3, r2
 8006d04:	1e5a      	subs	r2, r3, #1
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	8afa      	ldrh	r2, [r7, #22]
 8006d16:	fb03 f202 	mul.w	r2, r3, r2
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d2a:	691a      	ldr	r2, [r3, #16]
 8006d2c:	8afb      	ldrh	r3, [r7, #22]
 8006d2e:	04d9      	lsls	r1, r3, #19
 8006d30:	4b39      	ldr	r3, [pc, #228]	@ (8006e18 <USB_EPStartXfer+0x544>)
 8006d32:	400b      	ands	r3, r1
 8006d34:	69b9      	ldr	r1, [r7, #24]
 8006d36:	0148      	lsls	r0, r1, #5
 8006d38:	69f9      	ldr	r1, [r7, #28]
 8006d3a:	4401      	add	r1, r0
 8006d3c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d40:	4313      	orrs	r3, r2
 8006d42:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d50:	691a      	ldr	r2, [r3, #16]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d5a:	69b9      	ldr	r1, [r7, #24]
 8006d5c:	0148      	lsls	r0, r1, #5
 8006d5e:	69f9      	ldr	r1, [r7, #28]
 8006d60:	4401      	add	r1, r0
 8006d62:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d66:	4313      	orrs	r3, r2
 8006d68:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006d6a:	79fb      	ldrb	r3, [r7, #7]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d10d      	bne.n	8006d8c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d009      	beq.n	8006d8c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	68d9      	ldr	r1, [r3, #12]
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d88:	460a      	mov	r2, r1
 8006d8a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	791b      	ldrb	r3, [r3, #4]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d128      	bne.n	8006de6 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d110      	bne.n	8006dc6 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	0151      	lsls	r1, r2, #5
 8006db6:	69fa      	ldr	r2, [r7, #28]
 8006db8:	440a      	add	r2, r1
 8006dba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dbe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006dc2:	6013      	str	r3, [r2, #0]
 8006dc4:	e00f      	b.n	8006de6 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	0151      	lsls	r1, r2, #5
 8006dd8:	69fa      	ldr	r2, [r7, #28]
 8006dda:	440a      	add	r2, r1
 8006ddc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006de4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	69ba      	ldr	r2, [r7, #24]
 8006df6:	0151      	lsls	r1, r2, #5
 8006df8:	69fa      	ldr	r2, [r7, #28]
 8006dfa:	440a      	add	r2, r1
 8006dfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e00:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006e04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3720      	adds	r7, #32
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	fff80000 	.word	0xfff80000
 8006e14:	e007ffff 	.word	0xe007ffff
 8006e18:	1ff80000 	.word	0x1ff80000

08006e1c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	785b      	ldrb	r3, [r3, #1]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d14a      	bne.n	8006ed0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e52:	f040 8086 	bne.w	8006f62 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	7812      	ldrb	r2, [r2, #0]
 8006e6a:	0151      	lsls	r1, r2, #5
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	440a      	add	r2, r1
 8006e70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e74:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e78:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	7812      	ldrb	r2, [r2, #0]
 8006e8e:	0151      	lsls	r1, r2, #5
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	440a      	add	r2, r1
 8006e94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d902      	bls.n	8006eb4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	75fb      	strb	r3, [r7, #23]
          break;
 8006eb2:	e056      	b.n	8006f62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ecc:	d0e7      	beq.n	8006e9e <USB_EPStopXfer+0x82>
 8006ece:	e048      	b.n	8006f62 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ee8:	d13b      	bne.n	8006f62 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	7812      	ldrb	r2, [r2, #0]
 8006efe:	0151      	lsls	r1, r2, #5
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	440a      	add	r2, r1
 8006f04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f08:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006f0c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	7812      	ldrb	r2, [r2, #0]
 8006f22:	0151      	lsls	r1, r2, #5
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	440a      	add	r2, r1
 8006f28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3301      	adds	r3, #1
 8006f36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d902      	bls.n	8006f48 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	75fb      	strb	r3, [r7, #23]
          break;
 8006f46:	e00c      	b.n	8006f62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f60:	d0e7      	beq.n	8006f32 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	371c      	adds	r7, #28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b089      	sub	sp, #36	@ 0x24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	460b      	mov	r3, r1
 8006f80:	71fb      	strb	r3, [r7, #7]
 8006f82:	4613      	mov	r3, r2
 8006f84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d123      	bne.n	8006fde <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f96:	88bb      	ldrh	r3, [r7, #4]
 8006f98:	3303      	adds	r3, #3
 8006f9a:	089b      	lsrs	r3, r3, #2
 8006f9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	61bb      	str	r3, [r7, #24]
 8006fa2:	e018      	b.n	8006fd6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006fa4:	79fb      	ldrb	r3, [r7, #7]
 8006fa6:	031a      	lsls	r2, r3, #12
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	61bb      	str	r3, [r7, #24]
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d3e2      	bcc.n	8006fa4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3724      	adds	r7, #36	@ 0x24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b08b      	sub	sp, #44	@ 0x2c
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007002:	88fb      	ldrh	r3, [r7, #6]
 8007004:	089b      	lsrs	r3, r3, #2
 8007006:	b29b      	uxth	r3, r3
 8007008:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800700a:	88fb      	ldrh	r3, [r7, #6]
 800700c:	f003 0303 	and.w	r3, r3, #3
 8007010:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007012:	2300      	movs	r3, #0
 8007014:	623b      	str	r3, [r7, #32]
 8007016:	e014      	b.n	8007042 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007022:	601a      	str	r2, [r3, #0]
    pDest++;
 8007024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007026:	3301      	adds	r3, #1
 8007028:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	3301      	adds	r3, #1
 800702e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007032:	3301      	adds	r3, #1
 8007034:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007038:	3301      	adds	r3, #1
 800703a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	3301      	adds	r3, #1
 8007040:	623b      	str	r3, [r7, #32]
 8007042:	6a3a      	ldr	r2, [r7, #32]
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	429a      	cmp	r2, r3
 8007048:	d3e6      	bcc.n	8007018 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800704a:	8bfb      	ldrh	r3, [r7, #30]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d01e      	beq.n	800708e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800705a:	461a      	mov	r2, r3
 800705c:	f107 0310 	add.w	r3, r7, #16
 8007060:	6812      	ldr	r2, [r2, #0]
 8007062:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	fa22 f303 	lsr.w	r3, r2, r3
 8007070:	b2da      	uxtb	r2, r3
 8007072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007074:	701a      	strb	r2, [r3, #0]
      i++;
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	3301      	adds	r3, #1
 800707a:	623b      	str	r3, [r7, #32]
      pDest++;
 800707c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707e:	3301      	adds	r3, #1
 8007080:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007082:	8bfb      	ldrh	r3, [r7, #30]
 8007084:	3b01      	subs	r3, #1
 8007086:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007088:	8bfb      	ldrh	r3, [r7, #30]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1ea      	bne.n	8007064 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800708e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007090:	4618      	mov	r0, r3
 8007092:	372c      	adds	r7, #44	@ 0x2c
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	785b      	ldrb	r3, [r3, #1]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d12c      	bne.n	8007112 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	db12      	blt.n	80070f0 <USB_EPSetStall+0x54>
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00f      	beq.n	80070f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	0151      	lsls	r1, r2, #5
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	440a      	add	r2, r1
 80070e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80070ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	0151      	lsls	r1, r2, #5
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	440a      	add	r2, r1
 8007106:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800710a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800710e:	6013      	str	r3, [r2, #0]
 8007110:	e02b      	b.n	800716a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4413      	add	r3, r2
 800711a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	db12      	blt.n	800714a <USB_EPSetStall+0xae>
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00f      	beq.n	800714a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	4413      	add	r3, r2
 8007132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	0151      	lsls	r1, r2, #5
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	440a      	add	r2, r1
 8007140:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007144:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007148:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	0151      	lsls	r1, r2, #5
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	440a      	add	r2, r1
 8007160:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007164:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007168:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	785b      	ldrb	r3, [r3, #1]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d128      	bne.n	80071e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	0151      	lsls	r1, r2, #5
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	440a      	add	r2, r1
 80071aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80071b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	791b      	ldrb	r3, [r3, #4]
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d003      	beq.n	80071c4 <USB_EPClearStall+0x4c>
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	791b      	ldrb	r3, [r3, #4]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d138      	bne.n	8007236 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	0151      	lsls	r1, r2, #5
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	440a      	add	r2, r1
 80071da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071e2:	6013      	str	r3, [r2, #0]
 80071e4:	e027      	b.n	8007236 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	0151      	lsls	r1, r2, #5
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	440a      	add	r2, r1
 80071fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007200:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007204:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	791b      	ldrb	r3, [r3, #4]
 800720a:	2b03      	cmp	r3, #3
 800720c:	d003      	beq.n	8007216 <USB_EPClearStall+0x9e>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	791b      	ldrb	r3, [r3, #4]
 8007212:	2b02      	cmp	r3, #2
 8007214:	d10f      	bne.n	8007236 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4413      	add	r3, r2
 800721e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	0151      	lsls	r1, r2, #5
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	440a      	add	r2, r1
 800722c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007234:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	460b      	mov	r3, r1
 800724e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007262:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007266:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007278:	68f9      	ldr	r1, [r7, #12]
 800727a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800727e:	4313      	orrs	r3, r2
 8007280:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80072aa:	f023 0303 	bic.w	r3, r3, #3
 80072ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072be:	f023 0302 	bic.w	r3, r3, #2
 80072c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b085      	sub	sp, #20
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80072ec:	f023 0303 	bic.w	r3, r3, #3
 80072f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007300:	f043 0302 	orr.w	r3, r3, #2
 8007304:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	4013      	ands	r3, r2
 800732a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800732c:	68fb      	ldr	r3, [r7, #12]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800733a:	b480      	push	{r7}
 800733c:	b085      	sub	sp, #20
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	4013      	ands	r3, r2
 800735c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	0c1b      	lsrs	r3, r3, #16
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	4013      	ands	r3, r2
 8007390:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	b29b      	uxth	r3, r3
}
 8007396:	4618      	mov	r0, r3
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b085      	sub	sp, #20
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	460b      	mov	r3, r1
 80073ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80073b2:	78fb      	ldrb	r3, [r7, #3]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	4013      	ands	r3, r2
 80073ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073d0:	68bb      	ldr	r3, [r7, #8]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073de:	b480      	push	{r7}
 80073e0:	b087      	sub	sp, #28
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	460b      	mov	r3, r1
 80073e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007400:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007402:	78fb      	ldrb	r3, [r7, #3]
 8007404:	f003 030f 	and.w	r3, r3, #15
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	fa22 f303 	lsr.w	r3, r2, r3
 800740e:	01db      	lsls	r3, r3, #7
 8007410:	b2db      	uxtb	r3, r3
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	4313      	orrs	r3, r2
 8007416:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	4013      	ands	r3, r2
 800742a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800742c:	68bb      	ldr	r3, [r7, #8]
}
 800742e:	4618      	mov	r0, r3
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800743a:	b480      	push	{r7}
 800743c:	b083      	sub	sp, #12
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	f003 0301 	and.w	r3, r3, #1
}
 800744a:	4618      	mov	r0, r3
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
	...

08007458 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007472:	4619      	mov	r1, r3
 8007474:	4b09      	ldr	r3, [pc, #36]	@ (800749c <USB_ActivateSetup+0x44>)
 8007476:	4013      	ands	r3, r2
 8007478:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800748c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	fffff800 	.word	0xfffff800

080074a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b087      	sub	sp, #28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	460b      	mov	r3, r1
 80074aa:	607a      	str	r2, [r7, #4]
 80074ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	333c      	adds	r3, #60	@ 0x3c
 80074b6:	3304      	adds	r3, #4
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	4a26      	ldr	r2, [pc, #152]	@ (8007558 <USB_EP0_OutStart+0xb8>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d90a      	bls.n	80074da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074d4:	d101      	bne.n	80074da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	e037      	b.n	800754a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074e0:	461a      	mov	r2, r3
 80074e2:	2300      	movs	r3, #0
 80074e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007508:	f043 0318 	orr.w	r3, r3, #24
 800750c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800751c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007520:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007522:	7afb      	ldrb	r3, [r7, #11]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d10f      	bne.n	8007548 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800752e:	461a      	mov	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007542:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007546:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	4f54300a 	.word	0x4f54300a

0800755c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3301      	adds	r3, #1
 800756c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007574:	d901      	bls.n	800757a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e01b      	b.n	80075b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	daf2      	bge.n	8007568 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	f043 0201 	orr.w	r2, r3, #1
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	3301      	adds	r3, #1
 8007596:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800759e:	d901      	bls.n	80075a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e006      	b.n	80075b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d0f0      	beq.n	8007592 <USB_CoreReset+0x36>

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
	...

080075c0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80075cc:	f44f 701d 	mov.w	r0, #628	@ 0x274
 80075d0:	f004 f862 	bl	800b698 <USBD_static_malloc>
 80075d4:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d109      	bne.n	80075f0 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	32b0      	adds	r2, #176	@ 0xb0
 80075e6:	2100      	movs	r1, #0
 80075e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80075ec:	2302      	movs	r3, #2
 80075ee:	e06e      	b.n	80076ce <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	32b0      	adds	r2, #176	@ 0xb0
 80075fa:	68f9      	ldr	r1, [r7, #12]
 80075fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	32b0      	adds	r2, #176	@ 0xb0
 800760a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	7c1b      	ldrb	r3, [r3, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d12b      	bne.n	8007674 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800761c:	4b2e      	ldr	r3, [pc, #184]	@ (80076d8 <USBD_MSC_Init+0x118>)
 800761e:	7819      	ldrb	r1, [r3, #0]
 8007620:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007624:	2202      	movs	r2, #2
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f003 fef3 	bl	800b412 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800762c:	4b2a      	ldr	r3, [pc, #168]	@ (80076d8 <USBD_MSC_Init+0x118>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	f003 020f 	and.w	r2, r3, #15
 8007634:	6879      	ldr	r1, [r7, #4]
 8007636:	4613      	mov	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	440b      	add	r3, r1
 8007640:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007644:	2201      	movs	r2, #1
 8007646:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8007648:	4b24      	ldr	r3, [pc, #144]	@ (80076dc <USBD_MSC_Init+0x11c>)
 800764a:	7819      	ldrb	r1, [r3, #0]
 800764c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007650:	2202      	movs	r2, #2
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f003 fedd 	bl	800b412 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8007658:	4b20      	ldr	r3, [pc, #128]	@ (80076dc <USBD_MSC_Init+0x11c>)
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	f003 020f 	and.w	r2, r3, #15
 8007660:	6879      	ldr	r1, [r7, #4]
 8007662:	4613      	mov	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4413      	add	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	440b      	add	r3, r1
 800766c:	3324      	adds	r3, #36	@ 0x24
 800766e:	2201      	movs	r2, #1
 8007670:	801a      	strh	r2, [r3, #0]
 8007672:	e028      	b.n	80076c6 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8007674:	4b18      	ldr	r3, [pc, #96]	@ (80076d8 <USBD_MSC_Init+0x118>)
 8007676:	7819      	ldrb	r1, [r3, #0]
 8007678:	2340      	movs	r3, #64	@ 0x40
 800767a:	2202      	movs	r2, #2
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f003 fec8 	bl	800b412 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8007682:	4b15      	ldr	r3, [pc, #84]	@ (80076d8 <USBD_MSC_Init+0x118>)
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	f003 020f 	and.w	r2, r3, #15
 800768a:	6879      	ldr	r1, [r7, #4]
 800768c:	4613      	mov	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	440b      	add	r3, r1
 8007696:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800769a:	2201      	movs	r2, #1
 800769c:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800769e:	4b0f      	ldr	r3, [pc, #60]	@ (80076dc <USBD_MSC_Init+0x11c>)
 80076a0:	7819      	ldrb	r1, [r3, #0]
 80076a2:	2340      	movs	r3, #64	@ 0x40
 80076a4:	2202      	movs	r2, #2
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f003 feb3 	bl	800b412 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80076ac:	4b0b      	ldr	r3, [pc, #44]	@ (80076dc <USBD_MSC_Init+0x11c>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	f003 020f 	and.w	r2, r3, #15
 80076b4:	6879      	ldr	r1, [r7, #4]
 80076b6:	4613      	mov	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	440b      	add	r3, r1
 80076c0:	3324      	adds	r3, #36	@ 0x24
 80076c2:	2201      	movs	r2, #1
 80076c4:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fa2c 	bl	8007b24 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	24000073 	.word	0x24000073
 80076dc:	24000072 	.word	0x24000072

080076e0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80076ec:	4b26      	ldr	r3, [pc, #152]	@ (8007788 <USBD_MSC_DeInit+0xa8>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f003 feb3 	bl	800b45e <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80076f8:	4b23      	ldr	r3, [pc, #140]	@ (8007788 <USBD_MSC_DeInit+0xa8>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	f003 020f 	and.w	r2, r3, #15
 8007700:	6879      	ldr	r1, [r7, #4]
 8007702:	4613      	mov	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	440b      	add	r3, r1
 800770c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007710:	2200      	movs	r2, #0
 8007712:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8007714:	4b1d      	ldr	r3, [pc, #116]	@ (800778c <USBD_MSC_DeInit+0xac>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f003 fe9f 	bl	800b45e <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8007720:	4b1a      	ldr	r3, [pc, #104]	@ (800778c <USBD_MSC_DeInit+0xac>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	f003 020f 	and.w	r2, r3, #15
 8007728:	6879      	ldr	r1, [r7, #4]
 800772a:	4613      	mov	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	440b      	add	r3, r1
 8007734:	3324      	adds	r3, #36	@ 0x24
 8007736:	2200      	movs	r2, #0
 8007738:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	32b0      	adds	r2, #176	@ 0xb0
 8007744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d018      	beq.n	800777e <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fa67 	bl	8007c20 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	32b0      	adds	r2, #176	@ 0xb0
 800775c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007760:	4618      	mov	r0, r3
 8007762:	f003 ffa7 	bl	800b6b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	32b0      	adds	r2, #176	@ 0xb0
 8007770:	2100      	movs	r1, #0
 8007772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	24000073 	.word	0x24000073
 800778c:	24000072 	.word	0x24000072

08007790 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	32b0      	adds	r2, #176	@ 0xb0
 80077a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80077ae:	2300      	movs	r3, #0
 80077b0:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e0e1      	b.n	8007980 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d053      	beq.n	8007870 <USBD_MSC_Setup+0xe0>
 80077c8:	2b20      	cmp	r3, #32
 80077ca:	f040 80d1 	bne.w	8007970 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	785b      	ldrb	r3, [r3, #1]
 80077d2:	2bfe      	cmp	r3, #254	@ 0xfe
 80077d4:	d002      	beq.n	80077dc <USBD_MSC_Setup+0x4c>
 80077d6:	2bff      	cmp	r3, #255	@ 0xff
 80077d8:	d02a      	beq.n	8007830 <USBD_MSC_Setup+0xa0>
 80077da:	e041      	b.n	8007860 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	885b      	ldrh	r3, [r3, #2]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d11e      	bne.n	8007822 <USBD_MSC_Setup+0x92>
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	88db      	ldrh	r3, [r3, #6]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d11a      	bne.n	8007822 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	da15      	bge.n	8007822 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	33b0      	adds	r3, #176	@ 0xb0
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	4798      	blx	r3
 800780a:	4603      	mov	r3, r0
 800780c:	461a      	mov	r2, r3
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	2201      	movs	r2, #1
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f003 f95f 	bl	800aadc <USBD_CtlSendData>
 800781e:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007820:	e025      	b.n	800786e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f003 f8dc 	bl	800a9e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800782a:	2303      	movs	r3, #3
 800782c:	75fb      	strb	r3, [r7, #23]
          break;
 800782e:	e01e      	b.n	800786e <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	885b      	ldrh	r3, [r3, #2]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10c      	bne.n	8007852 <USBD_MSC_Setup+0xc2>
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	88db      	ldrh	r3, [r3, #6]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d108      	bne.n	8007852 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8007846:	2b00      	cmp	r3, #0
 8007848:	db03      	blt.n	8007852 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f9b4 	bl	8007bb8 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007850:	e00d      	b.n	800786e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f003 f8c4 	bl	800a9e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800785a:	2303      	movs	r3, #3
 800785c:	75fb      	strb	r3, [r7, #23]
          break;
 800785e:	e006      	b.n	800786e <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f003 f8bd 	bl	800a9e2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007868:	2303      	movs	r3, #3
 800786a:	75fb      	strb	r3, [r7, #23]
          break;
 800786c:	bf00      	nop
      }
      break;
 800786e:	e086      	b.n	800797e <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	785b      	ldrb	r3, [r3, #1]
 8007874:	2b0b      	cmp	r3, #11
 8007876:	d872      	bhi.n	800795e <USBD_MSC_Setup+0x1ce>
 8007878:	a201      	add	r2, pc, #4	@ (adr r2, 8007880 <USBD_MSC_Setup+0xf0>)
 800787a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787e:	bf00      	nop
 8007880:	080078b1 	.word	0x080078b1
 8007884:	0800792d 	.word	0x0800792d
 8007888:	0800795f 	.word	0x0800795f
 800788c:	0800795f 	.word	0x0800795f
 8007890:	0800795f 	.word	0x0800795f
 8007894:	0800795f 	.word	0x0800795f
 8007898:	0800795f 	.word	0x0800795f
 800789c:	0800795f 	.word	0x0800795f
 80078a0:	0800795f 	.word	0x0800795f
 80078a4:	0800795f 	.word	0x0800795f
 80078a8:	080078db 	.word	0x080078db
 80078ac:	08007905 	.word	0x08007905
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b03      	cmp	r3, #3
 80078ba:	d107      	bne.n	80078cc <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80078bc:	f107 030e 	add.w	r3, r7, #14
 80078c0:	2202      	movs	r2, #2
 80078c2:	4619      	mov	r1, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f003 f909 	bl	800aadc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078ca:	e050      	b.n	800796e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f003 f887 	bl	800a9e2 <USBD_CtlError>
            ret = USBD_FAIL;
 80078d4:	2303      	movs	r3, #3
 80078d6:	75fb      	strb	r3, [r7, #23]
          break;
 80078d8:	e049      	b.n	800796e <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d107      	bne.n	80078f6 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	3304      	adds	r3, #4
 80078ea:	2201      	movs	r2, #1
 80078ec:	4619      	mov	r1, r3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f003 f8f4 	bl	800aadc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078f4:	e03b      	b.n	800796e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f003 f872 	bl	800a9e2 <USBD_CtlError>
            ret = USBD_FAIL;
 80078fe:	2303      	movs	r3, #3
 8007900:	75fb      	strb	r3, [r7, #23]
          break;
 8007902:	e034      	b.n	800796e <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b03      	cmp	r3, #3
 800790e:	d106      	bne.n	800791e <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	885b      	ldrh	r3, [r3, #2]
 8007914:	b2db      	uxtb	r3, r3
 8007916:	461a      	mov	r2, r3
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800791c:	e027      	b.n	800796e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f003 f85e 	bl	800a9e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007926:	2303      	movs	r3, #3
 8007928:	75fb      	strb	r3, [r7, #23]
          break;
 800792a:	e020      	b.n	800796e <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b03      	cmp	r3, #3
 8007936:	d119      	bne.n	800796c <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	885b      	ldrh	r3, [r3, #2]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d115      	bne.n	800796c <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	889b      	ldrh	r3, [r3, #4]
 8007944:	b2db      	uxtb	r3, r3
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f003 fda7 	bl	800b49c <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	889b      	ldrh	r3, [r3, #4]
 8007952:	b2db      	uxtb	r3, r3
 8007954:	4619      	mov	r1, r3
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fb2e 	bl	8007fb8 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800795c:	e006      	b.n	800796c <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f003 f83e 	bl	800a9e2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007966:	2303      	movs	r3, #3
 8007968:	75fb      	strb	r3, [r7, #23]
          break;
 800796a:	e000      	b.n	800796e <USBD_MSC_Setup+0x1de>
          break;
 800796c:	bf00      	nop
      }
      break;
 800796e:	e006      	b.n	800797e <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f003 f835 	bl	800a9e2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007978:	2303      	movs	r3, #3
 800797a:	75fb      	strb	r3, [r7, #23]
      break;
 800797c:	bf00      	nop
  }

  return (uint8_t)ret;
 800797e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3718      	adds	r7, #24
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8007994:	78fb      	ldrb	r3, [r7, #3]
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f959 	bl	8007c50 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80079b4:	78fb      	ldrb	r3, [r7, #3]
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f983 	bl	8007cc4 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80079d0:	2181      	movs	r1, #129	@ 0x81
 80079d2:	4812      	ldr	r0, [pc, #72]	@ (8007a1c <USBD_MSC_GetHSCfgDesc+0x54>)
 80079d4:	f002 f9a4 	bl	8009d20 <USBD_GetEpDesc>
 80079d8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80079da:	2101      	movs	r1, #1
 80079dc:	480f      	ldr	r0, [pc, #60]	@ (8007a1c <USBD_MSC_GetHSCfgDesc+0x54>)
 80079de:	f002 f99f 	bl	8009d20 <USBD_GetEpDesc>
 80079e2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d006      	beq.n	80079f8 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	711a      	strb	r2, [r3, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f042 0202 	orr.w	r2, r2, #2
 80079f6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d006      	beq.n	8007a0c <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2200      	movs	r2, #0
 8007a02:	711a      	strb	r2, [r3, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f042 0202 	orr.w	r2, r2, #2
 8007a0a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2220      	movs	r2, #32
 8007a10:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8007a12:	4b02      	ldr	r3, [pc, #8]	@ (8007a1c <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	24000048 	.word	0x24000048

08007a20 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8007a28:	2181      	movs	r1, #129	@ 0x81
 8007a2a:	4812      	ldr	r0, [pc, #72]	@ (8007a74 <USBD_MSC_GetFSCfgDesc+0x54>)
 8007a2c:	f002 f978 	bl	8009d20 <USBD_GetEpDesc>
 8007a30:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8007a32:	2101      	movs	r1, #1
 8007a34:	480f      	ldr	r0, [pc, #60]	@ (8007a74 <USBD_MSC_GetFSCfgDesc+0x54>)
 8007a36:	f002 f973 	bl	8009d20 <USBD_GetEpDesc>
 8007a3a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d006      	beq.n	8007a50 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a4a:	711a      	strb	r2, [r3, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d006      	beq.n	8007a64 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a5e:	711a      	strb	r2, [r3, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2220      	movs	r2, #32
 8007a68:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8007a6a:	4b02      	ldr	r3, [pc, #8]	@ (8007a74 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	24000048 	.word	0x24000048

08007a78 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8007a80:	2181      	movs	r1, #129	@ 0x81
 8007a82:	4812      	ldr	r0, [pc, #72]	@ (8007acc <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8007a84:	f002 f94c 	bl	8009d20 <USBD_GetEpDesc>
 8007a88:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	480f      	ldr	r0, [pc, #60]	@ (8007acc <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8007a8e:	f002 f947 	bl	8009d20 <USBD_GetEpDesc>
 8007a92:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d006      	beq.n	8007aa8 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007aa2:	711a      	strb	r2, [r3, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d006      	beq.n	8007abc <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ab6:	711a      	strb	r2, [r3, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2220      	movs	r2, #32
 8007ac0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8007ac2:	4b02      	ldr	r3, [pc, #8]	@ (8007acc <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	24000048 	.word	0x24000048

08007ad0 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	220a      	movs	r2, #10
 8007adc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8007ade:	4b03      	ldr	r3, [pc, #12]	@ (8007aec <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	24000068 	.word	0x24000068

08007af0 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e009      	b.n	8007b18 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	33b0      	adds	r3, #176	@ 0xb0
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	32b0      	adds	r2, #176	@ 0xb0
 8007b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b3a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d032      	beq.n	8007ba8 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	33b0      	adds	r3, #176	@ 0xb0
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	4413      	add	r3, r2
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2000      	movs	r0, #0
 8007b7a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8007b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb0 <MSC_BOT_Init+0x8c>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f003 fc8a 	bl	800b49c <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8007b88:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb4 <MSC_BOT_Init+0x90>)
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f003 fc84 	bl	800b49c <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8007b94:	4b06      	ldr	r3, [pc, #24]	@ (8007bb0 <MSC_BOT_Init+0x8c>)
 8007b96:	7819      	ldrb	r1, [r3, #0]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8007b9e:	231f      	movs	r3, #31
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f003 fd44 	bl	800b62e <USBD_LL_PrepareReceive>
 8007ba6:	e000      	b.n	8007baa <MSC_BOT_Init+0x86>
    return;
 8007ba8:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	24000073 	.word	0x24000073
 8007bb4:	24000072 	.word	0x24000072

08007bb8 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	32b0      	adds	r2, #176	@ 0xb0
 8007bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bce:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d01b      	beq.n	8007c0e <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2201      	movs	r2, #1
 8007be0:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8007be2:	4b0d      	ldr	r3, [pc, #52]	@ (8007c18 <MSC_BOT_Reset+0x60>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f003 fc95 	bl	800b518 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8007bee:	4b0b      	ldr	r3, [pc, #44]	@ (8007c1c <MSC_BOT_Reset+0x64>)
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f003 fc8f 	bl	800b518 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8007bfa:	4b08      	ldr	r3, [pc, #32]	@ (8007c1c <MSC_BOT_Reset+0x64>)
 8007bfc:	7819      	ldrb	r1, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8007c04:	231f      	movs	r3, #31
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f003 fd11 	bl	800b62e <USBD_LL_PrepareReceive>
 8007c0c:	e000      	b.n	8007c10 <MSC_BOT_Reset+0x58>
    return;
 8007c0e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	24000072 	.word	0x24000072
 8007c1c:	24000073 	.word	0x24000073

08007c20 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	32b0      	adds	r2, #176	@ 0xb0
 8007c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c36:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d002      	beq.n	8007c44 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	721a      	strb	r2, [r3, #8]
  }
}
 8007c44:	bf00      	nop
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	32b0      	adds	r2, #176	@ 0xb0
 8007c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c6a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d020      	beq.n	8007cb4 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	7a1b      	ldrb	r3, [r3, #8]
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d005      	beq.n	8007c86 <MSC_BOT_DataIn+0x36>
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	db1c      	blt.n	8007cb8 <MSC_BOT_DataIn+0x68>
 8007c7e:	3b03      	subs	r3, #3
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d819      	bhi.n	8007cb8 <MSC_BOT_DataIn+0x68>
 8007c84:	e011      	b.n	8007caa <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8007c92:	461a      	mov	r2, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f9c9 	bl	800802c <SCSI_ProcessCmd>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	da0d      	bge.n	8007cbc <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f90c 	bl	8007ec0 <MSC_BOT_SendCSW>
      }
      break;
 8007ca8:	e008      	b.n	8007cbc <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007caa:	2100      	movs	r1, #0
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f907 	bl	8007ec0 <MSC_BOT_SendCSW>
      break;
 8007cb2:	e004      	b.n	8007cbe <MSC_BOT_DataIn+0x6e>
    return;
 8007cb4:	bf00      	nop
 8007cb6:	e002      	b.n	8007cbe <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8007cb8:	bf00      	nop
 8007cba:	e000      	b.n	8007cbe <MSC_BOT_DataIn+0x6e>
      break;
 8007cbc:	bf00      	nop
  }
}
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	32b0      	adds	r2, #176	@ 0xb0
 8007cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cde:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d01c      	beq.n	8007d20 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	7a1b      	ldrb	r3, [r3, #8]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d002      	beq.n	8007cf4 <MSC_BOT_DataOut+0x30>
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d004      	beq.n	8007cfc <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8007cf2:	e018      	b.n	8007d26 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f819 	bl	8007d2c <MSC_BOT_CBW_Decode>
      break;
 8007cfa:	e014      	b.n	8007d26 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8007d08:	461a      	mov	r2, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f98e 	bl	800802c <SCSI_ProcessCmd>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	da06      	bge.n	8007d24 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007d16:	2101      	movs	r1, #1
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 f8d1 	bl	8007ec0 <MSC_BOT_SendCSW>
      break;
 8007d1e:	e001      	b.n	8007d24 <MSC_BOT_DataOut+0x60>
    return;
 8007d20:	bf00      	nop
 8007d22:	e000      	b.n	8007d26 <MSC_BOT_DataOut+0x62>
      break;
 8007d24:	bf00      	nop
  }
}
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	32b0      	adds	r2, #176	@ 0xb0
 8007d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d42:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d079      	beq.n	8007e3e <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8007d62:	4b3a      	ldr	r3, [pc, #232]	@ (8007e4c <MSC_BOT_CBW_Decode+0x120>)
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	4619      	mov	r1, r3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f003 fc81 	bl	800b670 <USBD_LL_GetRxDataSize>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b1f      	cmp	r3, #31
 8007d72:	d114      	bne.n	8007d9e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8007d7a:	4a35      	ldr	r2, [pc, #212]	@ (8007e50 <MSC_BOT_CBW_Decode+0x124>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d10e      	bne.n	8007d9e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d809      	bhi.n	8007d9e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d004      	beq.n	8007d9e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8007d9a:	2b10      	cmp	r3, #16
 8007d9c:	d90e      	bls.n	8007dbc <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007da4:	2320      	movs	r3, #32
 8007da6:	2205      	movs	r2, #5
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fe54 	bl	8008a56 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2202      	movs	r2, #2
 8007db2:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f8bd 	bl	8007f34 <MSC_BOT_Abort>
 8007dba:	e043      	b.n	8007e44 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8007dc8:	461a      	mov	r2, r3
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f92e 	bl	800802c <SCSI_ProcessCmd>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	da0c      	bge.n	8007df0 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	7a1b      	ldrb	r3, [r3, #8]
 8007dda:	2b05      	cmp	r3, #5
 8007ddc:	d104      	bne.n	8007de8 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007dde:	2101      	movs	r1, #1
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f86d 	bl	8007ec0 <MSC_BOT_SendCSW>
 8007de6:	e02d      	b.n	8007e44 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f8a3 	bl	8007f34 <MSC_BOT_Abort>
 8007dee:	e029      	b.n	8007e44 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	7a1b      	ldrb	r3, [r3, #8]
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d024      	beq.n	8007e42 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d020      	beq.n	8007e42 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007e04:	2b03      	cmp	r3, #3
 8007e06:	d01c      	beq.n	8007e42 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d009      	beq.n	8007e24 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f103 0110 	add.w	r1, r3, #16
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f819 	bl	8007e54 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8007e22:	e00f      	b.n	8007e44 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d104      	bne.n	8007e36 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f846 	bl	8007ec0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8007e34:	e006      	b.n	8007e44 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f87c 	bl	8007f34 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8007e3c:	e002      	b.n	8007e44 <MSC_BOT_CBW_Decode+0x118>
    return;
 8007e3e:	bf00      	nop
 8007e40:	e000      	b.n	8007e44 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8007e42:	bf00      	nop
    }
  }
}
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	24000073 	.word	0x24000073
 8007e50:	43425355 	.word	0x43425355

08007e54 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	32b0      	adds	r2, #176	@ 0xb0
 8007e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6e:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d01e      	beq.n	8007eb4 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	bf28      	it	cs
 8007e82:	4613      	movcs	r3, r2
 8007e84:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	1ad2      	subs	r2, r2, r3
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2204      	movs	r2, #4
 8007ea2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8007ea4:	4b05      	ldr	r3, [pc, #20]	@ (8007ebc <MSC_BOT_SendData+0x68>)
 8007ea6:	7819      	ldrb	r1, [r3, #0]
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f003 fb9d 	bl	800b5ec <USBD_LL_Transmit>
 8007eb2:	e000      	b.n	8007eb6 <MSC_BOT_SendData+0x62>
    return;
 8007eb4:	bf00      	nop
}
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	24000072 	.word	0x24000072

08007ec0 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	32b0      	adds	r2, #176	@ 0xb0
 8007ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eda:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d01d      	beq.n	8007f1e <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	4a10      	ldr	r2, [pc, #64]	@ (8007f28 <MSC_BOT_SendCSW+0x68>)
 8007ee6:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	78fa      	ldrb	r2, [r7, #3]
 8007eee:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8007ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8007f2c <MSC_BOT_SendCSW+0x6c>)
 8007efa:	7819      	ldrb	r1, [r3, #0]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 8007f02:	230d      	movs	r3, #13
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f003 fb71 	bl	800b5ec <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8007f0a:	4b09      	ldr	r3, [pc, #36]	@ (8007f30 <MSC_BOT_SendCSW+0x70>)
 8007f0c:	7819      	ldrb	r1, [r3, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8007f14:	231f      	movs	r3, #31
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f003 fb89 	bl	800b62e <USBD_LL_PrepareReceive>
 8007f1c:	e000      	b.n	8007f20 <MSC_BOT_SendCSW+0x60>
    return;
 8007f1e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	53425355 	.word	0x53425355
 8007f2c:	24000072 	.word	0x24000072
 8007f30:	24000073 	.word	0x24000073

08007f34 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	32b0      	adds	r2, #176	@ 0xb0
 8007f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f4a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d02a      	beq.n	8007fa8 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10e      	bne.n	8007f7a <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d009      	beq.n	8007f7a <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d105      	bne.n	8007f7a <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8007f6e:	4b10      	ldr	r3, [pc, #64]	@ (8007fb0 <MSC_BOT_Abort+0x7c>)
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f003 fab0 	bl	800b4da <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8007f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007fb4 <MSC_BOT_Abort+0x80>)
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f003 faaa 	bl	800b4da <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	7a5b      	ldrb	r3, [r3, #9]
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d10d      	bne.n	8007faa <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8007f8e:	4b09      	ldr	r3, [pc, #36]	@ (8007fb4 <MSC_BOT_Abort+0x80>)
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f003 faa0 	bl	800b4da <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8007f9a:	4b05      	ldr	r3, [pc, #20]	@ (8007fb0 <MSC_BOT_Abort+0x7c>)
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f003 fa9a 	bl	800b4da <USBD_LL_StallEP>
 8007fa6:	e000      	b.n	8007faa <MSC_BOT_Abort+0x76>
    return;
 8007fa8:	bf00      	nop
  }
}
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	24000073 	.word	0x24000073
 8007fb4:	24000072 	.word	0x24000072

08007fb8 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	32b0      	adds	r2, #176	@ 0xb0
 8007fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d01d      	beq.n	8008016 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	7a5b      	ldrb	r3, [r3, #9]
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d10c      	bne.n	8007ffc <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8007fe2:	4b10      	ldr	r3, [pc, #64]	@ (8008024 <MSC_BOT_CplClrFeature+0x6c>)
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f003 fa76 	bl	800b4da <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8007fee:	4b0e      	ldr	r3, [pc, #56]	@ (8008028 <MSC_BOT_CplClrFeature+0x70>)
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f003 fa70 	bl	800b4da <USBD_LL_StallEP>
 8007ffa:	e00f      	b.n	800801c <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8007ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008000:	2b00      	cmp	r3, #0
 8008002:	da0a      	bge.n	800801a <MSC_BOT_CplClrFeature+0x62>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	7a5b      	ldrb	r3, [r3, #9]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d006      	beq.n	800801a <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800800c:	2101      	movs	r1, #1
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff ff56 	bl	8007ec0 <MSC_BOT_SendCSW>
 8008014:	e002      	b.n	800801c <MSC_BOT_CplClrFeature+0x64>
    return;
 8008016:	bf00      	nop
 8008018:	e000      	b.n	800801c <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800801a:	bf00      	nop
  }
}
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	24000072 	.word	0x24000072
 8008028:	24000073 	.word	0x24000073

0800802c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	460b      	mov	r3, r1
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	32b0      	adds	r2, #176	@ 0xb0
 8008044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008048:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d102      	bne.n	8008056 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8008050:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008054:	e168      	b.n	8008328 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	2baa      	cmp	r3, #170	@ 0xaa
 800805c:	f000 8144 	beq.w	80082e8 <SCSI_ProcessCmd+0x2bc>
 8008060:	2baa      	cmp	r3, #170	@ 0xaa
 8008062:	f300 8153 	bgt.w	800830c <SCSI_ProcessCmd+0x2e0>
 8008066:	2ba8      	cmp	r3, #168	@ 0xa8
 8008068:	f000 812c 	beq.w	80082c4 <SCSI_ProcessCmd+0x298>
 800806c:	2ba8      	cmp	r3, #168	@ 0xa8
 800806e:	f300 814d 	bgt.w	800830c <SCSI_ProcessCmd+0x2e0>
 8008072:	2b5a      	cmp	r3, #90	@ 0x5a
 8008074:	f300 80c0 	bgt.w	80081f8 <SCSI_ProcessCmd+0x1cc>
 8008078:	2b00      	cmp	r3, #0
 800807a:	f2c0 8147 	blt.w	800830c <SCSI_ProcessCmd+0x2e0>
 800807e:	2b5a      	cmp	r3, #90	@ 0x5a
 8008080:	f200 8144 	bhi.w	800830c <SCSI_ProcessCmd+0x2e0>
 8008084:	a201      	add	r2, pc, #4	@ (adr r2, 800808c <SCSI_ProcessCmd+0x60>)
 8008086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808a:	bf00      	nop
 800808c:	080081ff 	.word	0x080081ff
 8008090:	0800830d 	.word	0x0800830d
 8008094:	0800830d 	.word	0x0800830d
 8008098:	08008211 	.word	0x08008211
 800809c:	0800830d 	.word	0x0800830d
 80080a0:	0800830d 	.word	0x0800830d
 80080a4:	0800830d 	.word	0x0800830d
 80080a8:	0800830d 	.word	0x0800830d
 80080ac:	0800830d 	.word	0x0800830d
 80080b0:	0800830d 	.word	0x0800830d
 80080b4:	0800830d 	.word	0x0800830d
 80080b8:	0800830d 	.word	0x0800830d
 80080bc:	0800830d 	.word	0x0800830d
 80080c0:	0800830d 	.word	0x0800830d
 80080c4:	0800830d 	.word	0x0800830d
 80080c8:	0800830d 	.word	0x0800830d
 80080cc:	0800830d 	.word	0x0800830d
 80080d0:	0800830d 	.word	0x0800830d
 80080d4:	08008223 	.word	0x08008223
 80080d8:	0800830d 	.word	0x0800830d
 80080dc:	0800830d 	.word	0x0800830d
 80080e0:	0800830d 	.word	0x0800830d
 80080e4:	0800830d 	.word	0x0800830d
 80080e8:	0800830d 	.word	0x0800830d
 80080ec:	0800830d 	.word	0x0800830d
 80080f0:	0800830d 	.word	0x0800830d
 80080f4:	08008259 	.word	0x08008259
 80080f8:	08008235 	.word	0x08008235
 80080fc:	0800830d 	.word	0x0800830d
 8008100:	0800830d 	.word	0x0800830d
 8008104:	08008247 	.word	0x08008247
 8008108:	0800830d 	.word	0x0800830d
 800810c:	0800830d 	.word	0x0800830d
 8008110:	0800830d 	.word	0x0800830d
 8008114:	0800830d 	.word	0x0800830d
 8008118:	0800827d 	.word	0x0800827d
 800811c:	0800830d 	.word	0x0800830d
 8008120:	0800828f 	.word	0x0800828f
 8008124:	0800830d 	.word	0x0800830d
 8008128:	0800830d 	.word	0x0800830d
 800812c:	080082b3 	.word	0x080082b3
 8008130:	0800830d 	.word	0x0800830d
 8008134:	080082d7 	.word	0x080082d7
 8008138:	0800830d 	.word	0x0800830d
 800813c:	0800830d 	.word	0x0800830d
 8008140:	0800830d 	.word	0x0800830d
 8008144:	0800830d 	.word	0x0800830d
 8008148:	080082fb 	.word	0x080082fb
 800814c:	0800830d 	.word	0x0800830d
 8008150:	0800830d 	.word	0x0800830d
 8008154:	0800830d 	.word	0x0800830d
 8008158:	0800830d 	.word	0x0800830d
 800815c:	0800830d 	.word	0x0800830d
 8008160:	0800830d 	.word	0x0800830d
 8008164:	0800830d 	.word	0x0800830d
 8008168:	0800830d 	.word	0x0800830d
 800816c:	0800830d 	.word	0x0800830d
 8008170:	0800830d 	.word	0x0800830d
 8008174:	0800830d 	.word	0x0800830d
 8008178:	0800830d 	.word	0x0800830d
 800817c:	0800830d 	.word	0x0800830d
 8008180:	0800830d 	.word	0x0800830d
 8008184:	0800830d 	.word	0x0800830d
 8008188:	0800830d 	.word	0x0800830d
 800818c:	0800830d 	.word	0x0800830d
 8008190:	0800830d 	.word	0x0800830d
 8008194:	0800830d 	.word	0x0800830d
 8008198:	0800830d 	.word	0x0800830d
 800819c:	0800830d 	.word	0x0800830d
 80081a0:	0800830d 	.word	0x0800830d
 80081a4:	0800830d 	.word	0x0800830d
 80081a8:	0800830d 	.word	0x0800830d
 80081ac:	0800830d 	.word	0x0800830d
 80081b0:	0800830d 	.word	0x0800830d
 80081b4:	0800830d 	.word	0x0800830d
 80081b8:	0800830d 	.word	0x0800830d
 80081bc:	0800830d 	.word	0x0800830d
 80081c0:	0800830d 	.word	0x0800830d
 80081c4:	0800830d 	.word	0x0800830d
 80081c8:	0800830d 	.word	0x0800830d
 80081cc:	0800830d 	.word	0x0800830d
 80081d0:	0800830d 	.word	0x0800830d
 80081d4:	0800830d 	.word	0x0800830d
 80081d8:	0800830d 	.word	0x0800830d
 80081dc:	0800830d 	.word	0x0800830d
 80081e0:	0800830d 	.word	0x0800830d
 80081e4:	0800830d 	.word	0x0800830d
 80081e8:	0800830d 	.word	0x0800830d
 80081ec:	0800830d 	.word	0x0800830d
 80081f0:	0800830d 	.word	0x0800830d
 80081f4:	0800826b 	.word	0x0800826b
 80081f8:	2b9e      	cmp	r3, #158	@ 0x9e
 80081fa:	d051      	beq.n	80082a0 <SCSI_ProcessCmd+0x274>
 80081fc:	e086      	b.n	800830c <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80081fe:	7afb      	ldrb	r3, [r7, #11]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	4619      	mov	r1, r3
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 f893 	bl	8008330 <SCSI_TestUnitReady>
 800820a:	4603      	mov	r3, r0
 800820c:	75fb      	strb	r3, [r7, #23]
      break;
 800820e:	e089      	b.n	8008324 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8008210:	7afb      	ldrb	r3, [r7, #11]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	4619      	mov	r1, r3
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f000 fb9a 	bl	8008950 <SCSI_RequestSense>
 800821c:	4603      	mov	r3, r0
 800821e:	75fb      	strb	r3, [r7, #23]
      break;
 8008220:	e080      	b.n	8008324 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8008222:	7afb      	ldrb	r3, [r7, #11]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	4619      	mov	r1, r3
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f000 f8db 	bl	80083e4 <SCSI_Inquiry>
 800822e:	4603      	mov	r3, r0
 8008230:	75fb      	strb	r3, [r7, #23]
      break;
 8008232:	e077      	b.n	8008324 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8008234:	7afb      	ldrb	r3, [r7, #11]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	4619      	mov	r1, r3
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f000 fc56 	bl	8008aec <SCSI_StartStopUnit>
 8008240:	4603      	mov	r3, r0
 8008242:	75fb      	strb	r3, [r7, #23]
      break;
 8008244:	e06e      	b.n	8008324 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8008246:	7afb      	ldrb	r3, [r7, #11]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	4619      	mov	r1, r3
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f000 fca2 	bl	8008b96 <SCSI_AllowPreventRemovable>
 8008252:	4603      	mov	r3, r0
 8008254:	75fb      	strb	r3, [r7, #23]
      break;
 8008256:	e065      	b.n	8008324 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8008258:	7afb      	ldrb	r3, [r7, #11]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	4619      	mov	r1, r3
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f000 faea 	bl	8008838 <SCSI_ModeSense6>
 8008264:	4603      	mov	r3, r0
 8008266:	75fb      	strb	r3, [r7, #23]
      break;
 8008268:	e05c      	b.n	8008324 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800826a:	7afb      	ldrb	r3, [r7, #11]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	4619      	mov	r1, r3
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f000 fb27 	bl	80088c4 <SCSI_ModeSense10>
 8008276:	4603      	mov	r3, r0
 8008278:	75fb      	strb	r3, [r7, #23]
      break;
 800827a:	e053      	b.n	8008324 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800827c:	7afb      	ldrb	r3, [r7, #11]
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	4619      	mov	r1, r3
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f000 fa5c 	bl	8008740 <SCSI_ReadFormatCapacity>
 8008288:	4603      	mov	r3, r0
 800828a:	75fb      	strb	r3, [r7, #23]
      break;
 800828c:	e04a      	b.n	8008324 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800828e:	7afb      	ldrb	r3, [r7, #11]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	4619      	mov	r1, r3
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f000 f921 	bl	80084dc <SCSI_ReadCapacity10>
 800829a:	4603      	mov	r3, r0
 800829c:	75fb      	strb	r3, [r7, #23]
      break;
 800829e:	e041      	b.n	8008324 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80082a0:	7afb      	ldrb	r3, [r7, #11]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	4619      	mov	r1, r3
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 f996 	bl	80085d8 <SCSI_ReadCapacity16>
 80082ac:	4603      	mov	r3, r0
 80082ae:	75fb      	strb	r3, [r7, #23]
      break;
 80082b0:	e038      	b.n	8008324 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 80082b2:	7afb      	ldrb	r3, [r7, #11]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	4619      	mov	r1, r3
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 fc99 	bl	8008bf0 <SCSI_Read10>
 80082be:	4603      	mov	r3, r0
 80082c0:	75fb      	strb	r3, [r7, #23]
      break;
 80082c2:	e02f      	b.n	8008324 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80082c4:	7afb      	ldrb	r3, [r7, #11]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	4619      	mov	r1, r3
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f000 fd3a 	bl	8008d44 <SCSI_Read12>
 80082d0:	4603      	mov	r3, r0
 80082d2:	75fb      	strb	r3, [r7, #23]
      break;
 80082d4:	e026      	b.n	8008324 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80082d6:	7afb      	ldrb	r3, [r7, #11]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	4619      	mov	r1, r3
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f000 fde5 	bl	8008eac <SCSI_Write10>
 80082e2:	4603      	mov	r3, r0
 80082e4:	75fb      	strb	r3, [r7, #23]
      break;
 80082e6:	e01d      	b.n	8008324 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80082e8:	7afb      	ldrb	r3, [r7, #11]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	4619      	mov	r1, r3
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f000 feb2 	bl	8009058 <SCSI_Write12>
 80082f4:	4603      	mov	r3, r0
 80082f6:	75fb      	strb	r3, [r7, #23]
      break;
 80082f8:	e014      	b.n	8008324 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80082fa:	7afb      	ldrb	r3, [r7, #11]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	4619      	mov	r1, r3
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 ff8f 	bl	8009224 <SCSI_Verify10>
 8008306:	4603      	mov	r3, r0
 8008308:	75fb      	strb	r3, [r7, #23]
      break;
 800830a:	e00b      	b.n	8008324 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800830c:	7af9      	ldrb	r1, [r7, #11]
 800830e:	2320      	movs	r3, #32
 8008310:	2205      	movs	r2, #5
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 fb9f 	bl	8008a56 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	2202      	movs	r2, #2
 800831c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800831e:	23ff      	movs	r3, #255	@ 0xff
 8008320:	75fb      	strb	r3, [r7, #23]
      break;
 8008322:	bf00      	nop
  }

  return ret;
 8008324:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	460b      	mov	r3, r1
 800833a:	607a      	str	r2, [r7, #4]
 800833c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	32b0      	adds	r2, #176	@ 0xb0
 8008348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800834c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d102      	bne.n	800835a <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8008354:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008358:	e03f      	b.n	80083da <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00a      	beq.n	800837a <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800836a:	2320      	movs	r3, #32
 800836c:	2205      	movs	r2, #5
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f000 fb71 	bl	8008a56 <SCSI_SenseCode>

    return -1;
 8008374:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008378:	e02f      	b.n	80083da <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8008380:	2b02      	cmp	r3, #2
 8008382:	d10b      	bne.n	800839c <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008384:	7af9      	ldrb	r1, [r7, #11]
 8008386:	233a      	movs	r3, #58	@ 0x3a
 8008388:	2202      	movs	r2, #2
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 fb63 	bl	8008a56 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	2205      	movs	r2, #5
 8008394:	721a      	strb	r2, [r3, #8]
    return -1;
 8008396:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800839a:	e01e      	b.n	80083da <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	33b0      	adds	r3, #176	@ 0xb0
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	7afa      	ldrb	r2, [r7, #11]
 80083b0:	4610      	mov	r0, r2
 80083b2:	4798      	blx	r3
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00b      	beq.n	80083d2 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80083ba:	7af9      	ldrb	r1, [r7, #11]
 80083bc:	233a      	movs	r3, #58	@ 0x3a
 80083be:	2202      	movs	r2, #2
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f000 fb48 	bl	8008a56 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	2205      	movs	r2, #5
 80083ca:	721a      	strb	r2, [r3, #8]

    return -1;
 80083cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083d0:	e003      	b.n	80083da <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2200      	movs	r2, #0
 80083d6:	60da      	str	r2, [r3, #12]

  return 0;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3718      	adds	r7, #24
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
	...

080083e4 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b088      	sub	sp, #32
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	460b      	mov	r3, r1
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	32b0      	adds	r2, #176	@ 0xb0
 80083fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008400:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d102      	bne.n	800840e <SCSI_Inquiry+0x2a>
  {
    return -1;
 8008408:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800840c:	e05e      	b.n	80084cc <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10a      	bne.n	800842e <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800841e:	2320      	movs	r3, #32
 8008420:	2205      	movs	r2, #5
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f000 fb17 	bl	8008a56 <SCSI_SenseCode>
    return -1;
 8008428:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800842c:	e04e      	b.n	80084cc <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3301      	adds	r3, #1
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	2b00      	cmp	r3, #0
 800843a:	d020      	beq.n	800847e <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	3302      	adds	r3, #2
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d105      	bne.n	8008452 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8008446:	2206      	movs	r2, #6
 8008448:	4922      	ldr	r1, [pc, #136]	@ (80084d4 <SCSI_Inquiry+0xf0>)
 800844a:	69b8      	ldr	r0, [r7, #24]
 800844c:	f001 f870 	bl	8009530 <SCSI_UpdateBotData>
 8008450:	e03b      	b.n	80084ca <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	3302      	adds	r3, #2
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	2b80      	cmp	r3, #128	@ 0x80
 800845a:	d105      	bne.n	8008468 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800845c:	2208      	movs	r2, #8
 800845e:	491e      	ldr	r1, [pc, #120]	@ (80084d8 <SCSI_Inquiry+0xf4>)
 8008460:	69b8      	ldr	r0, [r7, #24]
 8008462:	f001 f865 	bl	8009530 <SCSI_UpdateBotData>
 8008466:	e030      	b.n	80084ca <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800846e:	2324      	movs	r3, #36	@ 0x24
 8008470:	2205      	movs	r2, #5
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f000 faef 	bl	8008a56 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8008478:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800847c:	e026      	b.n	80084cc <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	33b0      	adds	r3, #176	@ 0xb0
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800848e:	69d9      	ldr	r1, [r3, #28]
 8008490:	7afa      	ldrb	r2, [r7, #11]
 8008492:	4613      	mov	r3, r2
 8008494:	00db      	lsls	r3, r3, #3
 8008496:	4413      	add	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800849a:	440b      	add	r3, r1
 800849c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	3304      	adds	r3, #4
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	3305      	adds	r3, #5
 80084a6:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3304      	adds	r3, #4
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	8bfb      	ldrh	r3, [r7, #30]
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d303      	bcc.n	80084be <SCSI_Inquiry+0xda>
    {
      len = params[4];
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	3304      	adds	r3, #4
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80084be:	8bfb      	ldrh	r3, [r7, #30]
 80084c0:	461a      	mov	r2, r3
 80084c2:	6979      	ldr	r1, [r7, #20]
 80084c4:	69b8      	ldr	r0, [r7, #24]
 80084c6:	f001 f833 	bl	8009530 <SCSI_UpdateBotData>
  }

  return 0;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3720      	adds	r7, #32
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	24000074 	.word	0x24000074
 80084d8:	2400007c 	.word	0x2400007c

080084dc <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	460b      	mov	r3, r1
 80084e6:	607a      	str	r2, [r7, #4]
 80084e8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	32b0      	adds	r2, #176	@ 0xb0
 80084f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d102      	bne.n	8008506 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8008500:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008504:	e064      	b.n	80085d0 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	33b0      	adds	r3, #176	@ 0xb0
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8008524:	7af8      	ldrb	r0, [r7, #11]
 8008526:	4798      	blx	r3
 8008528:	4603      	mov	r3, r0
 800852a:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800852c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d104      	bne.n	800853e <SCSI_ReadCapacity10+0x62>
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800853a:	2b02      	cmp	r3, #2
 800853c:	d108      	bne.n	8008550 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800853e:	7af9      	ldrb	r1, [r7, #11]
 8008540:	233a      	movs	r3, #58	@ 0x3a
 8008542:	2202      	movs	r2, #2
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f000 fa86 	bl	8008a56 <SCSI_SenseCode>
    return -1;
 800854a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800854e:	e03f      	b.n	80085d0 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8008556:	3b01      	subs	r3, #1
 8008558:	0e1b      	lsrs	r3, r3, #24
 800855a:	b2da      	uxtb	r2, r3
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8008566:	3b01      	subs	r3, #1
 8008568:	0c1b      	lsrs	r3, r3, #16
 800856a:	b2da      	uxtb	r2, r3
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8008576:	3b01      	subs	r3, #1
 8008578:	0a1b      	lsrs	r3, r3, #8
 800857a:	b2da      	uxtb	r2, r3
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8008586:	b2db      	uxtb	r3, r3
 8008588:	3b01      	subs	r3, #1
 800858a:	b2da      	uxtb	r2, r3
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8008596:	161b      	asrs	r3, r3, #24
 8008598:	b2da      	uxtb	r2, r3
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80085a4:	141b      	asrs	r3, r3, #16
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80085b2:	0a1b      	lsrs	r3, r3, #8
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	b2da      	uxtb	r2, r3
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80085c2:	b2da      	uxtb	r2, r3
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	2208      	movs	r2, #8
 80085cc:	60da      	str	r2, [r3, #12]

  return 0;
 80085ce:	2300      	movs	r3, #0

}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b088      	sub	sp, #32
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	460b      	mov	r3, r1
 80085e2:	607a      	str	r2, [r7, #4]
 80085e4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	32b0      	adds	r2, #176	@ 0xb0
 80085f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d102      	bne.n	8008602 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 80085fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008600:	e09a      	b.n	8008738 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	33b0      	adds	r3, #176	@ 0xb0
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 800861a:	69ba      	ldr	r2, [r7, #24]
 800861c:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8008620:	7af8      	ldrb	r0, [r7, #11]
 8008622:	4798      	blx	r3
 8008624:	4603      	mov	r3, r0
 8008626:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8008628:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d104      	bne.n	800863a <SCSI_ReadCapacity16+0x62>
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8008636:	2b02      	cmp	r3, #2
 8008638:	d108      	bne.n	800864c <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800863a:	7af9      	ldrb	r1, [r7, #11]
 800863c:	233a      	movs	r3, #58	@ 0x3a
 800863e:	2202      	movs	r2, #2
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f000 fa08 	bl	8008a56 <SCSI_SenseCode>
    return -1;
 8008646:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800864a:	e075      	b.n	8008738 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	330a      	adds	r3, #10
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	330b      	adds	r3, #11
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800865c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	330c      	adds	r3, #12
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8008666:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	320d      	adds	r2, #13
 800866c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800866e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8008674:	2300      	movs	r3, #0
 8008676:	61fb      	str	r3, [r7, #28]
 8008678:	e008      	b.n	800868c <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 800867a:	69ba      	ldr	r2, [r7, #24]
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	4413      	add	r3, r2
 8008680:	3310      	adds	r3, #16
 8008682:	2200      	movs	r2, #0
 8008684:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	3301      	adds	r3, #1
 800868a:	61fb      	str	r3, [r7, #28]
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	69fa      	ldr	r2, [r7, #28]
 8008692:	429a      	cmp	r2, r3
 8008694:	d3f1      	bcc.n	800867a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800869c:	3b01      	subs	r3, #1
 800869e:	0e1b      	lsrs	r3, r3, #24
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80086ac:	3b01      	subs	r3, #1
 80086ae:	0c1b      	lsrs	r3, r3, #16
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80086bc:	3b01      	subs	r3, #1
 80086be:	0a1b      	lsrs	r3, r3, #8
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	3b01      	subs	r3, #1
 80086d0:	b2da      	uxtb	r2, r3
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80086dc:	161b      	asrs	r3, r3, #24
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80086ea:	141b      	asrs	r3, r3, #16
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80086f8:	0a1b      	lsrs	r3, r3, #8
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8008708:	b2da      	uxtb	r2, r3
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	330a      	adds	r3, #10
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	330b      	adds	r3, #11
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800871e:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	330c      	adds	r3, #12
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8008728:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	320d      	adds	r2, #13
 800872e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8008730:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	60da      	str	r2, [r3, #12]

  return 0;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3720      	adds	r7, #32
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b088      	sub	sp, #32
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	460b      	mov	r3, r1
 800874a:	607a      	str	r2, [r7, #4]
 800874c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	32b0      	adds	r2, #176	@ 0xb0
 8008758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800875c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d102      	bne.n	800876a <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8008764:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008768:	e061      	b.n	800882e <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	33b0      	adds	r3, #176	@ 0xb0
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f107 0214 	add.w	r2, r7, #20
 8008780:	f107 0110 	add.w	r1, r7, #16
 8008784:	7af8      	ldrb	r0, [r7, #11]
 8008786:	4798      	blx	r3
 8008788:	4603      	mov	r3, r0
 800878a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800878c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d104      	bne.n	800879e <SCSI_ReadFormatCapacity+0x5e>
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800879a:	2b02      	cmp	r3, #2
 800879c:	d108      	bne.n	80087b0 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800879e:	7af9      	ldrb	r1, [r7, #11]
 80087a0:	233a      	movs	r3, #58	@ 0x3a
 80087a2:	2202      	movs	r2, #2
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 f956 	bl	8008a56 <SCSI_SenseCode>
    return -1;
 80087aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80087ae:	e03e      	b.n	800882e <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 80087b0:	2300      	movs	r3, #0
 80087b2:	83fb      	strh	r3, [r7, #30]
 80087b4:	e007      	b.n	80087c6 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 80087b6:	8bfb      	ldrh	r3, [r7, #30]
 80087b8:	69ba      	ldr	r2, [r7, #24]
 80087ba:	4413      	add	r3, r2
 80087bc:	2200      	movs	r2, #0
 80087be:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80087c0:	8bfb      	ldrh	r3, [r7, #30]
 80087c2:	3301      	adds	r3, #1
 80087c4:	83fb      	strh	r3, [r7, #30]
 80087c6:	8bfb      	ldrh	r3, [r7, #30]
 80087c8:	2b0b      	cmp	r3, #11
 80087ca:	d9f4      	bls.n	80087b6 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	2208      	movs	r2, #8
 80087d0:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	3b01      	subs	r3, #1
 80087d6:	0e1b      	lsrs	r3, r3, #24
 80087d8:	b2da      	uxtb	r2, r3
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	3b01      	subs	r3, #1
 80087e2:	0c1b      	lsrs	r3, r3, #16
 80087e4:	b2da      	uxtb	r2, r3
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	3b01      	subs	r3, #1
 80087ee:	0a1b      	lsrs	r3, r3, #8
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	3b01      	subs	r3, #1
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	2202      	movs	r2, #2
 8008806:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8008808:	8abb      	ldrh	r3, [r7, #20]
 800880a:	141b      	asrs	r3, r3, #16
 800880c:	b2da      	uxtb	r2, r3
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8008812:	8abb      	ldrh	r3, [r7, #20]
 8008814:	0a1b      	lsrs	r3, r3, #8
 8008816:	b29b      	uxth	r3, r3
 8008818:	b2da      	uxtb	r2, r3
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800881e:	8abb      	ldrh	r3, [r7, #20]
 8008820:	b2da      	uxtb	r2, r3
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	220c      	movs	r2, #12
 800882a:	60da      	str	r2, [r3, #12]

  return 0;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3720      	adds	r7, #32
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
	...

08008838 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	460b      	mov	r3, r1
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	32b0      	adds	r2, #176	@ 0xb0
 8008850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008854:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8008856:	2304      	movs	r3, #4
 8008858:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d102      	bne.n	8008866 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8008860:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008864:	e027      	b.n	80088b6 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	33b0      	adds	r3, #176	@ 0xb0
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	7afa      	ldrb	r2, [r7, #11]
 800887a:	4610      	mov	r0, r2
 800887c:	4798      	blx	r3
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d006      	beq.n	8008892 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 8008884:	4b0e      	ldr	r3, [pc, #56]	@ (80088c0 <SCSI_ModeSense6+0x88>)
 8008886:	789b      	ldrb	r3, [r3, #2]
 8008888:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800888c:	b2da      	uxtb	r2, r3
 800888e:	4b0c      	ldr	r3, [pc, #48]	@ (80088c0 <SCSI_ModeSense6+0x88>)
 8008890:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	3304      	adds	r3, #4
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	461a      	mov	r2, r3
 800889a:	8afb      	ldrh	r3, [r7, #22]
 800889c:	4293      	cmp	r3, r2
 800889e:	d303      	bcc.n	80088a8 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	3304      	adds	r3, #4
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80088a8:	8afb      	ldrh	r3, [r7, #22]
 80088aa:	461a      	mov	r2, r3
 80088ac:	4904      	ldr	r1, [pc, #16]	@ (80088c0 <SCSI_ModeSense6+0x88>)
 80088ae:	6938      	ldr	r0, [r7, #16]
 80088b0:	f000 fe3e 	bl	8009530 <SCSI_UpdateBotData>

  return 0;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3718      	adds	r7, #24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	24000084 	.word	0x24000084

080088c4 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	460b      	mov	r3, r1
 80088ce:	607a      	str	r2, [r7, #4]
 80088d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	32b0      	adds	r2, #176	@ 0xb0
 80088dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80088e2:	2308      	movs	r3, #8
 80088e4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d102      	bne.n	80088f2 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 80088ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088f0:	e027      	b.n	8008942 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	33b0      	adds	r3, #176	@ 0xb0
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4413      	add	r3, r2
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	7afa      	ldrb	r2, [r7, #11]
 8008906:	4610      	mov	r0, r2
 8008908:	4798      	blx	r3
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d006      	beq.n	800891e <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 8008910:	4b0e      	ldr	r3, [pc, #56]	@ (800894c <SCSI_ModeSense10+0x88>)
 8008912:	78db      	ldrb	r3, [r3, #3]
 8008914:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008918:	b2da      	uxtb	r2, r3
 800891a:	4b0c      	ldr	r3, [pc, #48]	@ (800894c <SCSI_ModeSense10+0x88>)
 800891c:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	3308      	adds	r3, #8
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	461a      	mov	r2, r3
 8008926:	8afb      	ldrh	r3, [r7, #22]
 8008928:	4293      	cmp	r3, r2
 800892a:	d303      	bcc.n	8008934 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	3308      	adds	r3, #8
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8008934:	8afb      	ldrh	r3, [r7, #22]
 8008936:	461a      	mov	r2, r3
 8008938:	4904      	ldr	r1, [pc, #16]	@ (800894c <SCSI_ModeSense10+0x88>)
 800893a:	6938      	ldr	r0, [r7, #16]
 800893c:	f000 fdf8 	bl	8009530 <SCSI_UpdateBotData>

  return 0;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3718      	adds	r7, #24
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	24000088 	.word	0x24000088

08008950 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	460b      	mov	r3, r1
 800895a:	607a      	str	r2, [r7, #4]
 800895c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	32b0      	adds	r2, #176	@ 0xb0
 8008968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800896c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d102      	bne.n	800897a <SCSI_RequestSense+0x2a>
  {
    return -1;
 8008974:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008978:	e069      	b.n	8008a4e <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10a      	bne.n	800899a <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800898a:	2320      	movs	r3, #32
 800898c:	2205      	movs	r2, #5
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f000 f861 	bl	8008a56 <SCSI_SenseCode>
    return -1;
 8008994:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008998:	e059      	b.n	8008a4e <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800899a:	2300      	movs	r3, #0
 800899c:	75fb      	strb	r3, [r7, #23]
 800899e:	e007      	b.n	80089b0 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 80089a0:	7dfb      	ldrb	r3, [r7, #23]
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	4413      	add	r3, r2
 80089a6:	2200      	movs	r2, #0
 80089a8:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80089aa:	7dfb      	ldrb	r3, [r7, #23]
 80089ac:	3301      	adds	r3, #1
 80089ae:	75fb      	strb	r3, [r7, #23]
 80089b0:	7dfb      	ldrb	r3, [r7, #23]
 80089b2:	2b11      	cmp	r3, #17
 80089b4:	d9f4      	bls.n	80089a0 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	2270      	movs	r2, #112	@ 0x70
 80089ba:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	220c      	movs	r2, #12
 80089c0:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d02e      	beq.n	8008a30 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80089d8:	461a      	mov	r2, r3
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	3248      	adds	r2, #72	@ 0x48
 80089de:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	3348      	adds	r3, #72	@ 0x48
 80089f0:	00db      	lsls	r3, r3, #3
 80089f2:	4413      	add	r3, r2
 80089f4:	791a      	ldrb	r2, [r3, #4]
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	3348      	adds	r3, #72	@ 0x48
 8008a04:	00db      	lsls	r3, r3, #3
 8008a06:	4413      	add	r3, r2
 8008a08:	795a      	ldrb	r2, [r3, #5]
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8008a14:	3301      	adds	r3, #1
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8008a24:	2b04      	cmp	r3, #4
 8008a26:	d103      	bne.n	8008a30 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	2212      	movs	r2, #18
 8008a34:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	3304      	adds	r3, #4
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	2b12      	cmp	r3, #18
 8008a3e:	d805      	bhi.n	8008a4c <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	3304      	adds	r3, #4
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	461a      	mov	r2, r3
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b085      	sub	sp, #20
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
 8008a5e:	4608      	mov	r0, r1
 8008a60:	4611      	mov	r1, r2
 8008a62:	461a      	mov	r2, r3
 8008a64:	4603      	mov	r3, r0
 8008a66:	70fb      	strb	r3, [r7, #3]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	70bb      	strb	r3, [r7, #2]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	32b0      	adds	r2, #176	@ 0xb0
 8008a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a7e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d02c      	beq.n	8008ae0 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3248      	adds	r2, #72	@ 0x48
 8008a92:	78b9      	ldrb	r1, [r7, #2]
 8008a94:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	3348      	adds	r3, #72	@ 0x48
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	4413      	add	r3, r2
 8008aa6:	787a      	ldrb	r2, [r7, #1]
 8008aa8:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	3348      	adds	r3, #72	@ 0x48
 8008ab4:	00db      	lsls	r3, r3, #3
 8008ab6:	4413      	add	r3, r2
 8008ab8:	2200      	movs	r2, #0
 8008aba:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8008ad2:	2b04      	cmp	r3, #4
 8008ad4:	d105      	bne.n	8008ae2 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8008ade:	e000      	b.n	8008ae2 <SCSI_SenseCode+0x8c>
    return;
 8008ae0:	bf00      	nop
  }
}
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b086      	sub	sp, #24
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	460b      	mov	r3, r1
 8008af6:	607a      	str	r2, [r7, #4]
 8008af8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	32b0      	adds	r2, #176	@ 0xb0
 8008b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b08:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d102      	bne.n	8008b16 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8008b10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b14:	e03b      	b.n	8008b8e <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d10f      	bne.n	8008b40 <SCSI_StartStopUnit+0x54>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3304      	adds	r3, #4
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	f003 0303 	and.w	r3, r3, #3
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d108      	bne.n	8008b40 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8008b2e:	7af9      	ldrb	r1, [r7, #11]
 8008b30:	2324      	movs	r3, #36	@ 0x24
 8008b32:	2205      	movs	r2, #5
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f7ff ff8e 	bl	8008a56 <SCSI_SenseCode>

    return -1;
 8008b3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b3e:	e026      	b.n	8008b8e <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	3304      	adds	r3, #4
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	f003 0303 	and.w	r3, r3, #3
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d104      	bne.n	8008b58 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8008b56:	e016      	b.n	8008b86 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	f003 0303 	and.w	r3, r3, #3
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d104      	bne.n	8008b70 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	2202      	movs	r2, #2
 8008b6a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8008b6e:	e00a      	b.n	8008b86 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	3304      	adds	r3, #4
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	f003 0303 	and.w	r3, r3, #3
 8008b7a:	2b03      	cmp	r3, #3
 8008b7c:	d103      	bne.n	8008b86 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	60da      	str	r2, [r3, #12]

  return 0;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b087      	sub	sp, #28
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	60f8      	str	r0, [r7, #12]
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	607a      	str	r2, [r7, #4]
 8008ba2:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	32b0      	adds	r2, #176	@ 0xb0
 8008bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d102      	bne.n	8008bc0 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8008bba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008bbe:	e011      	b.n	8008be4 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d104      	bne.n	8008bd4 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8008bd2:	e003      	b.n	8008bdc <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	2200      	movs	r2, #0
 8008be0:	60da      	str	r2, [r3, #12]

  return 0;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	371c      	adds	r7, #28
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	607a      	str	r2, [r7, #4]
 8008bfc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	32b0      	adds	r2, #176	@ 0xb0
 8008c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d102      	bne.n	8008c1a <SCSI_Read10+0x2a>
  {
    return -1;
 8008c14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c18:	e090      	b.n	8008d3c <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	7a1b      	ldrb	r3, [r3, #8]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f040 8082 	bne.w	8008d28 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8008c2a:	b25b      	sxtb	r3, r3
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	db0a      	blt.n	8008c46 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008c36:	2320      	movs	r3, #32
 8008c38:	2205      	movs	r2, #5
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f7ff ff0b 	bl	8008a56 <SCSI_SenseCode>
      return -1;
 8008c40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c44:	e07a      	b.n	8008d3c <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d108      	bne.n	8008c62 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008c50:	7af9      	ldrb	r1, [r7, #11]
 8008c52:	233a      	movs	r3, #58	@ 0x3a
 8008c54:	2202      	movs	r2, #2
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f7ff fefd 	bl	8008a56 <SCSI_SenseCode>

      return -1;
 8008c5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c60:	e06c      	b.n	8008d3c <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	33b0      	adds	r3, #176	@ 0xb0
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4413      	add	r3, r2
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	7afa      	ldrb	r2, [r7, #11]
 8008c76:	4610      	mov	r0, r2
 8008c78:	4798      	blx	r3
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d008      	beq.n	8008c92 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008c80:	7af9      	ldrb	r1, [r7, #11]
 8008c82:	233a      	movs	r3, #58	@ 0x3a
 8008c84:	2202      	movs	r2, #2
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f7ff fee5 	bl	8008a56 <SCSI_SenseCode>
      return -1;
 8008c8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c90:	e054      	b.n	8008d3c <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	3302      	adds	r3, #2
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3303      	adds	r3, #3
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008ca2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008cac:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	3205      	adds	r2, #5
 8008cb2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8008cb4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	3307      	adds	r3, #7
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	021b      	lsls	r3, r3, #8
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	3208      	adds	r2, #8
 8008cc8:	7812      	ldrb	r2, [r2, #0]
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008cde:	7af9      	ldrb	r1, [r7, #11]
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f000 fadc 	bl	800929e <SCSI_CheckAddressRange>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	da02      	bge.n	8008cf2 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008cec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008cf0:	e024      	b.n	8008d3c <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008cfe:	6979      	ldr	r1, [r7, #20]
 8008d00:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 8008d04:	fb01 f303 	mul.w	r3, r1, r3
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d00a      	beq.n	8008d22 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008d12:	2320      	movs	r3, #32
 8008d14:	2205      	movs	r2, #5
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f7ff fe9d 	bl	8008a56 <SCSI_SenseCode>
      return -1;
 8008d1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d20:	e00c      	b.n	8008d3c <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	2202      	movs	r2, #2
 8008d26:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d2e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8008d30:	7afb      	ldrb	r3, [r7, #11]
 8008d32:	4619      	mov	r1, r3
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f000 fadf 	bl	80092f8 <SCSI_ProcessRead>
 8008d3a:	4603      	mov	r3, r0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	607a      	str	r2, [r7, #4]
 8008d50:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	32b0      	adds	r2, #176	@ 0xb0
 8008d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d60:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d102      	bne.n	8008d6e <SCSI_Read12+0x2a>
  {
    return -1;
 8008d68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d6c:	e09a      	b.n	8008ea4 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	7a1b      	ldrb	r3, [r3, #8]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f040 808c 	bne.w	8008e90 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8008d7e:	b25b      	sxtb	r3, r3
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	db0a      	blt.n	8008d9a <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008d8a:	2320      	movs	r3, #32
 8008d8c:	2205      	movs	r2, #5
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f7ff fe61 	bl	8008a56 <SCSI_SenseCode>
      return -1;
 8008d94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d98:	e084      	b.n	8008ea4 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d108      	bne.n	8008db6 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008da4:	7af9      	ldrb	r1, [r7, #11]
 8008da6:	233a      	movs	r3, #58	@ 0x3a
 8008da8:	2202      	movs	r2, #2
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f7ff fe53 	bl	8008a56 <SCSI_SenseCode>
      return -1;
 8008db0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008db4:	e076      	b.n	8008ea4 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	33b0      	adds	r3, #176	@ 0xb0
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4413      	add	r3, r2
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	7afa      	ldrb	r2, [r7, #11]
 8008dca:	4610      	mov	r0, r2
 8008dcc:	4798      	blx	r3
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d008      	beq.n	8008de6 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008dd4:	7af9      	ldrb	r1, [r7, #11]
 8008dd6:	233a      	movs	r3, #58	@ 0x3a
 8008dd8:	2202      	movs	r2, #2
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f7ff fe3b 	bl	8008a56 <SCSI_SenseCode>
      return -1;
 8008de0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008de4:	e05e      	b.n	8008ea4 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	3302      	adds	r3, #2
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	3303      	adds	r3, #3
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008df6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	3304      	adds	r3, #4
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008e00:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	3205      	adds	r2, #5
 8008e06:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8008e08:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	3306      	adds	r3, #6
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3307      	adds	r3, #7
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008e20:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	3308      	adds	r3, #8
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8008e2a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	3209      	adds	r2, #9
 8008e30:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8008e32:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008e46:	7af9      	ldrb	r1, [r7, #11]
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f000 fa28 	bl	800929e <SCSI_CheckAddressRange>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	da02      	bge.n	8008e5a <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008e54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e58:	e024      	b.n	8008ea4 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008e66:	6979      	ldr	r1, [r7, #20]
 8008e68:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 8008e6c:	fb01 f303 	mul.w	r3, r1, r3
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d00a      	beq.n	8008e8a <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008e7a:	2320      	movs	r3, #32
 8008e7c:	2205      	movs	r2, #5
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f7ff fde9 	bl	8008a56 <SCSI_SenseCode>
      return -1;
 8008e84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e88:	e00c      	b.n	8008ea4 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	2202      	movs	r2, #2
 8008e8e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e96:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8008e98:	7afb      	ldrb	r3, [r7, #11]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f000 fa2b 	bl	80092f8 <SCSI_ProcessRead>
 8008ea2:	4603      	mov	r3, r0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3718      	adds	r7, #24
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	32b0      	adds	r2, #176	@ 0xb0
 8008ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d102      	bne.n	8008ed6 <SCSI_Write10+0x2a>
  {
    return -1;
 8008ed0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008ed4:	e0ba      	b.n	800904c <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	7a1b      	ldrb	r3, [r3, #8]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f040 80b0 	bne.w	8009040 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d10a      	bne.n	8008f00 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008ef0:	2320      	movs	r3, #32
 8008ef2:	2205      	movs	r2, #5
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f7ff fdae 	bl	8008a56 <SCSI_SenseCode>
      return -1;
 8008efa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008efe:	e0a5      	b.n	800904c <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8008f06:	b25b      	sxtb	r3, r3
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	da0a      	bge.n	8008f22 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008f12:	2320      	movs	r3, #32
 8008f14:	2205      	movs	r2, #5
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f7ff fd9d 	bl	8008a56 <SCSI_SenseCode>
      return -1;
 8008f1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f20:	e094      	b.n	800904c <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	33b0      	adds	r3, #176	@ 0xb0
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4413      	add	r3, r2
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	7afa      	ldrb	r2, [r7, #11]
 8008f36:	4610      	mov	r0, r2
 8008f38:	4798      	blx	r3
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d008      	beq.n	8008f52 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008f40:	7af9      	ldrb	r1, [r7, #11]
 8008f42:	233a      	movs	r3, #58	@ 0x3a
 8008f44:	2202      	movs	r2, #2
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f7ff fd85 	bl	8008a56 <SCSI_SenseCode>
      return -1;
 8008f4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f50:	e07c      	b.n	800904c <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	33b0      	adds	r3, #176	@ 0xb0
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	7afa      	ldrb	r2, [r7, #11]
 8008f66:	4610      	mov	r0, r2
 8008f68:	4798      	blx	r3
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d008      	beq.n	8008f82 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8008f70:	7af9      	ldrb	r1, [r7, #11]
 8008f72:	2327      	movs	r3, #39	@ 0x27
 8008f74:	2202      	movs	r2, #2
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f7ff fd6d 	bl	8008a56 <SCSI_SenseCode>
      return -1;
 8008f7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f80:	e064      	b.n	800904c <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	3302      	adds	r3, #2
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	3303      	adds	r3, #3
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008f92:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	3304      	adds	r3, #4
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008f9c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	3205      	adds	r2, #5
 8008fa2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8008fa4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	3307      	adds	r3, #7
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	3208      	adds	r2, #8
 8008fb8:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8008fba:	431a      	orrs	r2, r3
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008fce:	7af9      	ldrb	r1, [r7, #11]
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	f000 f964 	bl	800929e <SCSI_CheckAddressRange>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	da02      	bge.n	8008fe2 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008fdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008fe0:	e034      	b.n	800904c <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8008fee:	fb02 f303 	mul.w	r3, r2, r3
 8008ff2:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d00a      	beq.n	8009016 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8009006:	2320      	movs	r3, #32
 8009008:	2205      	movs	r2, #5
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f7ff fd23 	bl	8008a56 <SCSI_SenseCode>
      return -1;
 8009010:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009014:	e01a      	b.n	800904c <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800901c:	bf28      	it	cs
 800901e:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8009022:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	2201      	movs	r2, #1
 8009028:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800902a:	4b0a      	ldr	r3, [pc, #40]	@ (8009054 <SCSI_Write10+0x1a8>)
 800902c:	7819      	ldrb	r1, [r3, #0]
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f103 0210 	add.w	r2, r3, #16
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f002 faf9 	bl	800b62e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800903c:	2300      	movs	r3, #0
 800903e:	e005      	b.n	800904c <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8009040:	7afb      	ldrb	r3, [r7, #11]
 8009042:	4619      	mov	r1, r3
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f000 f9dd 	bl	8009404 <SCSI_ProcessWrite>
 800904a:	4603      	mov	r3, r0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3718      	adds	r7, #24
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	24000073 	.word	0x24000073

08009058 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b086      	sub	sp, #24
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	460b      	mov	r3, r1
 8009062:	607a      	str	r2, [r7, #4]
 8009064:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	32b0      	adds	r2, #176	@ 0xb0
 8009070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009074:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d102      	bne.n	8009082 <SCSI_Write12+0x2a>
  {
    return -1;
 800907c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009080:	e0ca      	b.n	8009218 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	7a1b      	ldrb	r3, [r3, #8]
 8009086:	2b00      	cmp	r3, #0
 8009088:	f040 80c0 	bne.w	800920c <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10a      	bne.n	80090ac <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800909c:	2320      	movs	r3, #32
 800909e:	2205      	movs	r2, #5
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f7ff fcd8 	bl	8008a56 <SCSI_SenseCode>
      return -1;
 80090a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80090aa:	e0b5      	b.n	8009218 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80090b2:	b25b      	sxtb	r3, r3
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	da0a      	bge.n	80090ce <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80090be:	2320      	movs	r3, #32
 80090c0:	2205      	movs	r2, #5
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f7ff fcc7 	bl	8008a56 <SCSI_SenseCode>
      return -1;
 80090c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80090cc:	e0a4      	b.n	8009218 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	33b0      	adds	r3, #176	@ 0xb0
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	4413      	add	r3, r2
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	7afa      	ldrb	r2, [r7, #11]
 80090e2:	4610      	mov	r0, r2
 80090e4:	4798      	blx	r3
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00b      	beq.n	8009104 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80090ec:	7af9      	ldrb	r1, [r7, #11]
 80090ee:	233a      	movs	r3, #58	@ 0x3a
 80090f0:	2202      	movs	r2, #2
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f7ff fcaf 	bl	8008a56 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	2205      	movs	r2, #5
 80090fc:	721a      	strb	r2, [r3, #8]
      return -1;
 80090fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009102:	e089      	b.n	8009218 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	33b0      	adds	r3, #176	@ 0xb0
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4413      	add	r3, r2
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	7afa      	ldrb	r2, [r7, #11]
 8009118:	4610      	mov	r0, r2
 800911a:	4798      	blx	r3
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00b      	beq.n	800913a <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8009122:	7af9      	ldrb	r1, [r7, #11]
 8009124:	2327      	movs	r3, #39	@ 0x27
 8009126:	2202      	movs	r2, #2
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f7ff fc94 	bl	8008a56 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2205      	movs	r2, #5
 8009132:	721a      	strb	r2, [r3, #8]
      return -1;
 8009134:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009138:	e06e      	b.n	8009218 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	3302      	adds	r3, #2
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	3303      	adds	r3, #3
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800914a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	3304      	adds	r3, #4
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009154:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	3205      	adds	r2, #5
 800915a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800915c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	3306      	adds	r3, #6
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	3307      	adds	r3, #7
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009174:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	3308      	adds	r3, #8
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800917e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	3209      	adds	r2, #9
 8009184:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8009186:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800919a:	7af9      	ldrb	r1, [r7, #11]
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f000 f87e 	bl	800929e <SCSI_CheckAddressRange>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	da02      	bge.n	80091ae <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80091a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80091ac:	e034      	b.n	8009218 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80091b4:	697a      	ldr	r2, [r7, #20]
 80091b6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 80091ba:	fb02 f303 	mul.w	r3, r2, r3
 80091be:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d00a      	beq.n	80091e2 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80091d2:	2320      	movs	r3, #32
 80091d4:	2205      	movs	r2, #5
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f7ff fc3d 	bl	8008a56 <SCSI_SenseCode>
      return -1;
 80091dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80091e0:	e01a      	b.n	8009218 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091e8:	bf28      	it	cs
 80091ea:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80091ee:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	2201      	movs	r2, #1
 80091f4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80091f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009220 <SCSI_Write12+0x1c8>)
 80091f8:	7819      	ldrb	r1, [r3, #0]
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f103 0210 	add.w	r2, r3, #16
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f002 fa13 	bl	800b62e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8009208:	2300      	movs	r3, #0
 800920a:	e005      	b.n	8009218 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800920c:	7afb      	ldrb	r3, [r7, #11]
 800920e:	4619      	mov	r1, r3
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 f8f7 	bl	8009404 <SCSI_ProcessWrite>
 8009216:	4603      	mov	r3, r0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	24000073 	.word	0x24000073

08009224 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	460b      	mov	r3, r1
 800922e:	607a      	str	r2, [r7, #4]
 8009230:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	32b0      	adds	r2, #176	@ 0xb0
 800923c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009240:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d102      	bne.n	800924e <SCSI_Verify10+0x2a>
  {
    return -1;
 8009248:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800924c:	e023      	b.n	8009296 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	3301      	adds	r3, #1
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	f003 0302 	and.w	r3, r3, #2
 8009258:	2b00      	cmp	r3, #0
 800925a:	d008      	beq.n	800926e <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800925c:	7af9      	ldrb	r1, [r7, #11]
 800925e:	2324      	movs	r3, #36	@ 0x24
 8009260:	2205      	movs	r2, #5
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f7ff fbf7 	bl	8008a56 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8009268:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800926c:	e013      	b.n	8009296 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800927a:	7af9      	ldrb	r1, [r7, #11]
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 f80e 	bl	800929e <SCSI_CheckAddressRange>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	da02      	bge.n	800928e <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8009288:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800928c:	e003      	b.n	8009296 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2200      	movs	r2, #0
 8009292:	60da      	str	r2, [r3, #12]

  return 0;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b086      	sub	sp, #24
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	603b      	str	r3, [r7, #0]
 80092aa:	460b      	mov	r3, r1
 80092ac:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	32b0      	adds	r2, #176	@ 0xb0
 80092b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092bc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d102      	bne.n	80092ca <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 80092c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092c8:	e011      	b.n	80092ee <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	441a      	add	r2, r3
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d908      	bls.n	80092ec <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80092da:	7af9      	ldrb	r1, [r7, #11]
 80092dc:	2321      	movs	r3, #33	@ 0x21
 80092de:	2205      	movs	r2, #5
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f7ff fbb8 	bl	8008a56 <SCSI_SenseCode>
    return -1;
 80092e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092ea:	e000      	b.n	80092ee <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3718      	adds	r7, #24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
	...

080092f8 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80092f8:	b590      	push	{r4, r7, lr}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	460b      	mov	r3, r1
 8009302:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	32b0      	adds	r2, #176	@ 0xb0
 800930e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009312:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d102      	bne.n	8009320 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800931a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800931e:	e06a      	b.n	80093f6 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800932c:	fb02 f303 	mul.w	r3, r2, r3
 8009330:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009338:	bf28      	it	cs
 800933a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800933e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	33b0      	adds	r3, #176	@ 0xb0
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	4413      	add	r3, r2
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	691c      	ldr	r4, [r3, #16]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f103 0110 	add.w	r1, r3, #16
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8009364:	4618      	mov	r0, r3
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800936c:	b29b      	uxth	r3, r3
 800936e:	78f8      	ldrb	r0, [r7, #3]
 8009370:	47a0      	blx	r4
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	da08      	bge.n	800938a <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8009378:	78f9      	ldrb	r1, [r7, #3]
 800937a:	2311      	movs	r3, #17
 800937c:	2204      	movs	r2, #4
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7ff fb69 	bl	8008a56 <SCSI_SenseCode>
    return -1;
 8009384:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009388:	e035      	b.n	80093f6 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800938a:	4b1d      	ldr	r3, [pc, #116]	@ (8009400 <SCSI_ProcessRead+0x108>)
 800938c:	7819      	ldrb	r1, [r3, #0]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f103 0210 	add.w	r2, r3, #16
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f002 f928 	bl	800b5ec <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80093a8:	4619      	mov	r1, r3
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80093b0:	441a      	add	r2, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80093c4:	4619      	mov	r1, r3
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80093cc:	1ad2      	subs	r2, r2, r3
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	1ad2      	subs	r2, r2, r3
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d102      	bne.n	80093f4 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2203      	movs	r2, #3
 80093f2:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3714      	adds	r7, #20
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd90      	pop	{r4, r7, pc}
 80093fe:	bf00      	nop
 8009400:	24000072 	.word	0x24000072

08009404 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8009404:	b590      	push	{r4, r7, lr}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	460b      	mov	r3, r1
 800940e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	32b0      	adds	r2, #176	@ 0xb0
 800941a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800941e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d102      	bne.n	800942c <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8009426:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800942a:	e07a      	b.n	8009522 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8009438:	fb02 f303 	mul.w	r3, r2, r3
 800943c:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009444:	bf28      	it	cs
 8009446:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800944a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	33b0      	adds	r3, #176	@ 0xb0
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	695c      	ldr	r4, [r3, #20]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f103 0110 	add.w	r1, r3, #16
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8009470:	4618      	mov	r0, r3
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8009478:	b29b      	uxth	r3, r3
 800947a:	78f8      	ldrb	r0, [r7, #3]
 800947c:	47a0      	blx	r4
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	da08      	bge.n	8009496 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8009484:	78f9      	ldrb	r1, [r7, #3]
 8009486:	2303      	movs	r3, #3
 8009488:	2204      	movs	r2, #4
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7ff fae3 	bl	8008a56 <SCSI_SenseCode>
    return -1;
 8009490:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009494:	e045      	b.n	8009522 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80094a2:	4619      	mov	r1, r3
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80094aa:	441a      	add	r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80094be:	4619      	mov	r1, r3
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80094c6:	1ad2      	subs	r2, r2, r3
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	1ad2      	subs	r2, r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d104      	bne.n	80094f2 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80094e8:	2100      	movs	r1, #0
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7fe fce8 	bl	8007ec0 <MSC_BOT_SendCSW>
 80094f0:	e016      	b.n	8009520 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 80094fe:	fb02 f303 	mul.w	r3, r2, r3
 8009502:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009506:	bf28      	it	cs
 8009508:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800950c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800950e:	4b07      	ldr	r3, [pc, #28]	@ (800952c <SCSI_ProcessWrite+0x128>)
 8009510:	7819      	ldrb	r1, [r3, #0]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f103 0210 	add.w	r2, r3, #16
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f002 f887 	bl	800b62e <USBD_LL_PrepareReceive>
  }

  return 0;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3714      	adds	r7, #20
 8009526:	46bd      	mov	sp, r7
 8009528:	bd90      	pop	{r4, r7, pc}
 800952a:	bf00      	nop
 800952c:	24000073 	.word	0x24000073

08009530 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8009530:	b480      	push	{r7}
 8009532:	b087      	sub	sp, #28
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	4613      	mov	r3, r2
 800953c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800953e:	88fb      	ldrh	r3, [r7, #6]
 8009540:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d102      	bne.n	800954e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8009548:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800954c:	e013      	b.n	8009576 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800954e:	8afa      	ldrh	r2, [r7, #22]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8009554:	e00b      	b.n	800956e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8009556:	8afb      	ldrh	r3, [r7, #22]
 8009558:	3b01      	subs	r3, #1
 800955a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800955c:	8afb      	ldrh	r3, [r7, #22]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	441a      	add	r2, r3
 8009562:	8afb      	ldrh	r3, [r7, #22]
 8009564:	7811      	ldrb	r1, [r2, #0]
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	4413      	add	r3, r2
 800956a:	460a      	mov	r2, r1
 800956c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800956e:	8afb      	ldrh	r3, [r7, #22]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1f0      	bne.n	8009556 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	371c      	adds	r7, #28
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b086      	sub	sp, #24
 8009586:	af00      	add	r7, sp, #0
 8009588:	60f8      	str	r0, [r7, #12]
 800958a:	60b9      	str	r1, [r7, #8]
 800958c:	4613      	mov	r3, r2
 800958e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009596:	2303      	movs	r3, #3
 8009598:	e01f      	b.n	80095da <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d003      	beq.n	80095c0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	79fa      	ldrb	r2, [r7, #7]
 80095cc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	f001 feb2 	bl	800b338 <USBD_LL_Init>
 80095d4:	4603      	mov	r3, r0
 80095d6:	75fb      	strb	r3, [r7, #23]

  return ret;
 80095d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3718      	adds	r7, #24
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b084      	sub	sp, #16
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095ec:	2300      	movs	r3, #0
 80095ee:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d101      	bne.n	80095fa <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80095f6:	2303      	movs	r3, #3
 80095f8:	e025      	b.n	8009646 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	683a      	ldr	r2, [r7, #0]
 80095fe:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	32ae      	adds	r2, #174	@ 0xae
 800960c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00f      	beq.n	8009636 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	32ae      	adds	r2, #174	@ 0xae
 8009620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009626:	f107 020e 	add.w	r2, r7, #14
 800962a:	4610      	mov	r0, r2
 800962c:	4798      	blx	r3
 800962e:	4602      	mov	r2, r0
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800963c:	1c5a      	adds	r2, r3, #1
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b082      	sub	sp, #8
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f001 fec0 	bl	800b3dc <USBD_LL_Start>
 800965c:	4603      	mov	r3, r0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009666:	b480      	push	{r7}
 8009668:	b083      	sub	sp, #12
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800966e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009670:	4618      	mov	r0, r3
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009688:	2300      	movs	r3, #0
 800968a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009692:	2b00      	cmp	r3, #0
 8009694:	d009      	beq.n	80096aa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	78fa      	ldrb	r2, [r7, #3]
 80096a0:	4611      	mov	r1, r2
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	4798      	blx	r3
 80096a6:	4603      	mov	r3, r0
 80096a8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	460b      	mov	r3, r1
 80096be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	78fa      	ldrb	r2, [r7, #3]
 80096ce:	4611      	mov	r1, r2
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	4798      	blx	r3
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d001      	beq.n	80096de <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80096da:	2303      	movs	r3, #3
 80096dc:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80096de:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80096f8:	6839      	ldr	r1, [r7, #0]
 80096fa:	4618      	mov	r0, r3
 80096fc:	f001 f937 	bl	800a96e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800970e:	461a      	mov	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800971c:	f003 031f 	and.w	r3, r3, #31
 8009720:	2b02      	cmp	r3, #2
 8009722:	d01a      	beq.n	800975a <USBD_LL_SetupStage+0x72>
 8009724:	2b02      	cmp	r3, #2
 8009726:	d822      	bhi.n	800976e <USBD_LL_SetupStage+0x86>
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <USBD_LL_SetupStage+0x4a>
 800972c:	2b01      	cmp	r3, #1
 800972e:	d00a      	beq.n	8009746 <USBD_LL_SetupStage+0x5e>
 8009730:	e01d      	b.n	800976e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009738:	4619      	mov	r1, r3
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fb64 	bl	8009e08 <USBD_StdDevReq>
 8009740:	4603      	mov	r3, r0
 8009742:	73fb      	strb	r3, [r7, #15]
      break;
 8009744:	e020      	b.n	8009788 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800974c:	4619      	mov	r1, r3
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 fbcc 	bl	8009eec <USBD_StdItfReq>
 8009754:	4603      	mov	r3, r0
 8009756:	73fb      	strb	r3, [r7, #15]
      break;
 8009758:	e016      	b.n	8009788 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fc2e 	bl	8009fc4 <USBD_StdEPReq>
 8009768:	4603      	mov	r3, r0
 800976a:	73fb      	strb	r3, [r7, #15]
      break;
 800976c:	e00c      	b.n	8009788 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009774:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009778:	b2db      	uxtb	r3, r3
 800977a:	4619      	mov	r1, r3
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f001 feac 	bl	800b4da <USBD_LL_StallEP>
 8009782:	4603      	mov	r3, r0
 8009784:	73fb      	strb	r3, [r7, #15]
      break;
 8009786:	bf00      	nop
  }

  return ret;
 8009788:	7bfb      	ldrb	r3, [r7, #15]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b086      	sub	sp, #24
 8009796:	af00      	add	r7, sp, #0
 8009798:	60f8      	str	r0, [r7, #12]
 800979a:	460b      	mov	r3, r1
 800979c:	607a      	str	r2, [r7, #4]
 800979e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80097a4:	7afb      	ldrb	r3, [r7, #11]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d16e      	bne.n	8009888 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80097b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	f040 8098 	bne.w	80098ee <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	689a      	ldr	r2, [r3, #8]
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d913      	bls.n	80097f2 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	689a      	ldr	r2, [r3, #8]
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	1ad2      	subs	r2, r2, r3
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	68da      	ldr	r2, [r3, #12]
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	4293      	cmp	r3, r2
 80097e2:	bf28      	it	cs
 80097e4:	4613      	movcs	r3, r2
 80097e6:	461a      	mov	r2, r3
 80097e8:	6879      	ldr	r1, [r7, #4]
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	f001 f9a2 	bl	800ab34 <USBD_CtlContinueRx>
 80097f0:	e07d      	b.n	80098ee <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80097f8:	f003 031f 	and.w	r3, r3, #31
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d014      	beq.n	800982a <USBD_LL_DataOutStage+0x98>
 8009800:	2b02      	cmp	r3, #2
 8009802:	d81d      	bhi.n	8009840 <USBD_LL_DataOutStage+0xae>
 8009804:	2b00      	cmp	r3, #0
 8009806:	d002      	beq.n	800980e <USBD_LL_DataOutStage+0x7c>
 8009808:	2b01      	cmp	r3, #1
 800980a:	d003      	beq.n	8009814 <USBD_LL_DataOutStage+0x82>
 800980c:	e018      	b.n	8009840 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800980e:	2300      	movs	r3, #0
 8009810:	75bb      	strb	r3, [r7, #22]
            break;
 8009812:	e018      	b.n	8009846 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800981a:	b2db      	uxtb	r3, r3
 800981c:	4619      	mov	r1, r3
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 fa64 	bl	8009cec <USBD_CoreFindIF>
 8009824:	4603      	mov	r3, r0
 8009826:	75bb      	strb	r3, [r7, #22]
            break;
 8009828:	e00d      	b.n	8009846 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009830:	b2db      	uxtb	r3, r3
 8009832:	4619      	mov	r1, r3
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f000 fa66 	bl	8009d06 <USBD_CoreFindEP>
 800983a:	4603      	mov	r3, r0
 800983c:	75bb      	strb	r3, [r7, #22]
            break;
 800983e:	e002      	b.n	8009846 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009840:	2300      	movs	r3, #0
 8009842:	75bb      	strb	r3, [r7, #22]
            break;
 8009844:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009846:	7dbb      	ldrb	r3, [r7, #22]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d119      	bne.n	8009880 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b03      	cmp	r3, #3
 8009856:	d113      	bne.n	8009880 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009858:	7dba      	ldrb	r2, [r7, #22]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	32ae      	adds	r2, #174	@ 0xae
 800985e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00b      	beq.n	8009880 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009868:	7dba      	ldrb	r2, [r7, #22]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009870:	7dba      	ldrb	r2, [r7, #22]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	32ae      	adds	r2, #174	@ 0xae
 8009876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f001 f968 	bl	800ab56 <USBD_CtlSendStatus>
 8009886:	e032      	b.n	80098ee <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009888:	7afb      	ldrb	r3, [r7, #11]
 800988a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800988e:	b2db      	uxtb	r3, r3
 8009890:	4619      	mov	r1, r3
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 fa37 	bl	8009d06 <USBD_CoreFindEP>
 8009898:	4603      	mov	r3, r0
 800989a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800989c:	7dbb      	ldrb	r3, [r7, #22]
 800989e:	2bff      	cmp	r3, #255	@ 0xff
 80098a0:	d025      	beq.n	80098ee <USBD_LL_DataOutStage+0x15c>
 80098a2:	7dbb      	ldrb	r3, [r7, #22]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d122      	bne.n	80098ee <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b03      	cmp	r3, #3
 80098b2:	d117      	bne.n	80098e4 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80098b4:	7dba      	ldrb	r2, [r7, #22]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	32ae      	adds	r2, #174	@ 0xae
 80098ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00f      	beq.n	80098e4 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80098c4:	7dba      	ldrb	r2, [r7, #22]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80098cc:	7dba      	ldrb	r2, [r7, #22]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	32ae      	adds	r2, #174	@ 0xae
 80098d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	7afa      	ldrb	r2, [r7, #11]
 80098da:	4611      	mov	r1, r2
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	4798      	blx	r3
 80098e0:	4603      	mov	r3, r0
 80098e2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80098e4:	7dfb      	ldrb	r3, [r7, #23]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
 80098ec:	e000      	b.n	80098f0 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3718      	adds	r7, #24
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	460b      	mov	r3, r1
 8009902:	607a      	str	r2, [r7, #4]
 8009904:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009906:	7afb      	ldrb	r3, [r7, #11]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d16f      	bne.n	80099ec <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	3314      	adds	r3, #20
 8009910:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009918:	2b02      	cmp	r3, #2
 800991a:	d15a      	bne.n	80099d2 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	689a      	ldr	r2, [r3, #8]
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	429a      	cmp	r2, r3
 8009926:	d914      	bls.n	8009952 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	689a      	ldr	r2, [r3, #8]
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	1ad2      	subs	r2, r2, r3
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	461a      	mov	r2, r3
 800993c:	6879      	ldr	r1, [r7, #4]
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f001 f8e7 	bl	800ab12 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009944:	2300      	movs	r3, #0
 8009946:	2200      	movs	r2, #0
 8009948:	2100      	movs	r1, #0
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f001 fe6f 	bl	800b62e <USBD_LL_PrepareReceive>
 8009950:	e03f      	b.n	80099d2 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	68da      	ldr	r2, [r3, #12]
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	429a      	cmp	r2, r3
 800995c:	d11c      	bne.n	8009998 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	685a      	ldr	r2, [r3, #4]
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009966:	429a      	cmp	r2, r3
 8009968:	d316      	bcc.n	8009998 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009974:	429a      	cmp	r2, r3
 8009976:	d20f      	bcs.n	8009998 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009978:	2200      	movs	r2, #0
 800997a:	2100      	movs	r1, #0
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f001 f8c8 	bl	800ab12 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800998a:	2300      	movs	r3, #0
 800998c:	2200      	movs	r2, #0
 800998e:	2100      	movs	r1, #0
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f001 fe4c 	bl	800b62e <USBD_LL_PrepareReceive>
 8009996:	e01c      	b.n	80099d2 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b03      	cmp	r3, #3
 80099a2:	d10f      	bne.n	80099c4 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d009      	beq.n	80099c4 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80099c4:	2180      	movs	r1, #128	@ 0x80
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	f001 fd87 	bl	800b4da <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f001 f8d5 	bl	800ab7c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d03a      	beq.n	8009a52 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f7ff fe42 	bl	8009666 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80099ea:	e032      	b.n	8009a52 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80099ec:	7afb      	ldrb	r3, [r7, #11]
 80099ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	4619      	mov	r1, r3
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f000 f985 	bl	8009d06 <USBD_CoreFindEP>
 80099fc:	4603      	mov	r3, r0
 80099fe:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a00:	7dfb      	ldrb	r3, [r7, #23]
 8009a02:	2bff      	cmp	r3, #255	@ 0xff
 8009a04:	d025      	beq.n	8009a52 <USBD_LL_DataInStage+0x15a>
 8009a06:	7dfb      	ldrb	r3, [r7, #23]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d122      	bne.n	8009a52 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	2b03      	cmp	r3, #3
 8009a16:	d11c      	bne.n	8009a52 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009a18:	7dfa      	ldrb	r2, [r7, #23]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	32ae      	adds	r2, #174	@ 0xae
 8009a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d014      	beq.n	8009a52 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009a28:	7dfa      	ldrb	r2, [r7, #23]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009a30:	7dfa      	ldrb	r2, [r7, #23]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	32ae      	adds	r2, #174	@ 0xae
 8009a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a3a:	695b      	ldr	r3, [r3, #20]
 8009a3c:	7afa      	ldrb	r2, [r7, #11]
 8009a3e:	4611      	mov	r1, r2
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	4798      	blx	r3
 8009a44:	4603      	mov	r3, r0
 8009a46:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009a48:	7dbb      	ldrb	r3, [r7, #22]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d001      	beq.n	8009a52 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009a4e:	7dbb      	ldrb	r3, [r7, #22]
 8009a50:	e000      	b.n	8009a54 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3718      	adds	r7, #24
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a64:	2300      	movs	r3, #0
 8009a66:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d014      	beq.n	8009ac2 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00e      	beq.n	8009ac2 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	6852      	ldr	r2, [r2, #4]
 8009ab0:	b2d2      	uxtb	r2, r2
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	4798      	blx	r3
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ac2:	2340      	movs	r3, #64	@ 0x40
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f001 fca2 	bl	800b412 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2240      	movs	r2, #64	@ 0x40
 8009ada:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ade:	2340      	movs	r3, #64	@ 0x40
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	2180      	movs	r1, #128	@ 0x80
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f001 fc94 	bl	800b412 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2201      	movs	r2, #1
 8009aee:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2240      	movs	r2, #64	@ 0x40
 8009af4:	621a      	str	r2, [r3, #32]

  return ret;
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	78fa      	ldrb	r2, [r7, #3]
 8009b10:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009b12:	2300      	movs	r3, #0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b04      	cmp	r3, #4
 8009b32:	d006      	beq.n	8009b42 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b3a:	b2da      	uxtb	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2204      	movs	r2, #4
 8009b46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	2b04      	cmp	r3, #4
 8009b6a:	d106      	bne.n	8009b7a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	2b03      	cmp	r3, #3
 8009b9a:	d110      	bne.n	8009bbe <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00b      	beq.n	8009bbe <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bac:	69db      	ldr	r3, [r3, #28]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d005      	beq.n	8009bbe <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bb8:	69db      	ldr	r3, [r3, #28]
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	32ae      	adds	r2, #174	@ 0xae
 8009bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d101      	bne.n	8009bea <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e01c      	b.n	8009c24 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	d115      	bne.n	8009c22 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	32ae      	adds	r2, #174	@ 0xae
 8009c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c04:	6a1b      	ldr	r3, [r3, #32]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00b      	beq.n	8009c22 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	32ae      	adds	r2, #174	@ 0xae
 8009c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c18:	6a1b      	ldr	r3, [r3, #32]
 8009c1a:	78fa      	ldrb	r2, [r7, #3]
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	460b      	mov	r3, r1
 8009c36:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	32ae      	adds	r2, #174	@ 0xae
 8009c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d101      	bne.n	8009c4e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009c4a:	2303      	movs	r3, #3
 8009c4c:	e01c      	b.n	8009c88 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	d115      	bne.n	8009c86 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	32ae      	adds	r2, #174	@ 0xae
 8009c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00b      	beq.n	8009c86 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	32ae      	adds	r2, #174	@ 0xae
 8009c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c7e:	78fa      	ldrb	r2, [r7, #3]
 8009c80:	4611      	mov	r1, r2
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3708      	adds	r7, #8
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	370c      	adds	r7, #12
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b084      	sub	sp, #16
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00e      	beq.n	8009ce2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	6852      	ldr	r2, [r2, #4]
 8009cd0:	b2d2      	uxtb	r2, r2
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	4798      	blx	r3
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009cde:	2303      	movs	r3, #3
 8009ce0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009cf8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	370c      	adds	r7, #12
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b083      	sub	sp, #12
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	460b      	mov	r3, r1
 8009d10:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009d12:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	460b      	mov	r3, r1
 8009d2a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009d34:	2300      	movs	r3, #0
 8009d36:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	885b      	ldrh	r3, [r3, #2]
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	7812      	ldrb	r2, [r2, #0]
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d91f      	bls.n	8009d86 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009d4c:	e013      	b.n	8009d76 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009d4e:	f107 030a 	add.w	r3, r7, #10
 8009d52:	4619      	mov	r1, r3
 8009d54:	6978      	ldr	r0, [r7, #20]
 8009d56:	f000 f81b 	bl	8009d90 <USBD_GetNextDesc>
 8009d5a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	785b      	ldrb	r3, [r3, #1]
 8009d60:	2b05      	cmp	r3, #5
 8009d62:	d108      	bne.n	8009d76 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	789b      	ldrb	r3, [r3, #2]
 8009d6c:	78fa      	ldrb	r2, [r7, #3]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d008      	beq.n	8009d84 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009d72:	2300      	movs	r3, #0
 8009d74:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	885b      	ldrh	r3, [r3, #2]
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	897b      	ldrh	r3, [r7, #10]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d8e5      	bhi.n	8009d4e <USBD_GetEpDesc+0x2e>
 8009d82:	e000      	b.n	8009d86 <USBD_GetEpDesc+0x66>
          break;
 8009d84:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009d86:	693b      	ldr	r3, [r7, #16]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3718      	adds	r7, #24
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	881b      	ldrh	r3, [r3, #0]
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	7812      	ldrb	r2, [r2, #0]
 8009da6:	4413      	add	r3, r2
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	461a      	mov	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4413      	add	r3, r2
 8009db8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009dba:	68fb      	ldr	r3, [r7, #12]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3714      	adds	r7, #20
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b087      	sub	sp, #28
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009de6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009dea:	021b      	lsls	r3, r3, #8
 8009dec:	b21a      	sxth	r2, r3
 8009dee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	b21b      	sxth	r3, r3
 8009df6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009df8:	89fb      	ldrh	r3, [r7, #14]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	371c      	adds	r7, #28
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
	...

08009e08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e12:	2300      	movs	r3, #0
 8009e14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e1e:	2b40      	cmp	r3, #64	@ 0x40
 8009e20:	d005      	beq.n	8009e2e <USBD_StdDevReq+0x26>
 8009e22:	2b40      	cmp	r3, #64	@ 0x40
 8009e24:	d857      	bhi.n	8009ed6 <USBD_StdDevReq+0xce>
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00f      	beq.n	8009e4a <USBD_StdDevReq+0x42>
 8009e2a:	2b20      	cmp	r3, #32
 8009e2c:	d153      	bne.n	8009ed6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	32ae      	adds	r2, #174	@ 0xae
 8009e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	6839      	ldr	r1, [r7, #0]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	4798      	blx	r3
 8009e44:	4603      	mov	r3, r0
 8009e46:	73fb      	strb	r3, [r7, #15]
      break;
 8009e48:	e04a      	b.n	8009ee0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	785b      	ldrb	r3, [r3, #1]
 8009e4e:	2b09      	cmp	r3, #9
 8009e50:	d83b      	bhi.n	8009eca <USBD_StdDevReq+0xc2>
 8009e52:	a201      	add	r2, pc, #4	@ (adr r2, 8009e58 <USBD_StdDevReq+0x50>)
 8009e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e58:	08009ead 	.word	0x08009ead
 8009e5c:	08009ec1 	.word	0x08009ec1
 8009e60:	08009ecb 	.word	0x08009ecb
 8009e64:	08009eb7 	.word	0x08009eb7
 8009e68:	08009ecb 	.word	0x08009ecb
 8009e6c:	08009e8b 	.word	0x08009e8b
 8009e70:	08009e81 	.word	0x08009e81
 8009e74:	08009ecb 	.word	0x08009ecb
 8009e78:	08009ea3 	.word	0x08009ea3
 8009e7c:	08009e95 	.word	0x08009e95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009e80:	6839      	ldr	r1, [r7, #0]
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fa3c 	bl	800a300 <USBD_GetDescriptor>
          break;
 8009e88:	e024      	b.n	8009ed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009e8a:	6839      	ldr	r1, [r7, #0]
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 fbcb 	bl	800a628 <USBD_SetAddress>
          break;
 8009e92:	e01f      	b.n	8009ed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009e94:	6839      	ldr	r1, [r7, #0]
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fc0a 	bl	800a6b0 <USBD_SetConfig>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	73fb      	strb	r3, [r7, #15]
          break;
 8009ea0:	e018      	b.n	8009ed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009ea2:	6839      	ldr	r1, [r7, #0]
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fcad 	bl	800a804 <USBD_GetConfig>
          break;
 8009eaa:	e013      	b.n	8009ed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fcde 	bl	800a870 <USBD_GetStatus>
          break;
 8009eb4:	e00e      	b.n	8009ed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009eb6:	6839      	ldr	r1, [r7, #0]
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 fd0d 	bl	800a8d8 <USBD_SetFeature>
          break;
 8009ebe:	e009      	b.n	8009ed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ec0:	6839      	ldr	r1, [r7, #0]
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fd31 	bl	800a92a <USBD_ClrFeature>
          break;
 8009ec8:	e004      	b.n	8009ed4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009eca:	6839      	ldr	r1, [r7, #0]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fd88 	bl	800a9e2 <USBD_CtlError>
          break;
 8009ed2:	bf00      	nop
      }
      break;
 8009ed4:	e004      	b.n	8009ee0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009ed6:	6839      	ldr	r1, [r7, #0]
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 fd82 	bl	800a9e2 <USBD_CtlError>
      break;
 8009ede:	bf00      	nop
  }

  return ret;
 8009ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop

08009eec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f02:	2b40      	cmp	r3, #64	@ 0x40
 8009f04:	d005      	beq.n	8009f12 <USBD_StdItfReq+0x26>
 8009f06:	2b40      	cmp	r3, #64	@ 0x40
 8009f08:	d852      	bhi.n	8009fb0 <USBD_StdItfReq+0xc4>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <USBD_StdItfReq+0x26>
 8009f0e:	2b20      	cmp	r3, #32
 8009f10:	d14e      	bne.n	8009fb0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d840      	bhi.n	8009fa2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	889b      	ldrh	r3, [r3, #4]
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d836      	bhi.n	8009f98 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	889b      	ldrh	r3, [r3, #4]
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	4619      	mov	r1, r3
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f7ff feda 	bl	8009cec <USBD_CoreFindIF>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f3c:	7bbb      	ldrb	r3, [r7, #14]
 8009f3e:	2bff      	cmp	r3, #255	@ 0xff
 8009f40:	d01d      	beq.n	8009f7e <USBD_StdItfReq+0x92>
 8009f42:	7bbb      	ldrb	r3, [r7, #14]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d11a      	bne.n	8009f7e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009f48:	7bba      	ldrb	r2, [r7, #14]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	32ae      	adds	r2, #174	@ 0xae
 8009f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00f      	beq.n	8009f78 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009f58:	7bba      	ldrb	r2, [r7, #14]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009f60:	7bba      	ldrb	r2, [r7, #14]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	32ae      	adds	r2, #174	@ 0xae
 8009f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	6839      	ldr	r1, [r7, #0]
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	4798      	blx	r3
 8009f72:	4603      	mov	r3, r0
 8009f74:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009f76:	e004      	b.n	8009f82 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009f78:	2303      	movs	r3, #3
 8009f7a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009f7c:	e001      	b.n	8009f82 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	88db      	ldrh	r3, [r3, #6]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d110      	bne.n	8009fac <USBD_StdItfReq+0xc0>
 8009f8a:	7bfb      	ldrb	r3, [r7, #15]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10d      	bne.n	8009fac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fde0 	bl	800ab56 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009f96:	e009      	b.n	8009fac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 fd21 	bl	800a9e2 <USBD_CtlError>
          break;
 8009fa0:	e004      	b.n	8009fac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009fa2:	6839      	ldr	r1, [r7, #0]
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 fd1c 	bl	800a9e2 <USBD_CtlError>
          break;
 8009faa:	e000      	b.n	8009fae <USBD_StdItfReq+0xc2>
          break;
 8009fac:	bf00      	nop
      }
      break;
 8009fae:	e004      	b.n	8009fba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fd15 	bl	800a9e2 <USBD_CtlError>
      break;
 8009fb8:	bf00      	nop
  }

  return ret;
 8009fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	889b      	ldrh	r3, [r3, #4]
 8009fd6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009fe0:	2b40      	cmp	r3, #64	@ 0x40
 8009fe2:	d007      	beq.n	8009ff4 <USBD_StdEPReq+0x30>
 8009fe4:	2b40      	cmp	r3, #64	@ 0x40
 8009fe6:	f200 817f 	bhi.w	800a2e8 <USBD_StdEPReq+0x324>
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d02a      	beq.n	800a044 <USBD_StdEPReq+0x80>
 8009fee:	2b20      	cmp	r3, #32
 8009ff0:	f040 817a 	bne.w	800a2e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ff4:	7bbb      	ldrb	r3, [r7, #14]
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f7ff fe84 	bl	8009d06 <USBD_CoreFindEP>
 8009ffe:	4603      	mov	r3, r0
 800a000:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a002:	7b7b      	ldrb	r3, [r7, #13]
 800a004:	2bff      	cmp	r3, #255	@ 0xff
 800a006:	f000 8174 	beq.w	800a2f2 <USBD_StdEPReq+0x32e>
 800a00a:	7b7b      	ldrb	r3, [r7, #13]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f040 8170 	bne.w	800a2f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a012:	7b7a      	ldrb	r2, [r7, #13]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a01a:	7b7a      	ldrb	r2, [r7, #13]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	32ae      	adds	r2, #174	@ 0xae
 800a020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	2b00      	cmp	r3, #0
 800a028:	f000 8163 	beq.w	800a2f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a02c:	7b7a      	ldrb	r2, [r7, #13]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	32ae      	adds	r2, #174	@ 0xae
 800a032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	6839      	ldr	r1, [r7, #0]
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	4798      	blx	r3
 800a03e:	4603      	mov	r3, r0
 800a040:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a042:	e156      	b.n	800a2f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	785b      	ldrb	r3, [r3, #1]
 800a048:	2b03      	cmp	r3, #3
 800a04a:	d008      	beq.n	800a05e <USBD_StdEPReq+0x9a>
 800a04c:	2b03      	cmp	r3, #3
 800a04e:	f300 8145 	bgt.w	800a2dc <USBD_StdEPReq+0x318>
 800a052:	2b00      	cmp	r3, #0
 800a054:	f000 809b 	beq.w	800a18e <USBD_StdEPReq+0x1ca>
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d03c      	beq.n	800a0d6 <USBD_StdEPReq+0x112>
 800a05c:	e13e      	b.n	800a2dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b02      	cmp	r3, #2
 800a068:	d002      	beq.n	800a070 <USBD_StdEPReq+0xac>
 800a06a:	2b03      	cmp	r3, #3
 800a06c:	d016      	beq.n	800a09c <USBD_StdEPReq+0xd8>
 800a06e:	e02c      	b.n	800a0ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a070:	7bbb      	ldrb	r3, [r7, #14]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00d      	beq.n	800a092 <USBD_StdEPReq+0xce>
 800a076:	7bbb      	ldrb	r3, [r7, #14]
 800a078:	2b80      	cmp	r3, #128	@ 0x80
 800a07a:	d00a      	beq.n	800a092 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a07c:	7bbb      	ldrb	r3, [r7, #14]
 800a07e:	4619      	mov	r1, r3
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f001 fa2a 	bl	800b4da <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a086:	2180      	movs	r1, #128	@ 0x80
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f001 fa26 	bl	800b4da <USBD_LL_StallEP>
 800a08e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a090:	e020      	b.n	800a0d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a092:	6839      	ldr	r1, [r7, #0]
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fca4 	bl	800a9e2 <USBD_CtlError>
              break;
 800a09a:	e01b      	b.n	800a0d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	885b      	ldrh	r3, [r3, #2]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d10e      	bne.n	800a0c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a0a4:	7bbb      	ldrb	r3, [r7, #14]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00b      	beq.n	800a0c2 <USBD_StdEPReq+0xfe>
 800a0aa:	7bbb      	ldrb	r3, [r7, #14]
 800a0ac:	2b80      	cmp	r3, #128	@ 0x80
 800a0ae:	d008      	beq.n	800a0c2 <USBD_StdEPReq+0xfe>
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	88db      	ldrh	r3, [r3, #6]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d104      	bne.n	800a0c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a0b8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f001 fa0c 	bl	800b4da <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fd47 	bl	800ab56 <USBD_CtlSendStatus>

              break;
 800a0c8:	e004      	b.n	800a0d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a0ca:	6839      	ldr	r1, [r7, #0]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 fc88 	bl	800a9e2 <USBD_CtlError>
              break;
 800a0d2:	bf00      	nop
          }
          break;
 800a0d4:	e107      	b.n	800a2e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d002      	beq.n	800a0e8 <USBD_StdEPReq+0x124>
 800a0e2:	2b03      	cmp	r3, #3
 800a0e4:	d016      	beq.n	800a114 <USBD_StdEPReq+0x150>
 800a0e6:	e04b      	b.n	800a180 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0e8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00d      	beq.n	800a10a <USBD_StdEPReq+0x146>
 800a0ee:	7bbb      	ldrb	r3, [r7, #14]
 800a0f0:	2b80      	cmp	r3, #128	@ 0x80
 800a0f2:	d00a      	beq.n	800a10a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a0f4:	7bbb      	ldrb	r3, [r7, #14]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f001 f9ee 	bl	800b4da <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0fe:	2180      	movs	r1, #128	@ 0x80
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f001 f9ea 	bl	800b4da <USBD_LL_StallEP>
 800a106:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a108:	e040      	b.n	800a18c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a10a:	6839      	ldr	r1, [r7, #0]
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 fc68 	bl	800a9e2 <USBD_CtlError>
              break;
 800a112:	e03b      	b.n	800a18c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	885b      	ldrh	r3, [r3, #2]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d136      	bne.n	800a18a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a11c:	7bbb      	ldrb	r3, [r7, #14]
 800a11e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a122:	2b00      	cmp	r3, #0
 800a124:	d004      	beq.n	800a130 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a126:	7bbb      	ldrb	r3, [r7, #14]
 800a128:	4619      	mov	r1, r3
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f001 f9f4 	bl	800b518 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 fd10 	bl	800ab56 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a136:	7bbb      	ldrb	r3, [r7, #14]
 800a138:	4619      	mov	r1, r3
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7ff fde3 	bl	8009d06 <USBD_CoreFindEP>
 800a140:	4603      	mov	r3, r0
 800a142:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a144:	7b7b      	ldrb	r3, [r7, #13]
 800a146:	2bff      	cmp	r3, #255	@ 0xff
 800a148:	d01f      	beq.n	800a18a <USBD_StdEPReq+0x1c6>
 800a14a:	7b7b      	ldrb	r3, [r7, #13]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d11c      	bne.n	800a18a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a150:	7b7a      	ldrb	r2, [r7, #13]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a158:	7b7a      	ldrb	r2, [r7, #13]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	32ae      	adds	r2, #174	@ 0xae
 800a15e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d010      	beq.n	800a18a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a168:	7b7a      	ldrb	r2, [r7, #13]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	32ae      	adds	r2, #174	@ 0xae
 800a16e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	6839      	ldr	r1, [r7, #0]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	4798      	blx	r3
 800a17a:	4603      	mov	r3, r0
 800a17c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a17e:	e004      	b.n	800a18a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a180:	6839      	ldr	r1, [r7, #0]
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 fc2d 	bl	800a9e2 <USBD_CtlError>
              break;
 800a188:	e000      	b.n	800a18c <USBD_StdEPReq+0x1c8>
              break;
 800a18a:	bf00      	nop
          }
          break;
 800a18c:	e0ab      	b.n	800a2e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b02      	cmp	r3, #2
 800a198:	d002      	beq.n	800a1a0 <USBD_StdEPReq+0x1dc>
 800a19a:	2b03      	cmp	r3, #3
 800a19c:	d032      	beq.n	800a204 <USBD_StdEPReq+0x240>
 800a19e:	e097      	b.n	800a2d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1a0:	7bbb      	ldrb	r3, [r7, #14]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d007      	beq.n	800a1b6 <USBD_StdEPReq+0x1f2>
 800a1a6:	7bbb      	ldrb	r3, [r7, #14]
 800a1a8:	2b80      	cmp	r3, #128	@ 0x80
 800a1aa:	d004      	beq.n	800a1b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a1ac:	6839      	ldr	r1, [r7, #0]
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 fc17 	bl	800a9e2 <USBD_CtlError>
                break;
 800a1b4:	e091      	b.n	800a2da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	da0b      	bge.n	800a1d6 <USBD_StdEPReq+0x212>
 800a1be:	7bbb      	ldrb	r3, [r7, #14]
 800a1c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	4413      	add	r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	3310      	adds	r3, #16
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	4413      	add	r3, r2
 800a1d2:	3304      	adds	r3, #4
 800a1d4:	e00b      	b.n	800a1ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a1d6:	7bbb      	ldrb	r3, [r7, #14]
 800a1d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1dc:	4613      	mov	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	4413      	add	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	3304      	adds	r3, #4
 800a1ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	2202      	movs	r2, #2
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 fc6d 	bl	800aadc <USBD_CtlSendData>
              break;
 800a202:	e06a      	b.n	800a2da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a204:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	da11      	bge.n	800a230 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a20c:	7bbb      	ldrb	r3, [r7, #14]
 800a20e:	f003 020f 	and.w	r2, r3, #15
 800a212:	6879      	ldr	r1, [r7, #4]
 800a214:	4613      	mov	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	4413      	add	r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	440b      	add	r3, r1
 800a21e:	3324      	adds	r3, #36	@ 0x24
 800a220:	881b      	ldrh	r3, [r3, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d117      	bne.n	800a256 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a226:	6839      	ldr	r1, [r7, #0]
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 fbda 	bl	800a9e2 <USBD_CtlError>
                  break;
 800a22e:	e054      	b.n	800a2da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a230:	7bbb      	ldrb	r3, [r7, #14]
 800a232:	f003 020f 	and.w	r2, r3, #15
 800a236:	6879      	ldr	r1, [r7, #4]
 800a238:	4613      	mov	r3, r2
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	4413      	add	r3, r2
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	440b      	add	r3, r1
 800a242:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a246:	881b      	ldrh	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d104      	bne.n	800a256 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a24c:	6839      	ldr	r1, [r7, #0]
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fbc7 	bl	800a9e2 <USBD_CtlError>
                  break;
 800a254:	e041      	b.n	800a2da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a256:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	da0b      	bge.n	800a276 <USBD_StdEPReq+0x2b2>
 800a25e:	7bbb      	ldrb	r3, [r7, #14]
 800a260:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a264:	4613      	mov	r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4413      	add	r3, r2
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	3310      	adds	r3, #16
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	4413      	add	r3, r2
 800a272:	3304      	adds	r3, #4
 800a274:	e00b      	b.n	800a28e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a276:	7bbb      	ldrb	r3, [r7, #14]
 800a278:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a27c:	4613      	mov	r3, r2
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	4413      	add	r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	4413      	add	r3, r2
 800a28c:	3304      	adds	r3, #4
 800a28e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a290:	7bbb      	ldrb	r3, [r7, #14]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d002      	beq.n	800a29c <USBD_StdEPReq+0x2d8>
 800a296:	7bbb      	ldrb	r3, [r7, #14]
 800a298:	2b80      	cmp	r3, #128	@ 0x80
 800a29a:	d103      	bne.n	800a2a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	601a      	str	r2, [r3, #0]
 800a2a2:	e00e      	b.n	800a2c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a2a4:	7bbb      	ldrb	r3, [r7, #14]
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f001 f954 	bl	800b556 <USBD_LL_IsStallEP>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d003      	beq.n	800a2bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	601a      	str	r2, [r3, #0]
 800a2ba:	e002      	b.n	800a2c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	2202      	movs	r2, #2
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fc07 	bl	800aadc <USBD_CtlSendData>
              break;
 800a2ce:	e004      	b.n	800a2da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a2d0:	6839      	ldr	r1, [r7, #0]
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fb85 	bl	800a9e2 <USBD_CtlError>
              break;
 800a2d8:	bf00      	nop
          }
          break;
 800a2da:	e004      	b.n	800a2e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a2dc:	6839      	ldr	r1, [r7, #0]
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fb7f 	bl	800a9e2 <USBD_CtlError>
          break;
 800a2e4:	bf00      	nop
      }
      break;
 800a2e6:	e005      	b.n	800a2f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a2e8:	6839      	ldr	r1, [r7, #0]
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 fb79 	bl	800a9e2 <USBD_CtlError>
      break;
 800a2f0:	e000      	b.n	800a2f4 <USBD_StdEPReq+0x330>
      break;
 800a2f2:	bf00      	nop
  }

  return ret;
 800a2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
	...

0800a300 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a30a:	2300      	movs	r3, #0
 800a30c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a30e:	2300      	movs	r3, #0
 800a310:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a312:	2300      	movs	r3, #0
 800a314:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	885b      	ldrh	r3, [r3, #2]
 800a31a:	0a1b      	lsrs	r3, r3, #8
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	3b01      	subs	r3, #1
 800a320:	2b0e      	cmp	r3, #14
 800a322:	f200 8152 	bhi.w	800a5ca <USBD_GetDescriptor+0x2ca>
 800a326:	a201      	add	r2, pc, #4	@ (adr r2, 800a32c <USBD_GetDescriptor+0x2c>)
 800a328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a32c:	0800a39d 	.word	0x0800a39d
 800a330:	0800a3b5 	.word	0x0800a3b5
 800a334:	0800a3f5 	.word	0x0800a3f5
 800a338:	0800a5cb 	.word	0x0800a5cb
 800a33c:	0800a5cb 	.word	0x0800a5cb
 800a340:	0800a56b 	.word	0x0800a56b
 800a344:	0800a597 	.word	0x0800a597
 800a348:	0800a5cb 	.word	0x0800a5cb
 800a34c:	0800a5cb 	.word	0x0800a5cb
 800a350:	0800a5cb 	.word	0x0800a5cb
 800a354:	0800a5cb 	.word	0x0800a5cb
 800a358:	0800a5cb 	.word	0x0800a5cb
 800a35c:	0800a5cb 	.word	0x0800a5cb
 800a360:	0800a5cb 	.word	0x0800a5cb
 800a364:	0800a369 	.word	0x0800a369
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a36e:	69db      	ldr	r3, [r3, #28]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00b      	beq.n	800a38c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a37a:	69db      	ldr	r3, [r3, #28]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	7c12      	ldrb	r2, [r2, #16]
 800a380:	f107 0108 	add.w	r1, r7, #8
 800a384:	4610      	mov	r0, r2
 800a386:	4798      	blx	r3
 800a388:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a38a:	e126      	b.n	800a5da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a38c:	6839      	ldr	r1, [r7, #0]
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 fb27 	bl	800a9e2 <USBD_CtlError>
        err++;
 800a394:	7afb      	ldrb	r3, [r7, #11]
 800a396:	3301      	adds	r3, #1
 800a398:	72fb      	strb	r3, [r7, #11]
      break;
 800a39a:	e11e      	b.n	800a5da <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	7c12      	ldrb	r2, [r2, #16]
 800a3a8:	f107 0108 	add.w	r1, r7, #8
 800a3ac:	4610      	mov	r0, r2
 800a3ae:	4798      	blx	r3
 800a3b0:	60f8      	str	r0, [r7, #12]
      break;
 800a3b2:	e112      	b.n	800a5da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	7c1b      	ldrb	r3, [r3, #16]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d10d      	bne.n	800a3d8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c4:	f107 0208 	add.w	r2, r7, #8
 800a3c8:	4610      	mov	r0, r2
 800a3ca:	4798      	blx	r3
 800a3cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	2202      	movs	r2, #2
 800a3d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a3d6:	e100      	b.n	800a5da <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e0:	f107 0208 	add.w	r2, r7, #8
 800a3e4:	4610      	mov	r0, r2
 800a3e6:	4798      	blx	r3
 800a3e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	2202      	movs	r2, #2
 800a3f0:	701a      	strb	r2, [r3, #0]
      break;
 800a3f2:	e0f2      	b.n	800a5da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	885b      	ldrh	r3, [r3, #2]
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b05      	cmp	r3, #5
 800a3fc:	f200 80ac 	bhi.w	800a558 <USBD_GetDescriptor+0x258>
 800a400:	a201      	add	r2, pc, #4	@ (adr r2, 800a408 <USBD_GetDescriptor+0x108>)
 800a402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a406:	bf00      	nop
 800a408:	0800a421 	.word	0x0800a421
 800a40c:	0800a455 	.word	0x0800a455
 800a410:	0800a489 	.word	0x0800a489
 800a414:	0800a4bd 	.word	0x0800a4bd
 800a418:	0800a4f1 	.word	0x0800a4f1
 800a41c:	0800a525 	.word	0x0800a525
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00b      	beq.n	800a444 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	7c12      	ldrb	r2, [r2, #16]
 800a438:	f107 0108 	add.w	r1, r7, #8
 800a43c:	4610      	mov	r0, r2
 800a43e:	4798      	blx	r3
 800a440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a442:	e091      	b.n	800a568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a444:	6839      	ldr	r1, [r7, #0]
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 facb 	bl	800a9e2 <USBD_CtlError>
            err++;
 800a44c:	7afb      	ldrb	r3, [r7, #11]
 800a44e:	3301      	adds	r3, #1
 800a450:	72fb      	strb	r3, [r7, #11]
          break;
 800a452:	e089      	b.n	800a568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00b      	beq.n	800a478 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	7c12      	ldrb	r2, [r2, #16]
 800a46c:	f107 0108 	add.w	r1, r7, #8
 800a470:	4610      	mov	r0, r2
 800a472:	4798      	blx	r3
 800a474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a476:	e077      	b.n	800a568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 fab1 	bl	800a9e2 <USBD_CtlError>
            err++;
 800a480:	7afb      	ldrb	r3, [r7, #11]
 800a482:	3301      	adds	r3, #1
 800a484:	72fb      	strb	r3, [r7, #11]
          break;
 800a486:	e06f      	b.n	800a568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00b      	beq.n	800a4ac <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	7c12      	ldrb	r2, [r2, #16]
 800a4a0:	f107 0108 	add.w	r1, r7, #8
 800a4a4:	4610      	mov	r0, r2
 800a4a6:	4798      	blx	r3
 800a4a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4aa:	e05d      	b.n	800a568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 fa97 	bl	800a9e2 <USBD_CtlError>
            err++;
 800a4b4:	7afb      	ldrb	r3, [r7, #11]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	72fb      	strb	r3, [r7, #11]
          break;
 800a4ba:	e055      	b.n	800a568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4c2:	691b      	ldr	r3, [r3, #16]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00b      	beq.n	800a4e0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	7c12      	ldrb	r2, [r2, #16]
 800a4d4:	f107 0108 	add.w	r1, r7, #8
 800a4d8:	4610      	mov	r0, r2
 800a4da:	4798      	blx	r3
 800a4dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4de:	e043      	b.n	800a568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4e0:	6839      	ldr	r1, [r7, #0]
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 fa7d 	bl	800a9e2 <USBD_CtlError>
            err++;
 800a4e8:	7afb      	ldrb	r3, [r7, #11]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	72fb      	strb	r3, [r7, #11]
          break;
 800a4ee:	e03b      	b.n	800a568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4f6:	695b      	ldr	r3, [r3, #20]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00b      	beq.n	800a514 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a502:	695b      	ldr	r3, [r3, #20]
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	7c12      	ldrb	r2, [r2, #16]
 800a508:	f107 0108 	add.w	r1, r7, #8
 800a50c:	4610      	mov	r0, r2
 800a50e:	4798      	blx	r3
 800a510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a512:	e029      	b.n	800a568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a514:	6839      	ldr	r1, [r7, #0]
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 fa63 	bl	800a9e2 <USBD_CtlError>
            err++;
 800a51c:	7afb      	ldrb	r3, [r7, #11]
 800a51e:	3301      	adds	r3, #1
 800a520:	72fb      	strb	r3, [r7, #11]
          break;
 800a522:	e021      	b.n	800a568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a52a:	699b      	ldr	r3, [r3, #24]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00b      	beq.n	800a548 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a536:	699b      	ldr	r3, [r3, #24]
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	7c12      	ldrb	r2, [r2, #16]
 800a53c:	f107 0108 	add.w	r1, r7, #8
 800a540:	4610      	mov	r0, r2
 800a542:	4798      	blx	r3
 800a544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a546:	e00f      	b.n	800a568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a548:	6839      	ldr	r1, [r7, #0]
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 fa49 	bl	800a9e2 <USBD_CtlError>
            err++;
 800a550:	7afb      	ldrb	r3, [r7, #11]
 800a552:	3301      	adds	r3, #1
 800a554:	72fb      	strb	r3, [r7, #11]
          break;
 800a556:	e007      	b.n	800a568 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a558:	6839      	ldr	r1, [r7, #0]
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fa41 	bl	800a9e2 <USBD_CtlError>
          err++;
 800a560:	7afb      	ldrb	r3, [r7, #11]
 800a562:	3301      	adds	r3, #1
 800a564:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a566:	bf00      	nop
      }
      break;
 800a568:	e037      	b.n	800a5da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	7c1b      	ldrb	r3, [r3, #16]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d109      	bne.n	800a586 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a57a:	f107 0208 	add.w	r2, r7, #8
 800a57e:	4610      	mov	r0, r2
 800a580:	4798      	blx	r3
 800a582:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a584:	e029      	b.n	800a5da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a586:	6839      	ldr	r1, [r7, #0]
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 fa2a 	bl	800a9e2 <USBD_CtlError>
        err++;
 800a58e:	7afb      	ldrb	r3, [r7, #11]
 800a590:	3301      	adds	r3, #1
 800a592:	72fb      	strb	r3, [r7, #11]
      break;
 800a594:	e021      	b.n	800a5da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	7c1b      	ldrb	r3, [r3, #16]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d10d      	bne.n	800a5ba <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5a6:	f107 0208 	add.w	r2, r7, #8
 800a5aa:	4610      	mov	r0, r2
 800a5ac:	4798      	blx	r3
 800a5ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	2207      	movs	r2, #7
 800a5b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a5b8:	e00f      	b.n	800a5da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a5ba:	6839      	ldr	r1, [r7, #0]
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 fa10 	bl	800a9e2 <USBD_CtlError>
        err++;
 800a5c2:	7afb      	ldrb	r3, [r7, #11]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	72fb      	strb	r3, [r7, #11]
      break;
 800a5c8:	e007      	b.n	800a5da <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a5ca:	6839      	ldr	r1, [r7, #0]
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 fa08 	bl	800a9e2 <USBD_CtlError>
      err++;
 800a5d2:	7afb      	ldrb	r3, [r7, #11]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	72fb      	strb	r3, [r7, #11]
      break;
 800a5d8:	bf00      	nop
  }

  if (err != 0U)
 800a5da:	7afb      	ldrb	r3, [r7, #11]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d11e      	bne.n	800a61e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	88db      	ldrh	r3, [r3, #6]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d016      	beq.n	800a616 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a5e8:	893b      	ldrh	r3, [r7, #8]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00e      	beq.n	800a60c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	88da      	ldrh	r2, [r3, #6]
 800a5f2:	893b      	ldrh	r3, [r7, #8]
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	bf28      	it	cs
 800a5f8:	4613      	movcs	r3, r2
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a5fe:	893b      	ldrh	r3, [r7, #8]
 800a600:	461a      	mov	r2, r3
 800a602:	68f9      	ldr	r1, [r7, #12]
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 fa69 	bl	800aadc <USBD_CtlSendData>
 800a60a:	e009      	b.n	800a620 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a60c:	6839      	ldr	r1, [r7, #0]
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f9e7 	bl	800a9e2 <USBD_CtlError>
 800a614:	e004      	b.n	800a620 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 fa9d 	bl	800ab56 <USBD_CtlSendStatus>
 800a61c:	e000      	b.n	800a620 <USBD_GetDescriptor+0x320>
    return;
 800a61e:	bf00      	nop
  }
}
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop

0800a628 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	889b      	ldrh	r3, [r3, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d131      	bne.n	800a69e <USBD_SetAddress+0x76>
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	88db      	ldrh	r3, [r3, #6]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d12d      	bne.n	800a69e <USBD_SetAddress+0x76>
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	885b      	ldrh	r3, [r3, #2]
 800a646:	2b7f      	cmp	r3, #127	@ 0x7f
 800a648:	d829      	bhi.n	800a69e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	885b      	ldrh	r3, [r3, #2]
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a654:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	2b03      	cmp	r3, #3
 800a660:	d104      	bne.n	800a66c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a662:	6839      	ldr	r1, [r7, #0]
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 f9bc 	bl	800a9e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a66a:	e01d      	b.n	800a6a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	7bfa      	ldrb	r2, [r7, #15]
 800a670:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a674:	7bfb      	ldrb	r3, [r7, #15]
 800a676:	4619      	mov	r1, r3
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 ff98 	bl	800b5ae <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 fa69 	bl	800ab56 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a684:	7bfb      	ldrb	r3, [r7, #15]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d004      	beq.n	800a694 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2202      	movs	r2, #2
 800a68e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a692:	e009      	b.n	800a6a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2201      	movs	r2, #1
 800a698:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a69c:	e004      	b.n	800a6a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a69e:	6839      	ldr	r1, [r7, #0]
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 f99e 	bl	800a9e2 <USBD_CtlError>
  }
}
 800a6a6:	bf00      	nop
 800a6a8:	bf00      	nop
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	885b      	ldrh	r3, [r3, #2]
 800a6c2:	b2da      	uxtb	r2, r3
 800a6c4:	4b4e      	ldr	r3, [pc, #312]	@ (800a800 <USBD_SetConfig+0x150>)
 800a6c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a6c8:	4b4d      	ldr	r3, [pc, #308]	@ (800a800 <USBD_SetConfig+0x150>)
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d905      	bls.n	800a6dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a6d0:	6839      	ldr	r1, [r7, #0]
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 f985 	bl	800a9e2 <USBD_CtlError>
    return USBD_FAIL;
 800a6d8:	2303      	movs	r3, #3
 800a6da:	e08c      	b.n	800a7f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	2b02      	cmp	r3, #2
 800a6e6:	d002      	beq.n	800a6ee <USBD_SetConfig+0x3e>
 800a6e8:	2b03      	cmp	r3, #3
 800a6ea:	d029      	beq.n	800a740 <USBD_SetConfig+0x90>
 800a6ec:	e075      	b.n	800a7da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a6ee:	4b44      	ldr	r3, [pc, #272]	@ (800a800 <USBD_SetConfig+0x150>)
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d020      	beq.n	800a738 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a6f6:	4b42      	ldr	r3, [pc, #264]	@ (800a800 <USBD_SetConfig+0x150>)
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a700:	4b3f      	ldr	r3, [pc, #252]	@ (800a800 <USBD_SetConfig+0x150>)
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	4619      	mov	r1, r3
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f7fe ffb8 	bl	800967c <USBD_SetClassConfig>
 800a70c:	4603      	mov	r3, r0
 800a70e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a710:	7bfb      	ldrb	r3, [r7, #15]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d008      	beq.n	800a728 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 f962 	bl	800a9e2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2202      	movs	r2, #2
 800a722:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a726:	e065      	b.n	800a7f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 fa14 	bl	800ab56 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2203      	movs	r2, #3
 800a732:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a736:	e05d      	b.n	800a7f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 fa0c 	bl	800ab56 <USBD_CtlSendStatus>
      break;
 800a73e:	e059      	b.n	800a7f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a740:	4b2f      	ldr	r3, [pc, #188]	@ (800a800 <USBD_SetConfig+0x150>)
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d112      	bne.n	800a76e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2202      	movs	r2, #2
 800a74c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a750:	4b2b      	ldr	r3, [pc, #172]	@ (800a800 <USBD_SetConfig+0x150>)
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	461a      	mov	r2, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a75a:	4b29      	ldr	r3, [pc, #164]	@ (800a800 <USBD_SetConfig+0x150>)
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f7fe ffa7 	bl	80096b4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f9f5 	bl	800ab56 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a76c:	e042      	b.n	800a7f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a76e:	4b24      	ldr	r3, [pc, #144]	@ (800a800 <USBD_SetConfig+0x150>)
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	461a      	mov	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d02a      	beq.n	800a7d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	b2db      	uxtb	r3, r3
 800a782:	4619      	mov	r1, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f7fe ff95 	bl	80096b4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a78a:	4b1d      	ldr	r3, [pc, #116]	@ (800a800 <USBD_SetConfig+0x150>)
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	461a      	mov	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a794:	4b1a      	ldr	r3, [pc, #104]	@ (800a800 <USBD_SetConfig+0x150>)
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	4619      	mov	r1, r3
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7fe ff6e 	bl	800967c <USBD_SetClassConfig>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00f      	beq.n	800a7ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a7aa:	6839      	ldr	r1, [r7, #0]
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f918 	bl	800a9e2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f7fe ff7a 	bl	80096b4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2202      	movs	r2, #2
 800a7c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a7c8:	e014      	b.n	800a7f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f9c3 	bl	800ab56 <USBD_CtlSendStatus>
      break;
 800a7d0:	e010      	b.n	800a7f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 f9bf 	bl	800ab56 <USBD_CtlSendStatus>
      break;
 800a7d8:	e00c      	b.n	800a7f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a7da:	6839      	ldr	r1, [r7, #0]
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 f900 	bl	800a9e2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a7e2:	4b07      	ldr	r3, [pc, #28]	@ (800a800 <USBD_SetConfig+0x150>)
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f7fe ff63 	bl	80096b4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a7f2:	bf00      	nop
  }

  return ret;
 800a7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	240001ac 	.word	0x240001ac

0800a804 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	88db      	ldrh	r3, [r3, #6]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d004      	beq.n	800a820 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a816:	6839      	ldr	r1, [r7, #0]
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 f8e2 	bl	800a9e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a81e:	e023      	b.n	800a868 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a826:	b2db      	uxtb	r3, r3
 800a828:	2b02      	cmp	r3, #2
 800a82a:	dc02      	bgt.n	800a832 <USBD_GetConfig+0x2e>
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	dc03      	bgt.n	800a838 <USBD_GetConfig+0x34>
 800a830:	e015      	b.n	800a85e <USBD_GetConfig+0x5a>
 800a832:	2b03      	cmp	r3, #3
 800a834:	d00b      	beq.n	800a84e <USBD_GetConfig+0x4a>
 800a836:	e012      	b.n	800a85e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	3308      	adds	r3, #8
 800a842:	2201      	movs	r2, #1
 800a844:	4619      	mov	r1, r3
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f948 	bl	800aadc <USBD_CtlSendData>
        break;
 800a84c:	e00c      	b.n	800a868 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	3304      	adds	r3, #4
 800a852:	2201      	movs	r2, #1
 800a854:	4619      	mov	r1, r3
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 f940 	bl	800aadc <USBD_CtlSendData>
        break;
 800a85c:	e004      	b.n	800a868 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a85e:	6839      	ldr	r1, [r7, #0]
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 f8be 	bl	800a9e2 <USBD_CtlError>
        break;
 800a866:	bf00      	nop
}
 800a868:	bf00      	nop
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a880:	b2db      	uxtb	r3, r3
 800a882:	3b01      	subs	r3, #1
 800a884:	2b02      	cmp	r3, #2
 800a886:	d81e      	bhi.n	800a8c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	88db      	ldrh	r3, [r3, #6]
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	d004      	beq.n	800a89a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a890:	6839      	ldr	r1, [r7, #0]
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 f8a5 	bl	800a9e2 <USBD_CtlError>
        break;
 800a898:	e01a      	b.n	800a8d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2201      	movs	r2, #1
 800a89e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d005      	beq.n	800a8b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	f043 0202 	orr.w	r2, r3, #2
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	330c      	adds	r3, #12
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	4619      	mov	r1, r3
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 f90c 	bl	800aadc <USBD_CtlSendData>
      break;
 800a8c4:	e004      	b.n	800a8d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 f88a 	bl	800a9e2 <USBD_CtlError>
      break;
 800a8ce:	bf00      	nop
  }
}
 800a8d0:	bf00      	nop
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	885b      	ldrh	r3, [r3, #2]
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d107      	bne.n	800a8fa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 f92f 	bl	800ab56 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a8f8:	e013      	b.n	800a922 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	885b      	ldrh	r3, [r3, #2]
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d10b      	bne.n	800a91a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	889b      	ldrh	r3, [r3, #4]
 800a906:	0a1b      	lsrs	r3, r3, #8
 800a908:	b29b      	uxth	r3, r3
 800a90a:	b2da      	uxtb	r2, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 f91f 	bl	800ab56 <USBD_CtlSendStatus>
}
 800a918:	e003      	b.n	800a922 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a91a:	6839      	ldr	r1, [r7, #0]
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 f860 	bl	800a9e2 <USBD_CtlError>
}
 800a922:	bf00      	nop
 800a924:	3708      	adds	r7, #8
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b082      	sub	sp, #8
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	3b01      	subs	r3, #1
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d80b      	bhi.n	800a95a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	885b      	ldrh	r3, [r3, #2]
 800a946:	2b01      	cmp	r3, #1
 800a948:	d10c      	bne.n	800a964 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 f8ff 	bl	800ab56 <USBD_CtlSendStatus>
      }
      break;
 800a958:	e004      	b.n	800a964 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 f840 	bl	800a9e2 <USBD_CtlError>
      break;
 800a962:	e000      	b.n	800a966 <USBD_ClrFeature+0x3c>
      break;
 800a964:	bf00      	nop
  }
}
 800a966:	bf00      	nop
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b084      	sub	sp, #16
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	781a      	ldrb	r2, [r3, #0]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	3301      	adds	r3, #1
 800a988:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	781a      	ldrb	r2, [r3, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	3301      	adds	r3, #1
 800a996:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f7ff fa15 	bl	8009dc8 <SWAPBYTE>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f7ff fa08 	bl	8009dc8 <SWAPBYTE>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f7ff f9fb 	bl	8009dc8 <SWAPBYTE>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	80da      	strh	r2, [r3, #6]
}
 800a9da:	bf00      	nop
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b082      	sub	sp, #8
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9ec:	2180      	movs	r1, #128	@ 0x80
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 fd73 	bl	800b4da <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 fd6f 	bl	800b4da <USBD_LL_StallEP>
}
 800a9fc:	bf00      	nop
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b086      	sub	sp, #24
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aa10:	2300      	movs	r3, #0
 800aa12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d042      	beq.n	800aaa0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800aa1e:	6938      	ldr	r0, [r7, #16]
 800aa20:	f000 f842 	bl	800aaa8 <USBD_GetLen>
 800aa24:	4603      	mov	r3, r0
 800aa26:	3301      	adds	r3, #1
 800aa28:	005b      	lsls	r3, r3, #1
 800aa2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa2e:	d808      	bhi.n	800aa42 <USBD_GetString+0x3e>
 800aa30:	6938      	ldr	r0, [r7, #16]
 800aa32:	f000 f839 	bl	800aaa8 <USBD_GetLen>
 800aa36:	4603      	mov	r3, r0
 800aa38:	3301      	adds	r3, #1
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	005b      	lsls	r3, r3, #1
 800aa3e:	b29a      	uxth	r2, r3
 800aa40:	e001      	b.n	800aa46 <USBD_GetString+0x42>
 800aa42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aa4a:	7dfb      	ldrb	r3, [r7, #23]
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	4413      	add	r3, r2
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	7812      	ldrb	r2, [r2, #0]
 800aa54:	701a      	strb	r2, [r3, #0]
  idx++;
 800aa56:	7dfb      	ldrb	r3, [r7, #23]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aa5c:	7dfb      	ldrb	r3, [r7, #23]
 800aa5e:	68ba      	ldr	r2, [r7, #8]
 800aa60:	4413      	add	r3, r2
 800aa62:	2203      	movs	r2, #3
 800aa64:	701a      	strb	r2, [r3, #0]
  idx++;
 800aa66:	7dfb      	ldrb	r3, [r7, #23]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aa6c:	e013      	b.n	800aa96 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800aa6e:	7dfb      	ldrb	r3, [r7, #23]
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	4413      	add	r3, r2
 800aa74:	693a      	ldr	r2, [r7, #16]
 800aa76:	7812      	ldrb	r2, [r2, #0]
 800aa78:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	613b      	str	r3, [r7, #16]
    idx++;
 800aa80:	7dfb      	ldrb	r3, [r7, #23]
 800aa82:	3301      	adds	r3, #1
 800aa84:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aa86:	7dfb      	ldrb	r3, [r7, #23]
 800aa88:	68ba      	ldr	r2, [r7, #8]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	701a      	strb	r2, [r3, #0]
    idx++;
 800aa90:	7dfb      	ldrb	r3, [r7, #23]
 800aa92:	3301      	adds	r3, #1
 800aa94:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1e7      	bne.n	800aa6e <USBD_GetString+0x6a>
 800aa9e:	e000      	b.n	800aaa2 <USBD_GetString+0x9e>
    return;
 800aaa0:	bf00      	nop
  }
}
 800aaa2:	3718      	adds	r7, #24
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aab0:	2300      	movs	r3, #0
 800aab2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aab8:	e005      	b.n	800aac6 <USBD_GetLen+0x1e>
  {
    len++;
 800aaba:	7bfb      	ldrb	r3, [r7, #15]
 800aabc:	3301      	adds	r3, #1
 800aabe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	3301      	adds	r3, #1
 800aac4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1f5      	bne.n	800aaba <USBD_GetLen+0x12>
  }

  return len;
 800aace:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3714      	adds	r7, #20
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2202      	movs	r2, #2
 800aaec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	68ba      	ldr	r2, [r7, #8]
 800ab00:	2100      	movs	r1, #0
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f000 fd72 	bl	800b5ec <USBD_LL_Transmit>

  return USBD_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b084      	sub	sp, #16
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	60f8      	str	r0, [r7, #12]
 800ab1a:	60b9      	str	r1, [r7, #8]
 800ab1c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	2100      	movs	r1, #0
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	f000 fd61 	bl	800b5ec <USBD_LL_Transmit>

  return USBD_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	2100      	movs	r1, #0
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	f000 fd71 	bl	800b62e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3710      	adds	r7, #16
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b082      	sub	sp, #8
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2204      	movs	r2, #4
 800ab62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ab66:	2300      	movs	r3, #0
 800ab68:	2200      	movs	r2, #0
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 fd3d 	bl	800b5ec <USBD_LL_Transmit>

  return USBD_OK;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2205      	movs	r2, #5
 800ab88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	2200      	movs	r2, #0
 800ab90:	2100      	movs	r1, #0
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 fd4b 	bl	800b62e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
	...

0800aba4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800aba8:	2201      	movs	r2, #1
 800abaa:	4913      	ldr	r1, [pc, #76]	@ (800abf8 <MX_USB_DEVICE_Init+0x54>)
 800abac:	4813      	ldr	r0, [pc, #76]	@ (800abfc <MX_USB_DEVICE_Init+0x58>)
 800abae:	f7fe fce8 	bl	8009582 <USBD_Init>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d001      	beq.n	800abbc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800abb8:	f7f5 ff6e 	bl	8000a98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_MSC) != USBD_OK)
 800abbc:	4910      	ldr	r1, [pc, #64]	@ (800ac00 <MX_USB_DEVICE_Init+0x5c>)
 800abbe:	480f      	ldr	r0, [pc, #60]	@ (800abfc <MX_USB_DEVICE_Init+0x58>)
 800abc0:	f7fe fd0f 	bl	80095e2 <USBD_RegisterClass>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d001      	beq.n	800abce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800abca:	f7f5 ff65 	bl	8000a98 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceHS, &USBD_Storage_Interface_fops_HS) != USBD_OK)
 800abce:	490d      	ldr	r1, [pc, #52]	@ (800ac04 <MX_USB_DEVICE_Init+0x60>)
 800abd0:	480a      	ldr	r0, [pc, #40]	@ (800abfc <MX_USB_DEVICE_Init+0x58>)
 800abd2:	f7fc ff8d 	bl	8007af0 <USBD_MSC_RegisterStorage>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d001      	beq.n	800abe0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800abdc:	f7f5 ff5c 	bl	8000a98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800abe0:	4806      	ldr	r0, [pc, #24]	@ (800abfc <MX_USB_DEVICE_Init+0x58>)
 800abe2:	f7fe fd34 	bl	800964e <USBD_Start>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d001      	beq.n	800abf0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800abec:	f7f5 ff54 	bl	8000a98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800abf0:	f7f8 fa66 	bl	80030c0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800abf4:	bf00      	nop
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	24000090 	.word	0x24000090
 800abfc:	240001b0 	.word	0x240001b0
 800ac00:	24000010 	.word	0x24000010
 800ac04:	240000e4 	.word	0x240000e4

0800ac08 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	4603      	mov	r3, r0
 800ac10:	6039      	str	r1, [r7, #0]
 800ac12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	2212      	movs	r2, #18
 800ac18:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800ac1a:	4b03      	ldr	r3, [pc, #12]	@ (800ac28 <USBD_HS_DeviceDescriptor+0x20>)
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr
 800ac28:	240000b0 	.word	0x240000b0

0800ac2c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	4603      	mov	r3, r0
 800ac34:	6039      	str	r1, [r7, #0]
 800ac36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	2204      	movs	r2, #4
 800ac3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ac3e:	4b03      	ldr	r3, [pc, #12]	@ (800ac4c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr
 800ac4c:	240000c4 	.word	0x240000c4

0800ac50 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	4603      	mov	r3, r0
 800ac58:	6039      	str	r1, [r7, #0]
 800ac5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac5c:	79fb      	ldrb	r3, [r7, #7]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d105      	bne.n	800ac6e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	4907      	ldr	r1, [pc, #28]	@ (800ac84 <USBD_HS_ProductStrDescriptor+0x34>)
 800ac66:	4808      	ldr	r0, [pc, #32]	@ (800ac88 <USBD_HS_ProductStrDescriptor+0x38>)
 800ac68:	f7ff fecc 	bl	800aa04 <USBD_GetString>
 800ac6c:	e004      	b.n	800ac78 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ac6e:	683a      	ldr	r2, [r7, #0]
 800ac70:	4904      	ldr	r1, [pc, #16]	@ (800ac84 <USBD_HS_ProductStrDescriptor+0x34>)
 800ac72:	4805      	ldr	r0, [pc, #20]	@ (800ac88 <USBD_HS_ProductStrDescriptor+0x38>)
 800ac74:	f7ff fec6 	bl	800aa04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac78:	4b02      	ldr	r3, [pc, #8]	@ (800ac84 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3708      	adds	r7, #8
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	2400048c 	.word	0x2400048c
 800ac88:	0800b790 	.word	0x0800b790

0800ac8c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	4603      	mov	r3, r0
 800ac94:	6039      	str	r1, [r7, #0]
 800ac96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac98:	683a      	ldr	r2, [r7, #0]
 800ac9a:	4904      	ldr	r1, [pc, #16]	@ (800acac <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800ac9c:	4804      	ldr	r0, [pc, #16]	@ (800acb0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800ac9e:	f7ff feb1 	bl	800aa04 <USBD_GetString>
  return USBD_StrDesc;
 800aca2:	4b02      	ldr	r3, [pc, #8]	@ (800acac <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3708      	adds	r7, #8
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	2400048c 	.word	0x2400048c
 800acb0:	0800b7a4 	.word	0x0800b7a4

0800acb4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	4603      	mov	r3, r0
 800acbc:	6039      	str	r1, [r7, #0]
 800acbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	221a      	movs	r2, #26
 800acc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800acc6:	f000 f843 	bl	800ad50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800acca:	4b02      	ldr	r3, [pc, #8]	@ (800acd4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800accc:	4618      	mov	r0, r3
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	240000c8 	.word	0x240000c8

0800acd8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	4603      	mov	r3, r0
 800ace0:	6039      	str	r1, [r7, #0]
 800ace2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ace4:	79fb      	ldrb	r3, [r7, #7]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d105      	bne.n	800acf6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800acea:	683a      	ldr	r2, [r7, #0]
 800acec:	4907      	ldr	r1, [pc, #28]	@ (800ad0c <USBD_HS_ConfigStrDescriptor+0x34>)
 800acee:	4808      	ldr	r0, [pc, #32]	@ (800ad10 <USBD_HS_ConfigStrDescriptor+0x38>)
 800acf0:	f7ff fe88 	bl	800aa04 <USBD_GetString>
 800acf4:	e004      	b.n	800ad00 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800acf6:	683a      	ldr	r2, [r7, #0]
 800acf8:	4904      	ldr	r1, [pc, #16]	@ (800ad0c <USBD_HS_ConfigStrDescriptor+0x34>)
 800acfa:	4805      	ldr	r0, [pc, #20]	@ (800ad10 <USBD_HS_ConfigStrDescriptor+0x38>)
 800acfc:	f7ff fe82 	bl	800aa04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad00:	4b02      	ldr	r3, [pc, #8]	@ (800ad0c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3708      	adds	r7, #8
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	2400048c 	.word	0x2400048c
 800ad10:	0800b7b8 	.word	0x0800b7b8

0800ad14 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	6039      	str	r1, [r7, #0]
 800ad1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad20:	79fb      	ldrb	r3, [r7, #7]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d105      	bne.n	800ad32 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ad26:	683a      	ldr	r2, [r7, #0]
 800ad28:	4907      	ldr	r1, [pc, #28]	@ (800ad48 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ad2a:	4808      	ldr	r0, [pc, #32]	@ (800ad4c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ad2c:	f7ff fe6a 	bl	800aa04 <USBD_GetString>
 800ad30:	e004      	b.n	800ad3c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ad32:	683a      	ldr	r2, [r7, #0]
 800ad34:	4904      	ldr	r1, [pc, #16]	@ (800ad48 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ad36:	4805      	ldr	r0, [pc, #20]	@ (800ad4c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ad38:	f7ff fe64 	bl	800aa04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad3c:	4b02      	ldr	r3, [pc, #8]	@ (800ad48 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	2400048c 	.word	0x2400048c
 800ad4c:	0800b7c4 	.word	0x0800b7c4

0800ad50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ad56:	4b0f      	ldr	r3, [pc, #60]	@ (800ad94 <Get_SerialNum+0x44>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ad5c:	4b0e      	ldr	r3, [pc, #56]	@ (800ad98 <Get_SerialNum+0x48>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ad62:	4b0e      	ldr	r3, [pc, #56]	@ (800ad9c <Get_SerialNum+0x4c>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ad68:	68fa      	ldr	r2, [r7, #12]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d009      	beq.n	800ad8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ad76:	2208      	movs	r2, #8
 800ad78:	4909      	ldr	r1, [pc, #36]	@ (800ada0 <Get_SerialNum+0x50>)
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f000 f814 	bl	800ada8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ad80:	2204      	movs	r2, #4
 800ad82:	4908      	ldr	r1, [pc, #32]	@ (800ada4 <Get_SerialNum+0x54>)
 800ad84:	68b8      	ldr	r0, [r7, #8]
 800ad86:	f000 f80f 	bl	800ada8 <IntToUnicode>
  }
}
 800ad8a:	bf00      	nop
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	08fff800 	.word	0x08fff800
 800ad98:	08fff804 	.word	0x08fff804
 800ad9c:	08fff808 	.word	0x08fff808
 800ada0:	240000ca 	.word	0x240000ca
 800ada4:	240000da 	.word	0x240000da

0800ada8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b087      	sub	sp, #28
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	4613      	mov	r3, r2
 800adb4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800adb6:	2300      	movs	r3, #0
 800adb8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800adba:	2300      	movs	r3, #0
 800adbc:	75fb      	strb	r3, [r7, #23]
 800adbe:	e027      	b.n	800ae10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	0f1b      	lsrs	r3, r3, #28
 800adc4:	2b09      	cmp	r3, #9
 800adc6:	d80b      	bhi.n	800ade0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	0f1b      	lsrs	r3, r3, #28
 800adcc:	b2da      	uxtb	r2, r3
 800adce:	7dfb      	ldrb	r3, [r7, #23]
 800add0:	005b      	lsls	r3, r3, #1
 800add2:	4619      	mov	r1, r3
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	440b      	add	r3, r1
 800add8:	3230      	adds	r2, #48	@ 0x30
 800adda:	b2d2      	uxtb	r2, r2
 800addc:	701a      	strb	r2, [r3, #0]
 800adde:	e00a      	b.n	800adf6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	0f1b      	lsrs	r3, r3, #28
 800ade4:	b2da      	uxtb	r2, r3
 800ade6:	7dfb      	ldrb	r3, [r7, #23]
 800ade8:	005b      	lsls	r3, r3, #1
 800adea:	4619      	mov	r1, r3
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	440b      	add	r3, r1
 800adf0:	3237      	adds	r2, #55	@ 0x37
 800adf2:	b2d2      	uxtb	r2, r2
 800adf4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	011b      	lsls	r3, r3, #4
 800adfa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800adfc:	7dfb      	ldrb	r3, [r7, #23]
 800adfe:	005b      	lsls	r3, r3, #1
 800ae00:	3301      	adds	r3, #1
 800ae02:	68ba      	ldr	r2, [r7, #8]
 800ae04:	4413      	add	r3, r2
 800ae06:	2200      	movs	r2, #0
 800ae08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ae0a:	7dfb      	ldrb	r3, [r7, #23]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	75fb      	strb	r3, [r7, #23]
 800ae10:	7dfa      	ldrb	r2, [r7, #23]
 800ae12:	79fb      	ldrb	r3, [r7, #7]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d3d3      	bcc.n	800adc0 <IntToUnicode+0x18>
  }
}
 800ae18:	bf00      	nop
 800ae1a:	bf00      	nop
 800ae1c:	371c      	adds	r7, #28
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr

0800ae26 <STORAGE_Init_HS>:
  * @brief  Initializes the storage unit (medium).
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_HS(uint8_t lun)
{
 800ae26:	b480      	push	{r7}
 800ae28:	b083      	sub	sp, #12
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 9 */
  UNUSED(lun);

  return (USBD_OK);
 800ae30:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	370c      	adds	r7, #12
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr

0800ae3e <STORAGE_GetCapacity_HS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_HS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800ae3e:	b480      	push	{r7}
 800ae40:	b085      	sub	sp, #20
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	4603      	mov	r3, r0
 800ae46:	60b9      	str	r1, [r7, #8]
 800ae48:	607a      	str	r2, [r7, #4]
 800ae4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 10 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ae52:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae5a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800ae5c:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3714      	adds	r7, #20
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr

0800ae6a <STORAGE_IsReady_HS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_HS(uint8_t lun)
{
 800ae6a:	b480      	push	{r7}
 800ae6c:	b083      	sub	sp, #12
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	4603      	mov	r3, r0
 800ae72:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 11 */
  UNUSED(lun);

  return (USBD_OK);
 800ae74:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	370c      	adds	r7, #12
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr

0800ae82 <STORAGE_IsWriteProtected_HS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_HS(uint8_t lun)
{
 800ae82:	b480      	push	{r7}
 800ae84:	b083      	sub	sp, #12
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	4603      	mov	r3, r0
 800ae8a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 12 */
  return (USBD_OK);
 800ae8c:	2300      	movs	r3, #0
  /* USER CODE END 12 */
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	370c      	adds	r7, #12
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr

0800ae9a <STORAGE_Read_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800ae9a:	b480      	push	{r7}
 800ae9c:	b085      	sub	sp, #20
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]
 800aea4:	461a      	mov	r2, r3
 800aea6:	4603      	mov	r3, r0
 800aea8:	73fb      	strb	r3, [r7, #15]
 800aeaa:	4613      	mov	r3, r2
 800aeac:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800aeae:	2300      	movs	r3, #0
  /* USER CODE END 13 */
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3714      	adds	r7, #20
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <STORAGE_Write_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b085      	sub	sp, #20
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60b9      	str	r1, [r7, #8]
 800aec4:	607a      	str	r2, [r7, #4]
 800aec6:	461a      	mov	r2, r3
 800aec8:	4603      	mov	r3, r0
 800aeca:	73fb      	strb	r3, [r7, #15]
 800aecc:	4613      	mov	r3, r2
 800aece:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800aed0:	2300      	movs	r3, #0
  /* USER CODE END 14 */
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3714      	adds	r7, #20
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr

0800aede <STORAGE_GetMaxLun_HS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_HS(void)
{
 800aede:	b480      	push	{r7}
 800aee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 15 */
  return (STORAGE_LUN_NBR - 1);
 800aee2:	2300      	movs	r3, #0
  /* USER CODE END 15 */
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
	...

0800aef0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b0c0      	sub	sp, #256	@ 0x100
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aef8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800aefc:	2200      	movs	r2, #0
 800aefe:	601a      	str	r2, [r3, #0]
 800af00:	605a      	str	r2, [r3, #4]
 800af02:	609a      	str	r2, [r3, #8]
 800af04:	60da      	str	r2, [r3, #12]
 800af06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800af08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800af0c:	22c0      	movs	r2, #192	@ 0xc0
 800af0e:	2100      	movs	r1, #0
 800af10:	4618      	mov	r0, r3
 800af12:	f000 fc05 	bl	800b720 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a86      	ldr	r2, [pc, #536]	@ (800b134 <HAL_PCD_MspInit+0x244>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	f040 8104 	bne.w	800b12a <HAL_PCD_MspInit+0x23a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800af22:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800af26:	f04f 0300 	mov.w	r3, #0
 800af2a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800af2e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800af32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800af36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7f9 f8cc 	bl	80040d8 <HAL_RCCEx_PeriphCLKConfig>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d001      	beq.n	800af4a <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800af46:	f7f5 fda7 	bl	8000a98 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800af4a:	f7f8 f8b9 	bl	80030c0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af4e:	4b7a      	ldr	r3, [pc, #488]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800af50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800af54:	4a78      	ldr	r2, [pc, #480]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800af56:	f043 0302 	orr.w	r3, r3, #2
 800af5a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800af5e:	4b76      	ldr	r3, [pc, #472]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800af60:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800af64:	f003 0302 	and.w	r3, r3, #2
 800af68:	627b      	str	r3, [r7, #36]	@ 0x24
 800af6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800af6c:	4b72      	ldr	r3, [pc, #456]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800af6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800af72:	4a71      	ldr	r2, [pc, #452]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800af74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af78:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800af7c:	4b6e      	ldr	r3, [pc, #440]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800af7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800af82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af86:	623b      	str	r3, [r7, #32]
 800af88:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800af8a:	4b6b      	ldr	r3, [pc, #428]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800af8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800af90:	4a69      	ldr	r2, [pc, #420]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800af92:	f043 0304 	orr.w	r3, r3, #4
 800af96:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800af9a:	4b67      	ldr	r3, [pc, #412]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800af9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800afa0:	f003 0304 	and.w	r3, r3, #4
 800afa4:	61fb      	str	r3, [r7, #28]
 800afa6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800afa8:	4b63      	ldr	r3, [pc, #396]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800afaa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800afae:	4a62      	ldr	r2, [pc, #392]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800afb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afb4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800afb8:	4b5f      	ldr	r3, [pc, #380]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800afba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800afbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afc2:	61bb      	str	r3, [r7, #24]
 800afc4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800afc6:	4b5c      	ldr	r3, [pc, #368]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800afc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800afcc:	4a5a      	ldr	r2, [pc, #360]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800afce:	f043 0301 	orr.w	r3, r3, #1
 800afd2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800afd6:	4b58      	ldr	r3, [pc, #352]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800afd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800afdc:	f003 0301 	and.w	r3, r3, #1
 800afe0:	617b      	str	r3, [r7, #20]
 800afe2:	697b      	ldr	r3, [r7, #20]
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB10     ------> USB_OTG_HS_ULPI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_12
 800afe4:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800afe8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
                          |GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afec:	2302      	movs	r3, #2
 800afee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aff2:	2300      	movs	r3, #0
 800aff4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800aff8:	2302      	movs	r3, #2
 800affa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800affe:	230a      	movs	r3, #10
 800b000:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b004:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800b008:	4619      	mov	r1, r3
 800b00a:	484c      	ldr	r0, [pc, #304]	@ (800b13c <HAL_PCD_MspInit+0x24c>)
 800b00c:	f7f6 fb68 	bl	80016e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800b010:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b014:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b018:	2302      	movs	r3, #2
 800b01a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b01e:	2300      	movs	r3, #0
 800b020:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b024:	2302      	movs	r3, #2
 800b026:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800b02a:	230a      	movs	r3, #10
 800b02c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b030:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800b034:	4619      	mov	r1, r3
 800b036:	4842      	ldr	r0, [pc, #264]	@ (800b140 <HAL_PCD_MspInit+0x250>)
 800b038:	f7f6 fb52 	bl	80016e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800b03c:	2301      	movs	r3, #1
 800b03e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b042:	2302      	movs	r3, #2
 800b044:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b048:	2300      	movs	r3, #0
 800b04a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b04e:	2302      	movs	r3, #2
 800b050:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800b054:	230a      	movs	r3, #10
 800b056:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b05a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800b05e:	4619      	mov	r1, r3
 800b060:	4838      	ldr	r0, [pc, #224]	@ (800b144 <HAL_PCD_MspInit+0x254>)
 800b062:	f7f6 fb3d 	bl	80016e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800b066:	2310      	movs	r3, #16
 800b068:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b06c:	2302      	movs	r3, #2
 800b06e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b072:	2300      	movs	r3, #0
 800b074:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b078:	2302      	movs	r3, #2
 800b07a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800b07e:	230a      	movs	r3, #10
 800b080:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b084:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800b088:	4619      	mov	r1, r3
 800b08a:	482f      	ldr	r0, [pc, #188]	@ (800b148 <HAL_PCD_MspInit+0x258>)
 800b08c:	f7f6 fb28 	bl	80016e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 800b090:	2328      	movs	r3, #40	@ 0x28
 800b092:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b096:	2302      	movs	r3, #2
 800b098:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b09c:	2300      	movs	r3, #0
 800b09e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b0a2:	2302      	movs	r3, #2
 800b0a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800b0a8:	230a      	movs	r3, #10
 800b0aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b0ae:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	4825      	ldr	r0, [pc, #148]	@ (800b14c <HAL_PCD_MspInit+0x25c>)
 800b0b6:	f7f6 fb13 	bl	80016e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800b0ba:	4b1f      	ldr	r3, [pc, #124]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800b0bc:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800b0c0:	4a1d      	ldr	r2, [pc, #116]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800b0c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b0c6:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800b0ca:	4b1b      	ldr	r3, [pc, #108]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800b0cc:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800b0d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0d4:	613b      	str	r3, [r7, #16]
 800b0d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800b0d8:	4b17      	ldr	r3, [pc, #92]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800b0da:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800b0de:	4a16      	ldr	r2, [pc, #88]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800b0e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b0e4:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800b0e8:	4b13      	ldr	r3, [pc, #76]	@ (800b138 <HAL_PCD_MspInit+0x248>)
 800b0ea:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800b0ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b0f2:	60fb      	str	r3, [r7, #12]
 800b0f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	204d      	movs	r0, #77	@ 0x4d
 800b0fc:	f7f6 f875 	bl	80011ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800b100:	204d      	movs	r0, #77	@ 0x4d
 800b102:	f7f6 f88c 	bl	800121e <HAL_NVIC_EnableIRQ>
    if(pcdHandle->Init.low_power_enable == 1)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	7adb      	ldrb	r3, [r3, #11]
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d10d      	bne.n	800b12a <HAL_PCD_MspInit+0x23a>
    {
      /* Enable EXTI Line 20 for USB wakeup */
      __HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_IT();
 800b10e:	4b10      	ldr	r3, [pc, #64]	@ (800b150 <HAL_PCD_MspInit+0x260>)
 800b110:	691b      	ldr	r3, [r3, #16]
 800b112:	4a0f      	ldr	r2, [pc, #60]	@ (800b150 <HAL_PCD_MspInit+0x260>)
 800b114:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b118:	6113      	str	r3, [r2, #16]
      HAL_NVIC_SetPriority(OTG_HS_WKUP_IRQn, 0, 0);
 800b11a:	2200      	movs	r2, #0
 800b11c:	2100      	movs	r1, #0
 800b11e:	204c      	movs	r0, #76	@ 0x4c
 800b120:	f7f6 f863 	bl	80011ea <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(OTG_HS_WKUP_IRQn);
 800b124:	204c      	movs	r0, #76	@ 0x4c
 800b126:	f7f6 f87a 	bl	800121e <HAL_NVIC_EnableIRQ>
    }
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800b12a:	bf00      	nop
 800b12c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}
 800b134:	40040000 	.word	0x40040000
 800b138:	58024400 	.word	0x58024400
 800b13c:	58020400 	.word	0x58020400
 800b140:	58022000 	.word	0x58022000
 800b144:	58020800 	.word	0x58020800
 800b148:	58021c00 	.word	0x58021c00
 800b14c:	58020000 	.word	0x58020000
 800b150:	58000080 	.word	0x58000080

0800b154 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b168:	4619      	mov	r1, r3
 800b16a:	4610      	mov	r0, r2
 800b16c:	f7fe fabc 	bl	80096e8 <USBD_LL_SetupStage>
}
 800b170:	bf00      	nop
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	460b      	mov	r3, r1
 800b182:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b18a:	78fa      	ldrb	r2, [r7, #3]
 800b18c:	6879      	ldr	r1, [r7, #4]
 800b18e:	4613      	mov	r3, r2
 800b190:	00db      	lsls	r3, r3, #3
 800b192:	4413      	add	r3, r2
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	440b      	add	r3, r1
 800b198:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	78fb      	ldrb	r3, [r7, #3]
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	f7fe faf6 	bl	8009792 <USBD_LL_DataOutStage>
}
 800b1a6:	bf00      	nop
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b082      	sub	sp, #8
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b1c0:	78fa      	ldrb	r2, [r7, #3]
 800b1c2:	6879      	ldr	r1, [r7, #4]
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	00db      	lsls	r3, r3, #3
 800b1c8:	4413      	add	r3, r2
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	440b      	add	r3, r1
 800b1ce:	3320      	adds	r3, #32
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	78fb      	ldrb	r3, [r7, #3]
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	f7fe fb8f 	bl	80098f8 <USBD_LL_DataInStage>
}
 800b1da:	bf00      	nop
 800b1dc:	3708      	adds	r7, #8
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b082      	sub	sp, #8
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7fe fcc9 	bl	8009b88 <USBD_LL_SOF>
}
 800b1f6:	bf00      	nop
 800b1f8:	3708      	adds	r7, #8
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b084      	sub	sp, #16
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b206:	2301      	movs	r3, #1
 800b208:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	79db      	ldrb	r3, [r3, #7]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d102      	bne.n	800b218 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b212:	2300      	movs	r3, #0
 800b214:	73fb      	strb	r3, [r7, #15]
 800b216:	e008      	b.n	800b22a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	79db      	ldrb	r3, [r3, #7]
 800b21c:	2b02      	cmp	r3, #2
 800b21e:	d102      	bne.n	800b226 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b220:	2301      	movs	r3, #1
 800b222:	73fb      	strb	r3, [r7, #15]
 800b224:	e001      	b.n	800b22a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b226:	f7f5 fc37 	bl	8000a98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b230:	7bfa      	ldrb	r2, [r7, #15]
 800b232:	4611      	mov	r1, r2
 800b234:	4618      	mov	r0, r3
 800b236:	f7fe fc63 	bl	8009b00 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b240:	4618      	mov	r0, r3
 800b242:	f7fe fc0b 	bl	8009a5c <USBD_LL_Reset>
}
 800b246:	bf00      	nop
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
	...

0800b250 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fe fc5e 	bl	8009b20 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	6812      	ldr	r2, [r2, #0]
 800b272:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b276:	f043 0301 	orr.w	r3, r3, #1
 800b27a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	7adb      	ldrb	r3, [r3, #11]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d005      	beq.n	800b290 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b284:	4b04      	ldr	r3, [pc, #16]	@ (800b298 <HAL_PCD_SuspendCallback+0x48>)
 800b286:	691b      	ldr	r3, [r3, #16]
 800b288:	4a03      	ldr	r2, [pc, #12]	@ (800b298 <HAL_PCD_SuspendCallback+0x48>)
 800b28a:	f043 0306 	orr.w	r3, r3, #6
 800b28e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b290:	bf00      	nop
 800b292:	3708      	adds	r7, #8
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	e000ed00 	.word	0xe000ed00

0800b29c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7fe fc54 	bl	8009b58 <USBD_LL_Resume>
}
 800b2b0:	bf00      	nop
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b2ca:	78fa      	ldrb	r2, [r7, #3]
 800b2cc:	4611      	mov	r1, r2
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7fe fcac 	bl	8009c2c <USBD_LL_IsoOUTIncomplete>
}
 800b2d4:	bf00      	nop
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b2ee:	78fa      	ldrb	r2, [r7, #3]
 800b2f0:	4611      	mov	r1, r2
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7fe fc68 	bl	8009bc8 <USBD_LL_IsoINIncomplete>
}
 800b2f8:	bf00      	nop
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fe fcbe 	bl	8009c90 <USBD_LL_DevConnected>
}
 800b314:	bf00      	nop
 800b316:	3708      	adds	r7, #8
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7fe fcbb 	bl	8009ca6 <USBD_LL_DevDisconnected>
}
 800b330:	bf00      	nop
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d140      	bne.n	800b3ca <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800b348:	4a22      	ldr	r2, [pc, #136]	@ (800b3d4 <USBD_LL_Init+0x9c>)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	4a20      	ldr	r2, [pc, #128]	@ (800b3d4 <USBD_LL_Init+0x9c>)
 800b354:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b358:	4b1e      	ldr	r3, [pc, #120]	@ (800b3d4 <USBD_LL_Init+0x9c>)
 800b35a:	4a1f      	ldr	r2, [pc, #124]	@ (800b3d8 <USBD_LL_Init+0xa0>)
 800b35c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800b35e:	4b1d      	ldr	r3, [pc, #116]	@ (800b3d4 <USBD_LL_Init+0x9c>)
 800b360:	2209      	movs	r2, #9
 800b362:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800b364:	4b1b      	ldr	r3, [pc, #108]	@ (800b3d4 <USBD_LL_Init+0x9c>)
 800b366:	2200      	movs	r2, #0
 800b368:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b36a:	4b1a      	ldr	r3, [pc, #104]	@ (800b3d4 <USBD_LL_Init+0x9c>)
 800b36c:	2200      	movs	r2, #0
 800b36e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800b370:	4b18      	ldr	r3, [pc, #96]	@ (800b3d4 <USBD_LL_Init+0x9c>)
 800b372:	2201      	movs	r2, #1
 800b374:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b376:	4b17      	ldr	r3, [pc, #92]	@ (800b3d4 <USBD_LL_Init+0x9c>)
 800b378:	2200      	movs	r2, #0
 800b37a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = ENABLE;
 800b37c:	4b15      	ldr	r3, [pc, #84]	@ (800b3d4 <USBD_LL_Init+0x9c>)
 800b37e:	2201      	movs	r2, #1
 800b380:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800b382:	4b14      	ldr	r3, [pc, #80]	@ (800b3d4 <USBD_LL_Init+0x9c>)
 800b384:	2200      	movs	r2, #0
 800b386:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800b388:	4b12      	ldr	r3, [pc, #72]	@ (800b3d4 <USBD_LL_Init+0x9c>)
 800b38a:	2200      	movs	r2, #0
 800b38c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800b38e:	4b11      	ldr	r3, [pc, #68]	@ (800b3d4 <USBD_LL_Init+0x9c>)
 800b390:	2200      	movs	r2, #0
 800b392:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b394:	4b0f      	ldr	r3, [pc, #60]	@ (800b3d4 <USBD_LL_Init+0x9c>)
 800b396:	2200      	movs	r2, #0
 800b398:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800b39a:	480e      	ldr	r0, [pc, #56]	@ (800b3d4 <USBD_LL_Init+0x9c>)
 800b39c:	f7f6 fb69 	bl	8001a72 <HAL_PCD_Init>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d001      	beq.n	800b3aa <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800b3a6:	f7f5 fb77 	bl	8000a98 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800b3aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b3ae:	4809      	ldr	r0, [pc, #36]	@ (800b3d4 <USBD_LL_Init+0x9c>)
 800b3b0:	f7f7 fdeb 	bl	8002f8a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800b3b4:	2280      	movs	r2, #128	@ 0x80
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	4806      	ldr	r0, [pc, #24]	@ (800b3d4 <USBD_LL_Init+0x9c>)
 800b3ba:	f7f7 fd9f 	bl	8002efc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800b3be:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800b3c2:	2101      	movs	r1, #1
 800b3c4:	4803      	ldr	r0, [pc, #12]	@ (800b3d4 <USBD_LL_Init+0x9c>)
 800b3c6:	f7f7 fd99 	bl	8002efc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800b3ca:	2300      	movs	r3, #0
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	2400068c 	.word	0x2400068c
 800b3d8:	40040000 	.word	0x40040000

0800b3dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7f6 fc49 	bl	8001c8a <HAL_PCD_Start>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3fc:	7bfb      	ldrb	r3, [r7, #15]
 800b3fe:	4618      	mov	r0, r3
 800b400:	f000 f962 	bl	800b6c8 <USBD_Get_USB_Status>
 800b404:	4603      	mov	r3, r0
 800b406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b408:	7bbb      	ldrb	r3, [r7, #14]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b084      	sub	sp, #16
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	4608      	mov	r0, r1
 800b41c:	4611      	mov	r1, r2
 800b41e:	461a      	mov	r2, r3
 800b420:	4603      	mov	r3, r0
 800b422:	70fb      	strb	r3, [r7, #3]
 800b424:	460b      	mov	r3, r1
 800b426:	70bb      	strb	r3, [r7, #2]
 800b428:	4613      	mov	r3, r2
 800b42a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b430:	2300      	movs	r3, #0
 800b432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b43a:	78bb      	ldrb	r3, [r7, #2]
 800b43c:	883a      	ldrh	r2, [r7, #0]
 800b43e:	78f9      	ldrb	r1, [r7, #3]
 800b440:	f7f7 f94a 	bl	80026d8 <HAL_PCD_EP_Open>
 800b444:	4603      	mov	r3, r0
 800b446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b448:	7bfb      	ldrb	r3, [r7, #15]
 800b44a:	4618      	mov	r0, r3
 800b44c:	f000 f93c 	bl	800b6c8 <USBD_Get_USB_Status>
 800b450:	4603      	mov	r3, r0
 800b452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b454:	7bbb      	ldrb	r3, [r7, #14]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b084      	sub	sp, #16
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
 800b466:	460b      	mov	r3, r1
 800b468:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b46a:	2300      	movs	r3, #0
 800b46c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b46e:	2300      	movs	r3, #0
 800b470:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b478:	78fa      	ldrb	r2, [r7, #3]
 800b47a:	4611      	mov	r1, r2
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7f7 f995 	bl	80027ac <HAL_PCD_EP_Close>
 800b482:	4603      	mov	r3, r0
 800b484:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b486:	7bfb      	ldrb	r3, [r7, #15]
 800b488:	4618      	mov	r0, r3
 800b48a:	f000 f91d 	bl	800b6c8 <USBD_Get_USB_Status>
 800b48e:	4603      	mov	r3, r0
 800b490:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b492:	7bbb      	ldrb	r3, [r7, #14]
}
 800b494:	4618      	mov	r0, r3
 800b496:	3710      	adds	r7, #16
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4b6:	78fa      	ldrb	r2, [r7, #3]
 800b4b8:	4611      	mov	r1, r2
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7f7 fb37 	bl	8002b2e <HAL_PCD_EP_Flush>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4c4:	7bfb      	ldrb	r3, [r7, #15]
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f000 f8fe 	bl	800b6c8 <USBD_Get_USB_Status>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3710      	adds	r7, #16
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}

0800b4da <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b084      	sub	sp, #16
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4f4:	78fa      	ldrb	r2, [r7, #3]
 800b4f6:	4611      	mov	r1, r2
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7f7 fa2e 	bl	800295a <HAL_PCD_EP_SetStall>
 800b4fe:	4603      	mov	r3, r0
 800b500:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b502:	7bfb      	ldrb	r3, [r7, #15]
 800b504:	4618      	mov	r0, r3
 800b506:	f000 f8df 	bl	800b6c8 <USBD_Get_USB_Status>
 800b50a:	4603      	mov	r3, r0
 800b50c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b50e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	460b      	mov	r3, r1
 800b522:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b524:	2300      	movs	r3, #0
 800b526:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b528:	2300      	movs	r3, #0
 800b52a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b532:	78fa      	ldrb	r2, [r7, #3]
 800b534:	4611      	mov	r1, r2
 800b536:	4618      	mov	r0, r3
 800b538:	f7f7 fa72 	bl	8002a20 <HAL_PCD_EP_ClrStall>
 800b53c:	4603      	mov	r3, r0
 800b53e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b540:	7bfb      	ldrb	r3, [r7, #15]
 800b542:	4618      	mov	r0, r3
 800b544:	f000 f8c0 	bl	800b6c8 <USBD_Get_USB_Status>
 800b548:	4603      	mov	r3, r0
 800b54a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b54c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b556:	b480      	push	{r7}
 800b558:	b085      	sub	sp, #20
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	460b      	mov	r3, r1
 800b560:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b568:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b56a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	da0b      	bge.n	800b58a <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b572:	78fb      	ldrb	r3, [r7, #3]
 800b574:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b578:	68f9      	ldr	r1, [r7, #12]
 800b57a:	4613      	mov	r3, r2
 800b57c:	00db      	lsls	r3, r3, #3
 800b57e:	4413      	add	r3, r2
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	440b      	add	r3, r1
 800b584:	3316      	adds	r3, #22
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	e00b      	b.n	800b5a2 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b58a:	78fb      	ldrb	r3, [r7, #3]
 800b58c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b590:	68f9      	ldr	r1, [r7, #12]
 800b592:	4613      	mov	r3, r2
 800b594:	00db      	lsls	r3, r3, #3
 800b596:	4413      	add	r3, r2
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	440b      	add	r3, r1
 800b59c:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b5a0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3714      	adds	r7, #20
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr

0800b5ae <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b084      	sub	sp, #16
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b5c8:	78fa      	ldrb	r2, [r7, #3]
 800b5ca:	4611      	mov	r1, r2
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7f7 f85f 	bl	8002690 <HAL_PCD_SetAddress>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5d6:	7bfb      	ldrb	r3, [r7, #15]
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f000 f875 	bl	800b6c8 <USBD_Get_USB_Status>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3710      	adds	r7, #16
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	607a      	str	r2, [r7, #4]
 800b5f6:	603b      	str	r3, [r7, #0]
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b600:	2300      	movs	r3, #0
 800b602:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b60a:	7af9      	ldrb	r1, [r7, #11]
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	f7f7 f969 	bl	80028e6 <HAL_PCD_EP_Transmit>
 800b614:	4603      	mov	r3, r0
 800b616:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b618:	7dfb      	ldrb	r3, [r7, #23]
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 f854 	bl	800b6c8 <USBD_Get_USB_Status>
 800b620:	4603      	mov	r3, r0
 800b622:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b624:	7dbb      	ldrb	r3, [r7, #22]
}
 800b626:	4618      	mov	r0, r3
 800b628:	3718      	adds	r7, #24
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b086      	sub	sp, #24
 800b632:	af00      	add	r7, sp, #0
 800b634:	60f8      	str	r0, [r7, #12]
 800b636:	607a      	str	r2, [r7, #4]
 800b638:	603b      	str	r3, [r7, #0]
 800b63a:	460b      	mov	r3, r1
 800b63c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b63e:	2300      	movs	r3, #0
 800b640:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b642:	2300      	movs	r3, #0
 800b644:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b64c:	7af9      	ldrb	r1, [r7, #11]
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	f7f7 f8f5 	bl	8002840 <HAL_PCD_EP_Receive>
 800b656:	4603      	mov	r3, r0
 800b658:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b65a:	7dfb      	ldrb	r3, [r7, #23]
 800b65c:	4618      	mov	r0, r3
 800b65e:	f000 f833 	bl	800b6c8 <USBD_Get_USB_Status>
 800b662:	4603      	mov	r3, r0
 800b664:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b666:	7dbb      	ldrb	r3, [r7, #22]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3718      	adds	r7, #24
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	460b      	mov	r3, r1
 800b67a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b682:	78fa      	ldrb	r2, [r7, #3]
 800b684:	4611      	mov	r1, r2
 800b686:	4618      	mov	r0, r3
 800b688:	f7f7 f915 	bl	80028b6 <HAL_PCD_EP_GetRxCount>
 800b68c:	4603      	mov	r3, r0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3708      	adds	r7, #8
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
	...

0800b698 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b6a0:	4b03      	ldr	r3, [pc, #12]	@ (800b6b0 <USBD_static_malloc+0x18>)
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	370c      	adds	r7, #12
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr
 800b6ae:	bf00      	nop
 800b6b0:	24000b70 	.word	0x24000b70

0800b6b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b6bc:	bf00      	nop
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b085      	sub	sp, #20
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b6d6:	79fb      	ldrb	r3, [r7, #7]
 800b6d8:	2b03      	cmp	r3, #3
 800b6da:	d817      	bhi.n	800b70c <USBD_Get_USB_Status+0x44>
 800b6dc:	a201      	add	r2, pc, #4	@ (adr r2, 800b6e4 <USBD_Get_USB_Status+0x1c>)
 800b6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e2:	bf00      	nop
 800b6e4:	0800b6f5 	.word	0x0800b6f5
 800b6e8:	0800b6fb 	.word	0x0800b6fb
 800b6ec:	0800b701 	.word	0x0800b701
 800b6f0:	0800b707 	.word	0x0800b707
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b6f8:	e00b      	b.n	800b712 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b6fa:	2303      	movs	r3, #3
 800b6fc:	73fb      	strb	r3, [r7, #15]
    break;
 800b6fe:	e008      	b.n	800b712 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b700:	2301      	movs	r3, #1
 800b702:	73fb      	strb	r3, [r7, #15]
    break;
 800b704:	e005      	b.n	800b712 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b706:	2303      	movs	r3, #3
 800b708:	73fb      	strb	r3, [r7, #15]
    break;
 800b70a:	e002      	b.n	800b712 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b70c:	2303      	movs	r3, #3
 800b70e:	73fb      	strb	r3, [r7, #15]
    break;
 800b710:	bf00      	nop
  }
  return usb_status;
 800b712:	7bfb      	ldrb	r3, [r7, #15]
}
 800b714:	4618      	mov	r0, r3
 800b716:	3714      	adds	r7, #20
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <memset>:
 800b720:	4402      	add	r2, r0
 800b722:	4603      	mov	r3, r0
 800b724:	4293      	cmp	r3, r2
 800b726:	d100      	bne.n	800b72a <memset+0xa>
 800b728:	4770      	bx	lr
 800b72a:	f803 1b01 	strb.w	r1, [r3], #1
 800b72e:	e7f9      	b.n	800b724 <memset+0x4>

0800b730 <__libc_init_array>:
 800b730:	b570      	push	{r4, r5, r6, lr}
 800b732:	4d0d      	ldr	r5, [pc, #52]	@ (800b768 <__libc_init_array+0x38>)
 800b734:	4c0d      	ldr	r4, [pc, #52]	@ (800b76c <__libc_init_array+0x3c>)
 800b736:	1b64      	subs	r4, r4, r5
 800b738:	10a4      	asrs	r4, r4, #2
 800b73a:	2600      	movs	r6, #0
 800b73c:	42a6      	cmp	r6, r4
 800b73e:	d109      	bne.n	800b754 <__libc_init_array+0x24>
 800b740:	4d0b      	ldr	r5, [pc, #44]	@ (800b770 <__libc_init_array+0x40>)
 800b742:	4c0c      	ldr	r4, [pc, #48]	@ (800b774 <__libc_init_array+0x44>)
 800b744:	f000 f818 	bl	800b778 <_init>
 800b748:	1b64      	subs	r4, r4, r5
 800b74a:	10a4      	asrs	r4, r4, #2
 800b74c:	2600      	movs	r6, #0
 800b74e:	42a6      	cmp	r6, r4
 800b750:	d105      	bne.n	800b75e <__libc_init_array+0x2e>
 800b752:	bd70      	pop	{r4, r5, r6, pc}
 800b754:	f855 3b04 	ldr.w	r3, [r5], #4
 800b758:	4798      	blx	r3
 800b75a:	3601      	adds	r6, #1
 800b75c:	e7ee      	b.n	800b73c <__libc_init_array+0xc>
 800b75e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b762:	4798      	blx	r3
 800b764:	3601      	adds	r6, #1
 800b766:	e7f2      	b.n	800b74e <__libc_init_array+0x1e>
 800b768:	0800b808 	.word	0x0800b808
 800b76c:	0800b808 	.word	0x0800b808
 800b770:	0800b808 	.word	0x0800b808
 800b774:	0800b80c 	.word	0x0800b80c

0800b778 <_init>:
 800b778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b77a:	bf00      	nop
 800b77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b77e:	bc08      	pop	{r3}
 800b780:	469e      	mov	lr, r3
 800b782:	4770      	bx	lr

0800b784 <_fini>:
 800b784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b786:	bf00      	nop
 800b788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b78a:	bc08      	pop	{r3}
 800b78c:	469e      	mov	lr, r3
 800b78e:	4770      	bx	lr
